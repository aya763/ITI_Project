
ITI_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006cb8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000006dc  00800060  00006cb8  00006d4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000072  0080073c  0080073c  00007428  2**0
                  ALLOC
  3 .stab         0000a2b4  00000000  00000000  00007428  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000036de  00000000  00000000  000116dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00014dba  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000210  00000000  00000000  00014f7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000268a  00000000  00000000  0001518a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014e0  00000000  00000000  00017814  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000012a9  00000000  00000000  00018cf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  00019fa0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002fe  00000000  00000000  0001a180  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009aa  00000000  00000000  0001a47e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001ae28  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 84 17 	jmp	0x2f08	; 0x2f08 <__vector_1>
       8:	0c 94 bb 17 	jmp	0x2f76	; 0x2f76 <__vector_2>
       c:	0c 94 f2 17 	jmp	0x2fe4	; 0x2fe4 <__vector_3>
      10:	0c 94 32 0b 	jmp	0x1664	; 0x1664 <__vector_4>
      14:	0c 94 fb 0a 	jmp	0x15f6	; 0x15f6 <__vector_5>
      18:	0c 94 3b 12 	jmp	0x2476	; 0x2476 <__vector_6>
      1c:	0c 94 ab 0c 	jmp	0x1956	; 0x1956 <__vector_7>
      20:	0c 94 e2 0c 	jmp	0x19c4	; 0x19c4 <__vector_8>
      24:	0c 94 19 0d 	jmp	0x1a32	; 0x1a32 <__vector_9>
      28:	0c 94 5b 11 	jmp	0x22b6	; 0x22b6 <__vector_10>
      2c:	0c 94 80 10 	jmp	0x2100	; 0x2100 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 60 1f 	jmp	0x3ec0	; 0x3ec0 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	17 e0       	ldi	r17, 0x07	; 7
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 eb       	ldi	r30, 0xB8	; 184
      68:	fc e6       	ldi	r31, 0x6C	; 108
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 33       	cpi	r26, 0x3C	; 60
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	17 e0       	ldi	r17, 0x07	; 7
      78:	ac e3       	ldi	r26, 0x3C	; 60
      7a:	b7 e0       	ldi	r27, 0x07	; 7
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 3a       	cpi	r26, 0xAE	; 174
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d0 35 	call	0x6ba0	; 0x6ba0 <main>
      8a:	0c 94 5a 36 	jmp	0x6cb4	; 0x6cb4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 1a 36 	jmp	0x6c34	; 0x6c34 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a1 e6       	ldi	r26, 0x61	; 97
     128:	b5 e0       	ldi	r27, 0x05	; 5
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 36 36 	jmp	0x6c6c	; 0x6c6c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 26 36 	jmp	0x6c4c	; 0x6c4c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 42 36 	jmp	0x6c84	; 0x6c84 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 26 36 	jmp	0x6c4c	; 0x6c4c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 42 36 	jmp	0x6c84	; 0x6c84 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 1a 36 	jmp	0x6c34	; 0x6c34 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	81 e6       	ldi	r24, 0x61	; 97
     496:	95 e0       	ldi	r25, 0x05	; 5
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 36 36 	jmp	0x6c6c	; 0x6c6c <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 22 36 	jmp	0x6c44	; 0x6c44 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	61 e6       	ldi	r22, 0x61	; 97
     69c:	75 e0       	ldi	r23, 0x05	; 5
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 3e 36 	jmp	0x6c7c	; 0x6c7c <__epilogue_restores__+0x10>

0000078a <__nesf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 26 36 	jmp	0x6c4c	; 0x6c4c <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__nesf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__nesf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__nesf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 42 36 	jmp	0x6c84	; 0x6c84 <__epilogue_restores__+0x18>

000007ea <__gtsf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 26 36 	jmp	0x6c4c	; 0x6c4c <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gtsf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gtsf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gtsf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 42 36 	jmp	0x6c84	; 0x6c84 <__epilogue_restores__+0x18>

0000084a <__gesf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 26 36 	jmp	0x6c4c	; 0x6c4c <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 42 36 	jmp	0x6c84	; 0x6c84 <__epilogue_restores__+0x18>

000008aa <__ltsf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 26 36 	jmp	0x6c4c	; 0x6c4c <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__ltsf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__ltsf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__ltsf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 42 36 	jmp	0x6c84	; 0x6c84 <__epilogue_restores__+0x18>

0000090a <__fixsfsi>:
     90a:	ac e0       	ldi	r26, 0x0C	; 12
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 2a 36 	jmp	0x6c54	; 0x6c54 <__prologue_saves__+0x20>
     916:	69 83       	std	Y+1, r22	; 0x01
     918:	7a 83       	std	Y+2, r23	; 0x02
     91a:	8b 83       	std	Y+3, r24	; 0x03
     91c:	9c 83       	std	Y+4, r25	; 0x04
     91e:	ce 01       	movw	r24, r28
     920:	01 96       	adiw	r24, 0x01	; 1
     922:	be 01       	movw	r22, r28
     924:	6b 5f       	subi	r22, 0xFB	; 251
     926:	7f 4f       	sbci	r23, 0xFF	; 255
     928:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     92c:	8d 81       	ldd	r24, Y+5	; 0x05
     92e:	82 30       	cpi	r24, 0x02	; 2
     930:	61 f1       	breq	.+88     	; 0x98a <__fixsfsi+0x80>
     932:	82 30       	cpi	r24, 0x02	; 2
     934:	50 f1       	brcs	.+84     	; 0x98a <__fixsfsi+0x80>
     936:	84 30       	cpi	r24, 0x04	; 4
     938:	21 f4       	brne	.+8      	; 0x942 <__fixsfsi+0x38>
     93a:	8e 81       	ldd	r24, Y+6	; 0x06
     93c:	88 23       	and	r24, r24
     93e:	51 f1       	breq	.+84     	; 0x994 <__fixsfsi+0x8a>
     940:	2e c0       	rjmp	.+92     	; 0x99e <__fixsfsi+0x94>
     942:	2f 81       	ldd	r18, Y+7	; 0x07
     944:	38 85       	ldd	r19, Y+8	; 0x08
     946:	37 fd       	sbrc	r19, 7
     948:	20 c0       	rjmp	.+64     	; 0x98a <__fixsfsi+0x80>
     94a:	6e 81       	ldd	r22, Y+6	; 0x06
     94c:	2f 31       	cpi	r18, 0x1F	; 31
     94e:	31 05       	cpc	r19, r1
     950:	1c f0       	brlt	.+6      	; 0x958 <__fixsfsi+0x4e>
     952:	66 23       	and	r22, r22
     954:	f9 f0       	breq	.+62     	; 0x994 <__fixsfsi+0x8a>
     956:	23 c0       	rjmp	.+70     	; 0x99e <__fixsfsi+0x94>
     958:	8e e1       	ldi	r24, 0x1E	; 30
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	82 1b       	sub	r24, r18
     95e:	93 0b       	sbc	r25, r19
     960:	29 85       	ldd	r18, Y+9	; 0x09
     962:	3a 85       	ldd	r19, Y+10	; 0x0a
     964:	4b 85       	ldd	r20, Y+11	; 0x0b
     966:	5c 85       	ldd	r21, Y+12	; 0x0c
     968:	04 c0       	rjmp	.+8      	; 0x972 <__fixsfsi+0x68>
     96a:	56 95       	lsr	r21
     96c:	47 95       	ror	r20
     96e:	37 95       	ror	r19
     970:	27 95       	ror	r18
     972:	8a 95       	dec	r24
     974:	d2 f7       	brpl	.-12     	; 0x96a <__fixsfsi+0x60>
     976:	66 23       	and	r22, r22
     978:	b1 f0       	breq	.+44     	; 0x9a6 <__fixsfsi+0x9c>
     97a:	50 95       	com	r21
     97c:	40 95       	com	r20
     97e:	30 95       	com	r19
     980:	21 95       	neg	r18
     982:	3f 4f       	sbci	r19, 0xFF	; 255
     984:	4f 4f       	sbci	r20, 0xFF	; 255
     986:	5f 4f       	sbci	r21, 0xFF	; 255
     988:	0e c0       	rjmp	.+28     	; 0x9a6 <__fixsfsi+0x9c>
     98a:	20 e0       	ldi	r18, 0x00	; 0
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	40 e0       	ldi	r20, 0x00	; 0
     990:	50 e0       	ldi	r21, 0x00	; 0
     992:	09 c0       	rjmp	.+18     	; 0x9a6 <__fixsfsi+0x9c>
     994:	2f ef       	ldi	r18, 0xFF	; 255
     996:	3f ef       	ldi	r19, 0xFF	; 255
     998:	4f ef       	ldi	r20, 0xFF	; 255
     99a:	5f e7       	ldi	r21, 0x7F	; 127
     99c:	04 c0       	rjmp	.+8      	; 0x9a6 <__fixsfsi+0x9c>
     99e:	20 e0       	ldi	r18, 0x00	; 0
     9a0:	30 e0       	ldi	r19, 0x00	; 0
     9a2:	40 e0       	ldi	r20, 0x00	; 0
     9a4:	50 e8       	ldi	r21, 0x80	; 128
     9a6:	b9 01       	movw	r22, r18
     9a8:	ca 01       	movw	r24, r20
     9aa:	2c 96       	adiw	r28, 0x0c	; 12
     9ac:	e2 e0       	ldi	r30, 0x02	; 2
     9ae:	0c 94 46 36 	jmp	0x6c8c	; 0x6c8c <__epilogue_restores__+0x20>

000009b2 <__floatunsisf>:
     9b2:	a8 e0       	ldi	r26, 0x08	; 8
     9b4:	b0 e0       	ldi	r27, 0x00	; 0
     9b6:	ef ed       	ldi	r30, 0xDF	; 223
     9b8:	f4 e0       	ldi	r31, 0x04	; 4
     9ba:	0c 94 22 36 	jmp	0x6c44	; 0x6c44 <__prologue_saves__+0x10>
     9be:	7b 01       	movw	r14, r22
     9c0:	8c 01       	movw	r16, r24
     9c2:	61 15       	cp	r22, r1
     9c4:	71 05       	cpc	r23, r1
     9c6:	81 05       	cpc	r24, r1
     9c8:	91 05       	cpc	r25, r1
     9ca:	19 f4       	brne	.+6      	; 0x9d2 <__floatunsisf+0x20>
     9cc:	82 e0       	ldi	r24, 0x02	; 2
     9ce:	89 83       	std	Y+1, r24	; 0x01
     9d0:	60 c0       	rjmp	.+192    	; 0xa92 <__floatunsisf+0xe0>
     9d2:	83 e0       	ldi	r24, 0x03	; 3
     9d4:	89 83       	std	Y+1, r24	; 0x01
     9d6:	8e e1       	ldi	r24, 0x1E	; 30
     9d8:	c8 2e       	mov	r12, r24
     9da:	d1 2c       	mov	r13, r1
     9dc:	dc 82       	std	Y+4, r13	; 0x04
     9de:	cb 82       	std	Y+3, r12	; 0x03
     9e0:	ed 82       	std	Y+5, r14	; 0x05
     9e2:	fe 82       	std	Y+6, r15	; 0x06
     9e4:	0f 83       	std	Y+7, r16	; 0x07
     9e6:	18 87       	std	Y+8, r17	; 0x08
     9e8:	c8 01       	movw	r24, r16
     9ea:	b7 01       	movw	r22, r14
     9ec:	0e 94 52 05 	call	0xaa4	; 0xaa4 <__clzsi2>
     9f0:	fc 01       	movw	r30, r24
     9f2:	31 97       	sbiw	r30, 0x01	; 1
     9f4:	f7 ff       	sbrs	r31, 7
     9f6:	3b c0       	rjmp	.+118    	; 0xa6e <__floatunsisf+0xbc>
     9f8:	22 27       	eor	r18, r18
     9fa:	33 27       	eor	r19, r19
     9fc:	2e 1b       	sub	r18, r30
     9fe:	3f 0b       	sbc	r19, r31
     a00:	57 01       	movw	r10, r14
     a02:	68 01       	movw	r12, r16
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__floatunsisf+0x5e>
     a08:	d6 94       	lsr	r13
     a0a:	c7 94       	ror	r12
     a0c:	b7 94       	ror	r11
     a0e:	a7 94       	ror	r10
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__floatunsisf+0x56>
     a14:	40 e0       	ldi	r20, 0x00	; 0
     a16:	50 e0       	ldi	r21, 0x00	; 0
     a18:	60 e0       	ldi	r22, 0x00	; 0
     a1a:	70 e0       	ldi	r23, 0x00	; 0
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	a0 e0       	ldi	r26, 0x00	; 0
     a22:	b0 e0       	ldi	r27, 0x00	; 0
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__floatunsisf+0x7c>
     a26:	88 0f       	add	r24, r24
     a28:	99 1f       	adc	r25, r25
     a2a:	aa 1f       	adc	r26, r26
     a2c:	bb 1f       	adc	r27, r27
     a2e:	2a 95       	dec	r18
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <__floatunsisf+0x74>
     a32:	01 97       	sbiw	r24, 0x01	; 1
     a34:	a1 09       	sbc	r26, r1
     a36:	b1 09       	sbc	r27, r1
     a38:	8e 21       	and	r24, r14
     a3a:	9f 21       	and	r25, r15
     a3c:	a0 23       	and	r26, r16
     a3e:	b1 23       	and	r27, r17
     a40:	00 97       	sbiw	r24, 0x00	; 0
     a42:	a1 05       	cpc	r26, r1
     a44:	b1 05       	cpc	r27, r1
     a46:	21 f0       	breq	.+8      	; 0xa50 <__floatunsisf+0x9e>
     a48:	41 e0       	ldi	r20, 0x01	; 1
     a4a:	50 e0       	ldi	r21, 0x00	; 0
     a4c:	60 e0       	ldi	r22, 0x00	; 0
     a4e:	70 e0       	ldi	r23, 0x00	; 0
     a50:	4a 29       	or	r20, r10
     a52:	5b 29       	or	r21, r11
     a54:	6c 29       	or	r22, r12
     a56:	7d 29       	or	r23, r13
     a58:	4d 83       	std	Y+5, r20	; 0x05
     a5a:	5e 83       	std	Y+6, r21	; 0x06
     a5c:	6f 83       	std	Y+7, r22	; 0x07
     a5e:	78 87       	std	Y+8, r23	; 0x08
     a60:	8e e1       	ldi	r24, 0x1E	; 30
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	8e 1b       	sub	r24, r30
     a66:	9f 0b       	sbc	r25, r31
     a68:	9c 83       	std	Y+4, r25	; 0x04
     a6a:	8b 83       	std	Y+3, r24	; 0x03
     a6c:	12 c0       	rjmp	.+36     	; 0xa92 <__floatunsisf+0xe0>
     a6e:	30 97       	sbiw	r30, 0x00	; 0
     a70:	81 f0       	breq	.+32     	; 0xa92 <__floatunsisf+0xe0>
     a72:	0e 2e       	mov	r0, r30
     a74:	04 c0       	rjmp	.+8      	; 0xa7e <__floatunsisf+0xcc>
     a76:	ee 0c       	add	r14, r14
     a78:	ff 1c       	adc	r15, r15
     a7a:	00 1f       	adc	r16, r16
     a7c:	11 1f       	adc	r17, r17
     a7e:	0a 94       	dec	r0
     a80:	d2 f7       	brpl	.-12     	; 0xa76 <__floatunsisf+0xc4>
     a82:	ed 82       	std	Y+5, r14	; 0x05
     a84:	fe 82       	std	Y+6, r15	; 0x06
     a86:	0f 83       	std	Y+7, r16	; 0x07
     a88:	18 87       	std	Y+8, r17	; 0x08
     a8a:	ce 1a       	sub	r12, r30
     a8c:	df 0a       	sbc	r13, r31
     a8e:	dc 82       	std	Y+4, r13	; 0x04
     a90:	cb 82       	std	Y+3, r12	; 0x03
     a92:	1a 82       	std	Y+2, r1	; 0x02
     a94:	ce 01       	movw	r24, r28
     a96:	01 96       	adiw	r24, 0x01	; 1
     a98:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     a9c:	28 96       	adiw	r28, 0x08	; 8
     a9e:	ea e0       	ldi	r30, 0x0A	; 10
     aa0:	0c 94 3e 36 	jmp	0x6c7c	; 0x6c7c <__epilogue_restores__+0x10>

00000aa4 <__clzsi2>:
     aa4:	ef 92       	push	r14
     aa6:	ff 92       	push	r15
     aa8:	0f 93       	push	r16
     aaa:	1f 93       	push	r17
     aac:	7b 01       	movw	r14, r22
     aae:	8c 01       	movw	r16, r24
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	e8 16       	cp	r14, r24
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	f8 06       	cpc	r15, r24
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	08 07       	cpc	r16, r24
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	18 07       	cpc	r17, r24
     ac0:	88 f4       	brcc	.+34     	; 0xae4 <__clzsi2+0x40>
     ac2:	8f ef       	ldi	r24, 0xFF	; 255
     ac4:	e8 16       	cp	r14, r24
     ac6:	f1 04       	cpc	r15, r1
     ac8:	01 05       	cpc	r16, r1
     aca:	11 05       	cpc	r17, r1
     acc:	31 f0       	breq	.+12     	; 0xada <__clzsi2+0x36>
     ace:	28 f0       	brcs	.+10     	; 0xada <__clzsi2+0x36>
     ad0:	88 e0       	ldi	r24, 0x08	; 8
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	a0 e0       	ldi	r26, 0x00	; 0
     ad6:	b0 e0       	ldi	r27, 0x00	; 0
     ad8:	17 c0       	rjmp	.+46     	; 0xb08 <__clzsi2+0x64>
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	a0 e0       	ldi	r26, 0x00	; 0
     ae0:	b0 e0       	ldi	r27, 0x00	; 0
     ae2:	12 c0       	rjmp	.+36     	; 0xb08 <__clzsi2+0x64>
     ae4:	80 e0       	ldi	r24, 0x00	; 0
     ae6:	e8 16       	cp	r14, r24
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	f8 06       	cpc	r15, r24
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	08 07       	cpc	r16, r24
     af0:	81 e0       	ldi	r24, 0x01	; 1
     af2:	18 07       	cpc	r17, r24
     af4:	28 f0       	brcs	.+10     	; 0xb00 <__clzsi2+0x5c>
     af6:	88 e1       	ldi	r24, 0x18	; 24
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	a0 e0       	ldi	r26, 0x00	; 0
     afc:	b0 e0       	ldi	r27, 0x00	; 0
     afe:	04 c0       	rjmp	.+8      	; 0xb08 <__clzsi2+0x64>
     b00:	80 e1       	ldi	r24, 0x10	; 16
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	a0 e0       	ldi	r26, 0x00	; 0
     b06:	b0 e0       	ldi	r27, 0x00	; 0
     b08:	20 e2       	ldi	r18, 0x20	; 32
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	40 e0       	ldi	r20, 0x00	; 0
     b0e:	50 e0       	ldi	r21, 0x00	; 0
     b10:	28 1b       	sub	r18, r24
     b12:	39 0b       	sbc	r19, r25
     b14:	4a 0b       	sbc	r20, r26
     b16:	5b 0b       	sbc	r21, r27
     b18:	04 c0       	rjmp	.+8      	; 0xb22 <__clzsi2+0x7e>
     b1a:	16 95       	lsr	r17
     b1c:	07 95       	ror	r16
     b1e:	f7 94       	ror	r15
     b20:	e7 94       	ror	r14
     b22:	8a 95       	dec	r24
     b24:	d2 f7       	brpl	.-12     	; 0xb1a <__clzsi2+0x76>
     b26:	f7 01       	movw	r30, r14
     b28:	e7 59       	subi	r30, 0x97	; 151
     b2a:	fa 4f       	sbci	r31, 0xFA	; 250
     b2c:	80 81       	ld	r24, Z
     b2e:	28 1b       	sub	r18, r24
     b30:	31 09       	sbc	r19, r1
     b32:	41 09       	sbc	r20, r1
     b34:	51 09       	sbc	r21, r1
     b36:	c9 01       	movw	r24, r18
     b38:	1f 91       	pop	r17
     b3a:	0f 91       	pop	r16
     b3c:	ff 90       	pop	r15
     b3e:	ef 90       	pop	r14
     b40:	08 95       	ret

00000b42 <__pack_f>:
     b42:	df 92       	push	r13
     b44:	ef 92       	push	r14
     b46:	ff 92       	push	r15
     b48:	0f 93       	push	r16
     b4a:	1f 93       	push	r17
     b4c:	fc 01       	movw	r30, r24
     b4e:	e4 80       	ldd	r14, Z+4	; 0x04
     b50:	f5 80       	ldd	r15, Z+5	; 0x05
     b52:	06 81       	ldd	r16, Z+6	; 0x06
     b54:	17 81       	ldd	r17, Z+7	; 0x07
     b56:	d1 80       	ldd	r13, Z+1	; 0x01
     b58:	80 81       	ld	r24, Z
     b5a:	82 30       	cpi	r24, 0x02	; 2
     b5c:	48 f4       	brcc	.+18     	; 0xb70 <__pack_f+0x2e>
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	a0 e1       	ldi	r26, 0x10	; 16
     b64:	b0 e0       	ldi	r27, 0x00	; 0
     b66:	e8 2a       	or	r14, r24
     b68:	f9 2a       	or	r15, r25
     b6a:	0a 2b       	or	r16, r26
     b6c:	1b 2b       	or	r17, r27
     b6e:	a5 c0       	rjmp	.+330    	; 0xcba <__pack_f+0x178>
     b70:	84 30       	cpi	r24, 0x04	; 4
     b72:	09 f4       	brne	.+2      	; 0xb76 <__pack_f+0x34>
     b74:	9f c0       	rjmp	.+318    	; 0xcb4 <__pack_f+0x172>
     b76:	82 30       	cpi	r24, 0x02	; 2
     b78:	21 f4       	brne	.+8      	; 0xb82 <__pack_f+0x40>
     b7a:	ee 24       	eor	r14, r14
     b7c:	ff 24       	eor	r15, r15
     b7e:	87 01       	movw	r16, r14
     b80:	05 c0       	rjmp	.+10     	; 0xb8c <__pack_f+0x4a>
     b82:	e1 14       	cp	r14, r1
     b84:	f1 04       	cpc	r15, r1
     b86:	01 05       	cpc	r16, r1
     b88:	11 05       	cpc	r17, r1
     b8a:	19 f4       	brne	.+6      	; 0xb92 <__pack_f+0x50>
     b8c:	e0 e0       	ldi	r30, 0x00	; 0
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	96 c0       	rjmp	.+300    	; 0xcbe <__pack_f+0x17c>
     b92:	62 81       	ldd	r22, Z+2	; 0x02
     b94:	73 81       	ldd	r23, Z+3	; 0x03
     b96:	9f ef       	ldi	r25, 0xFF	; 255
     b98:	62 38       	cpi	r22, 0x82	; 130
     b9a:	79 07       	cpc	r23, r25
     b9c:	0c f0       	brlt	.+2      	; 0xba0 <__pack_f+0x5e>
     b9e:	5b c0       	rjmp	.+182    	; 0xc56 <__pack_f+0x114>
     ba0:	22 e8       	ldi	r18, 0x82	; 130
     ba2:	3f ef       	ldi	r19, 0xFF	; 255
     ba4:	26 1b       	sub	r18, r22
     ba6:	37 0b       	sbc	r19, r23
     ba8:	2a 31       	cpi	r18, 0x1A	; 26
     baa:	31 05       	cpc	r19, r1
     bac:	2c f0       	brlt	.+10     	; 0xbb8 <__pack_f+0x76>
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	40 e0       	ldi	r20, 0x00	; 0
     bb4:	50 e0       	ldi	r21, 0x00	; 0
     bb6:	2a c0       	rjmp	.+84     	; 0xc0c <__pack_f+0xca>
     bb8:	b8 01       	movw	r22, r16
     bba:	a7 01       	movw	r20, r14
     bbc:	02 2e       	mov	r0, r18
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0x86>
     bc0:	76 95       	lsr	r23
     bc2:	67 95       	ror	r22
     bc4:	57 95       	ror	r21
     bc6:	47 95       	ror	r20
     bc8:	0a 94       	dec	r0
     bca:	d2 f7       	brpl	.-12     	; 0xbc0 <__pack_f+0x7e>
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	a0 e0       	ldi	r26, 0x00	; 0
     bd2:	b0 e0       	ldi	r27, 0x00	; 0
     bd4:	04 c0       	rjmp	.+8      	; 0xbde <__pack_f+0x9c>
     bd6:	88 0f       	add	r24, r24
     bd8:	99 1f       	adc	r25, r25
     bda:	aa 1f       	adc	r26, r26
     bdc:	bb 1f       	adc	r27, r27
     bde:	2a 95       	dec	r18
     be0:	d2 f7       	brpl	.-12     	; 0xbd6 <__pack_f+0x94>
     be2:	01 97       	sbiw	r24, 0x01	; 1
     be4:	a1 09       	sbc	r26, r1
     be6:	b1 09       	sbc	r27, r1
     be8:	8e 21       	and	r24, r14
     bea:	9f 21       	and	r25, r15
     bec:	a0 23       	and	r26, r16
     bee:	b1 23       	and	r27, r17
     bf0:	00 97       	sbiw	r24, 0x00	; 0
     bf2:	a1 05       	cpc	r26, r1
     bf4:	b1 05       	cpc	r27, r1
     bf6:	21 f0       	breq	.+8      	; 0xc00 <__pack_f+0xbe>
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	a0 e0       	ldi	r26, 0x00	; 0
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	9a 01       	movw	r18, r20
     c02:	ab 01       	movw	r20, r22
     c04:	28 2b       	or	r18, r24
     c06:	39 2b       	or	r19, r25
     c08:	4a 2b       	or	r20, r26
     c0a:	5b 2b       	or	r21, r27
     c0c:	da 01       	movw	r26, r20
     c0e:	c9 01       	movw	r24, r18
     c10:	8f 77       	andi	r24, 0x7F	; 127
     c12:	90 70       	andi	r25, 0x00	; 0
     c14:	a0 70       	andi	r26, 0x00	; 0
     c16:	b0 70       	andi	r27, 0x00	; 0
     c18:	80 34       	cpi	r24, 0x40	; 64
     c1a:	91 05       	cpc	r25, r1
     c1c:	a1 05       	cpc	r26, r1
     c1e:	b1 05       	cpc	r27, r1
     c20:	39 f4       	brne	.+14     	; 0xc30 <__pack_f+0xee>
     c22:	27 ff       	sbrs	r18, 7
     c24:	09 c0       	rjmp	.+18     	; 0xc38 <__pack_f+0xf6>
     c26:	20 5c       	subi	r18, 0xC0	; 192
     c28:	3f 4f       	sbci	r19, 0xFF	; 255
     c2a:	4f 4f       	sbci	r20, 0xFF	; 255
     c2c:	5f 4f       	sbci	r21, 0xFF	; 255
     c2e:	04 c0       	rjmp	.+8      	; 0xc38 <__pack_f+0xf6>
     c30:	21 5c       	subi	r18, 0xC1	; 193
     c32:	3f 4f       	sbci	r19, 0xFF	; 255
     c34:	4f 4f       	sbci	r20, 0xFF	; 255
     c36:	5f 4f       	sbci	r21, 0xFF	; 255
     c38:	e0 e0       	ldi	r30, 0x00	; 0
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	20 30       	cpi	r18, 0x00	; 0
     c3e:	a0 e0       	ldi	r26, 0x00	; 0
     c40:	3a 07       	cpc	r19, r26
     c42:	a0 e0       	ldi	r26, 0x00	; 0
     c44:	4a 07       	cpc	r20, r26
     c46:	a0 e4       	ldi	r26, 0x40	; 64
     c48:	5a 07       	cpc	r21, r26
     c4a:	10 f0       	brcs	.+4      	; 0xc50 <__pack_f+0x10e>
     c4c:	e1 e0       	ldi	r30, 0x01	; 1
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	79 01       	movw	r14, r18
     c52:	8a 01       	movw	r16, r20
     c54:	27 c0       	rjmp	.+78     	; 0xca4 <__pack_f+0x162>
     c56:	60 38       	cpi	r22, 0x80	; 128
     c58:	71 05       	cpc	r23, r1
     c5a:	64 f5       	brge	.+88     	; 0xcb4 <__pack_f+0x172>
     c5c:	fb 01       	movw	r30, r22
     c5e:	e1 58       	subi	r30, 0x81	; 129
     c60:	ff 4f       	sbci	r31, 0xFF	; 255
     c62:	d8 01       	movw	r26, r16
     c64:	c7 01       	movw	r24, r14
     c66:	8f 77       	andi	r24, 0x7F	; 127
     c68:	90 70       	andi	r25, 0x00	; 0
     c6a:	a0 70       	andi	r26, 0x00	; 0
     c6c:	b0 70       	andi	r27, 0x00	; 0
     c6e:	80 34       	cpi	r24, 0x40	; 64
     c70:	91 05       	cpc	r25, r1
     c72:	a1 05       	cpc	r26, r1
     c74:	b1 05       	cpc	r27, r1
     c76:	39 f4       	brne	.+14     	; 0xc86 <__pack_f+0x144>
     c78:	e7 fe       	sbrs	r14, 7
     c7a:	0d c0       	rjmp	.+26     	; 0xc96 <__pack_f+0x154>
     c7c:	80 e4       	ldi	r24, 0x40	; 64
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	a0 e0       	ldi	r26, 0x00	; 0
     c82:	b0 e0       	ldi	r27, 0x00	; 0
     c84:	04 c0       	rjmp	.+8      	; 0xc8e <__pack_f+0x14c>
     c86:	8f e3       	ldi	r24, 0x3F	; 63
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	a0 e0       	ldi	r26, 0x00	; 0
     c8c:	b0 e0       	ldi	r27, 0x00	; 0
     c8e:	e8 0e       	add	r14, r24
     c90:	f9 1e       	adc	r15, r25
     c92:	0a 1f       	adc	r16, r26
     c94:	1b 1f       	adc	r17, r27
     c96:	17 ff       	sbrs	r17, 7
     c98:	05 c0       	rjmp	.+10     	; 0xca4 <__pack_f+0x162>
     c9a:	16 95       	lsr	r17
     c9c:	07 95       	ror	r16
     c9e:	f7 94       	ror	r15
     ca0:	e7 94       	ror	r14
     ca2:	31 96       	adiw	r30, 0x01	; 1
     ca4:	87 e0       	ldi	r24, 0x07	; 7
     ca6:	16 95       	lsr	r17
     ca8:	07 95       	ror	r16
     caa:	f7 94       	ror	r15
     cac:	e7 94       	ror	r14
     cae:	8a 95       	dec	r24
     cb0:	d1 f7       	brne	.-12     	; 0xca6 <__pack_f+0x164>
     cb2:	05 c0       	rjmp	.+10     	; 0xcbe <__pack_f+0x17c>
     cb4:	ee 24       	eor	r14, r14
     cb6:	ff 24       	eor	r15, r15
     cb8:	87 01       	movw	r16, r14
     cba:	ef ef       	ldi	r30, 0xFF	; 255
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	6e 2f       	mov	r22, r30
     cc0:	67 95       	ror	r22
     cc2:	66 27       	eor	r22, r22
     cc4:	67 95       	ror	r22
     cc6:	90 2f       	mov	r25, r16
     cc8:	9f 77       	andi	r25, 0x7F	; 127
     cca:	d7 94       	ror	r13
     ccc:	dd 24       	eor	r13, r13
     cce:	d7 94       	ror	r13
     cd0:	8e 2f       	mov	r24, r30
     cd2:	86 95       	lsr	r24
     cd4:	49 2f       	mov	r20, r25
     cd6:	46 2b       	or	r20, r22
     cd8:	58 2f       	mov	r21, r24
     cda:	5d 29       	or	r21, r13
     cdc:	b7 01       	movw	r22, r14
     cde:	ca 01       	movw	r24, r20
     ce0:	1f 91       	pop	r17
     ce2:	0f 91       	pop	r16
     ce4:	ff 90       	pop	r15
     ce6:	ef 90       	pop	r14
     ce8:	df 90       	pop	r13
     cea:	08 95       	ret

00000cec <__unpack_f>:
     cec:	fc 01       	movw	r30, r24
     cee:	db 01       	movw	r26, r22
     cf0:	40 81       	ld	r20, Z
     cf2:	51 81       	ldd	r21, Z+1	; 0x01
     cf4:	22 81       	ldd	r18, Z+2	; 0x02
     cf6:	62 2f       	mov	r22, r18
     cf8:	6f 77       	andi	r22, 0x7F	; 127
     cfa:	70 e0       	ldi	r23, 0x00	; 0
     cfc:	22 1f       	adc	r18, r18
     cfe:	22 27       	eor	r18, r18
     d00:	22 1f       	adc	r18, r18
     d02:	93 81       	ldd	r25, Z+3	; 0x03
     d04:	89 2f       	mov	r24, r25
     d06:	88 0f       	add	r24, r24
     d08:	82 2b       	or	r24, r18
     d0a:	28 2f       	mov	r18, r24
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	99 1f       	adc	r25, r25
     d10:	99 27       	eor	r25, r25
     d12:	99 1f       	adc	r25, r25
     d14:	11 96       	adiw	r26, 0x01	; 1
     d16:	9c 93       	st	X, r25
     d18:	11 97       	sbiw	r26, 0x01	; 1
     d1a:	21 15       	cp	r18, r1
     d1c:	31 05       	cpc	r19, r1
     d1e:	a9 f5       	brne	.+106    	; 0xd8a <__unpack_f+0x9e>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	11 f4       	brne	.+4      	; 0xd2e <__unpack_f+0x42>
     d2a:	82 e0       	ldi	r24, 0x02	; 2
     d2c:	37 c0       	rjmp	.+110    	; 0xd9c <__unpack_f+0xb0>
     d2e:	82 e8       	ldi	r24, 0x82	; 130
     d30:	9f ef       	ldi	r25, 0xFF	; 255
     d32:	13 96       	adiw	r26, 0x03	; 3
     d34:	9c 93       	st	X, r25
     d36:	8e 93       	st	-X, r24
     d38:	12 97       	sbiw	r26, 0x02	; 2
     d3a:	9a 01       	movw	r18, r20
     d3c:	ab 01       	movw	r20, r22
     d3e:	67 e0       	ldi	r22, 0x07	; 7
     d40:	22 0f       	add	r18, r18
     d42:	33 1f       	adc	r19, r19
     d44:	44 1f       	adc	r20, r20
     d46:	55 1f       	adc	r21, r21
     d48:	6a 95       	dec	r22
     d4a:	d1 f7       	brne	.-12     	; 0xd40 <__unpack_f+0x54>
     d4c:	83 e0       	ldi	r24, 0x03	; 3
     d4e:	8c 93       	st	X, r24
     d50:	0d c0       	rjmp	.+26     	; 0xd6c <__unpack_f+0x80>
     d52:	22 0f       	add	r18, r18
     d54:	33 1f       	adc	r19, r19
     d56:	44 1f       	adc	r20, r20
     d58:	55 1f       	adc	r21, r21
     d5a:	12 96       	adiw	r26, 0x02	; 2
     d5c:	8d 91       	ld	r24, X+
     d5e:	9c 91       	ld	r25, X
     d60:	13 97       	sbiw	r26, 0x03	; 3
     d62:	01 97       	sbiw	r24, 0x01	; 1
     d64:	13 96       	adiw	r26, 0x03	; 3
     d66:	9c 93       	st	X, r25
     d68:	8e 93       	st	-X, r24
     d6a:	12 97       	sbiw	r26, 0x02	; 2
     d6c:	20 30       	cpi	r18, 0x00	; 0
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	38 07       	cpc	r19, r24
     d72:	80 e0       	ldi	r24, 0x00	; 0
     d74:	48 07       	cpc	r20, r24
     d76:	80 e4       	ldi	r24, 0x40	; 64
     d78:	58 07       	cpc	r21, r24
     d7a:	58 f3       	brcs	.-42     	; 0xd52 <__unpack_f+0x66>
     d7c:	14 96       	adiw	r26, 0x04	; 4
     d7e:	2d 93       	st	X+, r18
     d80:	3d 93       	st	X+, r19
     d82:	4d 93       	st	X+, r20
     d84:	5c 93       	st	X, r21
     d86:	17 97       	sbiw	r26, 0x07	; 7
     d88:	08 95       	ret
     d8a:	2f 3f       	cpi	r18, 0xFF	; 255
     d8c:	31 05       	cpc	r19, r1
     d8e:	79 f4       	brne	.+30     	; 0xdae <__unpack_f+0xc2>
     d90:	41 15       	cp	r20, r1
     d92:	51 05       	cpc	r21, r1
     d94:	61 05       	cpc	r22, r1
     d96:	71 05       	cpc	r23, r1
     d98:	19 f4       	brne	.+6      	; 0xda0 <__unpack_f+0xb4>
     d9a:	84 e0       	ldi	r24, 0x04	; 4
     d9c:	8c 93       	st	X, r24
     d9e:	08 95       	ret
     da0:	64 ff       	sbrs	r22, 4
     da2:	03 c0       	rjmp	.+6      	; 0xdaa <__unpack_f+0xbe>
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	8c 93       	st	X, r24
     da8:	12 c0       	rjmp	.+36     	; 0xdce <__unpack_f+0xe2>
     daa:	1c 92       	st	X, r1
     dac:	10 c0       	rjmp	.+32     	; 0xdce <__unpack_f+0xe2>
     dae:	2f 57       	subi	r18, 0x7F	; 127
     db0:	30 40       	sbci	r19, 0x00	; 0
     db2:	13 96       	adiw	r26, 0x03	; 3
     db4:	3c 93       	st	X, r19
     db6:	2e 93       	st	-X, r18
     db8:	12 97       	sbiw	r26, 0x02	; 2
     dba:	83 e0       	ldi	r24, 0x03	; 3
     dbc:	8c 93       	st	X, r24
     dbe:	87 e0       	ldi	r24, 0x07	; 7
     dc0:	44 0f       	add	r20, r20
     dc2:	55 1f       	adc	r21, r21
     dc4:	66 1f       	adc	r22, r22
     dc6:	77 1f       	adc	r23, r23
     dc8:	8a 95       	dec	r24
     dca:	d1 f7       	brne	.-12     	; 0xdc0 <__unpack_f+0xd4>
     dcc:	70 64       	ori	r23, 0x40	; 64
     dce:	14 96       	adiw	r26, 0x04	; 4
     dd0:	4d 93       	st	X+, r20
     dd2:	5d 93       	st	X+, r21
     dd4:	6d 93       	st	X+, r22
     dd6:	7c 93       	st	X, r23
     dd8:	17 97       	sbiw	r26, 0x07	; 7
     dda:	08 95       	ret

00000ddc <__fpcmp_parts_f>:
     ddc:	1f 93       	push	r17
     dde:	dc 01       	movw	r26, r24
     de0:	fb 01       	movw	r30, r22
     de2:	9c 91       	ld	r25, X
     de4:	92 30       	cpi	r25, 0x02	; 2
     de6:	08 f4       	brcc	.+2      	; 0xdea <__fpcmp_parts_f+0xe>
     de8:	47 c0       	rjmp	.+142    	; 0xe78 <__fpcmp_parts_f+0x9c>
     dea:	80 81       	ld	r24, Z
     dec:	82 30       	cpi	r24, 0x02	; 2
     dee:	08 f4       	brcc	.+2      	; 0xdf2 <__fpcmp_parts_f+0x16>
     df0:	43 c0       	rjmp	.+134    	; 0xe78 <__fpcmp_parts_f+0x9c>
     df2:	94 30       	cpi	r25, 0x04	; 4
     df4:	51 f4       	brne	.+20     	; 0xe0a <__fpcmp_parts_f+0x2e>
     df6:	11 96       	adiw	r26, 0x01	; 1
     df8:	1c 91       	ld	r17, X
     dfa:	84 30       	cpi	r24, 0x04	; 4
     dfc:	99 f5       	brne	.+102    	; 0xe64 <__fpcmp_parts_f+0x88>
     dfe:	81 81       	ldd	r24, Z+1	; 0x01
     e00:	68 2f       	mov	r22, r24
     e02:	70 e0       	ldi	r23, 0x00	; 0
     e04:	61 1b       	sub	r22, r17
     e06:	71 09       	sbc	r23, r1
     e08:	3f c0       	rjmp	.+126    	; 0xe88 <__fpcmp_parts_f+0xac>
     e0a:	84 30       	cpi	r24, 0x04	; 4
     e0c:	21 f0       	breq	.+8      	; 0xe16 <__fpcmp_parts_f+0x3a>
     e0e:	92 30       	cpi	r25, 0x02	; 2
     e10:	31 f4       	brne	.+12     	; 0xe1e <__fpcmp_parts_f+0x42>
     e12:	82 30       	cpi	r24, 0x02	; 2
     e14:	b9 f1       	breq	.+110    	; 0xe84 <__fpcmp_parts_f+0xa8>
     e16:	81 81       	ldd	r24, Z+1	; 0x01
     e18:	88 23       	and	r24, r24
     e1a:	89 f1       	breq	.+98     	; 0xe7e <__fpcmp_parts_f+0xa2>
     e1c:	2d c0       	rjmp	.+90     	; 0xe78 <__fpcmp_parts_f+0x9c>
     e1e:	11 96       	adiw	r26, 0x01	; 1
     e20:	1c 91       	ld	r17, X
     e22:	11 97       	sbiw	r26, 0x01	; 1
     e24:	82 30       	cpi	r24, 0x02	; 2
     e26:	f1 f0       	breq	.+60     	; 0xe64 <__fpcmp_parts_f+0x88>
     e28:	81 81       	ldd	r24, Z+1	; 0x01
     e2a:	18 17       	cp	r17, r24
     e2c:	d9 f4       	brne	.+54     	; 0xe64 <__fpcmp_parts_f+0x88>
     e2e:	12 96       	adiw	r26, 0x02	; 2
     e30:	2d 91       	ld	r18, X+
     e32:	3c 91       	ld	r19, X
     e34:	13 97       	sbiw	r26, 0x03	; 3
     e36:	82 81       	ldd	r24, Z+2	; 0x02
     e38:	93 81       	ldd	r25, Z+3	; 0x03
     e3a:	82 17       	cp	r24, r18
     e3c:	93 07       	cpc	r25, r19
     e3e:	94 f0       	brlt	.+36     	; 0xe64 <__fpcmp_parts_f+0x88>
     e40:	28 17       	cp	r18, r24
     e42:	39 07       	cpc	r19, r25
     e44:	bc f0       	brlt	.+46     	; 0xe74 <__fpcmp_parts_f+0x98>
     e46:	14 96       	adiw	r26, 0x04	; 4
     e48:	8d 91       	ld	r24, X+
     e4a:	9d 91       	ld	r25, X+
     e4c:	0d 90       	ld	r0, X+
     e4e:	bc 91       	ld	r27, X
     e50:	a0 2d       	mov	r26, r0
     e52:	24 81       	ldd	r18, Z+4	; 0x04
     e54:	35 81       	ldd	r19, Z+5	; 0x05
     e56:	46 81       	ldd	r20, Z+6	; 0x06
     e58:	57 81       	ldd	r21, Z+7	; 0x07
     e5a:	28 17       	cp	r18, r24
     e5c:	39 07       	cpc	r19, r25
     e5e:	4a 07       	cpc	r20, r26
     e60:	5b 07       	cpc	r21, r27
     e62:	18 f4       	brcc	.+6      	; 0xe6a <__fpcmp_parts_f+0x8e>
     e64:	11 23       	and	r17, r17
     e66:	41 f0       	breq	.+16     	; 0xe78 <__fpcmp_parts_f+0x9c>
     e68:	0a c0       	rjmp	.+20     	; 0xe7e <__fpcmp_parts_f+0xa2>
     e6a:	82 17       	cp	r24, r18
     e6c:	93 07       	cpc	r25, r19
     e6e:	a4 07       	cpc	r26, r20
     e70:	b5 07       	cpc	r27, r21
     e72:	40 f4       	brcc	.+16     	; 0xe84 <__fpcmp_parts_f+0xa8>
     e74:	11 23       	and	r17, r17
     e76:	19 f0       	breq	.+6      	; 0xe7e <__fpcmp_parts_f+0xa2>
     e78:	61 e0       	ldi	r22, 0x01	; 1
     e7a:	70 e0       	ldi	r23, 0x00	; 0
     e7c:	05 c0       	rjmp	.+10     	; 0xe88 <__fpcmp_parts_f+0xac>
     e7e:	6f ef       	ldi	r22, 0xFF	; 255
     e80:	7f ef       	ldi	r23, 0xFF	; 255
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <__fpcmp_parts_f+0xac>
     e84:	60 e0       	ldi	r22, 0x00	; 0
     e86:	70 e0       	ldi	r23, 0x00	; 0
     e88:	cb 01       	movw	r24, r22
     e8a:	1f 91       	pop	r17
     e8c:	08 95       	ret

00000e8e <USART_enuInit>:
#include "USART_config.h"
#include "USART_priv.h"


ES_t USART_enuInit()//u16 Copy_u16baud
{
     e8e:	df 93       	push	r29
     e90:	cf 93       	push	r28
     e92:	00 d0       	rcall	.+0      	; 0xe94 <USART_enuInit+0x6>
     e94:	00 d0       	rcall	.+0      	; 0xe96 <USART_enuInit+0x8>
     e96:	cd b7       	in	r28, 0x3d	; 61
     e98:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
     e9a:	1c 82       	std	Y+4, r1	; 0x04

#if SPEED_MODE==NORMAL_SPEED
	UCSRA &=~(1<<UCSRA_U2X);
     e9c:	ab e2       	ldi	r26, 0x2B	; 43
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	eb e2       	ldi	r30, 0x2B	; 43
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	80 81       	ld	r24, Z
     ea6:	8d 7f       	andi	r24, 0xFD	; 253
     ea8:	8c 93       	st	X, r24
	Local_enuErrorState=ES_OK;
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	8c 83       	std	Y+4, r24	; 0x04

#error "SPEED mode selection is wrong"
#endif

#if USART_MODE==TRANSCIEVER
	UCSRB |=(3<<UCSRB_TXEN);
     eae:	aa e2       	ldi	r26, 0x2A	; 42
     eb0:	b0 e0       	ldi	r27, 0x00	; 0
     eb2:	ea e2       	ldi	r30, 0x2A	; 42
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	80 81       	ld	r24, Z
     eb8:	88 61       	ori	r24, 0x18	; 24
     eba:	8c 93       	st	X, r24
	Local_enuErrorState=ES_OK;
     ebc:	81 e0       	ldi	r24, 0x01	; 1
     ebe:	8c 83       	std	Y+4, r24	; 0x04

#error "UART mode selection is wrong"
#endif


	u8 Local_u8UCSRC=0;
     ec0:	1b 82       	std	Y+3, r1	; 0x03
	Local_u8UCSRC |=(3<<UCSRC_UCSZ0);
	UCSRB |=(1<<UCSRB_UCSZ2);
	Local_enuErrorState=ES_OK;

#elif DATA_LEN==EIGHT_BIT
	Local_u8UCSRC |=(3<<UCSRC_UCSZ0);
     ec2:	8b 81       	ldd	r24, Y+3	; 0x03
     ec4:	86 60       	ori	r24, 0x06	; 6
     ec6:	8b 83       	std	Y+3, r24	; 0x03
	UCSRB &=~(1<<UCSRB_UCSZ2);
     ec8:	aa e2       	ldi	r26, 0x2A	; 42
     eca:	b0 e0       	ldi	r27, 0x00	; 0
     ecc:	ea e2       	ldi	r30, 0x2A	; 42
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	80 81       	ld	r24, Z
     ed2:	8b 7f       	andi	r24, 0xFB	; 251
     ed4:	8c 93       	st	X, r24
	Local_enuErrorState=ES_OK;
     ed6:	81 e0       	ldi	r24, 0x01	; 1
     ed8:	8c 83       	std	Y+4, r24	; 0x04
#error "UART DATA Length  selection is wrong"
#endif


#if PARITY_STATE==NO_PARITY
	Local_u8UCSRC &=~(3<<UCSRC_UPM0);
     eda:	8b 81       	ldd	r24, Y+3	; 0x03
     edc:	8f 7c       	andi	r24, 0xCF	; 207
     ede:	8b 83       	std	Y+3, r24	; 0x03
	Local_enuErrorState=ES_OK;
     ee0:	81 e0       	ldi	r24, 0x01	; 1
     ee2:	8c 83       	std	Y+4, r24	; 0x04
#error "UART PARITY State  selection is wrong"
#endif


#if STOP_STATE==ONE_STOP_BIT
	Local_u8UCSRC &=~(1<<UCSRC_USBS);
     ee4:	8b 81       	ldd	r24, Y+3	; 0x03
     ee6:	87 7f       	andi	r24, 0xF7	; 247
     ee8:	8b 83       	std	Y+3, r24	; 0x03
	Local_enuErrorState=ES_OK;
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	8c 83       	std	Y+4, r24	; 0x04
#error "UART STOP State  selection is wrong"
#endif


#if CLOCK_MODE==ASYNCH
	Local_u8UCSRC &=~(1<<UCSRC_UMSEL);
     eee:	8b 81       	ldd	r24, Y+3	; 0x03
     ef0:	8f 7b       	andi	r24, 0xBF	; 191
     ef2:	8b 83       	std	Y+3, r24	; 0x03
	Local_enuErrorState=ES_OK;
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	8c 83       	std	Y+4, r24	; 0x04

#error "UART CLOCK MODE  selection is wrong"
#endif


	Local_u8UCSRC |=(1<<UCSRC_URSEL);
     ef8:	8b 81       	ldd	r24, Y+3	; 0x03
     efa:	80 68       	ori	r24, 0x80	; 128
     efc:	8b 83       	std	Y+3, r24	; 0x03
	UCSRC = Local_u8UCSRC;
     efe:	e0 e4       	ldi	r30, 0x40	; 64
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	8b 81       	ldd	r24, Y+3	; 0x03
     f04:	80 83       	st	Z, r24

	u16 Local_u16UBRR = BUAD(BAUDRATE);
     f06:	83 e3       	ldi	r24, 0x33	; 51
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	9a 83       	std	Y+2, r25	; 0x02
     f0c:	89 83       	std	Y+1, r24	; 0x01

	Local_u16UBRR &=~(1<<15); //URSEL=0 to select UBRRH
     f0e:	89 81       	ldd	r24, Y+1	; 0x01
     f10:	9a 81       	ldd	r25, Y+2	; 0x02
     f12:	9f 77       	andi	r25, 0x7F	; 127
     f14:	9a 83       	std	Y+2, r25	; 0x02
     f16:	89 83       	std	Y+1, r24	; 0x01

	UBRRL =(u8)Local_u16UBRR; // I think there are error here
     f18:	e9 e2       	ldi	r30, 0x29	; 41
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	89 81       	ldd	r24, Y+1	; 0x01
     f1e:	80 83       	st	Z, r24
	UBRRH =(Local_u16UBRR>>8);
     f20:	e0 e4       	ldi	r30, 0x40	; 64
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	89 81       	ldd	r24, Y+1	; 0x01
     f26:	9a 81       	ldd	r25, Y+2	; 0x02
     f28:	89 2f       	mov	r24, r25
     f2a:	99 27       	eor	r25, r25
     f2c:	80 83       	st	Z, r24
	Local_enuErrorState=ES_OK;
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	8c 83       	std	Y+4, r24	; 0x04


	return Local_enuErrorState;
     f32:	8c 81       	ldd	r24, Y+4	; 0x04
}
     f34:	0f 90       	pop	r0
     f36:	0f 90       	pop	r0
     f38:	0f 90       	pop	r0
     f3a:	0f 90       	pop	r0
     f3c:	cf 91       	pop	r28
     f3e:	df 91       	pop	r29
     f40:	08 95       	ret

00000f42 <USART_enuSendChar>:


ES_t USART_enuSendChar(u8 Copy_u8data)
{
     f42:	df 93       	push	r29
     f44:	cf 93       	push	r28
     f46:	00 d0       	rcall	.+0      	; 0xf48 <USART_enuSendChar+0x6>
     f48:	cd b7       	in	r28, 0x3d	; 61
     f4a:	de b7       	in	r29, 0x3e	; 62
     f4c:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
     f4e:	19 82       	std	Y+1, r1	; 0x01

	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UCSRA_UDRE)));
     f50:	eb e2       	ldi	r30, 0x2B	; 43
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	80 81       	ld	r24, Z
     f56:	88 2f       	mov	r24, r24
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	80 72       	andi	r24, 0x20	; 32
     f5c:	90 70       	andi	r25, 0x00	; 0
     f5e:	00 97       	sbiw	r24, 0x00	; 0
     f60:	b9 f3       	breq	.-18     	; 0xf50 <USART_enuSendChar+0xe>

	UDR = Copy_u8data;
     f62:	ec e2       	ldi	r30, 0x2C	; 44
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	8a 81       	ldd	r24, Y+2	; 0x02
     f68:	80 83       	st	Z, r24

	Local_enuErrorState=ES_OK;
     f6a:	81 e0       	ldi	r24, 0x01	; 1
     f6c:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
     f6e:	89 81       	ldd	r24, Y+1	; 0x01
}
     f70:	0f 90       	pop	r0
     f72:	0f 90       	pop	r0
     f74:	cf 91       	pop	r28
     f76:	df 91       	pop	r29
     f78:	08 95       	ret

00000f7a <USART_enuRecieveChar>:

ES_t USART_enuRecieveChar(u8 *Copy_pu8data)
{
     f7a:	df 93       	push	r29
     f7c:	cf 93       	push	r28
     f7e:	00 d0       	rcall	.+0      	; 0xf80 <USART_enuRecieveChar+0x6>
     f80:	0f 92       	push	r0
     f82:	cd b7       	in	r28, 0x3d	; 61
     f84:	de b7       	in	r29, 0x3e	; 62
     f86:	9b 83       	std	Y+3, r25	; 0x03
     f88:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
     f8a:	19 82       	std	Y+1, r1	; 0x01


	if (Copy_pu8data!=NULL)
     f8c:	8a 81       	ldd	r24, Y+2	; 0x02
     f8e:	9b 81       	ldd	r25, Y+3	; 0x03
     f90:	00 97       	sbiw	r24, 0x00	; 0
     f92:	71 f0       	breq	.+28     	; 0xfb0 <USART_enuRecieveChar+0x36>
	{
		/* Wait for data to be received */
		while ( !(UCSRA & (1<<UCSRA_RXC)) );
     f94:	eb e2       	ldi	r30, 0x2B	; 43
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	80 81       	ld	r24, Z
     f9a:	88 23       	and	r24, r24
     f9c:	dc f7       	brge	.-10     	; 0xf94 <USART_enuRecieveChar+0x1a>

		*Copy_pu8data = UDR;
     f9e:	ec e2       	ldi	r30, 0x2C	; 44
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	80 81       	ld	r24, Z
     fa4:	ea 81       	ldd	r30, Y+2	; 0x02
     fa6:	fb 81       	ldd	r31, Y+3	; 0x03
     fa8:	80 83       	st	Z, r24

		Local_enuErrorState=ES_OK;
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	89 83       	std	Y+1, r24	; 0x01
     fae:	02 c0       	rjmp	.+4      	; 0xfb4 <USART_enuRecieveChar+0x3a>
	}
	else
	{
		Local_enuErrorState=ES_NULL_POINTER;
     fb0:	82 e0       	ldi	r24, 0x02	; 2
     fb2:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
     fb4:	89 81       	ldd	r24, Y+1	; 0x01
}
     fb6:	0f 90       	pop	r0
     fb8:	0f 90       	pop	r0
     fba:	0f 90       	pop	r0
     fbc:	cf 91       	pop	r28
     fbe:	df 91       	pop	r29
     fc0:	08 95       	ret

00000fc2 <USART_enuSendString>:

ES_t USART_enuSendString(const char *Copy_pcData)
{
     fc2:	df 93       	push	r29
     fc4:	cf 93       	push	r28
     fc6:	00 d0       	rcall	.+0      	; 0xfc8 <USART_enuSendString+0x6>
     fc8:	0f 92       	push	r0
     fca:	cd b7       	in	r28, 0x3d	; 61
     fcc:	de b7       	in	r29, 0x3e	; 62
     fce:	9b 83       	std	Y+3, r25	; 0x03
     fd0:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
     fd2:	19 82       	std	Y+1, r1	; 0x01
     fd4:	14 c0       	rjmp	.+40     	; 0xffe <USART_enuSendString+0x3c>

	while(*Copy_pcData != '\0')
	{
		/* Wait for empty transmit buffer */
		while ( !( UCSRA & (1<<UCSRA_UDRE)));
     fd6:	eb e2       	ldi	r30, 0x2B	; 43
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	88 2f       	mov	r24, r24
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	80 72       	andi	r24, 0x20	; 32
     fe2:	90 70       	andi	r25, 0x00	; 0
     fe4:	00 97       	sbiw	r24, 0x00	; 0
     fe6:	b9 f3       	breq	.-18     	; 0xfd6 <USART_enuSendString+0x14>

		UDR = *Copy_pcData;
     fe8:	ac e2       	ldi	r26, 0x2C	; 44
     fea:	b0 e0       	ldi	r27, 0x00	; 0
     fec:	ea 81       	ldd	r30, Y+2	; 0x02
     fee:	fb 81       	ldd	r31, Y+3	; 0x03
     ff0:	80 81       	ld	r24, Z
     ff2:	8c 93       	st	X, r24
		Copy_pcData++;
     ff4:	8a 81       	ldd	r24, Y+2	; 0x02
     ff6:	9b 81       	ldd	r25, Y+3	; 0x03
     ff8:	01 96       	adiw	r24, 0x01	; 1
     ffa:	9b 83       	std	Y+3, r25	; 0x03
     ffc:	8a 83       	std	Y+2, r24	; 0x02

ES_t USART_enuSendString(const char *Copy_pcData)
{
	ES_t Local_enuErrorState=ES_NOK;

	while(*Copy_pcData != '\0')
     ffe:	ea 81       	ldd	r30, Y+2	; 0x02
    1000:	fb 81       	ldd	r31, Y+3	; 0x03
    1002:	80 81       	ld	r24, Z
    1004:	88 23       	and	r24, r24
    1006:	39 f7       	brne	.-50     	; 0xfd6 <USART_enuSendString+0x14>

		UDR = *Copy_pcData;
		Copy_pcData++;
	}

	Local_enuErrorState=ES_OK;
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    100c:	89 81       	ldd	r24, Y+1	; 0x01
}
    100e:	0f 90       	pop	r0
    1010:	0f 90       	pop	r0
    1012:	0f 90       	pop	r0
    1014:	cf 91       	pop	r28
    1016:	df 91       	pop	r29
    1018:	08 95       	ret

0000101a <USART_enuRecieveString>:

/* Enter  >> \r=13  , \n */

ES_t USART_enuRecieveString(char *Copy_pcData)
{
    101a:	df 93       	push	r29
    101c:	cf 93       	push	r28
    101e:	00 d0       	rcall	.+0      	; 0x1020 <USART_enuRecieveString+0x6>
    1020:	00 d0       	rcall	.+0      	; 0x1022 <USART_enuRecieveString+0x8>
    1022:	00 d0       	rcall	.+0      	; 0x1024 <USART_enuRecieveString+0xa>
    1024:	cd b7       	in	r28, 0x3d	; 61
    1026:	de b7       	in	r29, 0x3e	; 62
    1028:	9e 83       	std	Y+6, r25	; 0x06
    102a:	8d 83       	std	Y+5, r24	; 0x05
	ES_t Local_enuErrorState=ES_NOK;
    102c:	1c 82       	std	Y+4, r1	; 0x04

	u8 Local_u8Data=0,Local_u8Index=0;
    102e:	1b 82       	std	Y+3, r1	; 0x03
    1030:	1a 82       	std	Y+2, r1	; 0x02


	// Receive using first char user send

	/* Wait for data to be received */
	while ( !(UCSRA & (1<<UCSRA_RXC)) );
    1032:	eb e2       	ldi	r30, 0x2B	; 43
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	80 81       	ld	r24, Z
    1038:	88 23       	and	r24, r24
    103a:	dc f7       	brge	.-10     	; 0x1032 <USART_enuRecieveString+0x18>

	u8 Local_u8Exit=UDR;
    103c:	ec e2       	ldi	r30, 0x2C	; 44
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	80 81       	ld	r24, Z
    1042:	89 83       	std	Y+1, r24	; 0x01

	while(1)
	{
		/* Wait for data to be received */
		while ( !(UCSRA & (1<<UCSRA_RXC)) );
    1044:	eb e2       	ldi	r30, 0x2B	; 43
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z
    104a:	88 23       	and	r24, r24
    104c:	dc f7       	brge	.-10     	; 0x1044 <USART_enuRecieveString+0x2a>

		Local_u8Data = UDR;
    104e:	ec e2       	ldi	r30, 0x2C	; 44
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	8b 83       	std	Y+3, r24	; 0x03

		if(Local_u8Data ==Local_u8Exit)
    1056:	9b 81       	ldd	r25, Y+3	; 0x03
    1058:	89 81       	ldd	r24, Y+1	; 0x01
    105a:	98 17       	cp	r25, r24
    105c:	a9 f4       	brne	.+42     	; 0x1088 <USART_enuRecieveString+0x6e>
		{
			Copy_pcData[Local_u8Index]='\0';
    105e:	8a 81       	ldd	r24, Y+2	; 0x02
    1060:	28 2f       	mov	r18, r24
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	8d 81       	ldd	r24, Y+5	; 0x05
    1066:	9e 81       	ldd	r25, Y+6	; 0x06
    1068:	fc 01       	movw	r30, r24
    106a:	e2 0f       	add	r30, r18
    106c:	f3 1f       	adc	r31, r19
    106e:	10 82       	st	Z, r1
			Copy_pcData[Local_u8Index]=Local_u8Data;
			Local_u8Index++;
		}
	}

	Local_enuErrorState=ES_OK;
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	8c 83       	std	Y+4, r24	; 0x04

	return Local_enuErrorState;
    1074:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1076:	26 96       	adiw	r28, 0x06	; 6
    1078:	0f b6       	in	r0, 0x3f	; 63
    107a:	f8 94       	cli
    107c:	de bf       	out	0x3e, r29	; 62
    107e:	0f be       	out	0x3f, r0	; 63
    1080:	cd bf       	out	0x3d, r28	; 61
    1082:	cf 91       	pop	r28
    1084:	df 91       	pop	r29
    1086:	08 95       	ret
			Copy_pcData[Local_u8Index]='\0';
			break;
		}
		else
		{
			Copy_pcData[Local_u8Index]=Local_u8Data;
    1088:	8a 81       	ldd	r24, Y+2	; 0x02
    108a:	28 2f       	mov	r18, r24
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	8d 81       	ldd	r24, Y+5	; 0x05
    1090:	9e 81       	ldd	r25, Y+6	; 0x06
    1092:	fc 01       	movw	r30, r24
    1094:	e2 0f       	add	r30, r18
    1096:	f3 1f       	adc	r31, r19
    1098:	8b 81       	ldd	r24, Y+3	; 0x03
    109a:	80 83       	st	Z, r24
			Local_u8Index++;
    109c:	8a 81       	ldd	r24, Y+2	; 0x02
    109e:	8f 5f       	subi	r24, 0xFF	; 255
    10a0:	8a 83       	std	Y+2, r24	; 0x02
    10a2:	d0 cf       	rjmp	.-96     	; 0x1044 <USART_enuRecieveString+0x2a>

000010a4 <USART_enuTransmit>:
	return Local_enuErrorState;
}


ES_t USART_enuTransmit(u16 Copy_u16data)
{
    10a4:	df 93       	push	r29
    10a6:	cf 93       	push	r28
    10a8:	00 d0       	rcall	.+0      	; 0x10aa <USART_enuTransmit+0x6>
    10aa:	0f 92       	push	r0
    10ac:	cd b7       	in	r28, 0x3d	; 61
    10ae:	de b7       	in	r29, 0x3e	; 62
    10b0:	9b 83       	std	Y+3, r25	; 0x03
    10b2:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    10b4:	19 82       	std	Y+1, r1	; 0x01
	/* Put data into buffer, sends the data *
	UDR = Copy_data;
*/

	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UCSRA_UDRE)));
    10b6:	eb e2       	ldi	r30, 0x2B	; 43
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	80 81       	ld	r24, Z
    10bc:	88 2f       	mov	r24, r24
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	80 72       	andi	r24, 0x20	; 32
    10c2:	90 70       	andi	r25, 0x00	; 0
    10c4:	00 97       	sbiw	r24, 0x00	; 0
    10c6:	b9 f3       	breq	.-18     	; 0x10b6 <USART_enuTransmit+0x12>

	/* Copy 9th bit to TXB8 */
	UCSRB &= ~(1<<UCSRB_TXB8);
    10c8:	aa e2       	ldi	r26, 0x2A	; 42
    10ca:	b0 e0       	ldi	r27, 0x00	; 0
    10cc:	ea e2       	ldi	r30, 0x2A	; 42
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	80 81       	ld	r24, Z
    10d2:	8e 7f       	andi	r24, 0xFE	; 254
    10d4:	8c 93       	st	X, r24
	if ( Copy_u16data & 0x0100 )
    10d6:	8a 81       	ldd	r24, Y+2	; 0x02
    10d8:	9b 81       	ldd	r25, Y+3	; 0x03
    10da:	80 70       	andi	r24, 0x00	; 0
    10dc:	91 70       	andi	r25, 0x01	; 1
    10de:	00 97       	sbiw	r24, 0x00	; 0
    10e0:	39 f0       	breq	.+14     	; 0x10f0 <USART_enuTransmit+0x4c>
	{
		UCSRB |= (1<<UCSRB_TXB8);
    10e2:	aa e2       	ldi	r26, 0x2A	; 42
    10e4:	b0 e0       	ldi	r27, 0x00	; 0
    10e6:	ea e2       	ldi	r30, 0x2A	; 42
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	80 81       	ld	r24, Z
    10ec:	81 60       	ori	r24, 0x01	; 1
    10ee:	8c 93       	st	X, r24
	}
	/* Put data into buffer, sends the data */
	UDR = Copy_u16data;
    10f0:	ec e2       	ldi	r30, 0x2C	; 44
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	8a 81       	ldd	r24, Y+2	; 0x02
    10f6:	80 83       	st	Z, r24

	Local_enuErrorState=ES_OK;
    10f8:	81 e0       	ldi	r24, 0x01	; 1
    10fa:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    10fc:	89 81       	ldd	r24, Y+1	; 0x01
}
    10fe:	0f 90       	pop	r0
    1100:	0f 90       	pop	r0
    1102:	0f 90       	pop	r0
    1104:	cf 91       	pop	r28
    1106:	df 91       	pop	r29
    1108:	08 95       	ret

0000110a <USART_enuRecieve>:

ES_t USART_enuRecieve(u16 *Copy_pu16data)
{
    110a:	df 93       	push	r29
    110c:	cf 93       	push	r28
    110e:	00 d0       	rcall	.+0      	; 0x1110 <USART_enuRecieve+0x6>
    1110:	0f 92       	push	r0
    1112:	cd b7       	in	r28, 0x3d	; 61
    1114:	de b7       	in	r29, 0x3e	; 62
    1116:	9b 83       	std	Y+3, r25	; 0x03
    1118:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    111a:	19 82       	std	Y+1, r1	; 0x01

	/* Wait for data to be received */
	while ( !(UCSRA & (1<<UCSRA_RXC)) );
    111c:	eb e2       	ldi	r30, 0x2B	; 43
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	80 81       	ld	r24, Z
    1122:	88 23       	and	r24, r24
    1124:	dc f7       	brge	.-10     	; 0x111c <USART_enuRecieve+0x12>
	/*  9th bit, then data */

	*Copy_pu16data = (UCSRB &(1<<UCSRB_RXB8));
    1126:	ea e2       	ldi	r30, 0x2A	; 42
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	88 2f       	mov	r24, r24
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	82 70       	andi	r24, 0x02	; 2
    1132:	90 70       	andi	r25, 0x00	; 0
    1134:	ea 81       	ldd	r30, Y+2	; 0x02
    1136:	fb 81       	ldd	r31, Y+3	; 0x03
    1138:	91 83       	std	Z+1, r25	; 0x01
    113a:	80 83       	st	Z, r24
	*Copy_pu16data= (*Copy_pu16data<<8) |UDR ;
    113c:	ea 81       	ldd	r30, Y+2	; 0x02
    113e:	fb 81       	ldd	r31, Y+3	; 0x03
    1140:	80 81       	ld	r24, Z
    1142:	91 81       	ldd	r25, Z+1	; 0x01
    1144:	38 2f       	mov	r19, r24
    1146:	22 27       	eor	r18, r18
    1148:	ec e2       	ldi	r30, 0x2C	; 44
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	80 81       	ld	r24, Z
    114e:	88 2f       	mov	r24, r24
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	82 2b       	or	r24, r18
    1154:	93 2b       	or	r25, r19
    1156:	ea 81       	ldd	r30, Y+2	; 0x02
    1158:	fb 81       	ldd	r31, Y+3	; 0x03
    115a:	91 83       	std	Z+1, r25	; 0x01
    115c:	80 83       	st	Z, r24
	//*Copy_data= UDR;


	Local_enuErrorState=ES_OK;
    115e:	81 e0       	ldi	r24, 0x01	; 1
    1160:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    1162:	89 81       	ldd	r24, Y+1	; 0x01
}
    1164:	0f 90       	pop	r0
    1166:	0f 90       	pop	r0
    1168:	0f 90       	pop	r0
    116a:	cf 91       	pop	r28
    116c:	df 91       	pop	r29
    116e:	08 95       	ret

00001170 <USART_enuEnableTransmitter>:

ES_t USART_enuEnableTransmitter(void)
{
    1170:	df 93       	push	r29
    1172:	cf 93       	push	r28
    1174:	0f 92       	push	r0
    1176:	cd b7       	in	r28, 0x3d	; 61
    1178:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
    117a:	19 82       	std	Y+1, r1	; 0x01

	UCSRB |=(1<<UCSRB_TXEN);
    117c:	aa e2       	ldi	r26, 0x2A	; 42
    117e:	b0 e0       	ldi	r27, 0x00	; 0
    1180:	ea e2       	ldi	r30, 0x2A	; 42
    1182:	f0 e0       	ldi	r31, 0x00	; 0
    1184:	80 81       	ld	r24, Z
    1186:	88 60       	ori	r24, 0x08	; 8
    1188:	8c 93       	st	X, r24
	Local_enuErrorState=ES_OK;
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    118e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1190:	0f 90       	pop	r0
    1192:	cf 91       	pop	r28
    1194:	df 91       	pop	r29
    1196:	08 95       	ret

00001198 <USART_enuEnableReceiver>:



ES_t USART_enuEnableReceiver(void)
{
    1198:	df 93       	push	r29
    119a:	cf 93       	push	r28
    119c:	0f 92       	push	r0
    119e:	cd b7       	in	r28, 0x3d	; 61
    11a0:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
    11a2:	19 82       	std	Y+1, r1	; 0x01

	UCSRB |=(1<<UCSRB_RXEN);
    11a4:	aa e2       	ldi	r26, 0x2A	; 42
    11a6:	b0 e0       	ldi	r27, 0x00	; 0
    11a8:	ea e2       	ldi	r30, 0x2A	; 42
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	80 81       	ld	r24, Z
    11ae:	80 61       	ori	r24, 0x10	; 16
    11b0:	8c 93       	st	X, r24
	Local_enuErrorState=ES_OK;
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    11b6:	89 81       	ldd	r24, Y+1	; 0x01
}
    11b8:	0f 90       	pop	r0
    11ba:	cf 91       	pop	r28
    11bc:	df 91       	pop	r29
    11be:	08 95       	ret

000011c0 <WDT_enuSleep>:
#include "WDT_config.h"
#include "WDT_priv.h"


ES_t WDT_enuSleep(u8 Copy_u8SleepTime)
{
    11c0:	df 93       	push	r29
    11c2:	cf 93       	push	r28
    11c4:	00 d0       	rcall	.+0      	; 0x11c6 <WDT_enuSleep+0x6>
    11c6:	cd b7       	in	r28, 0x3d	; 61
    11c8:	de b7       	in	r29, 0x3e	; 62
    11ca:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    11cc:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8SleepTime<8)
    11ce:	8a 81       	ldd	r24, Y+2	; 0x02
    11d0:	88 30       	cpi	r24, 0x08	; 8
    11d2:	90 f4       	brcc	.+36     	; 0x11f8 <WDT_enuSleep+0x38>
	{

		WDTCR &= 0b11111000;//Clear prescaler bits
    11d4:	a1 e4       	ldi	r26, 0x41	; 65
    11d6:	b0 e0       	ldi	r27, 0x00	; 0
    11d8:	e1 e4       	ldi	r30, 0x41	; 65
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	80 81       	ld	r24, Z
    11de:	88 7f       	andi	r24, 0xF8	; 248
    11e0:	8c 93       	st	X, r24

		WDTCR |=Copy_u8SleepTime;//Set required prescaler
    11e2:	a1 e4       	ldi	r26, 0x41	; 65
    11e4:	b0 e0       	ldi	r27, 0x00	; 0
    11e6:	e1 e4       	ldi	r30, 0x41	; 65
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	90 81       	ld	r25, Z
    11ec:	8a 81       	ldd	r24, Y+2	; 0x02
    11ee:	89 2b       	or	r24, r25
    11f0:	8c 93       	st	X, r24

		Local_enuErrorState=ES_OK;
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	89 83       	std	Y+1, r24	; 0x01
    11f6:	02 c0       	rjmp	.+4      	; 0x11fc <WDT_enuSleep+0x3c>
	}
	else
	{
		Local_enuErrorState=ES_OUT_OF_RANGE;
    11f8:	83 e0       	ldi	r24, 0x03	; 3
    11fa:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    11fc:	89 81       	ldd	r24, Y+1	; 0x01
}
    11fe:	0f 90       	pop	r0
    1200:	0f 90       	pop	r0
    1202:	cf 91       	pop	r28
    1204:	df 91       	pop	r29
    1206:	08 95       	ret

00001208 <WDT_enuEnable>:

ES_t WDT_enuEnable(void)
{
    1208:	df 93       	push	r29
    120a:	cf 93       	push	r28
    120c:	0f 92       	push	r0
    120e:	cd b7       	in	r28, 0x3d	; 61
    1210:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
    1212:	19 82       	std	Y+1, r1	; 0x01

	WDTCR |=(1<<WDTCR_WDE);
    1214:	a1 e4       	ldi	r26, 0x41	; 65
    1216:	b0 e0       	ldi	r27, 0x00	; 0
    1218:	e1 e4       	ldi	r30, 0x41	; 65
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	80 81       	ld	r24, Z
    121e:	88 60       	ori	r24, 0x08	; 8
    1220:	8c 93       	st	X, r24
	Local_enuErrorState=ES_OK;
    1222:	81 e0       	ldi	r24, 0x01	; 1
    1224:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    1226:	89 81       	ldd	r24, Y+1	; 0x01
}
    1228:	0f 90       	pop	r0
    122a:	cf 91       	pop	r28
    122c:	df 91       	pop	r29
    122e:	08 95       	ret

00001230 <WDT_enuDisable>:

ES_t WDT_enuDisable(void)
{
    1230:	df 93       	push	r29
    1232:	cf 93       	push	r28
    1234:	0f 92       	push	r0
    1236:	cd b7       	in	r28, 0x3d	; 61
    1238:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
    123a:	19 82       	std	Y+1, r1	; 0x01

	WDTCR |=0b00011000;//In the same operation, write a logic one to WDTOE and WDE
    123c:	a1 e4       	ldi	r26, 0x41	; 65
    123e:	b0 e0       	ldi	r27, 0x00	; 0
    1240:	e1 e4       	ldi	r30, 0x41	; 65
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 81       	ld	r24, Z
    1246:	88 61       	ori	r24, 0x18	; 24
    1248:	8c 93       	st	X, r24

	WDTCR =0; //Within the next four clock cycles, write a logic 0 to WDE
    124a:	e1 e4       	ldi	r30, 0x41	; 65
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	10 82       	st	Z, r1
	Local_enuErrorState=ES_OK;
    1250:	81 e0       	ldi	r24, 0x01	; 1
    1252:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    1254:	89 81       	ldd	r24, Y+1	; 0x01
}
    1256:	0f 90       	pop	r0
    1258:	cf 91       	pop	r28
    125a:	df 91       	pop	r29
    125c:	08 95       	ret

0000125e <TIMER2_enuInit>:




ES_t TIMER2_enuInit(void)
{
    125e:	df 93       	push	r29
    1260:	cf 93       	push	r28
    1262:	0f 92       	push	r0
    1264:	cd b7       	in	r28, 0x3d	; 61
    1266:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
    1268:	19 82       	std	Y+1, r1	; 0x01
	TCCR2 &=~(1<<TCCR0_CS22);
	TCCR2 &=~(1<<TCCR0_CS21);
	TCCR2 |= (1<<TCCR0_CS20);
	Local_enuErrorState =ES_OK;
#elif TIMER2_PRESCALER == TIMER2_PRESCALER_8
	TCCR2 &=~(1<<TCCR2_CS22);
    126a:	a5 e4       	ldi	r26, 0x45	; 69
    126c:	b0 e0       	ldi	r27, 0x00	; 0
    126e:	e5 e4       	ldi	r30, 0x45	; 69
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	80 81       	ld	r24, Z
    1274:	8b 7f       	andi	r24, 0xFB	; 251
    1276:	8c 93       	st	X, r24
	TCCR2 |= (1<<TCCR2_CS21);
    1278:	a5 e4       	ldi	r26, 0x45	; 69
    127a:	b0 e0       	ldi	r27, 0x00	; 0
    127c:	e5 e4       	ldi	r30, 0x45	; 69
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	80 81       	ld	r24, Z
    1282:	82 60       	ori	r24, 0x02	; 2
    1284:	8c 93       	st	X, r24
	TCCR2 &=~(1<<TCCR2_CS20);
    1286:	a5 e4       	ldi	r26, 0x45	; 69
    1288:	b0 e0       	ldi	r27, 0x00	; 0
    128a:	e5 e4       	ldi	r30, 0x45	; 69
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 81       	ld	r24, Z
    1290:	8e 7f       	andi	r24, 0xFE	; 254
    1292:	8c 93       	st	X, r24
	Local_enuErrorState =ES_OK;
    1294:	81 e0       	ldi	r24, 0x01	; 1
    1296:	89 83       	std	Y+1, r24	; 0x01
	#else
	#error"Attention!!, you must disable OC2_PIN at overflow MODE...."
	#endif

#elif TIMER2_MODE == TIMER2_COMPARE_MATCH
		TCCR2 |= (1<<TCCR2_WGM21);
    1298:	a5 e4       	ldi	r26, 0x45	; 69
    129a:	b0 e0       	ldi	r27, 0x00	; 0
    129c:	e5 e4       	ldi	r30, 0x45	; 69
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	80 81       	ld	r24, Z
    12a2:	88 60       	ori	r24, 0x08	; 8
    12a4:	8c 93       	st	X, r24
		TCCR2 &=~(1<<TCCR2_WGM20);
    12a6:	a5 e4       	ldi	r26, 0x45	; 69
    12a8:	b0 e0       	ldi	r27, 0x00	; 0
    12aa:	e5 e4       	ldi	r30, 0x45	; 69
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	80 81       	ld	r24, Z
    12b0:	8f 7b       	andi	r24, 0xBF	; 191
    12b2:	8c 93       	st	X, r24
		#if TIMER2_OC2_PIN_STATE == TIMER2_CTC_DISCONNECT_OC2
			TCCR2 &=~(1<<TCCR2_COM20);
    12b4:	a5 e4       	ldi	r26, 0x45	; 69
    12b6:	b0 e0       	ldi	r27, 0x00	; 0
    12b8:	e5 e4       	ldi	r30, 0x45	; 69
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	80 81       	ld	r24, Z
    12be:	8f 7e       	andi	r24, 0xEF	; 239
    12c0:	8c 93       	st	X, r24
			TCCR2 &=~(1<<TCCR2_COM21);
    12c2:	a5 e4       	ldi	r26, 0x45	; 69
    12c4:	b0 e0       	ldi	r27, 0x00	; 0
    12c6:	e5 e4       	ldi	r30, 0x45	; 69
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	80 81       	ld	r24, Z
    12cc:	8f 7d       	andi	r24, 0xDF	; 223
    12ce:	8c 93       	st	X, r24
			Local_enuErrorState =ES_OK;
    12d0:	81 e0       	ldi	r24, 0x01	; 1
    12d2:	89 83       	std	Y+1, r24	; 0x01
#else
#error "Attention!!, your TIMER2_MODE Selection is Wrong...."
#endif


	return Local_enuErrorState;
    12d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    12d6:	0f 90       	pop	r0
    12d8:	cf 91       	pop	r28
    12da:	df 91       	pop	r29
    12dc:	08 95       	ret

000012de <TIMER2_enuCallBackOVF>:

ES_t TIMER2_enuCallBackOVF(void (*Copy_PfunCallBack)(void*) , void * Copy_PvidParameter)
{
    12de:	df 93       	push	r29
    12e0:	cf 93       	push	r28
    12e2:	00 d0       	rcall	.+0      	; 0x12e4 <TIMER2_enuCallBackOVF+0x6>
    12e4:	00 d0       	rcall	.+0      	; 0x12e6 <TIMER2_enuCallBackOVF+0x8>
    12e6:	0f 92       	push	r0
    12e8:	cd b7       	in	r28, 0x3d	; 61
    12ea:	de b7       	in	r29, 0x3e	; 62
    12ec:	9b 83       	std	Y+3, r25	; 0x03
    12ee:	8a 83       	std	Y+2, r24	; 0x02
    12f0:	7d 83       	std	Y+5, r23	; 0x05
    12f2:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState=ES_NOK;
    12f4:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_PfunCallBack!=NULL)
    12f6:	8a 81       	ldd	r24, Y+2	; 0x02
    12f8:	9b 81       	ldd	r25, Y+3	; 0x03
    12fa:	00 97       	sbiw	r24, 0x00	; 0
    12fc:	79 f0       	breq	.+30     	; 0x131c <TIMER2_enuCallBackOVF+0x3e>
	{
		TIMER2_APfunCallBack [TIMER2_OVF_CALLBACK] = Copy_PfunCallBack;
    12fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1300:	9b 81       	ldd	r25, Y+3	; 0x03
    1302:	90 93 3f 07 	sts	0x073F, r25
    1306:	80 93 3e 07 	sts	0x073E, r24
		TIMER2_APvidParameter[TIMER2_OVF_CALLBACK] = Copy_PvidParameter;
    130a:	8c 81       	ldd	r24, Y+4	; 0x04
    130c:	9d 81       	ldd	r25, Y+5	; 0x05
    130e:	90 93 45 07 	sts	0x0745, r25
    1312:	80 93 44 07 	sts	0x0744, r24
		Local_enuErrorState =ES_OK;
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	89 83       	std	Y+1, r24	; 0x01
    131a:	02 c0       	rjmp	.+4      	; 0x1320 <TIMER2_enuCallBackOVF+0x42>
	}
	else
	{
		Local_enuErrorState =ES_NULL_POINTER;
    131c:	82 e0       	ldi	r24, 0x02	; 2
    131e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1320:	89 81       	ldd	r24, Y+1	; 0x01
}
    1322:	0f 90       	pop	r0
    1324:	0f 90       	pop	r0
    1326:	0f 90       	pop	r0
    1328:	0f 90       	pop	r0
    132a:	0f 90       	pop	r0
    132c:	cf 91       	pop	r28
    132e:	df 91       	pop	r29
    1330:	08 95       	ret

00001332 <TIMER2_enuCallBackCTC>:

ES_t TIMER2_enuCallBackCTC(void (*Copy_PfunCallBack)(void*) , void * Copy_PvidParameter)
{
    1332:	df 93       	push	r29
    1334:	cf 93       	push	r28
    1336:	00 d0       	rcall	.+0      	; 0x1338 <TIMER2_enuCallBackCTC+0x6>
    1338:	00 d0       	rcall	.+0      	; 0x133a <TIMER2_enuCallBackCTC+0x8>
    133a:	0f 92       	push	r0
    133c:	cd b7       	in	r28, 0x3d	; 61
    133e:	de b7       	in	r29, 0x3e	; 62
    1340:	9b 83       	std	Y+3, r25	; 0x03
    1342:	8a 83       	std	Y+2, r24	; 0x02
    1344:	7d 83       	std	Y+5, r23	; 0x05
    1346:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState=ES_NOK;
    1348:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_PfunCallBack!=NULL)
    134a:	8a 81       	ldd	r24, Y+2	; 0x02
    134c:	9b 81       	ldd	r25, Y+3	; 0x03
    134e:	00 97       	sbiw	r24, 0x00	; 0
    1350:	79 f0       	breq	.+30     	; 0x1370 <TIMER2_enuCallBackCTC+0x3e>
	{

		TIMER2_APfunCallBack [TIMER2_CTC_CALLBACK] = Copy_PfunCallBack;
    1352:	8a 81       	ldd	r24, Y+2	; 0x02
    1354:	9b 81       	ldd	r25, Y+3	; 0x03
    1356:	90 93 41 07 	sts	0x0741, r25
    135a:	80 93 40 07 	sts	0x0740, r24
		TIMER2_APvidParameter[TIMER2_CTC_CALLBACK] = Copy_PvidParameter;
    135e:	8c 81       	ldd	r24, Y+4	; 0x04
    1360:	9d 81       	ldd	r25, Y+5	; 0x05
    1362:	90 93 47 07 	sts	0x0747, r25
    1366:	80 93 46 07 	sts	0x0746, r24
		Local_enuErrorState=ES_OK;
    136a:	81 e0       	ldi	r24, 0x01	; 1
    136c:	89 83       	std	Y+1, r24	; 0x01
    136e:	02 c0       	rjmp	.+4      	; 0x1374 <TIMER2_enuCallBackCTC+0x42>
	}
	else
	{
		Local_enuErrorState =ES_NULL_POINTER;
    1370:	82 e0       	ldi	r24, 0x02	; 2
    1372:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1374:	89 81       	ldd	r24, Y+1	; 0x01
}
    1376:	0f 90       	pop	r0
    1378:	0f 90       	pop	r0
    137a:	0f 90       	pop	r0
    137c:	0f 90       	pop	r0
    137e:	0f 90       	pop	r0
    1380:	cf 91       	pop	r28
    1382:	df 91       	pop	r29
    1384:	08 95       	ret

00001386 <TIMER2_enuSetPreload>:

ES_t TIMER2_enuSetPreload(u8 Copy_u8Preload)
{
    1386:	df 93       	push	r29
    1388:	cf 93       	push	r28
    138a:	00 d0       	rcall	.+0      	; 0x138c <TIMER2_enuSetPreload+0x6>
    138c:	cd b7       	in	r28, 0x3d	; 61
    138e:	de b7       	in	r29, 0x3e	; 62
    1390:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    1392:	19 82       	std	Y+1, r1	; 0x01

	TCNT2 =Copy_u8Preload;
    1394:	e4 e4       	ldi	r30, 0x44	; 68
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	8a 81       	ldd	r24, Y+2	; 0x02
    139a:	80 83       	st	Z, r24
	Local_enuErrorState=ES_OK;
    139c:	81 e0       	ldi	r24, 0x01	; 1
    139e:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    13a0:	89 81       	ldd	r24, Y+1	; 0x01
}
    13a2:	0f 90       	pop	r0
    13a4:	0f 90       	pop	r0
    13a6:	cf 91       	pop	r28
    13a8:	df 91       	pop	r29
    13aa:	08 95       	ret

000013ac <TIMER2_enuSetCTC>:

ES_t TIMER2_enuSetCTC(u8 Copy_u8OCR2Value)
{
    13ac:	df 93       	push	r29
    13ae:	cf 93       	push	r28
    13b0:	00 d0       	rcall	.+0      	; 0x13b2 <TIMER2_enuSetCTC+0x6>
    13b2:	cd b7       	in	r28, 0x3d	; 61
    13b4:	de b7       	in	r29, 0x3e	; 62
    13b6:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    13b8:	19 82       	std	Y+1, r1	; 0x01

	OCR2 =Copy_u8OCR2Value;
    13ba:	e3 e4       	ldi	r30, 0x43	; 67
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	8a 81       	ldd	r24, Y+2	; 0x02
    13c0:	80 83       	st	Z, r24
	Local_enuErrorState=ES_OK;
    13c2:	81 e0       	ldi	r24, 0x01	; 1
    13c4:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    13c6:	89 81       	ldd	r24, Y+1	; 0x01
}
    13c8:	0f 90       	pop	r0
    13ca:	0f 90       	pop	r0
    13cc:	cf 91       	pop	r28
    13ce:	df 91       	pop	r29
    13d0:	08 95       	ret

000013d2 <TIMER2_enuEnableOVFINTERRUPT>:

ES_t TIMER2_enuEnableOVFINTERRUPT(void)
{
    13d2:	df 93       	push	r29
    13d4:	cf 93       	push	r28
    13d6:	0f 92       	push	r0
    13d8:	cd b7       	in	r28, 0x3d	; 61
    13da:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
    13dc:	19 82       	std	Y+1, r1	; 0x01

	TIMSK |=(1<<TIMSK_TOIE2);
    13de:	a9 e5       	ldi	r26, 0x59	; 89
    13e0:	b0 e0       	ldi	r27, 0x00	; 0
    13e2:	e9 e5       	ldi	r30, 0x59	; 89
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	80 81       	ld	r24, Z
    13e8:	80 64       	ori	r24, 0x40	; 64
    13ea:	8c 93       	st	X, r24
	Local_enuErrorState=ES_OK;
    13ec:	81 e0       	ldi	r24, 0x01	; 1
    13ee:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    13f0:	89 81       	ldd	r24, Y+1	; 0x01
}
    13f2:	0f 90       	pop	r0
    13f4:	cf 91       	pop	r28
    13f6:	df 91       	pop	r29
    13f8:	08 95       	ret

000013fa <TIMER2_enuEnableCTCINTERRUPT>:

ES_t TIMER2_enuEnableCTCINTERRUPT(void)
{
    13fa:	df 93       	push	r29
    13fc:	cf 93       	push	r28
    13fe:	0f 92       	push	r0
    1400:	cd b7       	in	r28, 0x3d	; 61
    1402:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
    1404:	19 82       	std	Y+1, r1	; 0x01

	TIMSK |=(1<<TIMSK_OCIE2);
    1406:	a9 e5       	ldi	r26, 0x59	; 89
    1408:	b0 e0       	ldi	r27, 0x00	; 0
    140a:	e9 e5       	ldi	r30, 0x59	; 89
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	80 81       	ld	r24, Z
    1410:	80 68       	ori	r24, 0x80	; 128
    1412:	8c 93       	st	X, r24
	Local_enuErrorState=ES_OK;
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    1418:	89 81       	ldd	r24, Y+1	; 0x01
}
    141a:	0f 90       	pop	r0
    141c:	cf 91       	pop	r28
    141e:	df 91       	pop	r29
    1420:	08 95       	ret

00001422 <TIMER2_enuSetAsychDelay>:

ES_t TIMER2_enuSetAsychDelay(u32 Copy_u8Time ,void(*Copy_pfunApp)(void*),void* Parameter)
{
    1422:	df 93       	push	r29
    1424:	cf 93       	push	r28
    1426:	cd b7       	in	r28, 0x3d	; 61
    1428:	de b7       	in	r29, 0x3e	; 62
    142a:	66 97       	sbiw	r28, 0x16	; 22
    142c:	0f b6       	in	r0, 0x3f	; 63
    142e:	f8 94       	cli
    1430:	de bf       	out	0x3e, r29	; 62
    1432:	0f be       	out	0x3f, r0	; 63
    1434:	cd bf       	out	0x3d, r28	; 61
    1436:	6f 87       	std	Y+15, r22	; 0x0f
    1438:	78 8b       	std	Y+16, r23	; 0x10
    143a:	89 8b       	std	Y+17, r24	; 0x11
    143c:	9a 8b       	std	Y+18, r25	; 0x12
    143e:	5c 8b       	std	Y+20, r21	; 0x14
    1440:	4b 8b       	std	Y+19, r20	; 0x13
    1442:	3e 8b       	std	Y+22, r19	; 0x16
    1444:	2d 8b       	std	Y+21, r18	; 0x15
	ES_t Local_enuErrorState=ES_NOK;
    1446:	1e 86       	std	Y+14, r1	; 0x0e

	f32 Local_f32OVFTime=TIMER2_OVF_COUNTS *((f32)TIMER2_PRESCALER/TIMER2_F_CPU);
    1448:	8f e6       	ldi	r24, 0x6F	; 111
    144a:	92 e1       	ldi	r25, 0x12	; 18
    144c:	a3 e8       	ldi	r26, 0x83	; 131
    144e:	be e3       	ldi	r27, 0x3E	; 62
    1450:	8a 87       	std	Y+10, r24	; 0x0a
    1452:	9b 87       	std	Y+11, r25	; 0x0b
    1454:	ac 87       	std	Y+12, r26	; 0x0c
    1456:	bd 87       	std	Y+13, r27	; 0x0d

	f32 Local_f32NumOVF = (Copy_u8Time)/(Local_f32OVFTime);
    1458:	6f 85       	ldd	r22, Y+15	; 0x0f
    145a:	78 89       	ldd	r23, Y+16	; 0x10
    145c:	89 89       	ldd	r24, Y+17	; 0x11
    145e:	9a 89       	ldd	r25, Y+18	; 0x12
    1460:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    1464:	dc 01       	movw	r26, r24
    1466:	cb 01       	movw	r24, r22
    1468:	bc 01       	movw	r22, r24
    146a:	cd 01       	movw	r24, r26
    146c:	2a 85       	ldd	r18, Y+10	; 0x0a
    146e:	3b 85       	ldd	r19, Y+11	; 0x0b
    1470:	4c 85       	ldd	r20, Y+12	; 0x0c
    1472:	5d 85       	ldd	r21, Y+13	; 0x0d
    1474:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1478:	dc 01       	movw	r26, r24
    147a:	cb 01       	movw	r24, r22
    147c:	8e 83       	std	Y+6, r24	; 0x06
    147e:	9f 83       	std	Y+7, r25	; 0x07
    1480:	a8 87       	std	Y+8, r26	; 0x08
    1482:	b9 87       	std	Y+9, r27	; 0x09

	if((Local_f32NumOVF-(u32)Local_f32NumOVF) != 0.0)
    1484:	6e 81       	ldd	r22, Y+6	; 0x06
    1486:	7f 81       	ldd	r23, Y+7	; 0x07
    1488:	88 85       	ldd	r24, Y+8	; 0x08
    148a:	99 85       	ldd	r25, Y+9	; 0x09
    148c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1490:	dc 01       	movw	r26, r24
    1492:	cb 01       	movw	r24, r22
    1494:	bc 01       	movw	r22, r24
    1496:	cd 01       	movw	r24, r26
    1498:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    149c:	9b 01       	movw	r18, r22
    149e:	ac 01       	movw	r20, r24
    14a0:	6e 81       	ldd	r22, Y+6	; 0x06
    14a2:	7f 81       	ldd	r23, Y+7	; 0x07
    14a4:	88 85       	ldd	r24, Y+8	; 0x08
    14a6:	99 85       	ldd	r25, Y+9	; 0x09
    14a8:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    14ac:	dc 01       	movw	r26, r24
    14ae:	cb 01       	movw	r24, r22
    14b0:	bc 01       	movw	r22, r24
    14b2:	cd 01       	movw	r24, r26
    14b4:	20 e0       	ldi	r18, 0x00	; 0
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	40 e0       	ldi	r20, 0x00	; 0
    14ba:	50 e0       	ldi	r21, 0x00	; 0
    14bc:	0e 94 c5 03 	call	0x78a	; 0x78a <__nesf2>
    14c0:	88 23       	and	r24, r24
    14c2:	09 f4       	brne	.+2      	; 0x14c6 <TIMER2_enuSetAsychDelay+0xa4>
    14c4:	64 c0       	rjmp	.+200    	; 0x158e <TIMER2_enuSetAsychDelay+0x16c>
	{
		u32 Local_u32NumOVF =(u32)Local_f32NumOVF +1;
    14c6:	6e 81       	ldd	r22, Y+6	; 0x06
    14c8:	7f 81       	ldd	r23, Y+7	; 0x07
    14ca:	88 85       	ldd	r24, Y+8	; 0x08
    14cc:	99 85       	ldd	r25, Y+9	; 0x09
    14ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14d2:	dc 01       	movw	r26, r24
    14d4:	cb 01       	movw	r24, r22
    14d6:	01 96       	adiw	r24, 0x01	; 1
    14d8:	a1 1d       	adc	r26, r1
    14da:	b1 1d       	adc	r27, r1
    14dc:	8a 83       	std	Y+2, r24	; 0x02
    14de:	9b 83       	std	Y+3, r25	; 0x03
    14e0:	ac 83       	std	Y+4, r26	; 0x04
    14e2:	bd 83       	std	Y+5, r27	; 0x05
		Local_f32NumOVF = Local_f32NumOVF-(u32)Local_f32NumOVF;
    14e4:	6e 81       	ldd	r22, Y+6	; 0x06
    14e6:	7f 81       	ldd	r23, Y+7	; 0x07
    14e8:	88 85       	ldd	r24, Y+8	; 0x08
    14ea:	99 85       	ldd	r25, Y+9	; 0x09
    14ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14f0:	dc 01       	movw	r26, r24
    14f2:	cb 01       	movw	r24, r22
    14f4:	bc 01       	movw	r22, r24
    14f6:	cd 01       	movw	r24, r26
    14f8:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    14fc:	9b 01       	movw	r18, r22
    14fe:	ac 01       	movw	r20, r24
    1500:	6e 81       	ldd	r22, Y+6	; 0x06
    1502:	7f 81       	ldd	r23, Y+7	; 0x07
    1504:	88 85       	ldd	r24, Y+8	; 0x08
    1506:	99 85       	ldd	r25, Y+9	; 0x09
    1508:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    150c:	dc 01       	movw	r26, r24
    150e:	cb 01       	movw	r24, r22
    1510:	8e 83       	std	Y+6, r24	; 0x06
    1512:	9f 83       	std	Y+7, r25	; 0x07
    1514:	a8 87       	std	Y+8, r26	; 0x08
    1516:	b9 87       	std	Y+9, r27	; 0x09
		u8 Local_u8Preload =256 - (Local_f32NumOVF * 256);
    1518:	6e 81       	ldd	r22, Y+6	; 0x06
    151a:	7f 81       	ldd	r23, Y+7	; 0x07
    151c:	88 85       	ldd	r24, Y+8	; 0x08
    151e:	99 85       	ldd	r25, Y+9	; 0x09
    1520:	20 e0       	ldi	r18, 0x00	; 0
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	40 e8       	ldi	r20, 0x80	; 128
    1526:	53 ec       	ldi	r21, 0xC3	; 195
    1528:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    152c:	dc 01       	movw	r26, r24
    152e:	cb 01       	movw	r24, r22
    1530:	bc 01       	movw	r22, r24
    1532:	cd 01       	movw	r24, r26
    1534:	20 e0       	ldi	r18, 0x00	; 0
    1536:	30 e0       	ldi	r19, 0x00	; 0
    1538:	40 e8       	ldi	r20, 0x80	; 128
    153a:	53 e4       	ldi	r21, 0x43	; 67
    153c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1540:	dc 01       	movw	r26, r24
    1542:	cb 01       	movw	r24, r22
    1544:	bc 01       	movw	r22, r24
    1546:	cd 01       	movw	r24, r26
    1548:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    154c:	dc 01       	movw	r26, r24
    154e:	cb 01       	movw	r24, r22
    1550:	89 83       	std	Y+1, r24	; 0x01
		Timer2_NumOVF =Local_u32NumOVF;
    1552:	8a 81       	ldd	r24, Y+2	; 0x02
    1554:	9b 81       	ldd	r25, Y+3	; 0x03
    1556:	ac 81       	ldd	r26, Y+4	; 0x04
    1558:	bd 81       	ldd	r27, Y+5	; 0x05
    155a:	80 93 48 07 	sts	0x0748, r24
    155e:	90 93 49 07 	sts	0x0749, r25
    1562:	a0 93 4a 07 	sts	0x074A, r26
    1566:	b0 93 4b 07 	sts	0x074B, r27
		Timer2_Preload =Local_u8Preload;
    156a:	89 81       	ldd	r24, Y+1	; 0x01
    156c:	88 2f       	mov	r24, r24
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	a0 e0       	ldi	r26, 0x00	; 0
    1572:	b0 e0       	ldi	r27, 0x00	; 0
    1574:	80 93 4c 07 	sts	0x074C, r24
    1578:	90 93 4d 07 	sts	0x074D, r25
    157c:	a0 93 4e 07 	sts	0x074E, r26
    1580:	b0 93 4f 07 	sts	0x074F, r27
		TCNT2 =Local_u8Preload;
    1584:	e4 e4       	ldi	r30, 0x44	; 68
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	89 81       	ldd	r24, Y+1	; 0x01
    158a:	80 83       	st	Z, r24
    158c:	10 c0       	rjmp	.+32     	; 0x15ae <TIMER2_enuSetAsychDelay+0x18c>
	}
	else
	{
		Timer2_NumOVF =(u32)Local_f32NumOVF;
    158e:	6e 81       	ldd	r22, Y+6	; 0x06
    1590:	7f 81       	ldd	r23, Y+7	; 0x07
    1592:	88 85       	ldd	r24, Y+8	; 0x08
    1594:	99 85       	ldd	r25, Y+9	; 0x09
    1596:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    159a:	dc 01       	movw	r26, r24
    159c:	cb 01       	movw	r24, r22
    159e:	80 93 48 07 	sts	0x0748, r24
    15a2:	90 93 49 07 	sts	0x0749, r25
    15a6:	a0 93 4a 07 	sts	0x074A, r26
    15aa:	b0 93 4b 07 	sts	0x074B, r27
	}

	if(Copy_pfunApp!=NULL)
    15ae:	8b 89       	ldd	r24, Y+19	; 0x13
    15b0:	9c 89       	ldd	r25, Y+20	; 0x14
    15b2:	00 97       	sbiw	r24, 0x00	; 0
    15b4:	69 f0       	breq	.+26     	; 0x15d0 <TIMER2_enuSetAsychDelay+0x1ae>
	{
		TIMER2_APfunCallBack[TIMER2_OVF_CALLBACK]=Copy_pfunApp;
    15b6:	8b 89       	ldd	r24, Y+19	; 0x13
    15b8:	9c 89       	ldd	r25, Y+20	; 0x14
    15ba:	90 93 3f 07 	sts	0x073F, r25
    15be:	80 93 3e 07 	sts	0x073E, r24
		TIMER2_APvidParameter[TIMER2_OVF_CALLBACK]=Parameter;
    15c2:	8d 89       	ldd	r24, Y+21	; 0x15
    15c4:	9e 89       	ldd	r25, Y+22	; 0x16
    15c6:	90 93 45 07 	sts	0x0745, r25
    15ca:	80 93 44 07 	sts	0x0744, r24
    15ce:	02 c0       	rjmp	.+4      	; 0x15d4 <TIMER2_enuSetAsychDelay+0x1b2>
	}
	else
	{
		Local_enuErrorState=ES_NULL_POINTER;
    15d0:	82 e0       	ldi	r24, 0x02	; 2
    15d2:	8e 87       	std	Y+14, r24	; 0x0e
	}

	TIMSK |=(1<<TIMSK_TOIE2);
    15d4:	a9 e5       	ldi	r26, 0x59	; 89
    15d6:	b0 e0       	ldi	r27, 0x00	; 0
    15d8:	e9 e5       	ldi	r30, 0x59	; 89
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	80 81       	ld	r24, Z
    15de:	80 64       	ori	r24, 0x40	; 64
    15e0:	8c 93       	st	X, r24


	return Local_enuErrorState;
    15e2:	8e 85       	ldd	r24, Y+14	; 0x0e
}
    15e4:	66 96       	adiw	r28, 0x16	; 22
    15e6:	0f b6       	in	r0, 0x3f	; 63
    15e8:	f8 94       	cli
    15ea:	de bf       	out	0x3e, r29	; 62
    15ec:	0f be       	out	0x3f, r0	; 63
    15ee:	cd bf       	out	0x3d, r28	; 61
    15f0:	cf 91       	pop	r28
    15f2:	df 91       	pop	r29
    15f4:	08 95       	ret

000015f6 <__vector_5>:




ISR(VECT_TIMER2_OVF)
{
    15f6:	1f 92       	push	r1
    15f8:	0f 92       	push	r0
    15fa:	0f b6       	in	r0, 0x3f	; 63
    15fc:	0f 92       	push	r0
    15fe:	11 24       	eor	r1, r1
    1600:	2f 93       	push	r18
    1602:	3f 93       	push	r19
    1604:	4f 93       	push	r20
    1606:	5f 93       	push	r21
    1608:	6f 93       	push	r22
    160a:	7f 93       	push	r23
    160c:	8f 93       	push	r24
    160e:	9f 93       	push	r25
    1610:	af 93       	push	r26
    1612:	bf 93       	push	r27
    1614:	ef 93       	push	r30
    1616:	ff 93       	push	r31
    1618:	df 93       	push	r29
    161a:	cf 93       	push	r28
    161c:	cd b7       	in	r28, 0x3d	; 61
    161e:	de b7       	in	r29, 0x3e	; 62
	if (TIMER2_APfunCallBack[TIMER2_OVF_CALLBACK] != NULL)
    1620:	80 91 3e 07 	lds	r24, 0x073E
    1624:	90 91 3f 07 	lds	r25, 0x073F
    1628:	00 97       	sbiw	r24, 0x00	; 0
    162a:	49 f0       	breq	.+18     	; 0x163e <__vector_5+0x48>
	{
		TIMER2_APfunCallBack[TIMER2_OVF_CALLBACK](TIMER2_APvidParameter[TIMER2_OVF_CALLBACK]);
    162c:	e0 91 3e 07 	lds	r30, 0x073E
    1630:	f0 91 3f 07 	lds	r31, 0x073F
    1634:	80 91 44 07 	lds	r24, 0x0744
    1638:	90 91 45 07 	lds	r25, 0x0745
    163c:	09 95       	icall
	}

}
    163e:	cf 91       	pop	r28
    1640:	df 91       	pop	r29
    1642:	ff 91       	pop	r31
    1644:	ef 91       	pop	r30
    1646:	bf 91       	pop	r27
    1648:	af 91       	pop	r26
    164a:	9f 91       	pop	r25
    164c:	8f 91       	pop	r24
    164e:	7f 91       	pop	r23
    1650:	6f 91       	pop	r22
    1652:	5f 91       	pop	r21
    1654:	4f 91       	pop	r20
    1656:	3f 91       	pop	r19
    1658:	2f 91       	pop	r18
    165a:	0f 90       	pop	r0
    165c:	0f be       	out	0x3f, r0	; 63
    165e:	0f 90       	pop	r0
    1660:	1f 90       	pop	r1
    1662:	18 95       	reti

00001664 <__vector_4>:

ISR(VECT_TIMER2_CTC)
{
    1664:	1f 92       	push	r1
    1666:	0f 92       	push	r0
    1668:	0f b6       	in	r0, 0x3f	; 63
    166a:	0f 92       	push	r0
    166c:	11 24       	eor	r1, r1
    166e:	2f 93       	push	r18
    1670:	3f 93       	push	r19
    1672:	4f 93       	push	r20
    1674:	5f 93       	push	r21
    1676:	6f 93       	push	r22
    1678:	7f 93       	push	r23
    167a:	8f 93       	push	r24
    167c:	9f 93       	push	r25
    167e:	af 93       	push	r26
    1680:	bf 93       	push	r27
    1682:	ef 93       	push	r30
    1684:	ff 93       	push	r31
    1686:	df 93       	push	r29
    1688:	cf 93       	push	r28
    168a:	cd b7       	in	r28, 0x3d	; 61
    168c:	de b7       	in	r29, 0x3e	; 62

	if (TIMER2_APfunCallBack[TIMER2_CTC_CALLBACK] != NULL)
    168e:	80 91 40 07 	lds	r24, 0x0740
    1692:	90 91 41 07 	lds	r25, 0x0741
    1696:	00 97       	sbiw	r24, 0x00	; 0
    1698:	49 f0       	breq	.+18     	; 0x16ac <__vector_4+0x48>
	{
		TIMER2_APfunCallBack[TIMER2_CTC_CALLBACK](TIMER2_APvidParameter[TIMER2_CTC_CALLBACK]);
    169a:	e0 91 40 07 	lds	r30, 0x0740
    169e:	f0 91 41 07 	lds	r31, 0x0741
    16a2:	80 91 46 07 	lds	r24, 0x0746
    16a6:	90 91 47 07 	lds	r25, 0x0747
    16aa:	09 95       	icall
	}
}
    16ac:	cf 91       	pop	r28
    16ae:	df 91       	pop	r29
    16b0:	ff 91       	pop	r31
    16b2:	ef 91       	pop	r30
    16b4:	bf 91       	pop	r27
    16b6:	af 91       	pop	r26
    16b8:	9f 91       	pop	r25
    16ba:	8f 91       	pop	r24
    16bc:	7f 91       	pop	r23
    16be:	6f 91       	pop	r22
    16c0:	5f 91       	pop	r21
    16c2:	4f 91       	pop	r20
    16c4:	3f 91       	pop	r19
    16c6:	2f 91       	pop	r18
    16c8:	0f 90       	pop	r0
    16ca:	0f be       	out	0x3f, r0	; 63
    16cc:	0f 90       	pop	r0
    16ce:	1f 90       	pop	r1
    16d0:	18 95       	reti

000016d2 <TIMER1_enuInit>:
static void (*TIMER1_APfunCallBack [TIMER1_CALL_BACK])(void*)= {NULL,NULL,NULL};
static void  *TIMER1_APvidParameter[TIMER1_CALL_BACK]        = {NULL,NULL,NULL};


ES_t  TIMER1_enuInit(void)
{
    16d2:	df 93       	push	r29
    16d4:	cf 93       	push	r28
    16d6:	0f 92       	push	r0
    16d8:	cd b7       	in	r28, 0x3d	; 61
    16da:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
    16dc:	19 82       	std	Y+1, r1	; 0x01
		#else
		#error"Attention!!, OC1A_B_PIN state is wrong or the mode is not CTC...."
		#endif

#elif TIMER1_MODE == TIMER1_FAST_PWM_TOP_ICR1
	TCCR1A &=~(1<<TCCR1A_WGM10);
    16de:	af e4       	ldi	r26, 0x4F	; 79
    16e0:	b0 e0       	ldi	r27, 0x00	; 0
    16e2:	ef e4       	ldi	r30, 0x4F	; 79
    16e4:	f0 e0       	ldi	r31, 0x00	; 0
    16e6:	80 81       	ld	r24, Z
    16e8:	8e 7f       	andi	r24, 0xFE	; 254
    16ea:	8c 93       	st	X, r24
	TCCR1A |= (1<<TCCR1A_WGM11);
    16ec:	af e4       	ldi	r26, 0x4F	; 79
    16ee:	b0 e0       	ldi	r27, 0x00	; 0
    16f0:	ef e4       	ldi	r30, 0x4F	; 79
    16f2:	f0 e0       	ldi	r31, 0x00	; 0
    16f4:	80 81       	ld	r24, Z
    16f6:	82 60       	ori	r24, 0x02	; 2
    16f8:	8c 93       	st	X, r24
	TCCR1B |= (1<<TCCR1B_WGM12);
    16fa:	ae e4       	ldi	r26, 0x4E	; 78
    16fc:	b0 e0       	ldi	r27, 0x00	; 0
    16fe:	ee e4       	ldi	r30, 0x4E	; 78
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	80 81       	ld	r24, Z
    1704:	88 60       	ori	r24, 0x08	; 8
    1706:	8c 93       	st	X, r24
	TCCR1B |= (1<<TCCR1B_WGM13);
    1708:	ae e4       	ldi	r26, 0x4E	; 78
    170a:	b0 e0       	ldi	r27, 0x00	; 0
    170c:	ee e4       	ldi	r30, 0x4E	; 78
    170e:	f0 e0       	ldi	r31, 0x00	; 0
    1710:	80 81       	ld	r24, Z
    1712:	80 61       	ori	r24, 0x10	; 16
    1714:	8c 93       	st	X, r24
		#if TIMER1_OC1A_B_PIN_STATE == TIMER1_FAST_PWM_CLEAR_CTC_SET_BOTTOM
			TCCR1A &=~(1<<TCCR1A_COM1A0);
    1716:	af e4       	ldi	r26, 0x4F	; 79
    1718:	b0 e0       	ldi	r27, 0x00	; 0
    171a:	ef e4       	ldi	r30, 0x4F	; 79
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	80 81       	ld	r24, Z
    1720:	8f 7b       	andi	r24, 0xBF	; 191
    1722:	8c 93       	st	X, r24
			TCCR1A |= (1<<TCCR1A_COM1A1);
    1724:	af e4       	ldi	r26, 0x4F	; 79
    1726:	b0 e0       	ldi	r27, 0x00	; 0
    1728:	ef e4       	ldi	r30, 0x4F	; 79
    172a:	f0 e0       	ldi	r31, 0x00	; 0
    172c:	80 81       	ld	r24, Z
    172e:	80 68       	ori	r24, 0x80	; 128
    1730:	8c 93       	st	X, r24
			TCCR1A &=~(1<<TCCR1A_COM1B0);
    1732:	af e4       	ldi	r26, 0x4F	; 79
    1734:	b0 e0       	ldi	r27, 0x00	; 0
    1736:	ef e4       	ldi	r30, 0x4F	; 79
    1738:	f0 e0       	ldi	r31, 0x00	; 0
    173a:	80 81       	ld	r24, Z
    173c:	8f 7e       	andi	r24, 0xEF	; 239
    173e:	8c 93       	st	X, r24
			TCCR1A |= (1<<TCCR1A_COM1B1);
    1740:	af e4       	ldi	r26, 0x4F	; 79
    1742:	b0 e0       	ldi	r27, 0x00	; 0
    1744:	ef e4       	ldi	r30, 0x4F	; 79
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	80 81       	ld	r24, Z
    174a:	80 62       	ori	r24, 0x20	; 32
    174c:	8c 93       	st	X, r24
			Local_enuErrorState =ES_OK;
    174e:	81 e0       	ldi	r24, 0x01	; 1
    1750:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B &=~(1<<TCCR1B_CS12);
	TCCR1B &=~(1<<TCCR1B_CS11);
	TCCR1B |= (1<<TCCR1B_CS10);
	Local_enuErrorState =ES_OK;
#elif TIMER1_PRESCALER == TIMER1_PRESCALER_8
	TCCR1B &=~(1<<TCCR1B_CS12);
    1752:	ae e4       	ldi	r26, 0x4E	; 78
    1754:	b0 e0       	ldi	r27, 0x00	; 0
    1756:	ee e4       	ldi	r30, 0x4E	; 78
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	80 81       	ld	r24, Z
    175c:	8b 7f       	andi	r24, 0xFB	; 251
    175e:	8c 93       	st	X, r24
	TCCR1B |= (1<<TCCR1B_CS11);
    1760:	ae e4       	ldi	r26, 0x4E	; 78
    1762:	b0 e0       	ldi	r27, 0x00	; 0
    1764:	ee e4       	ldi	r30, 0x4E	; 78
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	80 81       	ld	r24, Z
    176a:	82 60       	ori	r24, 0x02	; 2
    176c:	8c 93       	st	X, r24
	TCCR1B &=~(1<<TCCR1B_CS10);
    176e:	ae e4       	ldi	r26, 0x4E	; 78
    1770:	b0 e0       	ldi	r27, 0x00	; 0
    1772:	ee e4       	ldi	r30, 0x4E	; 78
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	80 81       	ld	r24, Z
    1778:	8e 7f       	andi	r24, 0xFE	; 254
    177a:	8c 93       	st	X, r24
	Local_enuErrorState =ES_OK;
    177c:	81 e0       	ldi	r24, 0x01	; 1
    177e:	89 83       	std	Y+1, r24	; 0x01
#else
#error "Attention!!, your TIMER1_PRESCALER Selection is Wrong...."

#endif

	return Local_enuErrorState;
    1780:	89 81       	ldd	r24, Y+1	; 0x01
}
    1782:	0f 90       	pop	r0
    1784:	cf 91       	pop	r28
    1786:	df 91       	pop	r29
    1788:	08 95       	ret

0000178a <TIMER1_enuSetChannelACTC>:

ES_t  TIMER1_enuSetChannelACTC(u16 Copy_u16OCR1AValue)
{
    178a:	df 93       	push	r29
    178c:	cf 93       	push	r28
    178e:	00 d0       	rcall	.+0      	; 0x1790 <TIMER1_enuSetChannelACTC+0x6>
    1790:	0f 92       	push	r0
    1792:	cd b7       	in	r28, 0x3d	; 61
    1794:	de b7       	in	r29, 0x3e	; 62
    1796:	9b 83       	std	Y+3, r25	; 0x03
    1798:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    179a:	19 82       	std	Y+1, r1	; 0x01

	OCR1A=Copy_u16OCR1AValue;
    179c:	ea e4       	ldi	r30, 0x4A	; 74
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	8a 81       	ldd	r24, Y+2	; 0x02
    17a2:	9b 81       	ldd	r25, Y+3	; 0x03
    17a4:	91 83       	std	Z+1, r25	; 0x01
    17a6:	80 83       	st	Z, r24
	Local_enuErrorState=ES_OK;
    17a8:	81 e0       	ldi	r24, 0x01	; 1
    17aa:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    17ac:	89 81       	ldd	r24, Y+1	; 0x01
}
    17ae:	0f 90       	pop	r0
    17b0:	0f 90       	pop	r0
    17b2:	0f 90       	pop	r0
    17b4:	cf 91       	pop	r28
    17b6:	df 91       	pop	r29
    17b8:	08 95       	ret

000017ba <TIMER1_enuSetChannelBCTC>:
ES_t  TIMER1_enuSetChannelBCTC(u16 Copy_u16OCR1AValue)
{
    17ba:	df 93       	push	r29
    17bc:	cf 93       	push	r28
    17be:	00 d0       	rcall	.+0      	; 0x17c0 <TIMER1_enuSetChannelBCTC+0x6>
    17c0:	0f 92       	push	r0
    17c2:	cd b7       	in	r28, 0x3d	; 61
    17c4:	de b7       	in	r29, 0x3e	; 62
    17c6:	9b 83       	std	Y+3, r25	; 0x03
    17c8:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    17ca:	19 82       	std	Y+1, r1	; 0x01

	OCR1B=Copy_u16OCR1AValue;
    17cc:	e8 e4       	ldi	r30, 0x48	; 72
    17ce:	f0 e0       	ldi	r31, 0x00	; 0
    17d0:	8a 81       	ldd	r24, Y+2	; 0x02
    17d2:	9b 81       	ldd	r25, Y+3	; 0x03
    17d4:	91 83       	std	Z+1, r25	; 0x01
    17d6:	80 83       	st	Z, r24
	Local_enuErrorState=ES_OK;
    17d8:	81 e0       	ldi	r24, 0x01	; 1
    17da:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    17dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    17de:	0f 90       	pop	r0
    17e0:	0f 90       	pop	r0
    17e2:	0f 90       	pop	r0
    17e4:	cf 91       	pop	r28
    17e6:	df 91       	pop	r29
    17e8:	08 95       	ret

000017ea <TIMER1_enuSetICR>:

ES_t  TIMER1_enuSetICR(u16 Copy_u16ICR1Value)
{
    17ea:	df 93       	push	r29
    17ec:	cf 93       	push	r28
    17ee:	00 d0       	rcall	.+0      	; 0x17f0 <TIMER1_enuSetICR+0x6>
    17f0:	0f 92       	push	r0
    17f2:	cd b7       	in	r28, 0x3d	; 61
    17f4:	de b7       	in	r29, 0x3e	; 62
    17f6:	9b 83       	std	Y+3, r25	; 0x03
    17f8:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    17fa:	19 82       	std	Y+1, r1	; 0x01

	ICR1=Copy_u16ICR1Value;
    17fc:	e6 e4       	ldi	r30, 0x46	; 70
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	8a 81       	ldd	r24, Y+2	; 0x02
    1802:	9b 81       	ldd	r25, Y+3	; 0x03
    1804:	91 83       	std	Z+1, r25	; 0x01
    1806:	80 83       	st	Z, r24
	Local_enuErrorState=ES_OK;
    1808:	81 e0       	ldi	r24, 0x01	; 1
    180a:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    180c:	89 81       	ldd	r24, Y+1	; 0x01
}
    180e:	0f 90       	pop	r0
    1810:	0f 90       	pop	r0
    1812:	0f 90       	pop	r0
    1814:	cf 91       	pop	r28
    1816:	df 91       	pop	r29
    1818:	08 95       	ret

0000181a <TIMER1_enuSetTimerValue>:

ES_t TIMER1_enuSetTimerValue(u16 Copy_u16Value)
{
    181a:	df 93       	push	r29
    181c:	cf 93       	push	r28
    181e:	00 d0       	rcall	.+0      	; 0x1820 <TIMER1_enuSetTimerValue+0x6>
    1820:	0f 92       	push	r0
    1822:	cd b7       	in	r28, 0x3d	; 61
    1824:	de b7       	in	r29, 0x3e	; 62
    1826:	9b 83       	std	Y+3, r25	; 0x03
    1828:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    182a:	19 82       	std	Y+1, r1	; 0x01

	TCNT1=Copy_u16Value;
    182c:	ec e4       	ldi	r30, 0x4C	; 76
    182e:	f0 e0       	ldi	r31, 0x00	; 0
    1830:	8a 81       	ldd	r24, Y+2	; 0x02
    1832:	9b 81       	ldd	r25, Y+3	; 0x03
    1834:	91 83       	std	Z+1, r25	; 0x01
    1836:	80 83       	st	Z, r24
	Local_enuErrorState=ES_OK;
    1838:	81 e0       	ldi	r24, 0x01	; 1
    183a:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    183c:	89 81       	ldd	r24, Y+1	; 0x01
}
    183e:	0f 90       	pop	r0
    1840:	0f 90       	pop	r0
    1842:	0f 90       	pop	r0
    1844:	cf 91       	pop	r28
    1846:	df 91       	pop	r29
    1848:	08 95       	ret

0000184a <TIMER1_enuReadTimerValue>:

ES_t  TIMER1_enuReadTimerValue(u16 *Copy_pu16Value)
{
    184a:	df 93       	push	r29
    184c:	cf 93       	push	r28
    184e:	00 d0       	rcall	.+0      	; 0x1850 <TIMER1_enuReadTimerValue+0x6>
    1850:	0f 92       	push	r0
    1852:	cd b7       	in	r28, 0x3d	; 61
    1854:	de b7       	in	r29, 0x3e	; 62
    1856:	9b 83       	std	Y+3, r25	; 0x03
    1858:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    185a:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pu16Value!=NULL)
    185c:	8a 81       	ldd	r24, Y+2	; 0x02
    185e:	9b 81       	ldd	r25, Y+3	; 0x03
    1860:	00 97       	sbiw	r24, 0x00	; 0
    1862:	59 f0       	breq	.+22     	; 0x187a <TIMER1_enuReadTimerValue+0x30>
	{
		*Copy_pu16Value=TCNT1;
    1864:	ec e4       	ldi	r30, 0x4C	; 76
    1866:	f0 e0       	ldi	r31, 0x00	; 0
    1868:	80 81       	ld	r24, Z
    186a:	91 81       	ldd	r25, Z+1	; 0x01
    186c:	ea 81       	ldd	r30, Y+2	; 0x02
    186e:	fb 81       	ldd	r31, Y+3	; 0x03
    1870:	91 83       	std	Z+1, r25	; 0x01
    1872:	80 83       	st	Z, r24
		Local_enuErrorState=ES_OK;
    1874:	81 e0       	ldi	r24, 0x01	; 1
    1876:	89 83       	std	Y+1, r24	; 0x01
    1878:	02 c0       	rjmp	.+4      	; 0x187e <TIMER1_enuReadTimerValue+0x34>
	}
	else
	{
		Local_enuErrorState=ES_NULL_POINTER;
    187a:	82 e0       	ldi	r24, 0x02	; 2
    187c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    187e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1880:	0f 90       	pop	r0
    1882:	0f 90       	pop	r0
    1884:	0f 90       	pop	r0
    1886:	cf 91       	pop	r28
    1888:	df 91       	pop	r29
    188a:	08 95       	ret

0000188c <TIMER1_enuCallBack>:


ES_t TIMER1_enuCallBack(void (*Copy_PfunCallBack)(void*) , void * Copy_PvidParameter,u8 Copy_CallBackSource)
{
    188c:	df 93       	push	r29
    188e:	cf 93       	push	r28
    1890:	cd b7       	in	r28, 0x3d	; 61
    1892:	de b7       	in	r29, 0x3e	; 62
    1894:	28 97       	sbiw	r28, 0x08	; 8
    1896:	0f b6       	in	r0, 0x3f	; 63
    1898:	f8 94       	cli
    189a:	de bf       	out	0x3e, r29	; 62
    189c:	0f be       	out	0x3f, r0	; 63
    189e:	cd bf       	out	0x3d, r28	; 61
    18a0:	9b 83       	std	Y+3, r25	; 0x03
    18a2:	8a 83       	std	Y+2, r24	; 0x02
    18a4:	7d 83       	std	Y+5, r23	; 0x05
    18a6:	6c 83       	std	Y+4, r22	; 0x04
    18a8:	4e 83       	std	Y+6, r20	; 0x06
	ES_t Local_enuErrorState=ES_NOK;
    18aa:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_PfunCallBack!=NULL)
    18ac:	8a 81       	ldd	r24, Y+2	; 0x02
    18ae:	9b 81       	ldd	r25, Y+3	; 0x03
    18b0:	00 97       	sbiw	r24, 0x00	; 0
    18b2:	09 f4       	brne	.+2      	; 0x18b6 <TIMER1_enuCallBack+0x2a>
    18b4:	44 c0       	rjmp	.+136    	; 0x193e <TIMER1_enuCallBack+0xb2>
	{
		switch(Copy_CallBackSource)
    18b6:	8e 81       	ldd	r24, Y+6	; 0x06
    18b8:	28 2f       	mov	r18, r24
    18ba:	30 e0       	ldi	r19, 0x00	; 0
    18bc:	38 87       	std	Y+8, r19	; 0x08
    18be:	2f 83       	std	Y+7, r18	; 0x07
    18c0:	8f 81       	ldd	r24, Y+7	; 0x07
    18c2:	98 85       	ldd	r25, Y+8	; 0x08
    18c4:	81 30       	cpi	r24, 0x01	; 1
    18c6:	91 05       	cpc	r25, r1
    18c8:	41 f1       	breq	.+80     	; 0x191a <TIMER1_enuCallBack+0x8e>
    18ca:	2f 81       	ldd	r18, Y+7	; 0x07
    18cc:	38 85       	ldd	r19, Y+8	; 0x08
    18ce:	22 30       	cpi	r18, 0x02	; 2
    18d0:	31 05       	cpc	r19, r1
    18d2:	29 f0       	breq	.+10     	; 0x18de <TIMER1_enuCallBack+0x52>
    18d4:	8f 81       	ldd	r24, Y+7	; 0x07
    18d6:	98 85       	ldd	r25, Y+8	; 0x08
    18d8:	00 97       	sbiw	r24, 0x00	; 0
    18da:	81 f0       	breq	.+32     	; 0x18fc <TIMER1_enuCallBack+0x70>
    18dc:	2d c0       	rjmp	.+90     	; 0x1938 <TIMER1_enuCallBack+0xac>
		{
		case TIMER1_OVF_CALLBACK:
			TIMER1_APfunCallBack[TIMER1_OVF_CALLBACK]=Copy_PfunCallBack;
    18de:	8a 81       	ldd	r24, Y+2	; 0x02
    18e0:	9b 81       	ldd	r25, Y+3	; 0x03
    18e2:	90 93 55 07 	sts	0x0755, r25
    18e6:	80 93 54 07 	sts	0x0754, r24
			TIMER1_APvidParameter[TIMER1_OVF_CALLBACK]=Copy_PvidParameter;
    18ea:	8c 81       	ldd	r24, Y+4	; 0x04
    18ec:	9d 81       	ldd	r25, Y+5	; 0x05
    18ee:	90 93 5b 07 	sts	0x075B, r25
    18f2:	80 93 5a 07 	sts	0x075A, r24
			Local_enuErrorState=ES_OK;
    18f6:	81 e0       	ldi	r24, 0x01	; 1
    18f8:	89 83       	std	Y+1, r24	; 0x01
    18fa:	23 c0       	rjmp	.+70     	; 0x1942 <TIMER1_enuCallBack+0xb6>
			break;
		case TIMER1_COMA_CALLBACK:
			TIMER1_APfunCallBack[TIMER1_COMA_CALLBACK]=Copy_PfunCallBack;
    18fc:	8a 81       	ldd	r24, Y+2	; 0x02
    18fe:	9b 81       	ldd	r25, Y+3	; 0x03
    1900:	90 93 51 07 	sts	0x0751, r25
    1904:	80 93 50 07 	sts	0x0750, r24
			TIMER1_APvidParameter[TIMER1_COMA_CALLBACK]=Copy_PvidParameter;
    1908:	8c 81       	ldd	r24, Y+4	; 0x04
    190a:	9d 81       	ldd	r25, Y+5	; 0x05
    190c:	90 93 57 07 	sts	0x0757, r25
    1910:	80 93 56 07 	sts	0x0756, r24
			Local_enuErrorState=ES_OK;
    1914:	81 e0       	ldi	r24, 0x01	; 1
    1916:	89 83       	std	Y+1, r24	; 0x01
    1918:	14 c0       	rjmp	.+40     	; 0x1942 <TIMER1_enuCallBack+0xb6>
			break;
		case TIMER1_COMB_CALLBACK:
			TIMER1_APfunCallBack[TIMER1_COMB_CALLBACK]=Copy_PfunCallBack;
    191a:	8a 81       	ldd	r24, Y+2	; 0x02
    191c:	9b 81       	ldd	r25, Y+3	; 0x03
    191e:	90 93 53 07 	sts	0x0753, r25
    1922:	80 93 52 07 	sts	0x0752, r24
			TIMER1_APvidParameter[TIMER1_COMB_CALLBACK]=Copy_PvidParameter;
    1926:	8c 81       	ldd	r24, Y+4	; 0x04
    1928:	9d 81       	ldd	r25, Y+5	; 0x05
    192a:	90 93 59 07 	sts	0x0759, r25
    192e:	80 93 58 07 	sts	0x0758, r24
			Local_enuErrorState=ES_OK;
    1932:	81 e0       	ldi	r24, 0x01	; 1
    1934:	89 83       	std	Y+1, r24	; 0x01
    1936:	05 c0       	rjmp	.+10     	; 0x1942 <TIMER1_enuCallBack+0xb6>
			break;
		default:
			Local_enuErrorState=ES_OUT_OF_RANGE;
    1938:	83 e0       	ldi	r24, 0x03	; 3
    193a:	89 83       	std	Y+1, r24	; 0x01
    193c:	02 c0       	rjmp	.+4      	; 0x1942 <TIMER1_enuCallBack+0xb6>
			break;
		}
	}
	else
	{
		Local_enuErrorState =ES_NULL_POINTER;
    193e:	82 e0       	ldi	r24, 0x02	; 2
    1940:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1942:	89 81       	ldd	r24, Y+1	; 0x01
}
    1944:	28 96       	adiw	r28, 0x08	; 8
    1946:	0f b6       	in	r0, 0x3f	; 63
    1948:	f8 94       	cli
    194a:	de bf       	out	0x3e, r29	; 62
    194c:	0f be       	out	0x3f, r0	; 63
    194e:	cd bf       	out	0x3d, r28	; 61
    1950:	cf 91       	pop	r28
    1952:	df 91       	pop	r29
    1954:	08 95       	ret

00001956 <__vector_7>:




ISR(VECT_TIMER1_COMA)
{
    1956:	1f 92       	push	r1
    1958:	0f 92       	push	r0
    195a:	0f b6       	in	r0, 0x3f	; 63
    195c:	0f 92       	push	r0
    195e:	11 24       	eor	r1, r1
    1960:	2f 93       	push	r18
    1962:	3f 93       	push	r19
    1964:	4f 93       	push	r20
    1966:	5f 93       	push	r21
    1968:	6f 93       	push	r22
    196a:	7f 93       	push	r23
    196c:	8f 93       	push	r24
    196e:	9f 93       	push	r25
    1970:	af 93       	push	r26
    1972:	bf 93       	push	r27
    1974:	ef 93       	push	r30
    1976:	ff 93       	push	r31
    1978:	df 93       	push	r29
    197a:	cf 93       	push	r28
    197c:	cd b7       	in	r28, 0x3d	; 61
    197e:	de b7       	in	r29, 0x3e	; 62
	if(TIMER1_APfunCallBack[TIMER1_COMA_CALLBACK]!=NULL)
    1980:	80 91 50 07 	lds	r24, 0x0750
    1984:	90 91 51 07 	lds	r25, 0x0751
    1988:	00 97       	sbiw	r24, 0x00	; 0
    198a:	49 f0       	breq	.+18     	; 0x199e <__vector_7+0x48>
	{
		TIMER1_APfunCallBack[TIMER1_COMA_CALLBACK](TIMER1_APvidParameter[TIMER1_COMA_CALLBACK]);
    198c:	e0 91 50 07 	lds	r30, 0x0750
    1990:	f0 91 51 07 	lds	r31, 0x0751
    1994:	80 91 56 07 	lds	r24, 0x0756
    1998:	90 91 57 07 	lds	r25, 0x0757
    199c:	09 95       	icall
	}
}
    199e:	cf 91       	pop	r28
    19a0:	df 91       	pop	r29
    19a2:	ff 91       	pop	r31
    19a4:	ef 91       	pop	r30
    19a6:	bf 91       	pop	r27
    19a8:	af 91       	pop	r26
    19aa:	9f 91       	pop	r25
    19ac:	8f 91       	pop	r24
    19ae:	7f 91       	pop	r23
    19b0:	6f 91       	pop	r22
    19b2:	5f 91       	pop	r21
    19b4:	4f 91       	pop	r20
    19b6:	3f 91       	pop	r19
    19b8:	2f 91       	pop	r18
    19ba:	0f 90       	pop	r0
    19bc:	0f be       	out	0x3f, r0	; 63
    19be:	0f 90       	pop	r0
    19c0:	1f 90       	pop	r1
    19c2:	18 95       	reti

000019c4 <__vector_8>:

ISR(VECT_TIMER1_COMB)
{
    19c4:	1f 92       	push	r1
    19c6:	0f 92       	push	r0
    19c8:	0f b6       	in	r0, 0x3f	; 63
    19ca:	0f 92       	push	r0
    19cc:	11 24       	eor	r1, r1
    19ce:	2f 93       	push	r18
    19d0:	3f 93       	push	r19
    19d2:	4f 93       	push	r20
    19d4:	5f 93       	push	r21
    19d6:	6f 93       	push	r22
    19d8:	7f 93       	push	r23
    19da:	8f 93       	push	r24
    19dc:	9f 93       	push	r25
    19de:	af 93       	push	r26
    19e0:	bf 93       	push	r27
    19e2:	ef 93       	push	r30
    19e4:	ff 93       	push	r31
    19e6:	df 93       	push	r29
    19e8:	cf 93       	push	r28
    19ea:	cd b7       	in	r28, 0x3d	; 61
    19ec:	de b7       	in	r29, 0x3e	; 62
	if(TIMER1_APfunCallBack[TIMER1_COMB_CALLBACK]!=NULL)
    19ee:	80 91 52 07 	lds	r24, 0x0752
    19f2:	90 91 53 07 	lds	r25, 0x0753
    19f6:	00 97       	sbiw	r24, 0x00	; 0
    19f8:	49 f0       	breq	.+18     	; 0x1a0c <__vector_8+0x48>
	{
		TIMER1_APfunCallBack[TIMER1_COMB_CALLBACK](TIMER1_APvidParameter[TIMER1_COMB_CALLBACK]);
    19fa:	e0 91 52 07 	lds	r30, 0x0752
    19fe:	f0 91 53 07 	lds	r31, 0x0753
    1a02:	80 91 58 07 	lds	r24, 0x0758
    1a06:	90 91 59 07 	lds	r25, 0x0759
    1a0a:	09 95       	icall
	}
}
    1a0c:	cf 91       	pop	r28
    1a0e:	df 91       	pop	r29
    1a10:	ff 91       	pop	r31
    1a12:	ef 91       	pop	r30
    1a14:	bf 91       	pop	r27
    1a16:	af 91       	pop	r26
    1a18:	9f 91       	pop	r25
    1a1a:	8f 91       	pop	r24
    1a1c:	7f 91       	pop	r23
    1a1e:	6f 91       	pop	r22
    1a20:	5f 91       	pop	r21
    1a22:	4f 91       	pop	r20
    1a24:	3f 91       	pop	r19
    1a26:	2f 91       	pop	r18
    1a28:	0f 90       	pop	r0
    1a2a:	0f be       	out	0x3f, r0	; 63
    1a2c:	0f 90       	pop	r0
    1a2e:	1f 90       	pop	r1
    1a30:	18 95       	reti

00001a32 <__vector_9>:

ISR(VECT_TIMER1_OVF)
{
    1a32:	1f 92       	push	r1
    1a34:	0f 92       	push	r0
    1a36:	0f b6       	in	r0, 0x3f	; 63
    1a38:	0f 92       	push	r0
    1a3a:	11 24       	eor	r1, r1
    1a3c:	2f 93       	push	r18
    1a3e:	3f 93       	push	r19
    1a40:	4f 93       	push	r20
    1a42:	5f 93       	push	r21
    1a44:	6f 93       	push	r22
    1a46:	7f 93       	push	r23
    1a48:	8f 93       	push	r24
    1a4a:	9f 93       	push	r25
    1a4c:	af 93       	push	r26
    1a4e:	bf 93       	push	r27
    1a50:	ef 93       	push	r30
    1a52:	ff 93       	push	r31
    1a54:	df 93       	push	r29
    1a56:	cf 93       	push	r28
    1a58:	cd b7       	in	r28, 0x3d	; 61
    1a5a:	de b7       	in	r29, 0x3e	; 62
	if(TIMER1_APfunCallBack[TIMER1_OVF_CALLBACK]!=NULL)
    1a5c:	80 91 54 07 	lds	r24, 0x0754
    1a60:	90 91 55 07 	lds	r25, 0x0755
    1a64:	00 97       	sbiw	r24, 0x00	; 0
    1a66:	49 f0       	breq	.+18     	; 0x1a7a <__vector_9+0x48>
	{
		TIMER1_APfunCallBack[TIMER1_OVF_CALLBACK](TIMER1_APvidParameter[TIMER1_OVF_CALLBACK]);
    1a68:	e0 91 54 07 	lds	r30, 0x0754
    1a6c:	f0 91 55 07 	lds	r31, 0x0755
    1a70:	80 91 5a 07 	lds	r24, 0x075A
    1a74:	90 91 5b 07 	lds	r25, 0x075B
    1a78:	09 95       	icall
	}
}
    1a7a:	cf 91       	pop	r28
    1a7c:	df 91       	pop	r29
    1a7e:	ff 91       	pop	r31
    1a80:	ef 91       	pop	r30
    1a82:	bf 91       	pop	r27
    1a84:	af 91       	pop	r26
    1a86:	9f 91       	pop	r25
    1a88:	8f 91       	pop	r24
    1a8a:	7f 91       	pop	r23
    1a8c:	6f 91       	pop	r22
    1a8e:	5f 91       	pop	r21
    1a90:	4f 91       	pop	r20
    1a92:	3f 91       	pop	r19
    1a94:	2f 91       	pop	r18
    1a96:	0f 90       	pop	r0
    1a98:	0f be       	out	0x3f, r0	; 63
    1a9a:	0f 90       	pop	r0
    1a9c:	1f 90       	pop	r1
    1a9e:	18 95       	reti

00001aa0 <TIMER0_enuInit>:

static u32 Timer0_NumOVF=0;
static u32 Timer0_Preload=0;

ES_t TIMER0_enuInit(void)
{
    1aa0:	df 93       	push	r29
    1aa2:	cf 93       	push	r28
    1aa4:	0f 92       	push	r0
    1aa6:	cd b7       	in	r28, 0x3d	; 61
    1aa8:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
    1aaa:	19 82       	std	Y+1, r1	; 0x01
	TCCR0 &=~(1<<TCCR0_CS02);
	TCCR0 &=~(1<<TCCR0_CS01);
	TCCR0 |= (1<<TCCR0_CS00);
	Local_enuErrorState =ES_OK;
#elif TIMER0_PRESCALER == TIMER0_PRESCALER_8
	TCCR0 &=~(1<<TCCR0_CS02);
    1aac:	a3 e5       	ldi	r26, 0x53	; 83
    1aae:	b0 e0       	ldi	r27, 0x00	; 0
    1ab0:	e3 e5       	ldi	r30, 0x53	; 83
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	80 81       	ld	r24, Z
    1ab6:	8b 7f       	andi	r24, 0xFB	; 251
    1ab8:	8c 93       	st	X, r24
	TCCR0 |= (1<<TCCR0_CS01);
    1aba:	a3 e5       	ldi	r26, 0x53	; 83
    1abc:	b0 e0       	ldi	r27, 0x00	; 0
    1abe:	e3 e5       	ldi	r30, 0x53	; 83
    1ac0:	f0 e0       	ldi	r31, 0x00	; 0
    1ac2:	80 81       	ld	r24, Z
    1ac4:	82 60       	ori	r24, 0x02	; 2
    1ac6:	8c 93       	st	X, r24
	TCCR0 &=~(1<<TCCR0_CS00);
    1ac8:	a3 e5       	ldi	r26, 0x53	; 83
    1aca:	b0 e0       	ldi	r27, 0x00	; 0
    1acc:	e3 e5       	ldi	r30, 0x53	; 83
    1ace:	f0 e0       	ldi	r31, 0x00	; 0
    1ad0:	80 81       	ld	r24, Z
    1ad2:	8e 7f       	andi	r24, 0xFE	; 254
    1ad4:	8c 93       	st	X, r24
	Local_enuErrorState =ES_OK;
    1ad6:	81 e0       	ldi	r24, 0x01	; 1
    1ad8:	89 83       	std	Y+1, r24	; 0x01
		#else
		#error"Attention!!, OC0_PIN state is wrong or the mode is not Phase Correct PWM...."
		#endif

#elif TIMER0_MODE == TIMER0_FAST_PWM
		TCCR0 |=(1<<TCCR0_WGM01);
    1ada:	a3 e5       	ldi	r26, 0x53	; 83
    1adc:	b0 e0       	ldi	r27, 0x00	; 0
    1ade:	e3 e5       	ldi	r30, 0x53	; 83
    1ae0:	f0 e0       	ldi	r31, 0x00	; 0
    1ae2:	80 81       	ld	r24, Z
    1ae4:	88 60       	ori	r24, 0x08	; 8
    1ae6:	8c 93       	st	X, r24
		TCCR0 |=(1<<TCCR0_WGM00);
    1ae8:	a3 e5       	ldi	r26, 0x53	; 83
    1aea:	b0 e0       	ldi	r27, 0x00	; 0
    1aec:	e3 e5       	ldi	r30, 0x53	; 83
    1aee:	f0 e0       	ldi	r31, 0x00	; 0
    1af0:	80 81       	ld	r24, Z
    1af2:	80 64       	ori	r24, 0x40	; 64
    1af4:	8c 93       	st	X, r24
		#if TIMER0_OC0_PIN_STATE == TIMER0_FAST_PMW_CLEAR_CTC_SET_TOP
			TCCR0 &=~(1<<TCCR0_COM00);
    1af6:	a3 e5       	ldi	r26, 0x53	; 83
    1af8:	b0 e0       	ldi	r27, 0x00	; 0
    1afa:	e3 e5       	ldi	r30, 0x53	; 83
    1afc:	f0 e0       	ldi	r31, 0x00	; 0
    1afe:	80 81       	ld	r24, Z
    1b00:	8f 7e       	andi	r24, 0xEF	; 239
    1b02:	8c 93       	st	X, r24
			TCCR0 |=(1<<TCCR0_COM01);
    1b04:	a3 e5       	ldi	r26, 0x53	; 83
    1b06:	b0 e0       	ldi	r27, 0x00	; 0
    1b08:	e3 e5       	ldi	r30, 0x53	; 83
    1b0a:	f0 e0       	ldi	r31, 0x00	; 0
    1b0c:	80 81       	ld	r24, Z
    1b0e:	80 62       	ori	r24, 0x20	; 32
    1b10:	8c 93       	st	X, r24
			Local_enuErrorState =ES_OK;
    1b12:	81 e0       	ldi	r24, 0x01	; 1
    1b14:	89 83       	std	Y+1, r24	; 0x01
		#endif
#else
#error "Attention!!, your TIMER0_MODE Selection is Wrong...."
#endif

	return Local_enuErrorState;
    1b16:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b18:	0f 90       	pop	r0
    1b1a:	cf 91       	pop	r28
    1b1c:	df 91       	pop	r29
    1b1e:	08 95       	ret

00001b20 <TIMER0_enuSetCTC>:

ES_t  TIMER0_enuSetCTC(u8 Copy_u8OCR0Value)
{
    1b20:	df 93       	push	r29
    1b22:	cf 93       	push	r28
    1b24:	00 d0       	rcall	.+0      	; 0x1b26 <TIMER0_enuSetCTC+0x6>
    1b26:	cd b7       	in	r28, 0x3d	; 61
    1b28:	de b7       	in	r29, 0x3e	; 62
    1b2a:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    1b2c:	19 82       	std	Y+1, r1	; 0x01

	OCR0 =Copy_u8OCR0Value;
    1b2e:	ec e5       	ldi	r30, 0x5C	; 92
    1b30:	f0 e0       	ldi	r31, 0x00	; 0
    1b32:	8a 81       	ldd	r24, Y+2	; 0x02
    1b34:	80 83       	st	Z, r24
	Local_enuErrorState=ES_OK;
    1b36:	81 e0       	ldi	r24, 0x01	; 1
    1b38:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    1b3a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b3c:	0f 90       	pop	r0
    1b3e:	0f 90       	pop	r0
    1b40:	cf 91       	pop	r28
    1b42:	df 91       	pop	r29
    1b44:	08 95       	ret

00001b46 <TIMER0_enuSetPreload>:

ES_t  TIMER0_enuSetPreload(u8 Copy_u8Preload)
{
    1b46:	df 93       	push	r29
    1b48:	cf 93       	push	r28
    1b4a:	00 d0       	rcall	.+0      	; 0x1b4c <TIMER0_enuSetPreload+0x6>
    1b4c:	cd b7       	in	r28, 0x3d	; 61
    1b4e:	de b7       	in	r29, 0x3e	; 62
    1b50:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    1b52:	19 82       	std	Y+1, r1	; 0x01

	TCNT0 =Copy_u8Preload;
    1b54:	e2 e5       	ldi	r30, 0x52	; 82
    1b56:	f0 e0       	ldi	r31, 0x00	; 0
    1b58:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5a:	80 83       	st	Z, r24
	Local_enuErrorState=ES_OK;
    1b5c:	81 e0       	ldi	r24, 0x01	; 1
    1b5e:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    1b60:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b62:	0f 90       	pop	r0
    1b64:	0f 90       	pop	r0
    1b66:	cf 91       	pop	r28
    1b68:	df 91       	pop	r29
    1b6a:	08 95       	ret

00001b6c <TIMER0_enuDelayMilliSecond>:


ES_t TIMER0_enuDelayMilliSecond(void (*Copy_PfunCallBack)(void*) , void * Copy_PvidParameter , u32 Copy_u32StartDelay , u32 Copy_u32StopTime)
{
    1b6c:	ef 92       	push	r14
    1b6e:	ff 92       	push	r15
    1b70:	0f 93       	push	r16
    1b72:	1f 93       	push	r17
    1b74:	df 93       	push	r29
    1b76:	cf 93       	push	r28
    1b78:	cd b7       	in	r28, 0x3d	; 61
    1b7a:	de b7       	in	r29, 0x3e	; 62
    1b7c:	2d 97       	sbiw	r28, 0x0d	; 13
    1b7e:	0f b6       	in	r0, 0x3f	; 63
    1b80:	f8 94       	cli
    1b82:	de bf       	out	0x3e, r29	; 62
    1b84:	0f be       	out	0x3f, r0	; 63
    1b86:	cd bf       	out	0x3d, r28	; 61
    1b88:	9b 83       	std	Y+3, r25	; 0x03
    1b8a:	8a 83       	std	Y+2, r24	; 0x02
    1b8c:	7d 83       	std	Y+5, r23	; 0x05
    1b8e:	6c 83       	std	Y+4, r22	; 0x04
    1b90:	2e 83       	std	Y+6, r18	; 0x06
    1b92:	3f 83       	std	Y+7, r19	; 0x07
    1b94:	48 87       	std	Y+8, r20	; 0x08
    1b96:	59 87       	std	Y+9, r21	; 0x09
    1b98:	ea 86       	std	Y+10, r14	; 0x0a
    1b9a:	fb 86       	std	Y+11, r15	; 0x0b
    1b9c:	0c 87       	std	Y+12, r16	; 0x0c
    1b9e:	1d 87       	std	Y+13, r17	; 0x0d
	ES_t Local_enuErrorState=ES_NOK;
    1ba0:	19 82       	std	Y+1, r1	; 0x01
#else
#warning "Attention!!, Delay function has no effect at this mode or prescaler...."
#warning "To take high accuracy on Delay function, Choose OVF mode and one or eight prescaler OR CTC mode , 64 prescaler and OCR0 = 124"
#endif

	return Local_enuErrorState;
    1ba2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ba4:	2d 96       	adiw	r28, 0x0d	; 13
    1ba6:	0f b6       	in	r0, 0x3f	; 63
    1ba8:	f8 94       	cli
    1baa:	de bf       	out	0x3e, r29	; 62
    1bac:	0f be       	out	0x3f, r0	; 63
    1bae:	cd bf       	out	0x3d, r28	; 61
    1bb0:	cf 91       	pop	r28
    1bb2:	df 91       	pop	r29
    1bb4:	1f 91       	pop	r17
    1bb6:	0f 91       	pop	r16
    1bb8:	ff 90       	pop	r15
    1bba:	ef 90       	pop	r14
    1bbc:	08 95       	ret

00001bbe <TIMER0_enuGeneratePWM>:

ES_t TIMER0_enuGeneratePWM(u8 Copy_u8DutyCycle)
{
    1bbe:	df 93       	push	r29
    1bc0:	cf 93       	push	r28
    1bc2:	00 d0       	rcall	.+0      	; 0x1bc4 <TIMER0_enuGeneratePWM+0x6>
    1bc4:	0f 92       	push	r0
    1bc6:	cd b7       	in	r28, 0x3d	; 61
    1bc8:	de b7       	in	r29, 0x3e	; 62
    1bca:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState=ES_NOK;
    1bcc:	1a 82       	std	Y+2, r1	; 0x02
	#else
	#error"Attention!!, OC0_PIN state is wrong or the mode is not Phase Correct PWM...."
	#endif
#elif TIMER0_MODE == TIMER0_FAST_PWM
	#if   TIMER0_OC0_PIN_STATE == TIMER0_FAST_PMW_CLEAR_CTC_SET_TOP
		u8 Local_u8OCR_Value = ((f32)Copy_u8DutyCycle/TIMER0_PERCENTAGE_RATIO) * (f32)TIMER0_OVF_COUNTS;
    1bce:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd0:	88 2f       	mov	r24, r24
    1bd2:	90 e0       	ldi	r25, 0x00	; 0
    1bd4:	a0 e0       	ldi	r26, 0x00	; 0
    1bd6:	b0 e0       	ldi	r27, 0x00	; 0
    1bd8:	bc 01       	movw	r22, r24
    1bda:	cd 01       	movw	r24, r26
    1bdc:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    1be0:	dc 01       	movw	r26, r24
    1be2:	cb 01       	movw	r24, r22
    1be4:	bc 01       	movw	r22, r24
    1be6:	cd 01       	movw	r24, r26
    1be8:	20 e0       	ldi	r18, 0x00	; 0
    1bea:	30 e0       	ldi	r19, 0x00	; 0
    1bec:	48 ec       	ldi	r20, 0xC8	; 200
    1bee:	52 e4       	ldi	r21, 0x42	; 66
    1bf0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1bf4:	dc 01       	movw	r26, r24
    1bf6:	cb 01       	movw	r24, r22
    1bf8:	bc 01       	movw	r22, r24
    1bfa:	cd 01       	movw	r24, r26
    1bfc:	20 e0       	ldi	r18, 0x00	; 0
    1bfe:	30 e0       	ldi	r19, 0x00	; 0
    1c00:	40 e8       	ldi	r20, 0x80	; 128
    1c02:	53 e4       	ldi	r21, 0x43	; 67
    1c04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c08:	dc 01       	movw	r26, r24
    1c0a:	cb 01       	movw	r24, r22
    1c0c:	bc 01       	movw	r22, r24
    1c0e:	cd 01       	movw	r24, r26
    1c10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c14:	dc 01       	movw	r26, r24
    1c16:	cb 01       	movw	r24, r22
    1c18:	89 83       	std	Y+1, r24	; 0x01
		TIMER0_enuSetCTC(--Local_u8OCR_Value);
    1c1a:	89 81       	ldd	r24, Y+1	; 0x01
    1c1c:	81 50       	subi	r24, 0x01	; 1
    1c1e:	89 83       	std	Y+1, r24	; 0x01
    1c20:	89 81       	ldd	r24, Y+1	; 0x01
    1c22:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <TIMER0_enuSetCTC>
		Local_enuErrorState = ES_OK;
    1c26:	81 e0       	ldi	r24, 0x01	; 1
    1c28:	8a 83       	std	Y+2, r24	; 0x02
	#endif
#else
#warning "Attention!!, Generation of PWM doesn't work at this mode...."
#endif

	return Local_enuErrorState;
    1c2a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1c2c:	0f 90       	pop	r0
    1c2e:	0f 90       	pop	r0
    1c30:	0f 90       	pop	r0
    1c32:	cf 91       	pop	r28
    1c34:	df 91       	pop	r29
    1c36:	08 95       	ret

00001c38 <TIMER0_enuCallBackOVF>:

ES_t TIMER0_enuCallBackOVF(void (*Copy_PfunCallBack)(void*) , void * Copy_PvidParameter)
{
    1c38:	df 93       	push	r29
    1c3a:	cf 93       	push	r28
    1c3c:	00 d0       	rcall	.+0      	; 0x1c3e <TIMER0_enuCallBackOVF+0x6>
    1c3e:	00 d0       	rcall	.+0      	; 0x1c40 <TIMER0_enuCallBackOVF+0x8>
    1c40:	0f 92       	push	r0
    1c42:	cd b7       	in	r28, 0x3d	; 61
    1c44:	de b7       	in	r29, 0x3e	; 62
    1c46:	9b 83       	std	Y+3, r25	; 0x03
    1c48:	8a 83       	std	Y+2, r24	; 0x02
    1c4a:	7d 83       	std	Y+5, r23	; 0x05
    1c4c:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState=ES_NOK;
    1c4e:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_PfunCallBack!=NULL)
    1c50:	8a 81       	ldd	r24, Y+2	; 0x02
    1c52:	9b 81       	ldd	r25, Y+3	; 0x03
    1c54:	00 97       	sbiw	r24, 0x00	; 0
    1c56:	79 f0       	breq	.+30     	; 0x1c76 <TIMER0_enuCallBackOVF+0x3e>
	{
		TIMER0_APfunCallBack [TIMER0_OVF_CALLBACK] = Copy_PfunCallBack;
    1c58:	8a 81       	ldd	r24, Y+2	; 0x02
    1c5a:	9b 81       	ldd	r25, Y+3	; 0x03
    1c5c:	90 93 6d 07 	sts	0x076D, r25
    1c60:	80 93 6c 07 	sts	0x076C, r24
		TIMER0_APvidParameter[TIMER0_OVF_CALLBACK] = Copy_PvidParameter;
    1c64:	8c 81       	ldd	r24, Y+4	; 0x04
    1c66:	9d 81       	ldd	r25, Y+5	; 0x05
    1c68:	90 93 73 07 	sts	0x0773, r25
    1c6c:	80 93 72 07 	sts	0x0772, r24
		Local_enuErrorState =ES_OK;
    1c70:	81 e0       	ldi	r24, 0x01	; 1
    1c72:	89 83       	std	Y+1, r24	; 0x01
    1c74:	02 c0       	rjmp	.+4      	; 0x1c7a <TIMER0_enuCallBackOVF+0x42>
	}
	else
	{
		Local_enuErrorState =ES_NULL_POINTER;
    1c76:	82 e0       	ldi	r24, 0x02	; 2
    1c78:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1c7a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c7c:	0f 90       	pop	r0
    1c7e:	0f 90       	pop	r0
    1c80:	0f 90       	pop	r0
    1c82:	0f 90       	pop	r0
    1c84:	0f 90       	pop	r0
    1c86:	cf 91       	pop	r28
    1c88:	df 91       	pop	r29
    1c8a:	08 95       	ret

00001c8c <TIMER0_enuCallBackCTC>:

ES_t TIMER0_enuCallBackCTC(void (*Copy_PfunCallBack)(void*) , void * Copy_PvidParameter)
{
    1c8c:	df 93       	push	r29
    1c8e:	cf 93       	push	r28
    1c90:	00 d0       	rcall	.+0      	; 0x1c92 <TIMER0_enuCallBackCTC+0x6>
    1c92:	00 d0       	rcall	.+0      	; 0x1c94 <TIMER0_enuCallBackCTC+0x8>
    1c94:	0f 92       	push	r0
    1c96:	cd b7       	in	r28, 0x3d	; 61
    1c98:	de b7       	in	r29, 0x3e	; 62
    1c9a:	9b 83       	std	Y+3, r25	; 0x03
    1c9c:	8a 83       	std	Y+2, r24	; 0x02
    1c9e:	7d 83       	std	Y+5, r23	; 0x05
    1ca0:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState=ES_NOK;
    1ca2:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_PfunCallBack!=NULL)
    1ca4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ca8:	00 97       	sbiw	r24, 0x00	; 0
    1caa:	79 f0       	breq	.+30     	; 0x1cca <TIMER0_enuCallBackCTC+0x3e>
	{

		TIMER0_APfunCallBack [TIMER0_CTC_CALLBACK] = Copy_PfunCallBack;
    1cac:	8a 81       	ldd	r24, Y+2	; 0x02
    1cae:	9b 81       	ldd	r25, Y+3	; 0x03
    1cb0:	90 93 6f 07 	sts	0x076F, r25
    1cb4:	80 93 6e 07 	sts	0x076E, r24
		TIMER0_APvidParameter[TIMER0_CTC_CALLBACK] = Copy_PvidParameter;
    1cb8:	8c 81       	ldd	r24, Y+4	; 0x04
    1cba:	9d 81       	ldd	r25, Y+5	; 0x05
    1cbc:	90 93 75 07 	sts	0x0775, r25
    1cc0:	80 93 74 07 	sts	0x0774, r24
		Local_enuErrorState=ES_OK;
    1cc4:	81 e0       	ldi	r24, 0x01	; 1
    1cc6:	89 83       	std	Y+1, r24	; 0x01
    1cc8:	02 c0       	rjmp	.+4      	; 0x1cce <TIMER0_enuCallBackCTC+0x42>
	}
	else
	{
		Local_enuErrorState =ES_NULL_POINTER;
    1cca:	82 e0       	ldi	r24, 0x02	; 2
    1ccc:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1cce:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cd0:	0f 90       	pop	r0
    1cd2:	0f 90       	pop	r0
    1cd4:	0f 90       	pop	r0
    1cd6:	0f 90       	pop	r0
    1cd8:	0f 90       	pop	r0
    1cda:	cf 91       	pop	r28
    1cdc:	df 91       	pop	r29
    1cde:	08 95       	ret

00001ce0 <TIMER0_enuEnableOVFINTERRUPT>:




ES_t TIMER0_enuEnableOVFINTERRUPT(void)
{
    1ce0:	df 93       	push	r29
    1ce2:	cf 93       	push	r28
    1ce4:	0f 92       	push	r0
    1ce6:	cd b7       	in	r28, 0x3d	; 61
    1ce8:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
    1cea:	19 82       	std	Y+1, r1	; 0x01

	TIMSK |=(1<<TIMSK_TOIE0);
    1cec:	a9 e5       	ldi	r26, 0x59	; 89
    1cee:	b0 e0       	ldi	r27, 0x00	; 0
    1cf0:	e9 e5       	ldi	r30, 0x59	; 89
    1cf2:	f0 e0       	ldi	r31, 0x00	; 0
    1cf4:	80 81       	ld	r24, Z
    1cf6:	81 60       	ori	r24, 0x01	; 1
    1cf8:	8c 93       	st	X, r24
	Local_enuErrorState=ES_OK;
    1cfa:	81 e0       	ldi	r24, 0x01	; 1
    1cfc:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    1cfe:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d00:	0f 90       	pop	r0
    1d02:	cf 91       	pop	r28
    1d04:	df 91       	pop	r29
    1d06:	08 95       	ret

00001d08 <TIMER0_enuEnableCTCINTERRUPT>:

ES_t TIMER0_enuEnableCTCINTERRUPT(void)
{
    1d08:	df 93       	push	r29
    1d0a:	cf 93       	push	r28
    1d0c:	0f 92       	push	r0
    1d0e:	cd b7       	in	r28, 0x3d	; 61
    1d10:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
    1d12:	19 82       	std	Y+1, r1	; 0x01

	TIMSK |=(1<<TIMSK_OCIE0);
    1d14:	a9 e5       	ldi	r26, 0x59	; 89
    1d16:	b0 e0       	ldi	r27, 0x00	; 0
    1d18:	e9 e5       	ldi	r30, 0x59	; 89
    1d1a:	f0 e0       	ldi	r31, 0x00	; 0
    1d1c:	80 81       	ld	r24, Z
    1d1e:	82 60       	ori	r24, 0x02	; 2
    1d20:	8c 93       	st	X, r24
	Local_enuErrorState=ES_OK;
    1d22:	81 e0       	ldi	r24, 0x01	; 1
    1d24:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    1d26:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d28:	0f 90       	pop	r0
    1d2a:	cf 91       	pop	r28
    1d2c:	df 91       	pop	r29
    1d2e:	08 95       	ret

00001d30 <TIMER0_enuSetAsychDelay>:


ES_t TIMER0_enuSetAsychDelay(u32 Copy_u8Time ,void(*Copy_pfunApp)(void*),void* Parameter)
{
    1d30:	df 93       	push	r29
    1d32:	cf 93       	push	r28
    1d34:	cd b7       	in	r28, 0x3d	; 61
    1d36:	de b7       	in	r29, 0x3e	; 62
    1d38:	66 97       	sbiw	r28, 0x16	; 22
    1d3a:	0f b6       	in	r0, 0x3f	; 63
    1d3c:	f8 94       	cli
    1d3e:	de bf       	out	0x3e, r29	; 62
    1d40:	0f be       	out	0x3f, r0	; 63
    1d42:	cd bf       	out	0x3d, r28	; 61
    1d44:	6f 87       	std	Y+15, r22	; 0x0f
    1d46:	78 8b       	std	Y+16, r23	; 0x10
    1d48:	89 8b       	std	Y+17, r24	; 0x11
    1d4a:	9a 8b       	std	Y+18, r25	; 0x12
    1d4c:	5c 8b       	std	Y+20, r21	; 0x14
    1d4e:	4b 8b       	std	Y+19, r20	; 0x13
    1d50:	3e 8b       	std	Y+22, r19	; 0x16
    1d52:	2d 8b       	std	Y+21, r18	; 0x15
	ES_t Local_enuErrorState=ES_NOK;
    1d54:	1e 86       	std	Y+14, r1	; 0x0e

	f32 Local_f32OVFTime=256 *((f32)TIMER0_PRESCALER/TIMER0_F_CPU);
    1d56:	8f e6       	ldi	r24, 0x6F	; 111
    1d58:	92 e1       	ldi	r25, 0x12	; 18
    1d5a:	a3 e8       	ldi	r26, 0x83	; 131
    1d5c:	be e3       	ldi	r27, 0x3E	; 62
    1d5e:	8a 87       	std	Y+10, r24	; 0x0a
    1d60:	9b 87       	std	Y+11, r25	; 0x0b
    1d62:	ac 87       	std	Y+12, r26	; 0x0c
    1d64:	bd 87       	std	Y+13, r27	; 0x0d

	f32 Local_f32NumOVF = (Copy_u8Time)/(Local_f32OVFTime);
    1d66:	6f 85       	ldd	r22, Y+15	; 0x0f
    1d68:	78 89       	ldd	r23, Y+16	; 0x10
    1d6a:	89 89       	ldd	r24, Y+17	; 0x11
    1d6c:	9a 89       	ldd	r25, Y+18	; 0x12
    1d6e:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    1d72:	dc 01       	movw	r26, r24
    1d74:	cb 01       	movw	r24, r22
    1d76:	bc 01       	movw	r22, r24
    1d78:	cd 01       	movw	r24, r26
    1d7a:	2a 85       	ldd	r18, Y+10	; 0x0a
    1d7c:	3b 85       	ldd	r19, Y+11	; 0x0b
    1d7e:	4c 85       	ldd	r20, Y+12	; 0x0c
    1d80:	5d 85       	ldd	r21, Y+13	; 0x0d
    1d82:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1d86:	dc 01       	movw	r26, r24
    1d88:	cb 01       	movw	r24, r22
    1d8a:	8e 83       	std	Y+6, r24	; 0x06
    1d8c:	9f 83       	std	Y+7, r25	; 0x07
    1d8e:	a8 87       	std	Y+8, r26	; 0x08
    1d90:	b9 87       	std	Y+9, r27	; 0x09

	if((Local_f32NumOVF-(u32)Local_f32NumOVF) != 0.0)
    1d92:	6e 81       	ldd	r22, Y+6	; 0x06
    1d94:	7f 81       	ldd	r23, Y+7	; 0x07
    1d96:	88 85       	ldd	r24, Y+8	; 0x08
    1d98:	99 85       	ldd	r25, Y+9	; 0x09
    1d9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d9e:	dc 01       	movw	r26, r24
    1da0:	cb 01       	movw	r24, r22
    1da2:	bc 01       	movw	r22, r24
    1da4:	cd 01       	movw	r24, r26
    1da6:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    1daa:	9b 01       	movw	r18, r22
    1dac:	ac 01       	movw	r20, r24
    1dae:	6e 81       	ldd	r22, Y+6	; 0x06
    1db0:	7f 81       	ldd	r23, Y+7	; 0x07
    1db2:	88 85       	ldd	r24, Y+8	; 0x08
    1db4:	99 85       	ldd	r25, Y+9	; 0x09
    1db6:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1dba:	dc 01       	movw	r26, r24
    1dbc:	cb 01       	movw	r24, r22
    1dbe:	bc 01       	movw	r22, r24
    1dc0:	cd 01       	movw	r24, r26
    1dc2:	20 e0       	ldi	r18, 0x00	; 0
    1dc4:	30 e0       	ldi	r19, 0x00	; 0
    1dc6:	40 e0       	ldi	r20, 0x00	; 0
    1dc8:	50 e0       	ldi	r21, 0x00	; 0
    1dca:	0e 94 c5 03 	call	0x78a	; 0x78a <__nesf2>
    1dce:	88 23       	and	r24, r24
    1dd0:	09 f4       	brne	.+2      	; 0x1dd4 <TIMER0_enuSetAsychDelay+0xa4>
    1dd2:	64 c0       	rjmp	.+200    	; 0x1e9c <TIMER0_enuSetAsychDelay+0x16c>
	{
		u32 Local_u32NumOVF =(u32)Local_f32NumOVF +1;
    1dd4:	6e 81       	ldd	r22, Y+6	; 0x06
    1dd6:	7f 81       	ldd	r23, Y+7	; 0x07
    1dd8:	88 85       	ldd	r24, Y+8	; 0x08
    1dda:	99 85       	ldd	r25, Y+9	; 0x09
    1ddc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1de0:	dc 01       	movw	r26, r24
    1de2:	cb 01       	movw	r24, r22
    1de4:	01 96       	adiw	r24, 0x01	; 1
    1de6:	a1 1d       	adc	r26, r1
    1de8:	b1 1d       	adc	r27, r1
    1dea:	8a 83       	std	Y+2, r24	; 0x02
    1dec:	9b 83       	std	Y+3, r25	; 0x03
    1dee:	ac 83       	std	Y+4, r26	; 0x04
    1df0:	bd 83       	std	Y+5, r27	; 0x05
		Local_f32NumOVF = Local_f32NumOVF-(u32)Local_f32NumOVF;
    1df2:	6e 81       	ldd	r22, Y+6	; 0x06
    1df4:	7f 81       	ldd	r23, Y+7	; 0x07
    1df6:	88 85       	ldd	r24, Y+8	; 0x08
    1df8:	99 85       	ldd	r25, Y+9	; 0x09
    1dfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dfe:	dc 01       	movw	r26, r24
    1e00:	cb 01       	movw	r24, r22
    1e02:	bc 01       	movw	r22, r24
    1e04:	cd 01       	movw	r24, r26
    1e06:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    1e0a:	9b 01       	movw	r18, r22
    1e0c:	ac 01       	movw	r20, r24
    1e0e:	6e 81       	ldd	r22, Y+6	; 0x06
    1e10:	7f 81       	ldd	r23, Y+7	; 0x07
    1e12:	88 85       	ldd	r24, Y+8	; 0x08
    1e14:	99 85       	ldd	r25, Y+9	; 0x09
    1e16:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1e1a:	dc 01       	movw	r26, r24
    1e1c:	cb 01       	movw	r24, r22
    1e1e:	8e 83       	std	Y+6, r24	; 0x06
    1e20:	9f 83       	std	Y+7, r25	; 0x07
    1e22:	a8 87       	std	Y+8, r26	; 0x08
    1e24:	b9 87       	std	Y+9, r27	; 0x09
		u8 Local_u8Preload =256 - (Local_f32NumOVF * 256);
    1e26:	6e 81       	ldd	r22, Y+6	; 0x06
    1e28:	7f 81       	ldd	r23, Y+7	; 0x07
    1e2a:	88 85       	ldd	r24, Y+8	; 0x08
    1e2c:	99 85       	ldd	r25, Y+9	; 0x09
    1e2e:	20 e0       	ldi	r18, 0x00	; 0
    1e30:	30 e0       	ldi	r19, 0x00	; 0
    1e32:	40 e8       	ldi	r20, 0x80	; 128
    1e34:	53 ec       	ldi	r21, 0xC3	; 195
    1e36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e3a:	dc 01       	movw	r26, r24
    1e3c:	cb 01       	movw	r24, r22
    1e3e:	bc 01       	movw	r22, r24
    1e40:	cd 01       	movw	r24, r26
    1e42:	20 e0       	ldi	r18, 0x00	; 0
    1e44:	30 e0       	ldi	r19, 0x00	; 0
    1e46:	40 e8       	ldi	r20, 0x80	; 128
    1e48:	53 e4       	ldi	r21, 0x43	; 67
    1e4a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1e4e:	dc 01       	movw	r26, r24
    1e50:	cb 01       	movw	r24, r22
    1e52:	bc 01       	movw	r22, r24
    1e54:	cd 01       	movw	r24, r26
    1e56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e5a:	dc 01       	movw	r26, r24
    1e5c:	cb 01       	movw	r24, r22
    1e5e:	89 83       	std	Y+1, r24	; 0x01
		Timer0_NumOVF =Local_u32NumOVF;
    1e60:	8a 81       	ldd	r24, Y+2	; 0x02
    1e62:	9b 81       	ldd	r25, Y+3	; 0x03
    1e64:	ac 81       	ldd	r26, Y+4	; 0x04
    1e66:	bd 81       	ldd	r27, Y+5	; 0x05
    1e68:	80 93 76 07 	sts	0x0776, r24
    1e6c:	90 93 77 07 	sts	0x0777, r25
    1e70:	a0 93 78 07 	sts	0x0778, r26
    1e74:	b0 93 79 07 	sts	0x0779, r27
		Timer0_Preload =Local_u8Preload;
    1e78:	89 81       	ldd	r24, Y+1	; 0x01
    1e7a:	88 2f       	mov	r24, r24
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	a0 e0       	ldi	r26, 0x00	; 0
    1e80:	b0 e0       	ldi	r27, 0x00	; 0
    1e82:	80 93 7a 07 	sts	0x077A, r24
    1e86:	90 93 7b 07 	sts	0x077B, r25
    1e8a:	a0 93 7c 07 	sts	0x077C, r26
    1e8e:	b0 93 7d 07 	sts	0x077D, r27
		TCNT0 =Local_u8Preload;
    1e92:	e2 e5       	ldi	r30, 0x52	; 82
    1e94:	f0 e0       	ldi	r31, 0x00	; 0
    1e96:	89 81       	ldd	r24, Y+1	; 0x01
    1e98:	80 83       	st	Z, r24
    1e9a:	10 c0       	rjmp	.+32     	; 0x1ebc <TIMER0_enuSetAsychDelay+0x18c>
	}
	else
	{
		Timer0_NumOVF =(u32)Local_f32NumOVF;
    1e9c:	6e 81       	ldd	r22, Y+6	; 0x06
    1e9e:	7f 81       	ldd	r23, Y+7	; 0x07
    1ea0:	88 85       	ldd	r24, Y+8	; 0x08
    1ea2:	99 85       	ldd	r25, Y+9	; 0x09
    1ea4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ea8:	dc 01       	movw	r26, r24
    1eaa:	cb 01       	movw	r24, r22
    1eac:	80 93 76 07 	sts	0x0776, r24
    1eb0:	90 93 77 07 	sts	0x0777, r25
    1eb4:	a0 93 78 07 	sts	0x0778, r26
    1eb8:	b0 93 79 07 	sts	0x0779, r27
	}

	if(Copy_pfunApp!=NULL)
    1ebc:	8b 89       	ldd	r24, Y+19	; 0x13
    1ebe:	9c 89       	ldd	r25, Y+20	; 0x14
    1ec0:	00 97       	sbiw	r24, 0x00	; 0
    1ec2:	69 f0       	breq	.+26     	; 0x1ede <TIMER0_enuSetAsychDelay+0x1ae>
	{
		TIMER0_APfunCallBack[TIMER0_OVF_CALLBACK]=Copy_pfunApp;
    1ec4:	8b 89       	ldd	r24, Y+19	; 0x13
    1ec6:	9c 89       	ldd	r25, Y+20	; 0x14
    1ec8:	90 93 6d 07 	sts	0x076D, r25
    1ecc:	80 93 6c 07 	sts	0x076C, r24
		TIMER0_APvidParameter[TIMER0_OVF_CALLBACK]=Parameter;
    1ed0:	8d 89       	ldd	r24, Y+21	; 0x15
    1ed2:	9e 89       	ldd	r25, Y+22	; 0x16
    1ed4:	90 93 73 07 	sts	0x0773, r25
    1ed8:	80 93 72 07 	sts	0x0772, r24
    1edc:	02 c0       	rjmp	.+4      	; 0x1ee2 <TIMER0_enuSetAsychDelay+0x1b2>
	}
	else
	{
		Local_enuErrorState=ES_NULL_POINTER;
    1ede:	82 e0       	ldi	r24, 0x02	; 2
    1ee0:	8e 87       	std	Y+14, r24	; 0x0e
	}

	TIMSK |=(1<<0);
    1ee2:	a9 e5       	ldi	r26, 0x59	; 89
    1ee4:	b0 e0       	ldi	r27, 0x00	; 0
    1ee6:	e9 e5       	ldi	r30, 0x59	; 89
    1ee8:	f0 e0       	ldi	r31, 0x00	; 0
    1eea:	80 81       	ld	r24, Z
    1eec:	81 60       	ori	r24, 0x01	; 1
    1eee:	8c 93       	st	X, r24


	return Local_enuErrorState;
    1ef0:	8e 85       	ldd	r24, Y+14	; 0x0e
}
    1ef2:	66 96       	adiw	r28, 0x16	; 22
    1ef4:	0f b6       	in	r0, 0x3f	; 63
    1ef6:	f8 94       	cli
    1ef8:	de bf       	out	0x3e, r29	; 62
    1efa:	0f be       	out	0x3f, r0	; 63
    1efc:	cd bf       	out	0x3d, r28	; 61
    1efe:	cf 91       	pop	r28
    1f00:	df 91       	pop	r29
    1f02:	08 95       	ret

00001f04 <TIMER0_enuSetSychDelay>:

ES_t TIMER0_enuSetSychDelay(u32 Copy_u8Time)
{
    1f04:	df 93       	push	r29
    1f06:	cf 93       	push	r28
    1f08:	cd b7       	in	r28, 0x3d	; 61
    1f0a:	de b7       	in	r29, 0x3e	; 62
    1f0c:	66 97       	sbiw	r28, 0x16	; 22
    1f0e:	0f b6       	in	r0, 0x3f	; 63
    1f10:	f8 94       	cli
    1f12:	de bf       	out	0x3e, r29	; 62
    1f14:	0f be       	out	0x3f, r0	; 63
    1f16:	cd bf       	out	0x3d, r28	; 61
    1f18:	6b 8b       	std	Y+19, r22	; 0x13
    1f1a:	7c 8b       	std	Y+20, r23	; 0x14
    1f1c:	8d 8b       	std	Y+21, r24	; 0x15
    1f1e:	9e 8b       	std	Y+22, r25	; 0x16
	ES_t Local_enuErrorState=ES_NOK;
    1f20:	1a 8a       	std	Y+18, r1	; 0x12

	TIMSK &=~(1<<0);
    1f22:	a9 e5       	ldi	r26, 0x59	; 89
    1f24:	b0 e0       	ldi	r27, 0x00	; 0
    1f26:	e9 e5       	ldi	r30, 0x59	; 89
    1f28:	f0 e0       	ldi	r31, 0x00	; 0
    1f2a:	80 81       	ld	r24, Z
    1f2c:	8e 7f       	andi	r24, 0xFE	; 254
    1f2e:	8c 93       	st	X, r24
	f32 Local_f32OVFTime=256.0 *((f32)TIMER0_PRESCALER/TIMER0_F_CPU);
    1f30:	8f e6       	ldi	r24, 0x6F	; 111
    1f32:	92 e1       	ldi	r25, 0x12	; 18
    1f34:	a3 e8       	ldi	r26, 0x83	; 131
    1f36:	be e3       	ldi	r27, 0x3E	; 62
    1f38:	8e 87       	std	Y+14, r24	; 0x0e
    1f3a:	9f 87       	std	Y+15, r25	; 0x0f
    1f3c:	a8 8b       	std	Y+16, r26	; 0x10
    1f3e:	b9 8b       	std	Y+17, r27	; 0x11

	f32 Local_f32NumOVF = (Copy_u8Time)/(Local_f32OVFTime);
    1f40:	6b 89       	ldd	r22, Y+19	; 0x13
    1f42:	7c 89       	ldd	r23, Y+20	; 0x14
    1f44:	8d 89       	ldd	r24, Y+21	; 0x15
    1f46:	9e 89       	ldd	r25, Y+22	; 0x16
    1f48:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    1f4c:	dc 01       	movw	r26, r24
    1f4e:	cb 01       	movw	r24, r22
    1f50:	bc 01       	movw	r22, r24
    1f52:	cd 01       	movw	r24, r26
    1f54:	2e 85       	ldd	r18, Y+14	; 0x0e
    1f56:	3f 85       	ldd	r19, Y+15	; 0x0f
    1f58:	48 89       	ldd	r20, Y+16	; 0x10
    1f5a:	59 89       	ldd	r21, Y+17	; 0x11
    1f5c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1f60:	dc 01       	movw	r26, r24
    1f62:	cb 01       	movw	r24, r22
    1f64:	8a 87       	std	Y+10, r24	; 0x0a
    1f66:	9b 87       	std	Y+11, r25	; 0x0b
    1f68:	ac 87       	std	Y+12, r26	; 0x0c
    1f6a:	bd 87       	std	Y+13, r27	; 0x0d

	if((Local_f32NumOVF-(u32)Local_f32NumOVF) != 0.0)
    1f6c:	6a 85       	ldd	r22, Y+10	; 0x0a
    1f6e:	7b 85       	ldd	r23, Y+11	; 0x0b
    1f70:	8c 85       	ldd	r24, Y+12	; 0x0c
    1f72:	9d 85       	ldd	r25, Y+13	; 0x0d
    1f74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f78:	dc 01       	movw	r26, r24
    1f7a:	cb 01       	movw	r24, r22
    1f7c:	bc 01       	movw	r22, r24
    1f7e:	cd 01       	movw	r24, r26
    1f80:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    1f84:	9b 01       	movw	r18, r22
    1f86:	ac 01       	movw	r20, r24
    1f88:	6a 85       	ldd	r22, Y+10	; 0x0a
    1f8a:	7b 85       	ldd	r23, Y+11	; 0x0b
    1f8c:	8c 85       	ldd	r24, Y+12	; 0x0c
    1f8e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1f90:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1f94:	dc 01       	movw	r26, r24
    1f96:	cb 01       	movw	r24, r22
    1f98:	bc 01       	movw	r22, r24
    1f9a:	cd 01       	movw	r24, r26
    1f9c:	20 e0       	ldi	r18, 0x00	; 0
    1f9e:	30 e0       	ldi	r19, 0x00	; 0
    1fa0:	40 e0       	ldi	r20, 0x00	; 0
    1fa2:	50 e0       	ldi	r21, 0x00	; 0
    1fa4:	0e 94 c5 03 	call	0x78a	; 0x78a <__nesf2>
    1fa8:	88 23       	and	r24, r24
    1faa:	09 f4       	brne	.+2      	; 0x1fae <TIMER0_enuSetSychDelay+0xaa>
    1fac:	6f c0       	rjmp	.+222    	; 0x208c <TIMER0_enuSetSychDelay+0x188>
	{
		u32 Local_u32NumOVF =(u32)Local_f32NumOVF +1;
    1fae:	6a 85       	ldd	r22, Y+10	; 0x0a
    1fb0:	7b 85       	ldd	r23, Y+11	; 0x0b
    1fb2:	8c 85       	ldd	r24, Y+12	; 0x0c
    1fb4:	9d 85       	ldd	r25, Y+13	; 0x0d
    1fb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fba:	dc 01       	movw	r26, r24
    1fbc:	cb 01       	movw	r24, r22
    1fbe:	01 96       	adiw	r24, 0x01	; 1
    1fc0:	a1 1d       	adc	r26, r1
    1fc2:	b1 1d       	adc	r27, r1
    1fc4:	8e 83       	std	Y+6, r24	; 0x06
    1fc6:	9f 83       	std	Y+7, r25	; 0x07
    1fc8:	a8 87       	std	Y+8, r26	; 0x08
    1fca:	b9 87       	std	Y+9, r27	; 0x09
		Local_f32NumOVF = Local_f32NumOVF-(u32)Local_f32NumOVF;
    1fcc:	6a 85       	ldd	r22, Y+10	; 0x0a
    1fce:	7b 85       	ldd	r23, Y+11	; 0x0b
    1fd0:	8c 85       	ldd	r24, Y+12	; 0x0c
    1fd2:	9d 85       	ldd	r25, Y+13	; 0x0d
    1fd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fd8:	dc 01       	movw	r26, r24
    1fda:	cb 01       	movw	r24, r22
    1fdc:	bc 01       	movw	r22, r24
    1fde:	cd 01       	movw	r24, r26
    1fe0:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    1fe4:	9b 01       	movw	r18, r22
    1fe6:	ac 01       	movw	r20, r24
    1fe8:	6a 85       	ldd	r22, Y+10	; 0x0a
    1fea:	7b 85       	ldd	r23, Y+11	; 0x0b
    1fec:	8c 85       	ldd	r24, Y+12	; 0x0c
    1fee:	9d 85       	ldd	r25, Y+13	; 0x0d
    1ff0:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1ff4:	dc 01       	movw	r26, r24
    1ff6:	cb 01       	movw	r24, r22
    1ff8:	8a 87       	std	Y+10, r24	; 0x0a
    1ffa:	9b 87       	std	Y+11, r25	; 0x0b
    1ffc:	ac 87       	std	Y+12, r26	; 0x0c
    1ffe:	bd 87       	std	Y+13, r27	; 0x0d
		u8 Local_u8Preload =256 - (Local_f32NumOVF * 256);
    2000:	6a 85       	ldd	r22, Y+10	; 0x0a
    2002:	7b 85       	ldd	r23, Y+11	; 0x0b
    2004:	8c 85       	ldd	r24, Y+12	; 0x0c
    2006:	9d 85       	ldd	r25, Y+13	; 0x0d
    2008:	20 e0       	ldi	r18, 0x00	; 0
    200a:	30 e0       	ldi	r19, 0x00	; 0
    200c:	40 e8       	ldi	r20, 0x80	; 128
    200e:	53 ec       	ldi	r21, 0xC3	; 195
    2010:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2014:	dc 01       	movw	r26, r24
    2016:	cb 01       	movw	r24, r22
    2018:	bc 01       	movw	r22, r24
    201a:	cd 01       	movw	r24, r26
    201c:	20 e0       	ldi	r18, 0x00	; 0
    201e:	30 e0       	ldi	r19, 0x00	; 0
    2020:	40 e8       	ldi	r20, 0x80	; 128
    2022:	53 e4       	ldi	r21, 0x43	; 67
    2024:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2028:	dc 01       	movw	r26, r24
    202a:	cb 01       	movw	r24, r22
    202c:	bc 01       	movw	r22, r24
    202e:	cd 01       	movw	r24, r26
    2030:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2034:	dc 01       	movw	r26, r24
    2036:	cb 01       	movw	r24, r22
    2038:	8d 83       	std	Y+5, r24	; 0x05
		TCNT0=Local_u8Preload;
    203a:	e2 e5       	ldi	r30, 0x52	; 82
    203c:	f0 e0       	ldi	r31, 0x00	; 0
    203e:	8d 81       	ldd	r24, Y+5	; 0x05
    2040:	80 83       	st	Z, r24
    2042:	1b c0       	rjmp	.+54     	; 0x207a <TIMER0_enuSetSychDelay+0x176>
		while(Local_u32NumOVF>0)
		{
			while(((TIFR>>TIFR_TOV0)&1)==0);//wait flag
    2044:	e8 e5       	ldi	r30, 0x58	; 88
    2046:	f0 e0       	ldi	r31, 0x00	; 0
    2048:	80 81       	ld	r24, Z
    204a:	88 2f       	mov	r24, r24
    204c:	90 e0       	ldi	r25, 0x00	; 0
    204e:	81 70       	andi	r24, 0x01	; 1
    2050:	90 70       	andi	r25, 0x00	; 0
    2052:	00 97       	sbiw	r24, 0x00	; 0
    2054:	b9 f3       	breq	.-18     	; 0x2044 <TIMER0_enuSetSychDelay+0x140>
			TIFR |=(1<<0); // clear it by write one
    2056:	a8 e5       	ldi	r26, 0x58	; 88
    2058:	b0 e0       	ldi	r27, 0x00	; 0
    205a:	e8 e5       	ldi	r30, 0x58	; 88
    205c:	f0 e0       	ldi	r31, 0x00	; 0
    205e:	80 81       	ld	r24, Z
    2060:	81 60       	ori	r24, 0x01	; 1
    2062:	8c 93       	st	X, r24
			Local_u32NumOVF--;
    2064:	8e 81       	ldd	r24, Y+6	; 0x06
    2066:	9f 81       	ldd	r25, Y+7	; 0x07
    2068:	a8 85       	ldd	r26, Y+8	; 0x08
    206a:	b9 85       	ldd	r27, Y+9	; 0x09
    206c:	01 97       	sbiw	r24, 0x01	; 1
    206e:	a1 09       	sbc	r26, r1
    2070:	b1 09       	sbc	r27, r1
    2072:	8e 83       	std	Y+6, r24	; 0x06
    2074:	9f 83       	std	Y+7, r25	; 0x07
    2076:	a8 87       	std	Y+8, r26	; 0x08
    2078:	b9 87       	std	Y+9, r27	; 0x09
	{
		u32 Local_u32NumOVF =(u32)Local_f32NumOVF +1;
		Local_f32NumOVF = Local_f32NumOVF-(u32)Local_f32NumOVF;
		u8 Local_u8Preload =256 - (Local_f32NumOVF * 256);
		TCNT0=Local_u8Preload;
		while(Local_u32NumOVF>0)
    207a:	8e 81       	ldd	r24, Y+6	; 0x06
    207c:	9f 81       	ldd	r25, Y+7	; 0x07
    207e:	a8 85       	ldd	r26, Y+8	; 0x08
    2080:	b9 85       	ldd	r27, Y+9	; 0x09
    2082:	00 97       	sbiw	r24, 0x00	; 0
    2084:	a1 05       	cpc	r26, r1
    2086:	b1 05       	cpc	r27, r1
    2088:	e9 f6       	brne	.-70     	; 0x2044 <TIMER0_enuSetSychDelay+0x140>
    208a:	30 c0       	rjmp	.+96     	; 0x20ec <TIMER0_enuSetSychDelay+0x1e8>

		}
	}
	else
	{
		u32 Local_u32NumOVF =(u32)Local_f32NumOVF;
    208c:	6a 85       	ldd	r22, Y+10	; 0x0a
    208e:	7b 85       	ldd	r23, Y+11	; 0x0b
    2090:	8c 85       	ldd	r24, Y+12	; 0x0c
    2092:	9d 85       	ldd	r25, Y+13	; 0x0d
    2094:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2098:	dc 01       	movw	r26, r24
    209a:	cb 01       	movw	r24, r22
    209c:	89 83       	std	Y+1, r24	; 0x01
    209e:	9a 83       	std	Y+2, r25	; 0x02
    20a0:	ab 83       	std	Y+3, r26	; 0x03
    20a2:	bc 83       	std	Y+4, r27	; 0x04
    20a4:	1b c0       	rjmp	.+54     	; 0x20dc <TIMER0_enuSetSychDelay+0x1d8>
		while(Local_u32NumOVF>0)
		{
			while(((TIFR>>TIFR_TOV0)&1)==0);
    20a6:	e8 e5       	ldi	r30, 0x58	; 88
    20a8:	f0 e0       	ldi	r31, 0x00	; 0
    20aa:	80 81       	ld	r24, Z
    20ac:	88 2f       	mov	r24, r24
    20ae:	90 e0       	ldi	r25, 0x00	; 0
    20b0:	81 70       	andi	r24, 0x01	; 1
    20b2:	90 70       	andi	r25, 0x00	; 0
    20b4:	00 97       	sbiw	r24, 0x00	; 0
    20b6:	b9 f3       	breq	.-18     	; 0x20a6 <TIMER0_enuSetSychDelay+0x1a2>
			TIFR |=(1<<0);
    20b8:	a8 e5       	ldi	r26, 0x58	; 88
    20ba:	b0 e0       	ldi	r27, 0x00	; 0
    20bc:	e8 e5       	ldi	r30, 0x58	; 88
    20be:	f0 e0       	ldi	r31, 0x00	; 0
    20c0:	80 81       	ld	r24, Z
    20c2:	81 60       	ori	r24, 0x01	; 1
    20c4:	8c 93       	st	X, r24
			Local_u32NumOVF--;
    20c6:	89 81       	ldd	r24, Y+1	; 0x01
    20c8:	9a 81       	ldd	r25, Y+2	; 0x02
    20ca:	ab 81       	ldd	r26, Y+3	; 0x03
    20cc:	bc 81       	ldd	r27, Y+4	; 0x04
    20ce:	01 97       	sbiw	r24, 0x01	; 1
    20d0:	a1 09       	sbc	r26, r1
    20d2:	b1 09       	sbc	r27, r1
    20d4:	89 83       	std	Y+1, r24	; 0x01
    20d6:	9a 83       	std	Y+2, r25	; 0x02
    20d8:	ab 83       	std	Y+3, r26	; 0x03
    20da:	bc 83       	std	Y+4, r27	; 0x04
		}
	}
	else
	{
		u32 Local_u32NumOVF =(u32)Local_f32NumOVF;
		while(Local_u32NumOVF>0)
    20dc:	89 81       	ldd	r24, Y+1	; 0x01
    20de:	9a 81       	ldd	r25, Y+2	; 0x02
    20e0:	ab 81       	ldd	r26, Y+3	; 0x03
    20e2:	bc 81       	ldd	r27, Y+4	; 0x04
    20e4:	00 97       	sbiw	r24, 0x00	; 0
    20e6:	a1 05       	cpc	r26, r1
    20e8:	b1 05       	cpc	r27, r1
    20ea:	e9 f6       	brne	.-70     	; 0x20a6 <TIMER0_enuSetSychDelay+0x1a2>

		}
	}


	return Local_enuErrorState;
    20ec:	8a 89       	ldd	r24, Y+18	; 0x12
}
    20ee:	66 96       	adiw	r28, 0x16	; 22
    20f0:	0f b6       	in	r0, 0x3f	; 63
    20f2:	f8 94       	cli
    20f4:	de bf       	out	0x3e, r29	; 62
    20f6:	0f be       	out	0x3f, r0	; 63
    20f8:	cd bf       	out	0x3d, r28	; 61
    20fa:	cf 91       	pop	r28
    20fc:	df 91       	pop	r29
    20fe:	08 95       	ret

00002100 <__vector_11>:



ISR(VECT_TIMER0_OVF)
{
    2100:	1f 92       	push	r1
    2102:	0f 92       	push	r0
    2104:	0f b6       	in	r0, 0x3f	; 63
    2106:	0f 92       	push	r0
    2108:	11 24       	eor	r1, r1
    210a:	2f 93       	push	r18
    210c:	3f 93       	push	r19
    210e:	4f 93       	push	r20
    2110:	5f 93       	push	r21
    2112:	6f 93       	push	r22
    2114:	7f 93       	push	r23
    2116:	8f 93       	push	r24
    2118:	9f 93       	push	r25
    211a:	af 93       	push	r26
    211c:	bf 93       	push	r27
    211e:	ef 93       	push	r30
    2120:	ff 93       	push	r31
    2122:	df 93       	push	r29
    2124:	cf 93       	push	r28
    2126:	cd b7       	in	r28, 0x3d	; 61
    2128:	de b7       	in	r29, 0x3e	; 62
	if (TIMER0_APfunCallBack[TIMER0_DELAY_CALLBACK] != NULL && (ISR_u32Counter == (TIMER0_u8NumberOfOverflow * TIMER0_u32StartDelay)) && (ISR_u32ActionCounter * TIMER0_u32StartDelay) <= TIMER0_u32StopTime)
    212a:	80 91 6a 07 	lds	r24, 0x076A
    212e:	90 91 6b 07 	lds	r25, 0x076B
    2132:	00 97       	sbiw	r24, 0x00	; 0
    2134:	09 f4       	brne	.+2      	; 0x2138 <__vector_11+0x38>
    2136:	6a c0       	rjmp	.+212    	; 0x220c <__vector_11+0x10c>
    2138:	80 91 5c 07 	lds	r24, 0x075C
    213c:	88 2f       	mov	r24, r24
    213e:	90 e0       	ldi	r25, 0x00	; 0
    2140:	a0 e0       	ldi	r26, 0x00	; 0
    2142:	b0 e0       	ldi	r27, 0x00	; 0
    2144:	20 91 5e 07 	lds	r18, 0x075E
    2148:	30 91 5f 07 	lds	r19, 0x075F
    214c:	40 91 60 07 	lds	r20, 0x0760
    2150:	50 91 61 07 	lds	r21, 0x0761
    2154:	bc 01       	movw	r22, r24
    2156:	cd 01       	movw	r24, r26
    2158:	0e 94 d9 35 	call	0x6bb2	; 0x6bb2 <__mulsi3>
    215c:	9b 01       	movw	r18, r22
    215e:	ac 01       	movw	r20, r24
    2160:	80 91 66 07 	lds	r24, 0x0766
    2164:	90 91 67 07 	lds	r25, 0x0767
    2168:	a0 91 68 07 	lds	r26, 0x0768
    216c:	b0 91 69 07 	lds	r27, 0x0769
    2170:	28 17       	cp	r18, r24
    2172:	39 07       	cpc	r19, r25
    2174:	4a 07       	cpc	r20, r26
    2176:	5b 07       	cpc	r21, r27
    2178:	09 f0       	breq	.+2      	; 0x217c <__vector_11+0x7c>
    217a:	48 c0       	rjmp	.+144    	; 0x220c <__vector_11+0x10c>
    217c:	80 91 69 06 	lds	r24, 0x0669
    2180:	90 91 6a 06 	lds	r25, 0x066A
    2184:	a0 91 6b 06 	lds	r26, 0x066B
    2188:	b0 91 6c 06 	lds	r27, 0x066C
    218c:	20 91 5e 07 	lds	r18, 0x075E
    2190:	30 91 5f 07 	lds	r19, 0x075F
    2194:	40 91 60 07 	lds	r20, 0x0760
    2198:	50 91 61 07 	lds	r21, 0x0761
    219c:	bc 01       	movw	r22, r24
    219e:	cd 01       	movw	r24, r26
    21a0:	0e 94 d9 35 	call	0x6bb2	; 0x6bb2 <__mulsi3>
    21a4:	9b 01       	movw	r18, r22
    21a6:	ac 01       	movw	r20, r24
    21a8:	80 91 62 07 	lds	r24, 0x0762
    21ac:	90 91 63 07 	lds	r25, 0x0763
    21b0:	a0 91 64 07 	lds	r26, 0x0764
    21b4:	b0 91 65 07 	lds	r27, 0x0765
    21b8:	82 17       	cp	r24, r18
    21ba:	93 07       	cpc	r25, r19
    21bc:	a4 07       	cpc	r26, r20
    21be:	b5 07       	cpc	r27, r21
    21c0:	28 f1       	brcs	.+74     	; 0x220c <__vector_11+0x10c>
	{
		ISR_u32ActionCounter++;
    21c2:	80 91 69 06 	lds	r24, 0x0669
    21c6:	90 91 6a 06 	lds	r25, 0x066A
    21ca:	a0 91 6b 06 	lds	r26, 0x066B
    21ce:	b0 91 6c 06 	lds	r27, 0x066C
    21d2:	01 96       	adiw	r24, 0x01	; 1
    21d4:	a1 1d       	adc	r26, r1
    21d6:	b1 1d       	adc	r27, r1
    21d8:	80 93 69 06 	sts	0x0669, r24
    21dc:	90 93 6a 06 	sts	0x066A, r25
    21e0:	a0 93 6b 06 	sts	0x066B, r26
    21e4:	b0 93 6c 06 	sts	0x066C, r27
		TIMER0_APfunCallBack[TIMER0_DELAY_CALLBACK](TIMER0_APvidParameter[TIMER0_DELAY_CALLBACK]);
    21e8:	e0 91 6a 07 	lds	r30, 0x076A
    21ec:	f0 91 6b 07 	lds	r31, 0x076B
    21f0:	80 91 70 07 	lds	r24, 0x0770
    21f4:	90 91 71 07 	lds	r25, 0x0771
    21f8:	09 95       	icall
		ISR_u32Counter=0;
    21fa:	10 92 66 07 	sts	0x0766, r1
    21fe:	10 92 67 07 	sts	0x0767, r1
    2202:	10 92 68 07 	sts	0x0768, r1
    2206:	10 92 69 07 	sts	0x0769, r1
    220a:	33 c0       	rjmp	.+102    	; 0x2272 <__vector_11+0x172>
	}
	else
	{
		ISR_u32Counter++;
    220c:	80 91 66 07 	lds	r24, 0x0766
    2210:	90 91 67 07 	lds	r25, 0x0767
    2214:	a0 91 68 07 	lds	r26, 0x0768
    2218:	b0 91 69 07 	lds	r27, 0x0769
    221c:	01 96       	adiw	r24, 0x01	; 1
    221e:	a1 1d       	adc	r26, r1
    2220:	b1 1d       	adc	r27, r1
    2222:	80 93 66 07 	sts	0x0766, r24
    2226:	90 93 67 07 	sts	0x0767, r25
    222a:	a0 93 68 07 	sts	0x0768, r26
    222e:	b0 93 69 07 	sts	0x0769, r27
		if ( ((ISR_u32Counter % TIMER0_u8NumberOfOverflow) ==0 ) && TIMER0_u8Preload !=0 )
    2232:	80 91 66 07 	lds	r24, 0x0766
    2236:	90 91 67 07 	lds	r25, 0x0767
    223a:	a0 91 68 07 	lds	r26, 0x0768
    223e:	b0 91 69 07 	lds	r27, 0x0769
    2242:	20 91 5c 07 	lds	r18, 0x075C
    2246:	22 2f       	mov	r18, r18
    2248:	30 e0       	ldi	r19, 0x00	; 0
    224a:	40 e0       	ldi	r20, 0x00	; 0
    224c:	50 e0       	ldi	r21, 0x00	; 0
    224e:	bc 01       	movw	r22, r24
    2250:	cd 01       	movw	r24, r26
    2252:	0e 94 f8 35 	call	0x6bf0	; 0x6bf0 <__udivmodsi4>
    2256:	dc 01       	movw	r26, r24
    2258:	cb 01       	movw	r24, r22
    225a:	00 97       	sbiw	r24, 0x00	; 0
    225c:	a1 05       	cpc	r26, r1
    225e:	b1 05       	cpc	r27, r1
    2260:	41 f4       	brne	.+16     	; 0x2272 <__vector_11+0x172>
    2262:	80 91 5d 07 	lds	r24, 0x075D
    2266:	88 23       	and	r24, r24
    2268:	21 f0       	breq	.+8      	; 0x2272 <__vector_11+0x172>
		{
			TIMER0_enuSetPreload(TIMER0_u8Preload);
    226a:	80 91 5d 07 	lds	r24, 0x075D
    226e:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <TIMER0_enuSetPreload>
		}
	}

	if (TIMER0_APfunCallBack[TIMER0_OVF_CALLBACK] != NULL)
    2272:	80 91 6c 07 	lds	r24, 0x076C
    2276:	90 91 6d 07 	lds	r25, 0x076D
    227a:	00 97       	sbiw	r24, 0x00	; 0
    227c:	49 f0       	breq	.+18     	; 0x2290 <__vector_11+0x190>
	{
		TIMER0_APfunCallBack[TIMER0_OVF_CALLBACK](TIMER0_APvidParameter[TIMER0_OVF_CALLBACK]);
    227e:	e0 91 6c 07 	lds	r30, 0x076C
    2282:	f0 91 6d 07 	lds	r31, 0x076D
    2286:	80 91 72 07 	lds	r24, 0x0772
    228a:	90 91 73 07 	lds	r25, 0x0773
    228e:	09 95       	icall
	}

}
    2290:	cf 91       	pop	r28
    2292:	df 91       	pop	r29
    2294:	ff 91       	pop	r31
    2296:	ef 91       	pop	r30
    2298:	bf 91       	pop	r27
    229a:	af 91       	pop	r26
    229c:	9f 91       	pop	r25
    229e:	8f 91       	pop	r24
    22a0:	7f 91       	pop	r23
    22a2:	6f 91       	pop	r22
    22a4:	5f 91       	pop	r21
    22a6:	4f 91       	pop	r20
    22a8:	3f 91       	pop	r19
    22aa:	2f 91       	pop	r18
    22ac:	0f 90       	pop	r0
    22ae:	0f be       	out	0x3f, r0	; 63
    22b0:	0f 90       	pop	r0
    22b2:	1f 90       	pop	r1
    22b4:	18 95       	reti

000022b6 <__vector_10>:

ISR(VECT_TIMER0_CTC)
{
    22b6:	1f 92       	push	r1
    22b8:	0f 92       	push	r0
    22ba:	0f b6       	in	r0, 0x3f	; 63
    22bc:	0f 92       	push	r0
    22be:	11 24       	eor	r1, r1
    22c0:	2f 93       	push	r18
    22c2:	3f 93       	push	r19
    22c4:	4f 93       	push	r20
    22c6:	5f 93       	push	r21
    22c8:	6f 93       	push	r22
    22ca:	7f 93       	push	r23
    22cc:	8f 93       	push	r24
    22ce:	9f 93       	push	r25
    22d0:	af 93       	push	r26
    22d2:	bf 93       	push	r27
    22d4:	ef 93       	push	r30
    22d6:	ff 93       	push	r31
    22d8:	df 93       	push	r29
    22da:	cf 93       	push	r28
    22dc:	cd b7       	in	r28, 0x3d	; 61
    22de:	de b7       	in	r29, 0x3e	; 62
			TIMER0_enuSetPreload(TIMER0_u8Preload);
		}
	}
	*/

	if (TIMER0_APfunCallBack[TIMER0_CTC_CALLBACK] != NULL)
    22e0:	80 91 6e 07 	lds	r24, 0x076E
    22e4:	90 91 6f 07 	lds	r25, 0x076F
    22e8:	00 97       	sbiw	r24, 0x00	; 0
    22ea:	49 f0       	breq	.+18     	; 0x22fe <__vector_10+0x48>
	{
		TIMER0_APfunCallBack[TIMER0_CTC_CALLBACK](TIMER0_APvidParameter[TIMER0_CTC_CALLBACK]);
    22ec:	e0 91 6e 07 	lds	r30, 0x076E
    22f0:	f0 91 6f 07 	lds	r31, 0x076F
    22f4:	80 91 74 07 	lds	r24, 0x0774
    22f8:	90 91 75 07 	lds	r25, 0x0775
    22fc:	09 95       	icall
	}
}
    22fe:	cf 91       	pop	r28
    2300:	df 91       	pop	r29
    2302:	ff 91       	pop	r31
    2304:	ef 91       	pop	r30
    2306:	bf 91       	pop	r27
    2308:	af 91       	pop	r26
    230a:	9f 91       	pop	r25
    230c:	8f 91       	pop	r24
    230e:	7f 91       	pop	r23
    2310:	6f 91       	pop	r22
    2312:	5f 91       	pop	r21
    2314:	4f 91       	pop	r20
    2316:	3f 91       	pop	r19
    2318:	2f 91       	pop	r18
    231a:	0f 90       	pop	r0
    231c:	0f be       	out	0x3f, r0	; 63
    231e:	0f 90       	pop	r0
    2320:	1f 90       	pop	r1
    2322:	18 95       	reti

00002324 <ICU_enuInit>:

static void (*ICU_PvCallBackFunc) (void*)=NULL;
static void *ICU_PvCallBackParameter=NULL;

ES_t ICU_enuInit(void)
{
    2324:	df 93       	push	r29
    2326:	cf 93       	push	r28
    2328:	0f 92       	push	r0
    232a:	cd b7       	in	r28, 0x3d	; 61
    232c:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
    232e:	19 82       	std	Y+1, r1	; 0x01

#if ICU_TRIGGER_SOURCE==ICU_RISING_EDGE
	TCCR1B |= (1<<TCCR1B_ICES1);
    2330:	ae e4       	ldi	r26, 0x4E	; 78
    2332:	b0 e0       	ldi	r27, 0x00	; 0
    2334:	ee e4       	ldi	r30, 0x4E	; 78
    2336:	f0 e0       	ldi	r31, 0x00	; 0
    2338:	80 81       	ld	r24, Z
    233a:	80 64       	ori	r24, 0x40	; 64
    233c:	8c 93       	st	X, r24
	Local_enuErrorState=ES_OK;
    233e:	81 e0       	ldi	r24, 0x01	; 1
    2340:	89 83       	std	Y+1, r24	; 0x01
#error "Attention!!, your ICU_TRIGGER_SOURCE Selection is Wrong...."

#endif


	return Local_enuErrorState;
    2342:	89 81       	ldd	r24, Y+1	; 0x01
}
    2344:	0f 90       	pop	r0
    2346:	cf 91       	pop	r28
    2348:	df 91       	pop	r29
    234a:	08 95       	ret

0000234c <ICU_enuEnableINTERRUPT>:

ES_t ICU_enuEnableINTERRUPT(void)
{
    234c:	df 93       	push	r29
    234e:	cf 93       	push	r28
    2350:	0f 92       	push	r0
    2352:	cd b7       	in	r28, 0x3d	; 61
    2354:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
    2356:	19 82       	std	Y+1, r1	; 0x01

	TIMSK |=(1<<TIMSK_TICIE1);
    2358:	a9 e5       	ldi	r26, 0x59	; 89
    235a:	b0 e0       	ldi	r27, 0x00	; 0
    235c:	e9 e5       	ldi	r30, 0x59	; 89
    235e:	f0 e0       	ldi	r31, 0x00	; 0
    2360:	80 81       	ld	r24, Z
    2362:	80 62       	ori	r24, 0x20	; 32
    2364:	8c 93       	st	X, r24
	Local_enuErrorState=ES_OK;
    2366:	81 e0       	ldi	r24, 0x01	; 1
    2368:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    236a:	89 81       	ldd	r24, Y+1	; 0x01
}
    236c:	0f 90       	pop	r0
    236e:	cf 91       	pop	r28
    2370:	df 91       	pop	r29
    2372:	08 95       	ret

00002374 <ICU_enuDisableINTERRUPT>:

ES_t ICU_enuDisableINTERRUPT(void)
{
    2374:	df 93       	push	r29
    2376:	cf 93       	push	r28
    2378:	0f 92       	push	r0
    237a:	cd b7       	in	r28, 0x3d	; 61
    237c:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
    237e:	19 82       	std	Y+1, r1	; 0x01

	TIMSK &=~(1<<TIMSK_TICIE1);
    2380:	a9 e5       	ldi	r26, 0x59	; 89
    2382:	b0 e0       	ldi	r27, 0x00	; 0
    2384:	e9 e5       	ldi	r30, 0x59	; 89
    2386:	f0 e0       	ldi	r31, 0x00	; 0
    2388:	80 81       	ld	r24, Z
    238a:	8f 7d       	andi	r24, 0xDF	; 223
    238c:	8c 93       	st	X, r24
	Local_enuErrorState=ES_OK;
    238e:	81 e0       	ldi	r24, 0x01	; 1
    2390:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    2392:	89 81       	ldd	r24, Y+1	; 0x01
}
    2394:	0f 90       	pop	r0
    2396:	cf 91       	pop	r28
    2398:	df 91       	pop	r29
    239a:	08 95       	ret

0000239c <ICU_enuSetTriggerEdge>:

ES_t ICU_enuSetTriggerEdge(u8 Copy_u8Edge)
{
    239c:	df 93       	push	r29
    239e:	cf 93       	push	r28
    23a0:	00 d0       	rcall	.+0      	; 0x23a2 <ICU_enuSetTriggerEdge+0x6>
    23a2:	cd b7       	in	r28, 0x3d	; 61
    23a4:	de b7       	in	r29, 0x3e	; 62
    23a6:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    23a8:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Edge==ICU_RISING_EDGE)
    23aa:	8a 81       	ldd	r24, Y+2	; 0x02
    23ac:	81 30       	cpi	r24, 0x01	; 1
    23ae:	51 f4       	brne	.+20     	; 0x23c4 <ICU_enuSetTriggerEdge+0x28>
	{
		TCCR1B |= (1<<TCCR1B_ICES1);
    23b0:	ae e4       	ldi	r26, 0x4E	; 78
    23b2:	b0 e0       	ldi	r27, 0x00	; 0
    23b4:	ee e4       	ldi	r30, 0x4E	; 78
    23b6:	f0 e0       	ldi	r31, 0x00	; 0
    23b8:	80 81       	ld	r24, Z
    23ba:	80 64       	ori	r24, 0x40	; 64
    23bc:	8c 93       	st	X, r24
		Local_enuErrorState=ES_OK;
    23be:	81 e0       	ldi	r24, 0x01	; 1
    23c0:	89 83       	std	Y+1, r24	; 0x01
    23c2:	0f c0       	rjmp	.+30     	; 0x23e2 <ICU_enuSetTriggerEdge+0x46>
	}
	else if(Copy_u8Edge==ICU_FALLING_EDGE)
    23c4:	8a 81       	ldd	r24, Y+2	; 0x02
    23c6:	82 30       	cpi	r24, 0x02	; 2
    23c8:	51 f4       	brne	.+20     	; 0x23de <ICU_enuSetTriggerEdge+0x42>
	{
		TCCR1B &=~(1<<TCCR1B_ICES1);
    23ca:	ae e4       	ldi	r26, 0x4E	; 78
    23cc:	b0 e0       	ldi	r27, 0x00	; 0
    23ce:	ee e4       	ldi	r30, 0x4E	; 78
    23d0:	f0 e0       	ldi	r31, 0x00	; 0
    23d2:	80 81       	ld	r24, Z
    23d4:	8f 7b       	andi	r24, 0xBF	; 191
    23d6:	8c 93       	st	X, r24
		Local_enuErrorState=ES_OK;
    23d8:	81 e0       	ldi	r24, 0x01	; 1
    23da:	89 83       	std	Y+1, r24	; 0x01
    23dc:	02 c0       	rjmp	.+4      	; 0x23e2 <ICU_enuSetTriggerEdge+0x46>
	}
	else
	{
		Local_enuErrorState=ES_OUT_OF_RANGE;
    23de:	83 e0       	ldi	r24, 0x03	; 3
    23e0:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    23e2:	89 81       	ldd	r24, Y+1	; 0x01
}
    23e4:	0f 90       	pop	r0
    23e6:	0f 90       	pop	r0
    23e8:	cf 91       	pop	r28
    23ea:	df 91       	pop	r29
    23ec:	08 95       	ret

000023ee <ICU_enuReadInputCapture>:

ES_t ICU_enuReadInputCapture(u16 *Copy_pu16Value)
{
    23ee:	df 93       	push	r29
    23f0:	cf 93       	push	r28
    23f2:	00 d0       	rcall	.+0      	; 0x23f4 <ICU_enuReadInputCapture+0x6>
    23f4:	0f 92       	push	r0
    23f6:	cd b7       	in	r28, 0x3d	; 61
    23f8:	de b7       	in	r29, 0x3e	; 62
    23fa:	9b 83       	std	Y+3, r25	; 0x03
    23fc:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    23fe:	19 82       	std	Y+1, r1	; 0x01

	*Copy_pu16Value=ICR1;
    2400:	e6 e4       	ldi	r30, 0x46	; 70
    2402:	f0 e0       	ldi	r31, 0x00	; 0
    2404:	80 81       	ld	r24, Z
    2406:	91 81       	ldd	r25, Z+1	; 0x01
    2408:	ea 81       	ldd	r30, Y+2	; 0x02
    240a:	fb 81       	ldd	r31, Y+3	; 0x03
    240c:	91 83       	std	Z+1, r25	; 0x01
    240e:	80 83       	st	Z, r24
	Local_enuErrorState=ES_OK;
    2410:	81 e0       	ldi	r24, 0x01	; 1
    2412:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    2414:	89 81       	ldd	r24, Y+1	; 0x01
}
    2416:	0f 90       	pop	r0
    2418:	0f 90       	pop	r0
    241a:	0f 90       	pop	r0
    241c:	cf 91       	pop	r28
    241e:	df 91       	pop	r29
    2420:	08 95       	ret

00002422 <ICU_enuCallBack>:


ES_t ICU_enuCallBack(void (*Copy_PfunCallBack)(void*) , void * Copy_PvidParameter)
{
    2422:	df 93       	push	r29
    2424:	cf 93       	push	r28
    2426:	00 d0       	rcall	.+0      	; 0x2428 <ICU_enuCallBack+0x6>
    2428:	00 d0       	rcall	.+0      	; 0x242a <ICU_enuCallBack+0x8>
    242a:	0f 92       	push	r0
    242c:	cd b7       	in	r28, 0x3d	; 61
    242e:	de b7       	in	r29, 0x3e	; 62
    2430:	9b 83       	std	Y+3, r25	; 0x03
    2432:	8a 83       	std	Y+2, r24	; 0x02
    2434:	7d 83       	std	Y+5, r23	; 0x05
    2436:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState=ES_NOK;
    2438:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_PfunCallBack!=NULL)
    243a:	8a 81       	ldd	r24, Y+2	; 0x02
    243c:	9b 81       	ldd	r25, Y+3	; 0x03
    243e:	00 97       	sbiw	r24, 0x00	; 0
    2440:	79 f0       	breq	.+30     	; 0x2460 <ICU_enuCallBack+0x3e>
	{

		ICU_PvCallBackFunc  = Copy_PfunCallBack;
    2442:	8a 81       	ldd	r24, Y+2	; 0x02
    2444:	9b 81       	ldd	r25, Y+3	; 0x03
    2446:	90 93 7f 07 	sts	0x077F, r25
    244a:	80 93 7e 07 	sts	0x077E, r24
		ICU_PvCallBackParameter = Copy_PvidParameter;
    244e:	8c 81       	ldd	r24, Y+4	; 0x04
    2450:	9d 81       	ldd	r25, Y+5	; 0x05
    2452:	90 93 81 07 	sts	0x0781, r25
    2456:	80 93 80 07 	sts	0x0780, r24
		Local_enuErrorState=ES_OK;
    245a:	81 e0       	ldi	r24, 0x01	; 1
    245c:	89 83       	std	Y+1, r24	; 0x01
    245e:	02 c0       	rjmp	.+4      	; 0x2464 <ICU_enuCallBack+0x42>
	}
	else
	{
		Local_enuErrorState =ES_NULL_POINTER;
    2460:	82 e0       	ldi	r24, 0x02	; 2
    2462:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    2464:	89 81       	ldd	r24, Y+1	; 0x01
}
    2466:	0f 90       	pop	r0
    2468:	0f 90       	pop	r0
    246a:	0f 90       	pop	r0
    246c:	0f 90       	pop	r0
    246e:	0f 90       	pop	r0
    2470:	cf 91       	pop	r28
    2472:	df 91       	pop	r29
    2474:	08 95       	ret

00002476 <__vector_6>:


ISR(VECT_TIMER1_ICU)
{
    2476:	1f 92       	push	r1
    2478:	0f 92       	push	r0
    247a:	0f b6       	in	r0, 0x3f	; 63
    247c:	0f 92       	push	r0
    247e:	11 24       	eor	r1, r1
    2480:	2f 93       	push	r18
    2482:	3f 93       	push	r19
    2484:	4f 93       	push	r20
    2486:	5f 93       	push	r21
    2488:	6f 93       	push	r22
    248a:	7f 93       	push	r23
    248c:	8f 93       	push	r24
    248e:	9f 93       	push	r25
    2490:	af 93       	push	r26
    2492:	bf 93       	push	r27
    2494:	ef 93       	push	r30
    2496:	ff 93       	push	r31
    2498:	df 93       	push	r29
    249a:	cf 93       	push	r28
    249c:	cd b7       	in	r28, 0x3d	; 61
    249e:	de b7       	in	r29, 0x3e	; 62
	if (ICU_PvCallBackFunc != NULL)
    24a0:	80 91 7e 07 	lds	r24, 0x077E
    24a4:	90 91 7f 07 	lds	r25, 0x077F
    24a8:	00 97       	sbiw	r24, 0x00	; 0
    24aa:	49 f0       	breq	.+18     	; 0x24be <__vector_6+0x48>
	{
		ICU_PvCallBackFunc(ICU_PvCallBackParameter);
    24ac:	e0 91 7e 07 	lds	r30, 0x077E
    24b0:	f0 91 7f 07 	lds	r31, 0x077F
    24b4:	80 91 80 07 	lds	r24, 0x0780
    24b8:	90 91 81 07 	lds	r25, 0x0781
    24bc:	09 95       	icall
	}
}
    24be:	cf 91       	pop	r28
    24c0:	df 91       	pop	r29
    24c2:	ff 91       	pop	r31
    24c4:	ef 91       	pop	r30
    24c6:	bf 91       	pop	r27
    24c8:	af 91       	pop	r26
    24ca:	9f 91       	pop	r25
    24cc:	8f 91       	pop	r24
    24ce:	7f 91       	pop	r23
    24d0:	6f 91       	pop	r22
    24d2:	5f 91       	pop	r21
    24d4:	4f 91       	pop	r20
    24d6:	3f 91       	pop	r19
    24d8:	2f 91       	pop	r18
    24da:	0f 90       	pop	r0
    24dc:	0f be       	out	0x3f, r0	; 63
    24de:	0f 90       	pop	r0
    24e0:	1f 90       	pop	r1
    24e2:	18 95       	reti

000024e4 <IIC_enuInit>:
#include "TWI_priv.h"
#include "TWI_config.h"


ES_t IIC_enuInit(void)
{
    24e4:	df 93       	push	r29
    24e6:	cf 93       	push	r28
    24e8:	0f 92       	push	r0
    24ea:	cd b7       	in	r28, 0x3d	; 61
    24ec:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
    24ee:	19 82       	std	Y+1, r1	; 0x01

#if IIC_MODE==IIC_MASTER

	//set clock
	TWBR = (u8) BITRATE(IIC_CLOCK_SPEED);
    24f0:	e0 e2       	ldi	r30, 0x20	; 32
    24f2:	f0 e0       	ldi	r31, 0x00	; 0
    24f4:	80 e2       	ldi	r24, 0x20	; 32
    24f6:	80 83       	st	Z, r24

	//Select prescaler
#if IIC_PRES==1ul
	TWSR &=~(1<<TWSR_TWPS0);
    24f8:	a1 e2       	ldi	r26, 0x21	; 33
    24fa:	b0 e0       	ldi	r27, 0x00	; 0
    24fc:	e1 e2       	ldi	r30, 0x21	; 33
    24fe:	f0 e0       	ldi	r31, 0x00	; 0
    2500:	80 81       	ld	r24, Z
    2502:	8e 7f       	andi	r24, 0xFE	; 254
    2504:	8c 93       	st	X, r24
	TWSR &=~(1<<TWSR_TWPS1);
    2506:	a1 e2       	ldi	r26, 0x21	; 33
    2508:	b0 e0       	ldi	r27, 0x00	; 0
    250a:	e1 e2       	ldi	r30, 0x21	; 33
    250c:	f0 e0       	ldi	r31, 0x00	; 0
    250e:	80 81       	ld	r24, Z
    2510:	8d 7f       	andi	r24, 0xFD	; 253
    2512:	8c 93       	st	X, r24
	TWSR |= (1<<TWSR_TWPS1);

#endif

	// SET Master address
	TWAR &=~(1<<0);
    2514:	a2 e2       	ldi	r26, 0x22	; 34
    2516:	b0 e0       	ldi	r27, 0x00	; 0
    2518:	e2 e2       	ldi	r30, 0x22	; 34
    251a:	f0 e0       	ldi	r31, 0x00	; 0
    251c:	80 81       	ld	r24, Z
    251e:	8e 7f       	andi	r24, 0xFE	; 254
    2520:	8c 93       	st	X, r24
	TWAR = (IIC_NODE_ADDRESS<<1) | IIC_GENERAL_CALL;
    2522:	e2 e2       	ldi	r30, 0x22	; 34
    2524:	f0 e0       	ldi	r31, 0x00	; 0
    2526:	8a e0       	ldi	r24, 0x0A	; 10
    2528:	80 83       	st	Z, r24

	//Clear flag
	TWCR |= (1<<TWCR_TWINT);
    252a:	a6 e5       	ldi	r26, 0x56	; 86
    252c:	b0 e0       	ldi	r27, 0x00	; 0
    252e:	e6 e5       	ldi	r30, 0x56	; 86
    2530:	f0 e0       	ldi	r31, 0x00	; 0
    2532:	80 81       	ld	r24, Z
    2534:	80 68       	ori	r24, 0x80	; 128
    2536:	8c 93       	st	X, r24

	// Enable IIC
	TWCR |= (1<<TWCR_TWEN);
    2538:	a6 e5       	ldi	r26, 0x56	; 86
    253a:	b0 e0       	ldi	r27, 0x00	; 0
    253c:	e6 e5       	ldi	r30, 0x56	; 86
    253e:	f0 e0       	ldi	r31, 0x00	; 0
    2540:	80 81       	ld	r24, Z
    2542:	84 60       	ori	r24, 0x04	; 4
    2544:	8c 93       	st	X, r24

	Local_enuErrorState=ES_OK;
    2546:	81 e0       	ldi	r24, 0x01	; 1
    2548:	89 83       	std	Y+1, r24	; 0x01

#error "IIC mode selection is wrong"
#endif


	return Local_enuErrorState;
    254a:	89 81       	ldd	r24, Y+1	; 0x01
}
    254c:	0f 90       	pop	r0
    254e:	cf 91       	pop	r28
    2550:	df 91       	pop	r29
    2552:	08 95       	ret

00002554 <IIC_enuStartCondition>:

ES_t IIC_enuStartCondition(void)
{
    2554:	df 93       	push	r29
    2556:	cf 93       	push	r28
    2558:	0f 92       	push	r0
    255a:	cd b7       	in	r28, 0x3d	; 61
    255c:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
    255e:	19 82       	std	Y+1, r1	; 0x01

	// Transmit start condition
	TWCR = (1 << TWCR_TWSTA) | (1 << TWCR_TWEN) | (1 << TWCR_TWINT);
    2560:	e6 e5       	ldi	r30, 0x56	; 86
    2562:	f0 e0       	ldi	r31, 0x00	; 0
    2564:	84 ea       	ldi	r24, 0xA4	; 164
    2566:	80 83       	st	Z, r24

	// Wait for start condition to be executed
	while (!(TWCR & (1 << TWCR_TWINT)));
    2568:	e6 e5       	ldi	r30, 0x56	; 86
    256a:	f0 e0       	ldi	r31, 0x00	; 0
    256c:	80 81       	ld	r24, Z
    256e:	88 23       	and	r24, r24
    2570:	dc f7       	brge	.-10     	; 0x2568 <IIC_enuStartCondition+0x14>

	// Check the status of the TWI operation
	if ((TWSR & 0xF8) == 0x08)
    2572:	e1 e2       	ldi	r30, 0x21	; 33
    2574:	f0 e0       	ldi	r31, 0x00	; 0
    2576:	80 81       	ld	r24, Z
    2578:	88 2f       	mov	r24, r24
    257a:	90 e0       	ldi	r25, 0x00	; 0
    257c:	88 7f       	andi	r24, 0xF8	; 248
    257e:	90 70       	andi	r25, 0x00	; 0
    2580:	88 30       	cpi	r24, 0x08	; 8
    2582:	91 05       	cpc	r25, r1
    2584:	11 f4       	brne	.+4      	; 0x258a <IIC_enuStartCondition+0x36>
	{
		// Start condition transmitted successfully
		Local_enuErrorState = ES_OK;
    2586:	81 e0       	ldi	r24, 0x01	; 1
    2588:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorState;
    258a:	89 81       	ldd	r24, Y+1	; 0x01
}
    258c:	0f 90       	pop	r0
    258e:	cf 91       	pop	r28
    2590:	df 91       	pop	r29
    2592:	08 95       	ret

00002594 <IIC_enuRepeatedStartCondition>:

ES_t IIC_enuRepeatedStartCondition(void)
{
    2594:	df 93       	push	r29
    2596:	cf 93       	push	r28
    2598:	0f 92       	push	r0
    259a:	cd b7       	in	r28, 0x3d	; 61
    259c:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
    259e:	19 82       	std	Y+1, r1	; 0x01

	TWCR |=(1<<TWCR_TWSTA);
    25a0:	a6 e5       	ldi	r26, 0x56	; 86
    25a2:	b0 e0       	ldi	r27, 0x00	; 0
    25a4:	e6 e5       	ldi	r30, 0x56	; 86
    25a6:	f0 e0       	ldi	r31, 0x00	; 0
    25a8:	80 81       	ld	r24, Z
    25aa:	80 62       	ori	r24, 0x20	; 32
    25ac:	8c 93       	st	X, r24
	//Clear flag
	TWCR |= (1<<TWCR_TWINT);
    25ae:	a6 e5       	ldi	r26, 0x56	; 86
    25b0:	b0 e0       	ldi	r27, 0x00	; 0
    25b2:	e6 e5       	ldi	r30, 0x56	; 86
    25b4:	f0 e0       	ldi	r31, 0x00	; 0
    25b6:	80 81       	ld	r24, Z
    25b8:	80 68       	ori	r24, 0x80	; 128
    25ba:	8c 93       	st	X, r24
	//wait on flag
	while(!((TWCR>>TWCR_TWINT)&1));
    25bc:	e6 e5       	ldi	r30, 0x56	; 86
    25be:	f0 e0       	ldi	r31, 0x00	; 0
    25c0:	80 81       	ld	r24, Z
    25c2:	88 23       	and	r24, r24
    25c4:	dc f7       	brge	.-10     	; 0x25bc <IIC_enuRepeatedStartCondition+0x28>

	//check  repeated start condition state
	if((TWSR & 0xF8)==0x10)  //Master transmit
    25c6:	e1 e2       	ldi	r30, 0x21	; 33
    25c8:	f0 e0       	ldi	r31, 0x00	; 0
    25ca:	80 81       	ld	r24, Z
    25cc:	88 2f       	mov	r24, r24
    25ce:	90 e0       	ldi	r25, 0x00	; 0
    25d0:	88 7f       	andi	r24, 0xF8	; 248
    25d2:	90 70       	andi	r25, 0x00	; 0
    25d4:	80 31       	cpi	r24, 0x10	; 16
    25d6:	91 05       	cpc	r25, r1
    25d8:	11 f4       	brne	.+4      	; 0x25de <IIC_enuRepeatedStartCondition+0x4a>
	{

		Local_enuErrorState=ES_OK;
    25da:	81 e0       	ldi	r24, 0x01	; 1
    25dc:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    25de:	89 81       	ldd	r24, Y+1	; 0x01
}
    25e0:	0f 90       	pop	r0
    25e2:	cf 91       	pop	r28
    25e4:	df 91       	pop	r29
    25e6:	08 95       	ret

000025e8 <IIC_enuStopCondition>:

ES_t IIC_enuStopCondition(void)
{
    25e8:	df 93       	push	r29
    25ea:	cf 93       	push	r28
    25ec:	0f 92       	push	r0
    25ee:	cd b7       	in	r28, 0x3d	; 61
    25f0:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
    25f2:	19 82       	std	Y+1, r1	; 0x01

	// Transmit stop condition
	TWCR = (1 << TWCR_TWSTO) | (1 << TWCR_TWEN) | (1 << TWCR_TWINT);
    25f4:	e6 e5       	ldi	r30, 0x56	; 86
    25f6:	f0 e0       	ldi	r31, 0x00	; 0
    25f8:	84 e9       	ldi	r24, 0x94	; 148
    25fa:	80 83       	st	Z, r24

	// Wait for stop condition to be executed
	while (TWCR & (1 << TWCR_TWSTO));
    25fc:	e6 e5       	ldi	r30, 0x56	; 86
    25fe:	f0 e0       	ldi	r31, 0x00	; 0
    2600:	80 81       	ld	r24, Z
    2602:	88 2f       	mov	r24, r24
    2604:	90 e0       	ldi	r25, 0x00	; 0
    2606:	80 71       	andi	r24, 0x10	; 16
    2608:	90 70       	andi	r25, 0x00	; 0
    260a:	00 97       	sbiw	r24, 0x00	; 0
    260c:	b9 f7       	brne	.-18     	; 0x25fc <IIC_enuStopCondition+0x14>
	// TWSR == 0x50 --> Data byte transmitted and ACK received
	// TWSR == 0x58 --> Data byte transmitted and NACK received

	// Check the status of the TWI operation
	if ((TWSR & 0xF8) == 0x58 || (TWSR & 0xF8) == 0x50 || (TWSR & 0xF8) == 0x38)
    260e:	e1 e2       	ldi	r30, 0x21	; 33
    2610:	f0 e0       	ldi	r31, 0x00	; 0
    2612:	80 81       	ld	r24, Z
    2614:	88 2f       	mov	r24, r24
    2616:	90 e0       	ldi	r25, 0x00	; 0
    2618:	88 7f       	andi	r24, 0xF8	; 248
    261a:	90 70       	andi	r25, 0x00	; 0
    261c:	88 35       	cpi	r24, 0x58	; 88
    261e:	91 05       	cpc	r25, r1
    2620:	a1 f0       	breq	.+40     	; 0x264a <IIC_enuStopCondition+0x62>
    2622:	e1 e2       	ldi	r30, 0x21	; 33
    2624:	f0 e0       	ldi	r31, 0x00	; 0
    2626:	80 81       	ld	r24, Z
    2628:	88 2f       	mov	r24, r24
    262a:	90 e0       	ldi	r25, 0x00	; 0
    262c:	88 7f       	andi	r24, 0xF8	; 248
    262e:	90 70       	andi	r25, 0x00	; 0
    2630:	80 35       	cpi	r24, 0x50	; 80
    2632:	91 05       	cpc	r25, r1
    2634:	51 f0       	breq	.+20     	; 0x264a <IIC_enuStopCondition+0x62>
    2636:	e1 e2       	ldi	r30, 0x21	; 33
    2638:	f0 e0       	ldi	r31, 0x00	; 0
    263a:	80 81       	ld	r24, Z
    263c:	88 2f       	mov	r24, r24
    263e:	90 e0       	ldi	r25, 0x00	; 0
    2640:	88 7f       	andi	r24, 0xF8	; 248
    2642:	90 70       	andi	r25, 0x00	; 0
    2644:	88 33       	cpi	r24, 0x38	; 56
    2646:	91 05       	cpc	r25, r1
    2648:	11 f4       	brne	.+4      	; 0x264e <IIC_enuStopCondition+0x66>
	{
		// Stop condition transmitted successfully
		Local_enuErrorState = ES_OK;
    264a:	81 e0       	ldi	r24, 0x01	; 1
    264c:	89 83       	std	Y+1, r24	; 0x01
	}



	return Local_enuErrorState;
    264e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2650:	0f 90       	pop	r0
    2652:	cf 91       	pop	r28
    2654:	df 91       	pop	r29
    2656:	08 95       	ret

00002658 <IIC_enuWriteSlaveAddress>:

ES_t IIC_enuWriteSlaveAddress(u8 Copy_u8SlaveAddress, u8 Copy_u8Operation)
{
    2658:	df 93       	push	r29
    265a:	cf 93       	push	r28
    265c:	00 d0       	rcall	.+0      	; 0x265e <IIC_enuWriteSlaveAddress+0x6>
    265e:	0f 92       	push	r0
    2660:	cd b7       	in	r28, 0x3d	; 61
    2662:	de b7       	in	r29, 0x3e	; 62
    2664:	8a 83       	std	Y+2, r24	; 0x02
    2666:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState=ES_NOK;
    2668:	19 82       	std	Y+1, r1	; 0x01

	// Check if the address and operation are within valid ranges
	if (Copy_u8SlaveAddress >= 2 && Copy_u8SlaveAddress <= 118 && (Copy_u8Operation == 0 || Copy_u8Operation == 1))
    266a:	8a 81       	ldd	r24, Y+2	; 0x02
    266c:	82 30       	cpi	r24, 0x02	; 2
    266e:	08 f4       	brcc	.+2      	; 0x2672 <IIC_enuWriteSlaveAddress+0x1a>
    2670:	3f c0       	rjmp	.+126    	; 0x26f0 <IIC_enuWriteSlaveAddress+0x98>
    2672:	8a 81       	ldd	r24, Y+2	; 0x02
    2674:	87 37       	cpi	r24, 0x77	; 119
    2676:	e0 f5       	brcc	.+120    	; 0x26f0 <IIC_enuWriteSlaveAddress+0x98>
    2678:	8b 81       	ldd	r24, Y+3	; 0x03
    267a:	88 23       	and	r24, r24
    267c:	19 f0       	breq	.+6      	; 0x2684 <IIC_enuWriteSlaveAddress+0x2c>
    267e:	8b 81       	ldd	r24, Y+3	; 0x03
    2680:	81 30       	cpi	r24, 0x01	; 1
    2682:	b1 f5       	brne	.+108    	; 0x26f0 <IIC_enuWriteSlaveAddress+0x98>
	{
		// Load the slave address and operation (read or write) into the TWI Data Register
		TWDR = (Copy_u8SlaveAddress << 1) | Copy_u8Operation;
    2684:	e3 e2       	ldi	r30, 0x23	; 35
    2686:	f0 e0       	ldi	r31, 0x00	; 0
    2688:	8a 81       	ldd	r24, Y+2	; 0x02
    268a:	88 2f       	mov	r24, r24
    268c:	90 e0       	ldi	r25, 0x00	; 0
    268e:	88 0f       	add	r24, r24
    2690:	99 1f       	adc	r25, r25
    2692:	98 2f       	mov	r25, r24
    2694:	8b 81       	ldd	r24, Y+3	; 0x03
    2696:	89 2b       	or	r24, r25
    2698:	80 83       	st	Z, r24

		// Clear the TWINT flag to start the transmission of the address
		TWCR = (1 << TWCR_TWEN) | (1 << TWCR_TWINT);
    269a:	e6 e5       	ldi	r30, 0x56	; 86
    269c:	f0 e0       	ldi	r31, 0x00	; 0
    269e:	84 e8       	ldi	r24, 0x84	; 132
    26a0:	80 83       	st	Z, r24

		// Wait until the TWINT flag is set, indicating that the transmission is complete
		while (!(TWCR & (1 << TWCR_TWINT)));
    26a2:	e6 e5       	ldi	r30, 0x56	; 86
    26a4:	f0 e0       	ldi	r31, 0x00	; 0
    26a6:	80 81       	ld	r24, Z
    26a8:	88 23       	and	r24, r24
    26aa:	dc f7       	brge	.-10     	; 0x26a2 <IIC_enuWriteSlaveAddress+0x4a>

		// Check the status of the TWI operation
		if ((TWSR & 0xF8) == 0x18 && Copy_u8Operation == 0)
    26ac:	e1 e2       	ldi	r30, 0x21	; 33
    26ae:	f0 e0       	ldi	r31, 0x00	; 0
    26b0:	80 81       	ld	r24, Z
    26b2:	88 2f       	mov	r24, r24
    26b4:	90 e0       	ldi	r25, 0x00	; 0
    26b6:	88 7f       	andi	r24, 0xF8	; 248
    26b8:	90 70       	andi	r25, 0x00	; 0
    26ba:	88 31       	cpi	r24, 0x18	; 24
    26bc:	91 05       	cpc	r25, r1
    26be:	31 f4       	brne	.+12     	; 0x26cc <IIC_enuWriteSlaveAddress+0x74>
    26c0:	8b 81       	ldd	r24, Y+3	; 0x03
    26c2:	88 23       	and	r24, r24
    26c4:	19 f4       	brne	.+6      	; 0x26cc <IIC_enuWriteSlaveAddress+0x74>
		{
			// Master transmit mode and received ACK from slave
			Local_enuErrorState = ES_OK;
    26c6:	81 e0       	ldi	r24, 0x01	; 1
    26c8:	89 83       	std	Y+1, r24	; 0x01
    26ca:	14 c0       	rjmp	.+40     	; 0x26f4 <IIC_enuWriteSlaveAddress+0x9c>
		}
		else if ((TWSR & 0xF8) == 0x40 && Copy_u8Operation == 1)
    26cc:	e1 e2       	ldi	r30, 0x21	; 33
    26ce:	f0 e0       	ldi	r31, 0x00	; 0
    26d0:	80 81       	ld	r24, Z
    26d2:	88 2f       	mov	r24, r24
    26d4:	90 e0       	ldi	r25, 0x00	; 0
    26d6:	88 7f       	andi	r24, 0xF8	; 248
    26d8:	90 70       	andi	r25, 0x00	; 0
    26da:	80 34       	cpi	r24, 0x40	; 64
    26dc:	91 05       	cpc	r25, r1
    26de:	31 f4       	brne	.+12     	; 0x26ec <IIC_enuWriteSlaveAddress+0x94>
    26e0:	8b 81       	ldd	r24, Y+3	; 0x03
    26e2:	81 30       	cpi	r24, 0x01	; 1
    26e4:	19 f4       	brne	.+6      	; 0x26ec <IIC_enuWriteSlaveAddress+0x94>
		{
			// Master receive mode and received ACK from slave
			Local_enuErrorState = ES_OK;
    26e6:	81 e0       	ldi	r24, 0x01	; 1
    26e8:	89 83       	std	Y+1, r24	; 0x01
    26ea:	04 c0       	rjmp	.+8      	; 0x26f4 <IIC_enuWriteSlaveAddress+0x9c>
		}
		else
		{
			// Address not acknowledged by slave
			Local_enuErrorState = ES_NOK;
    26ec:	19 82       	std	Y+1, r1	; 0x01
    26ee:	02 c0       	rjmp	.+4      	; 0x26f4 <IIC_enuWriteSlaveAddress+0x9c>
		}
	}
	else
	{
		// Address or operation out of range
		Local_enuErrorState = ES_OUT_OF_RANGE;
    26f0:	83 e0       	ldi	r24, 0x03	; 3
    26f2:	89 83       	std	Y+1, r24	; 0x01
	}



	return Local_enuErrorState;
    26f4:	89 81       	ldd	r24, Y+1	; 0x01
}
    26f6:	0f 90       	pop	r0
    26f8:	0f 90       	pop	r0
    26fa:	0f 90       	pop	r0
    26fc:	cf 91       	pop	r28
    26fe:	df 91       	pop	r29
    2700:	08 95       	ret

00002702 <IIC_enuWriteData>:

ES_t IIC_enuWriteData(u8 Copy_u8Data)
{
    2702:	df 93       	push	r29
    2704:	cf 93       	push	r28
    2706:	00 d0       	rcall	.+0      	; 0x2708 <IIC_enuWriteData+0x6>
    2708:	cd b7       	in	r28, 0x3d	; 61
    270a:	de b7       	in	r29, 0x3e	; 62
    270c:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    270e:	19 82       	std	Y+1, r1	; 0x01

	TWDR = Copy_u8Data;
    2710:	e3 e2       	ldi	r30, 0x23	; 35
    2712:	f0 e0       	ldi	r31, 0x00	; 0
    2714:	8a 81       	ldd	r24, Y+2	; 0x02
    2716:	80 83       	st	Z, r24
	//Clear flag
	TWCR |= (1<<TWCR_TWINT) | (1<<TWCR_TWEN);
    2718:	a6 e5       	ldi	r26, 0x56	; 86
    271a:	b0 e0       	ldi	r27, 0x00	; 0
    271c:	e6 e5       	ldi	r30, 0x56	; 86
    271e:	f0 e0       	ldi	r31, 0x00	; 0
    2720:	80 81       	ld	r24, Z
    2722:	84 68       	ori	r24, 0x84	; 132
    2724:	8c 93       	st	X, r24
	//wait on flag
	while(!((TWCR>>TWCR_TWINT)&1));
    2726:	e6 e5       	ldi	r30, 0x56	; 86
    2728:	f0 e0       	ldi	r31, 0x00	; 0
    272a:	80 81       	ld	r24, Z
    272c:	88 23       	and	r24, r24
    272e:	dc f7       	brge	.-10     	; 0x2726 <IIC_enuWriteData+0x24>
	//check   state
	if((TWSR & 0xF8)==0x28 ) //Data+ACK //Master transmit
    2730:	e1 e2       	ldi	r30, 0x21	; 33
    2732:	f0 e0       	ldi	r31, 0x00	; 0
    2734:	80 81       	ld	r24, Z
    2736:	88 2f       	mov	r24, r24
    2738:	90 e0       	ldi	r25, 0x00	; 0
    273a:	88 7f       	andi	r24, 0xF8	; 248
    273c:	90 70       	andi	r25, 0x00	; 0
    273e:	88 32       	cpi	r24, 0x28	; 40
    2740:	91 05       	cpc	r25, r1
    2742:	11 f4       	brne	.+4      	; 0x2748 <IIC_enuWriteData+0x46>
	{
		Local_enuErrorState=ES_OK;
    2744:	81 e0       	ldi	r24, 0x01	; 1
    2746:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorState;
    2748:	89 81       	ldd	r24, Y+1	; 0x01
}
    274a:	0f 90       	pop	r0
    274c:	0f 90       	pop	r0
    274e:	cf 91       	pop	r28
    2750:	df 91       	pop	r29
    2752:	08 95       	ret

00002754 <IIC_enuCheckMyAddress>:

ES_t IIC_enuCheckMyAddress(void)
{
    2754:	df 93       	push	r29
    2756:	cf 93       	push	r28
    2758:	0f 92       	push	r0
    275a:	cd b7       	in	r28, 0x3d	; 61
    275c:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
    275e:	19 82       	std	Y+1, r1	; 0x01

	//set ACK bit
	TWCR |=(1<<TWCR_TWEA);
    2760:	a6 e5       	ldi	r26, 0x56	; 86
    2762:	b0 e0       	ldi	r27, 0x00	; 0
    2764:	e6 e5       	ldi	r30, 0x56	; 86
    2766:	f0 e0       	ldi	r31, 0x00	; 0
    2768:	80 81       	ld	r24, Z
    276a:	80 64       	ori	r24, 0x40	; 64
    276c:	8c 93       	st	X, r24
	//Clear flag
	TWCR |= (1<<TWCR_TWINT);
    276e:	a6 e5       	ldi	r26, 0x56	; 86
    2770:	b0 e0       	ldi	r27, 0x00	; 0
    2772:	e6 e5       	ldi	r30, 0x56	; 86
    2774:	f0 e0       	ldi	r31, 0x00	; 0
    2776:	80 81       	ld	r24, Z
    2778:	80 68       	ori	r24, 0x80	; 128
    277a:	8c 93       	st	X, r24
	//wait on flag
	while(!((TWCR>>TWCR_TWINT)&1));
    277c:	e6 e5       	ldi	r30, 0x56	; 86
    277e:	f0 e0       	ldi	r31, 0x00	; 0
    2780:	80 81       	ld	r24, Z
    2782:	88 23       	and	r24, r24
    2784:	dc f7       	brge	.-10     	; 0x277c <IIC_enuCheckMyAddress+0x28>
	//check state
	if((TWSR & 0xF8)==0xA8 ) //SLA+W+ACK //slave transmit
    2786:	e1 e2       	ldi	r30, 0x21	; 33
    2788:	f0 e0       	ldi	r31, 0x00	; 0
    278a:	80 81       	ld	r24, Z
    278c:	88 2f       	mov	r24, r24
    278e:	90 e0       	ldi	r25, 0x00	; 0
    2790:	88 7f       	andi	r24, 0xF8	; 248
    2792:	90 70       	andi	r25, 0x00	; 0
    2794:	88 3a       	cpi	r24, 0xA8	; 168
    2796:	91 05       	cpc	r25, r1
    2798:	19 f4       	brne	.+6      	; 0x27a0 <IIC_enuCheckMyAddress+0x4c>
	{

		Local_enuErrorState=ES_OK;
    279a:	81 e0       	ldi	r24, 0x01	; 1
    279c:	89 83       	std	Y+1, r24	; 0x01
    279e:	0c c0       	rjmp	.+24     	; 0x27b8 <IIC_enuCheckMyAddress+0x64>
	}
	else if((TWSR & 0xF8)==0x60 ) //SLA+W+ACK //slave recieve
    27a0:	e1 e2       	ldi	r30, 0x21	; 33
    27a2:	f0 e0       	ldi	r31, 0x00	; 0
    27a4:	80 81       	ld	r24, Z
    27a6:	88 2f       	mov	r24, r24
    27a8:	90 e0       	ldi	r25, 0x00	; 0
    27aa:	88 7f       	andi	r24, 0xF8	; 248
    27ac:	90 70       	andi	r25, 0x00	; 0
    27ae:	80 36       	cpi	r24, 0x60	; 96
    27b0:	91 05       	cpc	r25, r1
    27b2:	11 f4       	brne	.+4      	; 0x27b8 <IIC_enuCheckMyAddress+0x64>
	{

		Local_enuErrorState=ES_OK;
    27b4:	81 e0       	ldi	r24, 0x01	; 1
    27b6:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorState;
    27b8:	89 81       	ldd	r24, Y+1	; 0x01
}
    27ba:	0f 90       	pop	r0
    27bc:	cf 91       	pop	r28
    27be:	df 91       	pop	r29
    27c0:	08 95       	ret

000027c2 <IIC_enuReadData>:

ES_t IIC_enuReadData(u8 * Copy_pu8Data)
{
    27c2:	df 93       	push	r29
    27c4:	cf 93       	push	r28
    27c6:	00 d0       	rcall	.+0      	; 0x27c8 <IIC_enuReadData+0x6>
    27c8:	0f 92       	push	r0
    27ca:	cd b7       	in	r28, 0x3d	; 61
    27cc:	de b7       	in	r29, 0x3e	; 62
    27ce:	9b 83       	std	Y+3, r25	; 0x03
    27d0:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    27d2:	19 82       	std	Y+1, r1	; 0x01

	//Clear flag
	TWCR |= (1 << TWCR_TWINT);
    27d4:	a6 e5       	ldi	r26, 0x56	; 86
    27d6:	b0 e0       	ldi	r27, 0x00	; 0
    27d8:	e6 e5       	ldi	r30, 0x56	; 86
    27da:	f0 e0       	ldi	r31, 0x00	; 0
    27dc:	80 81       	ld	r24, Z
    27de:	80 68       	ori	r24, 0x80	; 128
    27e0:	8c 93       	st	X, r24
	//wait on flag
	while (!((TWCR >> TWCR_TWINT) & 1));
    27e2:	e6 e5       	ldi	r30, 0x56	; 86
    27e4:	f0 e0       	ldi	r31, 0x00	; 0
    27e6:	80 81       	ld	r24, Z
    27e8:	88 23       	and	r24, r24
    27ea:	dc f7       	brge	.-10     	; 0x27e2 <IIC_enuReadData+0x20>
	//check   state
	if ((TWSR & 0xF8) == 0x50) //Data+ACK //Master receive
    27ec:	e1 e2       	ldi	r30, 0x21	; 33
    27ee:	f0 e0       	ldi	r31, 0x00	; 0
    27f0:	80 81       	ld	r24, Z
    27f2:	88 2f       	mov	r24, r24
    27f4:	90 e0       	ldi	r25, 0x00	; 0
    27f6:	88 7f       	andi	r24, 0xF8	; 248
    27f8:	90 70       	andi	r25, 0x00	; 0
    27fa:	80 35       	cpi	r24, 0x50	; 80
    27fc:	91 05       	cpc	r25, r1
    27fe:	49 f4       	brne	.+18     	; 0x2812 <IIC_enuReadData+0x50>
	{
		*Copy_pu8Data = TWDR;
    2800:	e3 e2       	ldi	r30, 0x23	; 35
    2802:	f0 e0       	ldi	r31, 0x00	; 0
    2804:	80 81       	ld	r24, Z
    2806:	ea 81       	ldd	r30, Y+2	; 0x02
    2808:	fb 81       	ldd	r31, Y+3	; 0x03
    280a:	80 83       	st	Z, r24
		Local_enuErrorState = ES_OK;
    280c:	81 e0       	ldi	r24, 0x01	; 1
    280e:	89 83       	std	Y+1, r24	; 0x01
    2810:	12 c0       	rjmp	.+36     	; 0x2836 <IIC_enuReadData+0x74>
	}
	else if ((TWSR & 0xF8) == 0x58) //Data+NACK //Master receive
    2812:	e1 e2       	ldi	r30, 0x21	; 33
    2814:	f0 e0       	ldi	r31, 0x00	; 0
    2816:	80 81       	ld	r24, Z
    2818:	88 2f       	mov	r24, r24
    281a:	90 e0       	ldi	r25, 0x00	; 0
    281c:	88 7f       	andi	r24, 0xF8	; 248
    281e:	90 70       	andi	r25, 0x00	; 0
    2820:	88 35       	cpi	r24, 0x58	; 88
    2822:	91 05       	cpc	r25, r1
    2824:	41 f4       	brne	.+16     	; 0x2836 <IIC_enuReadData+0x74>
	{
		*Copy_pu8Data = TWDR;
    2826:	e3 e2       	ldi	r30, 0x23	; 35
    2828:	f0 e0       	ldi	r31, 0x00	; 0
    282a:	80 81       	ld	r24, Z
    282c:	ea 81       	ldd	r30, Y+2	; 0x02
    282e:	fb 81       	ldd	r31, Y+3	; 0x03
    2830:	80 83       	st	Z, r24
		Local_enuErrorState = ES_OK;
    2832:	81 e0       	ldi	r24, 0x01	; 1
    2834:	89 83       	std	Y+1, r24	; 0x01
	}



	return Local_enuErrorState;
    2836:	89 81       	ldd	r24, Y+1	; 0x01
}
    2838:	0f 90       	pop	r0
    283a:	0f 90       	pop	r0
    283c:	0f 90       	pop	r0
    283e:	cf 91       	pop	r28
    2840:	df 91       	pop	r29
    2842:	08 95       	ret

00002844 <GIE_enuEnable>:

#include "GIE_priv.h"


ES_t GIE_enuEnable(void)
{
    2844:	df 93       	push	r29
    2846:	cf 93       	push	r28
    2848:	0f 92       	push	r0
    284a:	cd b7       	in	r28, 0x3d	; 61
    284c:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
    284e:	19 82       	std	Y+1, r1	; 0x01

	SREG |=(1<<7);
    2850:	af e5       	ldi	r26, 0x5F	; 95
    2852:	b0 e0       	ldi	r27, 0x00	; 0
    2854:	ef e5       	ldi	r30, 0x5F	; 95
    2856:	f0 e0       	ldi	r31, 0x00	; 0
    2858:	80 81       	ld	r24, Z
    285a:	80 68       	ori	r24, 0x80	; 128
    285c:	8c 93       	st	X, r24
	Local_enuErrorState=ES_OK;
    285e:	81 e0       	ldi	r24, 0x01	; 1
    2860:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    2862:	89 81       	ldd	r24, Y+1	; 0x01
}
    2864:	0f 90       	pop	r0
    2866:	cf 91       	pop	r28
    2868:	df 91       	pop	r29
    286a:	08 95       	ret

0000286c <GIE_enuDisable>:


ES_t GIE_enuDisable(void)
{
    286c:	df 93       	push	r29
    286e:	cf 93       	push	r28
    2870:	0f 92       	push	r0
    2872:	cd b7       	in	r28, 0x3d	; 61
    2874:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
    2876:	19 82       	std	Y+1, r1	; 0x01

	SREG &=~(1<<7);
    2878:	af e5       	ldi	r26, 0x5F	; 95
    287a:	b0 e0       	ldi	r27, 0x00	; 0
    287c:	ef e5       	ldi	r30, 0x5F	; 95
    287e:	f0 e0       	ldi	r31, 0x00	; 0
    2880:	80 81       	ld	r24, Z
    2882:	8f 77       	andi	r24, 0x7F	; 127
    2884:	8c 93       	st	X, r24
	Local_enuErrorState=ES_OK;
    2886:	81 e0       	ldi	r24, 0x01	; 1
    2888:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    288a:	89 81       	ldd	r24, Y+1	; 0x01
}
    288c:	0f 90       	pop	r0
    288e:	cf 91       	pop	r28
    2890:	df 91       	pop	r29
    2892:	08 95       	ret

00002894 <EINT_enuInit>:

static volatile void* EINT_ApvoidINT[3]={NULL,NULL,NULL};


ES_t EINT_enuInit(EINT_t* Copy_pstrEINT)
{
    2894:	df 93       	push	r29
    2896:	cf 93       	push	r28
    2898:	cd b7       	in	r28, 0x3d	; 61
    289a:	de b7       	in	r29, 0x3e	; 62
    289c:	2c 97       	sbiw	r28, 0x0c	; 12
    289e:	0f b6       	in	r0, 0x3f	; 63
    28a0:	f8 94       	cli
    28a2:	de bf       	out	0x3e, r29	; 62
    28a4:	0f be       	out	0x3f, r0	; 63
    28a6:	cd bf       	out	0x3d, r28	; 61
    28a8:	9c 83       	std	Y+4, r25	; 0x04
    28aa:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorstate=ES_NOK;
    28ac:	1a 82       	std	Y+2, r1	; 0x02

	if(Copy_pstrEINT!=NULL)
    28ae:	8b 81       	ldd	r24, Y+3	; 0x03
    28b0:	9c 81       	ldd	r25, Y+4	; 0x04
    28b2:	00 97       	sbiw	r24, 0x00	; 0
    28b4:	09 f4       	brne	.+2      	; 0x28b8 <EINT_enuInit+0x24>
    28b6:	42 c1       	rjmp	.+644    	; 0x2b3c <EINT_enuInit+0x2a8>
	{
		u8 Local_u8Iter=0;
    28b8:	19 82       	std	Y+1, r1	; 0x01
		for(Local_u8Iter=0;Local_u8Iter<3;Local_u8Iter++)
    28ba:	19 82       	std	Y+1, r1	; 0x01
    28bc:	3a c1       	rjmp	.+628    	; 0x2b32 <EINT_enuInit+0x29e>
		{
			if(Copy_pstrEINT[Local_u8Iter].EINT_u8State==EINT_ENABLED)
    28be:	89 81       	ldd	r24, Y+1	; 0x01
    28c0:	88 2f       	mov	r24, r24
    28c2:	90 e0       	ldi	r25, 0x00	; 0
    28c4:	9c 01       	movw	r18, r24
    28c6:	22 0f       	add	r18, r18
    28c8:	33 1f       	adc	r19, r19
    28ca:	8b 81       	ldd	r24, Y+3	; 0x03
    28cc:	9c 81       	ldd	r25, Y+4	; 0x04
    28ce:	fc 01       	movw	r30, r24
    28d0:	e2 0f       	add	r30, r18
    28d2:	f3 1f       	adc	r31, r19
    28d4:	80 81       	ld	r24, Z
    28d6:	81 30       	cpi	r24, 0x01	; 1
    28d8:	09 f0       	breq	.+2      	; 0x28dc <EINT_enuInit+0x48>
    28da:	28 c1       	rjmp	.+592    	; 0x2b2c <EINT_enuInit+0x298>
			{
				switch(Local_u8Iter)
    28dc:	89 81       	ldd	r24, Y+1	; 0x01
    28de:	28 2f       	mov	r18, r24
    28e0:	30 e0       	ldi	r19, 0x00	; 0
    28e2:	3c 87       	std	Y+12, r19	; 0x0c
    28e4:	2b 87       	std	Y+11, r18	; 0x0b
    28e6:	8b 85       	ldd	r24, Y+11	; 0x0b
    28e8:	9c 85       	ldd	r25, Y+12	; 0x0c
    28ea:	81 30       	cpi	r24, 0x01	; 1
    28ec:	91 05       	cpc	r25, r1
    28ee:	09 f4       	brne	.+2      	; 0x28f2 <EINT_enuInit+0x5e>
    28f0:	7b c0       	rjmp	.+246    	; 0x29e8 <EINT_enuInit+0x154>
    28f2:	2b 85       	ldd	r18, Y+11	; 0x0b
    28f4:	3c 85       	ldd	r19, Y+12	; 0x0c
    28f6:	22 30       	cpi	r18, 0x02	; 2
    28f8:	31 05       	cpc	r19, r1
    28fa:	09 f4       	brne	.+2      	; 0x28fe <EINT_enuInit+0x6a>
    28fc:	e5 c0       	rjmp	.+458    	; 0x2ac8 <EINT_enuInit+0x234>
    28fe:	8b 85       	ldd	r24, Y+11	; 0x0b
    2900:	9c 85       	ldd	r25, Y+12	; 0x0c
    2902:	00 97       	sbiw	r24, 0x00	; 0
    2904:	09 f0       	breq	.+2      	; 0x2908 <EINT_enuInit+0x74>
    2906:	12 c1       	rjmp	.+548    	; 0x2b2c <EINT_enuInit+0x298>
				{
				case 0:
					GICR |=(1<<6);//set bit6 to 1
    2908:	ab e5       	ldi	r26, 0x5B	; 91
    290a:	b0 e0       	ldi	r27, 0x00	; 0
    290c:	eb e5       	ldi	r30, 0x5B	; 91
    290e:	f0 e0       	ldi	r31, 0x00	; 0
    2910:	80 81       	ld	r24, Z
    2912:	80 64       	ori	r24, 0x40	; 64
    2914:	8c 93       	st	X, r24
					switch(Copy_pstrEINT[Local_u8Iter].EINT_u8SenceLevel)
    2916:	89 81       	ldd	r24, Y+1	; 0x01
    2918:	88 2f       	mov	r24, r24
    291a:	90 e0       	ldi	r25, 0x00	; 0
    291c:	9c 01       	movw	r18, r24
    291e:	22 0f       	add	r18, r18
    2920:	33 1f       	adc	r19, r19
    2922:	8b 81       	ldd	r24, Y+3	; 0x03
    2924:	9c 81       	ldd	r25, Y+4	; 0x04
    2926:	fc 01       	movw	r30, r24
    2928:	e2 0f       	add	r30, r18
    292a:	f3 1f       	adc	r31, r19
    292c:	81 81       	ldd	r24, Z+1	; 0x01
    292e:	28 2f       	mov	r18, r24
    2930:	30 e0       	ldi	r19, 0x00	; 0
    2932:	3a 87       	std	Y+10, r19	; 0x0a
    2934:	29 87       	std	Y+9, r18	; 0x09
    2936:	89 85       	ldd	r24, Y+9	; 0x09
    2938:	9a 85       	ldd	r25, Y+10	; 0x0a
    293a:	82 30       	cpi	r24, 0x02	; 2
    293c:	91 05       	cpc	r25, r1
    293e:	29 f1       	breq	.+74     	; 0x298a <EINT_enuInit+0xf6>
    2940:	29 85       	ldd	r18, Y+9	; 0x09
    2942:	3a 85       	ldd	r19, Y+10	; 0x0a
    2944:	23 30       	cpi	r18, 0x03	; 3
    2946:	31 05       	cpc	r19, r1
    2948:	34 f4       	brge	.+12     	; 0x2956 <EINT_enuInit+0xc2>
    294a:	89 85       	ldd	r24, Y+9	; 0x09
    294c:	9a 85       	ldd	r25, Y+10	; 0x0a
    294e:	81 30       	cpi	r24, 0x01	; 1
    2950:	91 05       	cpc	r25, r1
    2952:	61 f0       	breq	.+24     	; 0x296c <EINT_enuInit+0xd8>
    2954:	46 c0       	rjmp	.+140    	; 0x29e2 <EINT_enuInit+0x14e>
    2956:	29 85       	ldd	r18, Y+9	; 0x09
    2958:	3a 85       	ldd	r19, Y+10	; 0x0a
    295a:	23 30       	cpi	r18, 0x03	; 3
    295c:	31 05       	cpc	r19, r1
    295e:	99 f1       	breq	.+102    	; 0x29c6 <EINT_enuInit+0x132>
    2960:	89 85       	ldd	r24, Y+9	; 0x09
    2962:	9a 85       	ldd	r25, Y+10	; 0x0a
    2964:	84 30       	cpi	r24, 0x04	; 4
    2966:	91 05       	cpc	r25, r1
    2968:	f9 f0       	breq	.+62     	; 0x29a8 <EINT_enuInit+0x114>
    296a:	3b c0       	rjmp	.+118    	; 0x29e2 <EINT_enuInit+0x14e>
					{
					case EINT_LOW_LEVEL:
						MCUCR&=~(1<<1);
    296c:	a5 e5       	ldi	r26, 0x55	; 85
    296e:	b0 e0       	ldi	r27, 0x00	; 0
    2970:	e5 e5       	ldi	r30, 0x55	; 85
    2972:	f0 e0       	ldi	r31, 0x00	; 0
    2974:	80 81       	ld	r24, Z
    2976:	8d 7f       	andi	r24, 0xFD	; 253
    2978:	8c 93       	st	X, r24
						MCUCR&=~(1<<0);
    297a:	a5 e5       	ldi	r26, 0x55	; 85
    297c:	b0 e0       	ldi	r27, 0x00	; 0
    297e:	e5 e5       	ldi	r30, 0x55	; 85
    2980:	f0 e0       	ldi	r31, 0x00	; 0
    2982:	80 81       	ld	r24, Z
    2984:	8e 7f       	andi	r24, 0xFE	; 254
    2986:	8c 93       	st	X, r24
    2988:	2c c0       	rjmp	.+88     	; 0x29e2 <EINT_enuInit+0x14e>
						break;
					case EINT_ANY_LOG_CHANGE:
						MCUCR&=~(1<<1);
    298a:	a5 e5       	ldi	r26, 0x55	; 85
    298c:	b0 e0       	ldi	r27, 0x00	; 0
    298e:	e5 e5       	ldi	r30, 0x55	; 85
    2990:	f0 e0       	ldi	r31, 0x00	; 0
    2992:	80 81       	ld	r24, Z
    2994:	8d 7f       	andi	r24, 0xFD	; 253
    2996:	8c 93       	st	X, r24
						MCUCR |=(1<<0);
    2998:	a5 e5       	ldi	r26, 0x55	; 85
    299a:	b0 e0       	ldi	r27, 0x00	; 0
    299c:	e5 e5       	ldi	r30, 0x55	; 85
    299e:	f0 e0       	ldi	r31, 0x00	; 0
    29a0:	80 81       	ld	r24, Z
    29a2:	81 60       	ori	r24, 0x01	; 1
    29a4:	8c 93       	st	X, r24
    29a6:	1d c0       	rjmp	.+58     	; 0x29e2 <EINT_enuInit+0x14e>
						break;
					case EINT_FALLING_EDGE:
						MCUCR |=(1<<1);
    29a8:	a5 e5       	ldi	r26, 0x55	; 85
    29aa:	b0 e0       	ldi	r27, 0x00	; 0
    29ac:	e5 e5       	ldi	r30, 0x55	; 85
    29ae:	f0 e0       	ldi	r31, 0x00	; 0
    29b0:	80 81       	ld	r24, Z
    29b2:	82 60       	ori	r24, 0x02	; 2
    29b4:	8c 93       	st	X, r24
						MCUCR&=~(1<<0);
    29b6:	a5 e5       	ldi	r26, 0x55	; 85
    29b8:	b0 e0       	ldi	r27, 0x00	; 0
    29ba:	e5 e5       	ldi	r30, 0x55	; 85
    29bc:	f0 e0       	ldi	r31, 0x00	; 0
    29be:	80 81       	ld	r24, Z
    29c0:	8e 7f       	andi	r24, 0xFE	; 254
    29c2:	8c 93       	st	X, r24
    29c4:	0e c0       	rjmp	.+28     	; 0x29e2 <EINT_enuInit+0x14e>
						break;
					case EINT_RISING_EDGE:
						MCUCR |=(1<<1);
    29c6:	a5 e5       	ldi	r26, 0x55	; 85
    29c8:	b0 e0       	ldi	r27, 0x00	; 0
    29ca:	e5 e5       	ldi	r30, 0x55	; 85
    29cc:	f0 e0       	ldi	r31, 0x00	; 0
    29ce:	80 81       	ld	r24, Z
    29d0:	82 60       	ori	r24, 0x02	; 2
    29d2:	8c 93       	st	X, r24
						MCUCR |=(1<<0);
    29d4:	a5 e5       	ldi	r26, 0x55	; 85
    29d6:	b0 e0       	ldi	r27, 0x00	; 0
    29d8:	e5 e5       	ldi	r30, 0x55	; 85
    29da:	f0 e0       	ldi	r31, 0x00	; 0
    29dc:	80 81       	ld	r24, Z
    29de:	81 60       	ori	r24, 0x01	; 1
    29e0:	8c 93       	st	X, r24
						break;
					}
					Local_enuErrorstate=ES_OK;
    29e2:	81 e0       	ldi	r24, 0x01	; 1
    29e4:	8a 83       	std	Y+2, r24	; 0x02
    29e6:	a2 c0       	rjmp	.+324    	; 0x2b2c <EINT_enuInit+0x298>
					break;
				case 1:
					GICR |=(1<<7);//set bit7 to 1
    29e8:	ab e5       	ldi	r26, 0x5B	; 91
    29ea:	b0 e0       	ldi	r27, 0x00	; 0
    29ec:	eb e5       	ldi	r30, 0x5B	; 91
    29ee:	f0 e0       	ldi	r31, 0x00	; 0
    29f0:	80 81       	ld	r24, Z
    29f2:	80 68       	ori	r24, 0x80	; 128
    29f4:	8c 93       	st	X, r24
					switch(Copy_pstrEINT[Local_u8Iter].EINT_u8SenceLevel)
    29f6:	89 81       	ldd	r24, Y+1	; 0x01
    29f8:	88 2f       	mov	r24, r24
    29fa:	90 e0       	ldi	r25, 0x00	; 0
    29fc:	9c 01       	movw	r18, r24
    29fe:	22 0f       	add	r18, r18
    2a00:	33 1f       	adc	r19, r19
    2a02:	8b 81       	ldd	r24, Y+3	; 0x03
    2a04:	9c 81       	ldd	r25, Y+4	; 0x04
    2a06:	fc 01       	movw	r30, r24
    2a08:	e2 0f       	add	r30, r18
    2a0a:	f3 1f       	adc	r31, r19
    2a0c:	81 81       	ldd	r24, Z+1	; 0x01
    2a0e:	28 2f       	mov	r18, r24
    2a10:	30 e0       	ldi	r19, 0x00	; 0
    2a12:	38 87       	std	Y+8, r19	; 0x08
    2a14:	2f 83       	std	Y+7, r18	; 0x07
    2a16:	8f 81       	ldd	r24, Y+7	; 0x07
    2a18:	98 85       	ldd	r25, Y+8	; 0x08
    2a1a:	82 30       	cpi	r24, 0x02	; 2
    2a1c:	91 05       	cpc	r25, r1
    2a1e:	29 f1       	breq	.+74     	; 0x2a6a <EINT_enuInit+0x1d6>
    2a20:	2f 81       	ldd	r18, Y+7	; 0x07
    2a22:	38 85       	ldd	r19, Y+8	; 0x08
    2a24:	23 30       	cpi	r18, 0x03	; 3
    2a26:	31 05       	cpc	r19, r1
    2a28:	34 f4       	brge	.+12     	; 0x2a36 <EINT_enuInit+0x1a2>
    2a2a:	8f 81       	ldd	r24, Y+7	; 0x07
    2a2c:	98 85       	ldd	r25, Y+8	; 0x08
    2a2e:	81 30       	cpi	r24, 0x01	; 1
    2a30:	91 05       	cpc	r25, r1
    2a32:	61 f0       	breq	.+24     	; 0x2a4c <EINT_enuInit+0x1b8>
    2a34:	46 c0       	rjmp	.+140    	; 0x2ac2 <EINT_enuInit+0x22e>
    2a36:	2f 81       	ldd	r18, Y+7	; 0x07
    2a38:	38 85       	ldd	r19, Y+8	; 0x08
    2a3a:	23 30       	cpi	r18, 0x03	; 3
    2a3c:	31 05       	cpc	r19, r1
    2a3e:	99 f1       	breq	.+102    	; 0x2aa6 <EINT_enuInit+0x212>
    2a40:	8f 81       	ldd	r24, Y+7	; 0x07
    2a42:	98 85       	ldd	r25, Y+8	; 0x08
    2a44:	84 30       	cpi	r24, 0x04	; 4
    2a46:	91 05       	cpc	r25, r1
    2a48:	f9 f0       	breq	.+62     	; 0x2a88 <EINT_enuInit+0x1f4>
    2a4a:	3b c0       	rjmp	.+118    	; 0x2ac2 <EINT_enuInit+0x22e>
					{
					case EINT_LOW_LEVEL:
						MCUCR&=~(1<<3);
    2a4c:	a5 e5       	ldi	r26, 0x55	; 85
    2a4e:	b0 e0       	ldi	r27, 0x00	; 0
    2a50:	e5 e5       	ldi	r30, 0x55	; 85
    2a52:	f0 e0       	ldi	r31, 0x00	; 0
    2a54:	80 81       	ld	r24, Z
    2a56:	87 7f       	andi	r24, 0xF7	; 247
    2a58:	8c 93       	st	X, r24
						MCUCR&=~(1<<2);
    2a5a:	a5 e5       	ldi	r26, 0x55	; 85
    2a5c:	b0 e0       	ldi	r27, 0x00	; 0
    2a5e:	e5 e5       	ldi	r30, 0x55	; 85
    2a60:	f0 e0       	ldi	r31, 0x00	; 0
    2a62:	80 81       	ld	r24, Z
    2a64:	8b 7f       	andi	r24, 0xFB	; 251
    2a66:	8c 93       	st	X, r24
    2a68:	2c c0       	rjmp	.+88     	; 0x2ac2 <EINT_enuInit+0x22e>
						break;
					case EINT_ANY_LOG_CHANGE:
						MCUCR&=~(1<<3);
    2a6a:	a5 e5       	ldi	r26, 0x55	; 85
    2a6c:	b0 e0       	ldi	r27, 0x00	; 0
    2a6e:	e5 e5       	ldi	r30, 0x55	; 85
    2a70:	f0 e0       	ldi	r31, 0x00	; 0
    2a72:	80 81       	ld	r24, Z
    2a74:	87 7f       	andi	r24, 0xF7	; 247
    2a76:	8c 93       	st	X, r24
						MCUCR |=(1<<2);
    2a78:	a5 e5       	ldi	r26, 0x55	; 85
    2a7a:	b0 e0       	ldi	r27, 0x00	; 0
    2a7c:	e5 e5       	ldi	r30, 0x55	; 85
    2a7e:	f0 e0       	ldi	r31, 0x00	; 0
    2a80:	80 81       	ld	r24, Z
    2a82:	84 60       	ori	r24, 0x04	; 4
    2a84:	8c 93       	st	X, r24
    2a86:	1d c0       	rjmp	.+58     	; 0x2ac2 <EINT_enuInit+0x22e>
						break;
					case EINT_FALLING_EDGE:
						MCUCR |=(1<<3);
    2a88:	a5 e5       	ldi	r26, 0x55	; 85
    2a8a:	b0 e0       	ldi	r27, 0x00	; 0
    2a8c:	e5 e5       	ldi	r30, 0x55	; 85
    2a8e:	f0 e0       	ldi	r31, 0x00	; 0
    2a90:	80 81       	ld	r24, Z
    2a92:	88 60       	ori	r24, 0x08	; 8
    2a94:	8c 93       	st	X, r24
						MCUCR&=~(1<<2);
    2a96:	a5 e5       	ldi	r26, 0x55	; 85
    2a98:	b0 e0       	ldi	r27, 0x00	; 0
    2a9a:	e5 e5       	ldi	r30, 0x55	; 85
    2a9c:	f0 e0       	ldi	r31, 0x00	; 0
    2a9e:	80 81       	ld	r24, Z
    2aa0:	8b 7f       	andi	r24, 0xFB	; 251
    2aa2:	8c 93       	st	X, r24
    2aa4:	0e c0       	rjmp	.+28     	; 0x2ac2 <EINT_enuInit+0x22e>
						break;
					case EINT_RISING_EDGE:
						MCUCR |=(1<<3);
    2aa6:	a5 e5       	ldi	r26, 0x55	; 85
    2aa8:	b0 e0       	ldi	r27, 0x00	; 0
    2aaa:	e5 e5       	ldi	r30, 0x55	; 85
    2aac:	f0 e0       	ldi	r31, 0x00	; 0
    2aae:	80 81       	ld	r24, Z
    2ab0:	88 60       	ori	r24, 0x08	; 8
    2ab2:	8c 93       	st	X, r24
						MCUCR |=(1<<2);
    2ab4:	a5 e5       	ldi	r26, 0x55	; 85
    2ab6:	b0 e0       	ldi	r27, 0x00	; 0
    2ab8:	e5 e5       	ldi	r30, 0x55	; 85
    2aba:	f0 e0       	ldi	r31, 0x00	; 0
    2abc:	80 81       	ld	r24, Z
    2abe:	84 60       	ori	r24, 0x04	; 4
    2ac0:	8c 93       	st	X, r24
						break;
					}
					Local_enuErrorstate=ES_OK;
    2ac2:	81 e0       	ldi	r24, 0x01	; 1
    2ac4:	8a 83       	std	Y+2, r24	; 0x02
    2ac6:	32 c0       	rjmp	.+100    	; 0x2b2c <EINT_enuInit+0x298>
					break;
				case 2:
					GICR |=(1<<5);//set bit5 to 1
    2ac8:	ab e5       	ldi	r26, 0x5B	; 91
    2aca:	b0 e0       	ldi	r27, 0x00	; 0
    2acc:	eb e5       	ldi	r30, 0x5B	; 91
    2ace:	f0 e0       	ldi	r31, 0x00	; 0
    2ad0:	80 81       	ld	r24, Z
    2ad2:	80 62       	ori	r24, 0x20	; 32
    2ad4:	8c 93       	st	X, r24
					switch(Copy_pstrEINT[Local_u8Iter].EINT_u8SenceLevel)
    2ad6:	89 81       	ldd	r24, Y+1	; 0x01
    2ad8:	88 2f       	mov	r24, r24
    2ada:	90 e0       	ldi	r25, 0x00	; 0
    2adc:	9c 01       	movw	r18, r24
    2ade:	22 0f       	add	r18, r18
    2ae0:	33 1f       	adc	r19, r19
    2ae2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ae6:	fc 01       	movw	r30, r24
    2ae8:	e2 0f       	add	r30, r18
    2aea:	f3 1f       	adc	r31, r19
    2aec:	81 81       	ldd	r24, Z+1	; 0x01
    2aee:	28 2f       	mov	r18, r24
    2af0:	30 e0       	ldi	r19, 0x00	; 0
    2af2:	3e 83       	std	Y+6, r19	; 0x06
    2af4:	2d 83       	std	Y+5, r18	; 0x05
    2af6:	8d 81       	ldd	r24, Y+5	; 0x05
    2af8:	9e 81       	ldd	r25, Y+6	; 0x06
    2afa:	83 30       	cpi	r24, 0x03	; 3
    2afc:	91 05       	cpc	r25, r1
    2afe:	69 f0       	breq	.+26     	; 0x2b1a <EINT_enuInit+0x286>
    2b00:	2d 81       	ldd	r18, Y+5	; 0x05
    2b02:	3e 81       	ldd	r19, Y+6	; 0x06
    2b04:	24 30       	cpi	r18, 0x04	; 4
    2b06:	31 05       	cpc	r19, r1
    2b08:	79 f4       	brne	.+30     	; 0x2b28 <EINT_enuInit+0x294>
					{
					case EINT_FALLING_EDGE:
						MCUCSR&=~(1<<6);
    2b0a:	a4 e5       	ldi	r26, 0x54	; 84
    2b0c:	b0 e0       	ldi	r27, 0x00	; 0
    2b0e:	e4 e5       	ldi	r30, 0x54	; 84
    2b10:	f0 e0       	ldi	r31, 0x00	; 0
    2b12:	80 81       	ld	r24, Z
    2b14:	8f 7b       	andi	r24, 0xBF	; 191
    2b16:	8c 93       	st	X, r24
    2b18:	07 c0       	rjmp	.+14     	; 0x2b28 <EINT_enuInit+0x294>
						break;
					case EINT_RISING_EDGE:
						MCUCSR |=(1<<6);
    2b1a:	a4 e5       	ldi	r26, 0x54	; 84
    2b1c:	b0 e0       	ldi	r27, 0x00	; 0
    2b1e:	e4 e5       	ldi	r30, 0x54	; 84
    2b20:	f0 e0       	ldi	r31, 0x00	; 0
    2b22:	80 81       	ld	r24, Z
    2b24:	80 64       	ori	r24, 0x40	; 64
    2b26:	8c 93       	st	X, r24
						break;
					}
					Local_enuErrorstate=ES_OK;
    2b28:	81 e0       	ldi	r24, 0x01	; 1
    2b2a:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate=ES_NOK;

	if(Copy_pstrEINT!=NULL)
	{
		u8 Local_u8Iter=0;
		for(Local_u8Iter=0;Local_u8Iter<3;Local_u8Iter++)
    2b2c:	89 81       	ldd	r24, Y+1	; 0x01
    2b2e:	8f 5f       	subi	r24, 0xFF	; 255
    2b30:	89 83       	std	Y+1, r24	; 0x01
    2b32:	89 81       	ldd	r24, Y+1	; 0x01
    2b34:	83 30       	cpi	r24, 0x03	; 3
    2b36:	08 f4       	brcc	.+2      	; 0x2b3a <EINT_enuInit+0x2a6>
    2b38:	c2 ce       	rjmp	.-636    	; 0x28be <EINT_enuInit+0x2a>
    2b3a:	02 c0       	rjmp	.+4      	; 0x2b40 <EINT_enuInit+0x2ac>
			}
		}
	}
	else
	{
		Local_enuErrorstate=ES_NULL_POINTER;
    2b3c:	82 e0       	ldi	r24, 0x02	; 2
    2b3e:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_enuErrorstate;
    2b40:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2b42:	2c 96       	adiw	r28, 0x0c	; 12
    2b44:	0f b6       	in	r0, 0x3f	; 63
    2b46:	f8 94       	cli
    2b48:	de bf       	out	0x3e, r29	; 62
    2b4a:	0f be       	out	0x3f, r0	; 63
    2b4c:	cd bf       	out	0x3d, r28	; 61
    2b4e:	cf 91       	pop	r28
    2b50:	df 91       	pop	r29
    2b52:	08 95       	ret

00002b54 <EINT_enuEnableINT>:

ES_t EINT_enuEnableINT(u8 Copy_u8ID)
{
    2b54:	df 93       	push	r29
    2b56:	cf 93       	push	r28
    2b58:	00 d0       	rcall	.+0      	; 0x2b5a <EINT_enuEnableINT+0x6>
    2b5a:	00 d0       	rcall	.+0      	; 0x2b5c <EINT_enuEnableINT+0x8>
    2b5c:	cd b7       	in	r28, 0x3d	; 61
    2b5e:	de b7       	in	r29, 0x3e	; 62
    2b60:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate=ES_NOK;
    2b62:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8ID<3)
    2b64:	8a 81       	ldd	r24, Y+2	; 0x02
    2b66:	83 30       	cpi	r24, 0x03	; 3
    2b68:	88 f5       	brcc	.+98     	; 0x2bcc <EINT_enuEnableINT+0x78>
	{
		switch(Copy_u8ID)
    2b6a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b6c:	28 2f       	mov	r18, r24
    2b6e:	30 e0       	ldi	r19, 0x00	; 0
    2b70:	3c 83       	std	Y+4, r19	; 0x04
    2b72:	2b 83       	std	Y+3, r18	; 0x03
    2b74:	8b 81       	ldd	r24, Y+3	; 0x03
    2b76:	9c 81       	ldd	r25, Y+4	; 0x04
    2b78:	81 30       	cpi	r24, 0x01	; 1
    2b7a:	91 05       	cpc	r25, r1
    2b7c:	99 f0       	breq	.+38     	; 0x2ba4 <EINT_enuEnableINT+0x50>
    2b7e:	2b 81       	ldd	r18, Y+3	; 0x03
    2b80:	3c 81       	ldd	r19, Y+4	; 0x04
    2b82:	22 30       	cpi	r18, 0x02	; 2
    2b84:	31 05       	cpc	r19, r1
    2b86:	c1 f0       	breq	.+48     	; 0x2bb8 <EINT_enuEnableINT+0x64>
    2b88:	8b 81       	ldd	r24, Y+3	; 0x03
    2b8a:	9c 81       	ldd	r25, Y+4	; 0x04
    2b8c:	00 97       	sbiw	r24, 0x00	; 0
    2b8e:	01 f5       	brne	.+64     	; 0x2bd0 <EINT_enuEnableINT+0x7c>
		{
		case EINT0:
			GICR |=(1<<6);
    2b90:	ab e5       	ldi	r26, 0x5B	; 91
    2b92:	b0 e0       	ldi	r27, 0x00	; 0
    2b94:	eb e5       	ldi	r30, 0x5B	; 91
    2b96:	f0 e0       	ldi	r31, 0x00	; 0
    2b98:	80 81       	ld	r24, Z
    2b9a:	80 64       	ori	r24, 0x40	; 64
    2b9c:	8c 93       	st	X, r24
			Local_enuErrorstate=ES_OK;
    2b9e:	81 e0       	ldi	r24, 0x01	; 1
    2ba0:	89 83       	std	Y+1, r24	; 0x01
    2ba2:	16 c0       	rjmp	.+44     	; 0x2bd0 <EINT_enuEnableINT+0x7c>
			break;
		case EINT1:
			GICR |=(1<<7);
    2ba4:	ab e5       	ldi	r26, 0x5B	; 91
    2ba6:	b0 e0       	ldi	r27, 0x00	; 0
    2ba8:	eb e5       	ldi	r30, 0x5B	; 91
    2baa:	f0 e0       	ldi	r31, 0x00	; 0
    2bac:	80 81       	ld	r24, Z
    2bae:	80 68       	ori	r24, 0x80	; 128
    2bb0:	8c 93       	st	X, r24
			Local_enuErrorstate=ES_OK;
    2bb2:	81 e0       	ldi	r24, 0x01	; 1
    2bb4:	89 83       	std	Y+1, r24	; 0x01
    2bb6:	0c c0       	rjmp	.+24     	; 0x2bd0 <EINT_enuEnableINT+0x7c>
			break;
		case EINT2:
			GICR |=(1<<5);
    2bb8:	ab e5       	ldi	r26, 0x5B	; 91
    2bba:	b0 e0       	ldi	r27, 0x00	; 0
    2bbc:	eb e5       	ldi	r30, 0x5B	; 91
    2bbe:	f0 e0       	ldi	r31, 0x00	; 0
    2bc0:	80 81       	ld	r24, Z
    2bc2:	80 62       	ori	r24, 0x20	; 32
    2bc4:	8c 93       	st	X, r24
			Local_enuErrorstate=ES_OK;
    2bc6:	81 e0       	ldi	r24, 0x01	; 1
    2bc8:	89 83       	std	Y+1, r24	; 0x01
    2bca:	02 c0       	rjmp	.+4      	; 0x2bd0 <EINT_enuEnableINT+0x7c>
			break;
		}
	}
	else
	{
		Local_enuErrorstate=ES_OUT_OF_RANGE;
    2bcc:	83 e0       	ldi	r24, 0x03	; 3
    2bce:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    2bd0:	89 81       	ldd	r24, Y+1	; 0x01
}
    2bd2:	0f 90       	pop	r0
    2bd4:	0f 90       	pop	r0
    2bd6:	0f 90       	pop	r0
    2bd8:	0f 90       	pop	r0
    2bda:	cf 91       	pop	r28
    2bdc:	df 91       	pop	r29
    2bde:	08 95       	ret

00002be0 <EINT_enuDisableINT>:

ES_t EINT_enuDisableINT(u8 Copy_u8ID)
{
    2be0:	df 93       	push	r29
    2be2:	cf 93       	push	r28
    2be4:	00 d0       	rcall	.+0      	; 0x2be6 <EINT_enuDisableINT+0x6>
    2be6:	00 d0       	rcall	.+0      	; 0x2be8 <EINT_enuDisableINT+0x8>
    2be8:	cd b7       	in	r28, 0x3d	; 61
    2bea:	de b7       	in	r29, 0x3e	; 62
    2bec:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate=ES_NOK;
    2bee:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8ID<3)
    2bf0:	8a 81       	ldd	r24, Y+2	; 0x02
    2bf2:	83 30       	cpi	r24, 0x03	; 3
    2bf4:	88 f5       	brcc	.+98     	; 0x2c58 <EINT_enuDisableINT+0x78>
	{
		switch(Copy_u8ID)
    2bf6:	8a 81       	ldd	r24, Y+2	; 0x02
    2bf8:	28 2f       	mov	r18, r24
    2bfa:	30 e0       	ldi	r19, 0x00	; 0
    2bfc:	3c 83       	std	Y+4, r19	; 0x04
    2bfe:	2b 83       	std	Y+3, r18	; 0x03
    2c00:	8b 81       	ldd	r24, Y+3	; 0x03
    2c02:	9c 81       	ldd	r25, Y+4	; 0x04
    2c04:	81 30       	cpi	r24, 0x01	; 1
    2c06:	91 05       	cpc	r25, r1
    2c08:	99 f0       	breq	.+38     	; 0x2c30 <EINT_enuDisableINT+0x50>
    2c0a:	2b 81       	ldd	r18, Y+3	; 0x03
    2c0c:	3c 81       	ldd	r19, Y+4	; 0x04
    2c0e:	22 30       	cpi	r18, 0x02	; 2
    2c10:	31 05       	cpc	r19, r1
    2c12:	c1 f0       	breq	.+48     	; 0x2c44 <EINT_enuDisableINT+0x64>
    2c14:	8b 81       	ldd	r24, Y+3	; 0x03
    2c16:	9c 81       	ldd	r25, Y+4	; 0x04
    2c18:	00 97       	sbiw	r24, 0x00	; 0
    2c1a:	01 f5       	brne	.+64     	; 0x2c5c <EINT_enuDisableINT+0x7c>
		{
		case EINT0:
			GICR &=~(1<<6);
    2c1c:	ab e5       	ldi	r26, 0x5B	; 91
    2c1e:	b0 e0       	ldi	r27, 0x00	; 0
    2c20:	eb e5       	ldi	r30, 0x5B	; 91
    2c22:	f0 e0       	ldi	r31, 0x00	; 0
    2c24:	80 81       	ld	r24, Z
    2c26:	8f 7b       	andi	r24, 0xBF	; 191
    2c28:	8c 93       	st	X, r24
			Local_enuErrorstate=ES_OK;
    2c2a:	81 e0       	ldi	r24, 0x01	; 1
    2c2c:	89 83       	std	Y+1, r24	; 0x01
    2c2e:	16 c0       	rjmp	.+44     	; 0x2c5c <EINT_enuDisableINT+0x7c>
			break;
		case EINT1:
			GICR &=~(1<<7);
    2c30:	ab e5       	ldi	r26, 0x5B	; 91
    2c32:	b0 e0       	ldi	r27, 0x00	; 0
    2c34:	eb e5       	ldi	r30, 0x5B	; 91
    2c36:	f0 e0       	ldi	r31, 0x00	; 0
    2c38:	80 81       	ld	r24, Z
    2c3a:	8f 77       	andi	r24, 0x7F	; 127
    2c3c:	8c 93       	st	X, r24
			Local_enuErrorstate=ES_OK;
    2c3e:	81 e0       	ldi	r24, 0x01	; 1
    2c40:	89 83       	std	Y+1, r24	; 0x01
    2c42:	0c c0       	rjmp	.+24     	; 0x2c5c <EINT_enuDisableINT+0x7c>
			break;
		case EINT2:
			GICR &=~(1<<5);
    2c44:	ab e5       	ldi	r26, 0x5B	; 91
    2c46:	b0 e0       	ldi	r27, 0x00	; 0
    2c48:	eb e5       	ldi	r30, 0x5B	; 91
    2c4a:	f0 e0       	ldi	r31, 0x00	; 0
    2c4c:	80 81       	ld	r24, Z
    2c4e:	8f 7d       	andi	r24, 0xDF	; 223
    2c50:	8c 93       	st	X, r24
			Local_enuErrorstate=ES_OK;
    2c52:	81 e0       	ldi	r24, 0x01	; 1
    2c54:	89 83       	std	Y+1, r24	; 0x01
    2c56:	02 c0       	rjmp	.+4      	; 0x2c5c <EINT_enuDisableINT+0x7c>
			break;
		}
	}
	else
	{
		Local_enuErrorstate=ES_OUT_OF_RANGE;
    2c58:	83 e0       	ldi	r24, 0x03	; 3
    2c5a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    2c5c:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c5e:	0f 90       	pop	r0
    2c60:	0f 90       	pop	r0
    2c62:	0f 90       	pop	r0
    2c64:	0f 90       	pop	r0
    2c66:	cf 91       	pop	r28
    2c68:	df 91       	pop	r29
    2c6a:	08 95       	ret

00002c6c <EINT_enuSelectSenceLevel>:

ES_t EINT_enuSelectSenceLevel(u8 Copy_u8ID , u8 Copy_u8SenceLevel)
{
    2c6c:	df 93       	push	r29
    2c6e:	cf 93       	push	r28
    2c70:	cd b7       	in	r28, 0x3d	; 61
    2c72:	de b7       	in	r29, 0x3e	; 62
    2c74:	2b 97       	sbiw	r28, 0x0b	; 11
    2c76:	0f b6       	in	r0, 0x3f	; 63
    2c78:	f8 94       	cli
    2c7a:	de bf       	out	0x3e, r29	; 62
    2c7c:	0f be       	out	0x3f, r0	; 63
    2c7e:	cd bf       	out	0x3d, r28	; 61
    2c80:	8a 83       	std	Y+2, r24	; 0x02
    2c82:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate=ES_NOK;
    2c84:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8ID<3)
    2c86:	8a 81       	ldd	r24, Y+2	; 0x02
    2c88:	83 30       	cpi	r24, 0x03	; 3
    2c8a:	08 f0       	brcs	.+2      	; 0x2c8e <EINT_enuSelectSenceLevel+0x22>
    2c8c:	f3 c0       	rjmp	.+486    	; 0x2e74 <EINT_enuSelectSenceLevel+0x208>
	{
		switch(Copy_u8ID)
    2c8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c90:	28 2f       	mov	r18, r24
    2c92:	30 e0       	ldi	r19, 0x00	; 0
    2c94:	3b 87       	std	Y+11, r19	; 0x0b
    2c96:	2a 87       	std	Y+10, r18	; 0x0a
    2c98:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c9a:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c9c:	81 30       	cpi	r24, 0x01	; 1
    2c9e:	91 05       	cpc	r25, r1
    2ca0:	09 f4       	brne	.+2      	; 0x2ca4 <EINT_enuSelectSenceLevel+0x38>
    2ca2:	69 c0       	rjmp	.+210    	; 0x2d76 <EINT_enuSelectSenceLevel+0x10a>
    2ca4:	2a 85       	ldd	r18, Y+10	; 0x0a
    2ca6:	3b 85       	ldd	r19, Y+11	; 0x0b
    2ca8:	22 30       	cpi	r18, 0x02	; 2
    2caa:	31 05       	cpc	r19, r1
    2cac:	09 f4       	brne	.+2      	; 0x2cb0 <EINT_enuSelectSenceLevel+0x44>
    2cae:	c1 c0       	rjmp	.+386    	; 0x2e32 <EINT_enuSelectSenceLevel+0x1c6>
    2cb0:	8a 85       	ldd	r24, Y+10	; 0x0a
    2cb2:	9b 85       	ldd	r25, Y+11	; 0x0b
    2cb4:	00 97       	sbiw	r24, 0x00	; 0
    2cb6:	09 f0       	breq	.+2      	; 0x2cba <EINT_enuSelectSenceLevel+0x4e>
    2cb8:	df c0       	rjmp	.+446    	; 0x2e78 <EINT_enuSelectSenceLevel+0x20c>
		{
		case EINT0:
			switch(Copy_u8SenceLevel)
    2cba:	8b 81       	ldd	r24, Y+3	; 0x03
    2cbc:	28 2f       	mov	r18, r24
    2cbe:	30 e0       	ldi	r19, 0x00	; 0
    2cc0:	39 87       	std	Y+9, r19	; 0x09
    2cc2:	28 87       	std	Y+8, r18	; 0x08
    2cc4:	88 85       	ldd	r24, Y+8	; 0x08
    2cc6:	99 85       	ldd	r25, Y+9	; 0x09
    2cc8:	82 30       	cpi	r24, 0x02	; 2
    2cca:	91 05       	cpc	r25, r1
    2ccc:	29 f1       	breq	.+74     	; 0x2d18 <EINT_enuSelectSenceLevel+0xac>
    2cce:	28 85       	ldd	r18, Y+8	; 0x08
    2cd0:	39 85       	ldd	r19, Y+9	; 0x09
    2cd2:	23 30       	cpi	r18, 0x03	; 3
    2cd4:	31 05       	cpc	r19, r1
    2cd6:	34 f4       	brge	.+12     	; 0x2ce4 <EINT_enuSelectSenceLevel+0x78>
    2cd8:	88 85       	ldd	r24, Y+8	; 0x08
    2cda:	99 85       	ldd	r25, Y+9	; 0x09
    2cdc:	81 30       	cpi	r24, 0x01	; 1
    2cde:	91 05       	cpc	r25, r1
    2ce0:	61 f0       	breq	.+24     	; 0x2cfa <EINT_enuSelectSenceLevel+0x8e>
    2ce2:	46 c0       	rjmp	.+140    	; 0x2d70 <EINT_enuSelectSenceLevel+0x104>
    2ce4:	28 85       	ldd	r18, Y+8	; 0x08
    2ce6:	39 85       	ldd	r19, Y+9	; 0x09
    2ce8:	23 30       	cpi	r18, 0x03	; 3
    2cea:	31 05       	cpc	r19, r1
    2cec:	99 f1       	breq	.+102    	; 0x2d54 <EINT_enuSelectSenceLevel+0xe8>
    2cee:	88 85       	ldd	r24, Y+8	; 0x08
    2cf0:	99 85       	ldd	r25, Y+9	; 0x09
    2cf2:	84 30       	cpi	r24, 0x04	; 4
    2cf4:	91 05       	cpc	r25, r1
    2cf6:	f9 f0       	breq	.+62     	; 0x2d36 <EINT_enuSelectSenceLevel+0xca>
    2cf8:	3b c0       	rjmp	.+118    	; 0x2d70 <EINT_enuSelectSenceLevel+0x104>
			{
			case EINT_LOW_LEVEL:
				MCUCR&=~(1<<1);
    2cfa:	a5 e5       	ldi	r26, 0x55	; 85
    2cfc:	b0 e0       	ldi	r27, 0x00	; 0
    2cfe:	e5 e5       	ldi	r30, 0x55	; 85
    2d00:	f0 e0       	ldi	r31, 0x00	; 0
    2d02:	80 81       	ld	r24, Z
    2d04:	8d 7f       	andi	r24, 0xFD	; 253
    2d06:	8c 93       	st	X, r24
				MCUCR&=~(1<<0);
    2d08:	a5 e5       	ldi	r26, 0x55	; 85
    2d0a:	b0 e0       	ldi	r27, 0x00	; 0
    2d0c:	e5 e5       	ldi	r30, 0x55	; 85
    2d0e:	f0 e0       	ldi	r31, 0x00	; 0
    2d10:	80 81       	ld	r24, Z
    2d12:	8e 7f       	andi	r24, 0xFE	; 254
    2d14:	8c 93       	st	X, r24
    2d16:	2c c0       	rjmp	.+88     	; 0x2d70 <EINT_enuSelectSenceLevel+0x104>
				break;
			case EINT_ANY_LOG_CHANGE:
				MCUCR&=~(1<<1);
    2d18:	a5 e5       	ldi	r26, 0x55	; 85
    2d1a:	b0 e0       	ldi	r27, 0x00	; 0
    2d1c:	e5 e5       	ldi	r30, 0x55	; 85
    2d1e:	f0 e0       	ldi	r31, 0x00	; 0
    2d20:	80 81       	ld	r24, Z
    2d22:	8d 7f       	andi	r24, 0xFD	; 253
    2d24:	8c 93       	st	X, r24
				MCUCR |=(1<<0);
    2d26:	a5 e5       	ldi	r26, 0x55	; 85
    2d28:	b0 e0       	ldi	r27, 0x00	; 0
    2d2a:	e5 e5       	ldi	r30, 0x55	; 85
    2d2c:	f0 e0       	ldi	r31, 0x00	; 0
    2d2e:	80 81       	ld	r24, Z
    2d30:	81 60       	ori	r24, 0x01	; 1
    2d32:	8c 93       	st	X, r24
    2d34:	1d c0       	rjmp	.+58     	; 0x2d70 <EINT_enuSelectSenceLevel+0x104>
				break;
			case EINT_FALLING_EDGE:
				MCUCR |=(1<<1);
    2d36:	a5 e5       	ldi	r26, 0x55	; 85
    2d38:	b0 e0       	ldi	r27, 0x00	; 0
    2d3a:	e5 e5       	ldi	r30, 0x55	; 85
    2d3c:	f0 e0       	ldi	r31, 0x00	; 0
    2d3e:	80 81       	ld	r24, Z
    2d40:	82 60       	ori	r24, 0x02	; 2
    2d42:	8c 93       	st	X, r24
				MCUCR&=~(1<<0);
    2d44:	a5 e5       	ldi	r26, 0x55	; 85
    2d46:	b0 e0       	ldi	r27, 0x00	; 0
    2d48:	e5 e5       	ldi	r30, 0x55	; 85
    2d4a:	f0 e0       	ldi	r31, 0x00	; 0
    2d4c:	80 81       	ld	r24, Z
    2d4e:	8e 7f       	andi	r24, 0xFE	; 254
    2d50:	8c 93       	st	X, r24
    2d52:	0e c0       	rjmp	.+28     	; 0x2d70 <EINT_enuSelectSenceLevel+0x104>
				break;
			case EINT_RISING_EDGE:
				MCUCR |=(1<<1);
    2d54:	a5 e5       	ldi	r26, 0x55	; 85
    2d56:	b0 e0       	ldi	r27, 0x00	; 0
    2d58:	e5 e5       	ldi	r30, 0x55	; 85
    2d5a:	f0 e0       	ldi	r31, 0x00	; 0
    2d5c:	80 81       	ld	r24, Z
    2d5e:	82 60       	ori	r24, 0x02	; 2
    2d60:	8c 93       	st	X, r24
				MCUCR |=(1<<0);
    2d62:	a5 e5       	ldi	r26, 0x55	; 85
    2d64:	b0 e0       	ldi	r27, 0x00	; 0
    2d66:	e5 e5       	ldi	r30, 0x55	; 85
    2d68:	f0 e0       	ldi	r31, 0x00	; 0
    2d6a:	80 81       	ld	r24, Z
    2d6c:	81 60       	ori	r24, 0x01	; 1
    2d6e:	8c 93       	st	X, r24
				break;
			}
			Local_enuErrorstate=ES_OK;
    2d70:	81 e0       	ldi	r24, 0x01	; 1
    2d72:	89 83       	std	Y+1, r24	; 0x01
    2d74:	81 c0       	rjmp	.+258    	; 0x2e78 <EINT_enuSelectSenceLevel+0x20c>
			break;
		case EINT1:
			switch(Copy_u8SenceLevel)
    2d76:	8b 81       	ldd	r24, Y+3	; 0x03
    2d78:	28 2f       	mov	r18, r24
    2d7a:	30 e0       	ldi	r19, 0x00	; 0
    2d7c:	3f 83       	std	Y+7, r19	; 0x07
    2d7e:	2e 83       	std	Y+6, r18	; 0x06
    2d80:	8e 81       	ldd	r24, Y+6	; 0x06
    2d82:	9f 81       	ldd	r25, Y+7	; 0x07
    2d84:	82 30       	cpi	r24, 0x02	; 2
    2d86:	91 05       	cpc	r25, r1
    2d88:	29 f1       	breq	.+74     	; 0x2dd4 <EINT_enuSelectSenceLevel+0x168>
    2d8a:	2e 81       	ldd	r18, Y+6	; 0x06
    2d8c:	3f 81       	ldd	r19, Y+7	; 0x07
    2d8e:	23 30       	cpi	r18, 0x03	; 3
    2d90:	31 05       	cpc	r19, r1
    2d92:	34 f4       	brge	.+12     	; 0x2da0 <EINT_enuSelectSenceLevel+0x134>
    2d94:	8e 81       	ldd	r24, Y+6	; 0x06
    2d96:	9f 81       	ldd	r25, Y+7	; 0x07
    2d98:	81 30       	cpi	r24, 0x01	; 1
    2d9a:	91 05       	cpc	r25, r1
    2d9c:	61 f0       	breq	.+24     	; 0x2db6 <EINT_enuSelectSenceLevel+0x14a>
    2d9e:	46 c0       	rjmp	.+140    	; 0x2e2c <EINT_enuSelectSenceLevel+0x1c0>
    2da0:	2e 81       	ldd	r18, Y+6	; 0x06
    2da2:	3f 81       	ldd	r19, Y+7	; 0x07
    2da4:	23 30       	cpi	r18, 0x03	; 3
    2da6:	31 05       	cpc	r19, r1
    2da8:	99 f1       	breq	.+102    	; 0x2e10 <EINT_enuSelectSenceLevel+0x1a4>
    2daa:	8e 81       	ldd	r24, Y+6	; 0x06
    2dac:	9f 81       	ldd	r25, Y+7	; 0x07
    2dae:	84 30       	cpi	r24, 0x04	; 4
    2db0:	91 05       	cpc	r25, r1
    2db2:	f9 f0       	breq	.+62     	; 0x2df2 <EINT_enuSelectSenceLevel+0x186>
    2db4:	3b c0       	rjmp	.+118    	; 0x2e2c <EINT_enuSelectSenceLevel+0x1c0>
			{
			case EINT_LOW_LEVEL:
				MCUCR&=~(1<<3);
    2db6:	a5 e5       	ldi	r26, 0x55	; 85
    2db8:	b0 e0       	ldi	r27, 0x00	; 0
    2dba:	e5 e5       	ldi	r30, 0x55	; 85
    2dbc:	f0 e0       	ldi	r31, 0x00	; 0
    2dbe:	80 81       	ld	r24, Z
    2dc0:	87 7f       	andi	r24, 0xF7	; 247
    2dc2:	8c 93       	st	X, r24
				MCUCR&=~(1<<2);
    2dc4:	a5 e5       	ldi	r26, 0x55	; 85
    2dc6:	b0 e0       	ldi	r27, 0x00	; 0
    2dc8:	e5 e5       	ldi	r30, 0x55	; 85
    2dca:	f0 e0       	ldi	r31, 0x00	; 0
    2dcc:	80 81       	ld	r24, Z
    2dce:	8b 7f       	andi	r24, 0xFB	; 251
    2dd0:	8c 93       	st	X, r24
    2dd2:	2c c0       	rjmp	.+88     	; 0x2e2c <EINT_enuSelectSenceLevel+0x1c0>
				break;
			case EINT_ANY_LOG_CHANGE:
				MCUCR&=~(1<<3);
    2dd4:	a5 e5       	ldi	r26, 0x55	; 85
    2dd6:	b0 e0       	ldi	r27, 0x00	; 0
    2dd8:	e5 e5       	ldi	r30, 0x55	; 85
    2dda:	f0 e0       	ldi	r31, 0x00	; 0
    2ddc:	80 81       	ld	r24, Z
    2dde:	87 7f       	andi	r24, 0xF7	; 247
    2de0:	8c 93       	st	X, r24
				MCUCR |=(1<<2);
    2de2:	a5 e5       	ldi	r26, 0x55	; 85
    2de4:	b0 e0       	ldi	r27, 0x00	; 0
    2de6:	e5 e5       	ldi	r30, 0x55	; 85
    2de8:	f0 e0       	ldi	r31, 0x00	; 0
    2dea:	80 81       	ld	r24, Z
    2dec:	84 60       	ori	r24, 0x04	; 4
    2dee:	8c 93       	st	X, r24
    2df0:	1d c0       	rjmp	.+58     	; 0x2e2c <EINT_enuSelectSenceLevel+0x1c0>
				break;
			case EINT_FALLING_EDGE:
				MCUCR |=(1<<3);
    2df2:	a5 e5       	ldi	r26, 0x55	; 85
    2df4:	b0 e0       	ldi	r27, 0x00	; 0
    2df6:	e5 e5       	ldi	r30, 0x55	; 85
    2df8:	f0 e0       	ldi	r31, 0x00	; 0
    2dfa:	80 81       	ld	r24, Z
    2dfc:	88 60       	ori	r24, 0x08	; 8
    2dfe:	8c 93       	st	X, r24
				MCUCR&=~(1<<2);
    2e00:	a5 e5       	ldi	r26, 0x55	; 85
    2e02:	b0 e0       	ldi	r27, 0x00	; 0
    2e04:	e5 e5       	ldi	r30, 0x55	; 85
    2e06:	f0 e0       	ldi	r31, 0x00	; 0
    2e08:	80 81       	ld	r24, Z
    2e0a:	8b 7f       	andi	r24, 0xFB	; 251
    2e0c:	8c 93       	st	X, r24
    2e0e:	0e c0       	rjmp	.+28     	; 0x2e2c <EINT_enuSelectSenceLevel+0x1c0>
				break;
			case EINT_RISING_EDGE:
				MCUCR |=(1<<3);
    2e10:	a5 e5       	ldi	r26, 0x55	; 85
    2e12:	b0 e0       	ldi	r27, 0x00	; 0
    2e14:	e5 e5       	ldi	r30, 0x55	; 85
    2e16:	f0 e0       	ldi	r31, 0x00	; 0
    2e18:	80 81       	ld	r24, Z
    2e1a:	88 60       	ori	r24, 0x08	; 8
    2e1c:	8c 93       	st	X, r24
				MCUCR |=(1<<2);
    2e1e:	a5 e5       	ldi	r26, 0x55	; 85
    2e20:	b0 e0       	ldi	r27, 0x00	; 0
    2e22:	e5 e5       	ldi	r30, 0x55	; 85
    2e24:	f0 e0       	ldi	r31, 0x00	; 0
    2e26:	80 81       	ld	r24, Z
    2e28:	84 60       	ori	r24, 0x04	; 4
    2e2a:	8c 93       	st	X, r24
				break;
			}
			Local_enuErrorstate=ES_OK;
    2e2c:	81 e0       	ldi	r24, 0x01	; 1
    2e2e:	89 83       	std	Y+1, r24	; 0x01
    2e30:	23 c0       	rjmp	.+70     	; 0x2e78 <EINT_enuSelectSenceLevel+0x20c>
			break;
		case EINT2:
			switch(Copy_u8SenceLevel)
    2e32:	8b 81       	ldd	r24, Y+3	; 0x03
    2e34:	28 2f       	mov	r18, r24
    2e36:	30 e0       	ldi	r19, 0x00	; 0
    2e38:	3d 83       	std	Y+5, r19	; 0x05
    2e3a:	2c 83       	std	Y+4, r18	; 0x04
    2e3c:	8c 81       	ldd	r24, Y+4	; 0x04
    2e3e:	9d 81       	ldd	r25, Y+5	; 0x05
    2e40:	83 30       	cpi	r24, 0x03	; 3
    2e42:	91 05       	cpc	r25, r1
    2e44:	69 f0       	breq	.+26     	; 0x2e60 <EINT_enuSelectSenceLevel+0x1f4>
    2e46:	2c 81       	ldd	r18, Y+4	; 0x04
    2e48:	3d 81       	ldd	r19, Y+5	; 0x05
    2e4a:	24 30       	cpi	r18, 0x04	; 4
    2e4c:	31 05       	cpc	r19, r1
    2e4e:	79 f4       	brne	.+30     	; 0x2e6e <EINT_enuSelectSenceLevel+0x202>
			{
			case EINT_FALLING_EDGE:
				MCUCSR&=~(1<<6);
    2e50:	a4 e5       	ldi	r26, 0x54	; 84
    2e52:	b0 e0       	ldi	r27, 0x00	; 0
    2e54:	e4 e5       	ldi	r30, 0x54	; 84
    2e56:	f0 e0       	ldi	r31, 0x00	; 0
    2e58:	80 81       	ld	r24, Z
    2e5a:	8f 7b       	andi	r24, 0xBF	; 191
    2e5c:	8c 93       	st	X, r24
    2e5e:	07 c0       	rjmp	.+14     	; 0x2e6e <EINT_enuSelectSenceLevel+0x202>
				break;
			case EINT_RISING_EDGE:
				MCUCSR |=(1<<6);
    2e60:	a4 e5       	ldi	r26, 0x54	; 84
    2e62:	b0 e0       	ldi	r27, 0x00	; 0
    2e64:	e4 e5       	ldi	r30, 0x54	; 84
    2e66:	f0 e0       	ldi	r31, 0x00	; 0
    2e68:	80 81       	ld	r24, Z
    2e6a:	80 64       	ori	r24, 0x40	; 64
    2e6c:	8c 93       	st	X, r24
				break;
			}
			Local_enuErrorstate=ES_OK;
    2e6e:	81 e0       	ldi	r24, 0x01	; 1
    2e70:	89 83       	std	Y+1, r24	; 0x01
    2e72:	02 c0       	rjmp	.+4      	; 0x2e78 <EINT_enuSelectSenceLevel+0x20c>
			break;
		}
	}
	else
	{
		Local_enuErrorstate=ES_OUT_OF_RANGE;
    2e74:	83 e0       	ldi	r24, 0x03	; 3
    2e76:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    2e78:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e7a:	2b 96       	adiw	r28, 0x0b	; 11
    2e7c:	0f b6       	in	r0, 0x3f	; 63
    2e7e:	f8 94       	cli
    2e80:	de bf       	out	0x3e, r29	; 62
    2e82:	0f be       	out	0x3f, r0	; 63
    2e84:	cd bf       	out	0x3d, r28	; 61
    2e86:	cf 91       	pop	r28
    2e88:	df 91       	pop	r29
    2e8a:	08 95       	ret

00002e8c <EINT_enuCallBack>:

ES_t EINT_enuCallBack(void *(Copy_pfun)(void *),void *Copy_pvoid,u8 Copy_u8ID)
{
    2e8c:	df 93       	push	r29
    2e8e:	cf 93       	push	r28
    2e90:	00 d0       	rcall	.+0      	; 0x2e92 <EINT_enuCallBack+0x6>
    2e92:	00 d0       	rcall	.+0      	; 0x2e94 <EINT_enuCallBack+0x8>
    2e94:	00 d0       	rcall	.+0      	; 0x2e96 <EINT_enuCallBack+0xa>
    2e96:	cd b7       	in	r28, 0x3d	; 61
    2e98:	de b7       	in	r29, 0x3e	; 62
    2e9a:	9b 83       	std	Y+3, r25	; 0x03
    2e9c:	8a 83       	std	Y+2, r24	; 0x02
    2e9e:	7d 83       	std	Y+5, r23	; 0x05
    2ea0:	6c 83       	std	Y+4, r22	; 0x04
    2ea2:	4e 83       	std	Y+6, r20	; 0x06
	ES_t Local_enuErrorState=ES_NOK;
    2ea4:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pfun!=NULL)
    2ea6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ea8:	9b 81       	ldd	r25, Y+3	; 0x03
    2eaa:	00 97       	sbiw	r24, 0x00	; 0
    2eac:	09 f1       	breq	.+66     	; 0x2ef0 <EINT_enuCallBack+0x64>
	{
		if(Copy_u8ID<3)
    2eae:	8e 81       	ldd	r24, Y+6	; 0x06
    2eb0:	83 30       	cpi	r24, 0x03	; 3
    2eb2:	d8 f4       	brcc	.+54     	; 0x2eea <EINT_enuCallBack+0x5e>
		{
			EINT_pfunINT[Copy_u8ID]=Copy_pfun;
    2eb4:	8e 81       	ldd	r24, Y+6	; 0x06
    2eb6:	88 2f       	mov	r24, r24
    2eb8:	90 e0       	ldi	r25, 0x00	; 0
    2eba:	2a 81       	ldd	r18, Y+2	; 0x02
    2ebc:	3b 81       	ldd	r19, Y+3	; 0x03
    2ebe:	88 0f       	add	r24, r24
    2ec0:	99 1f       	adc	r25, r25
    2ec2:	fc 01       	movw	r30, r24
    2ec4:	ee 57       	subi	r30, 0x7E	; 126
    2ec6:	f8 4f       	sbci	r31, 0xF8	; 248
    2ec8:	31 83       	std	Z+1, r19	; 0x01
    2eca:	20 83       	st	Z, r18
			EINT_ApvoidINT[Copy_u8ID]=Copy_pvoid;
    2ecc:	8e 81       	ldd	r24, Y+6	; 0x06
    2ece:	88 2f       	mov	r24, r24
    2ed0:	90 e0       	ldi	r25, 0x00	; 0
    2ed2:	88 0f       	add	r24, r24
    2ed4:	99 1f       	adc	r25, r25
    2ed6:	fc 01       	movw	r30, r24
    2ed8:	e8 57       	subi	r30, 0x78	; 120
    2eda:	f8 4f       	sbci	r31, 0xF8	; 248
    2edc:	8c 81       	ldd	r24, Y+4	; 0x04
    2ede:	9d 81       	ldd	r25, Y+5	; 0x05
    2ee0:	91 83       	std	Z+1, r25	; 0x01
    2ee2:	80 83       	st	Z, r24
			Local_enuErrorState=ES_OK;
    2ee4:	81 e0       	ldi	r24, 0x01	; 1
    2ee6:	89 83       	std	Y+1, r24	; 0x01
    2ee8:	05 c0       	rjmp	.+10     	; 0x2ef4 <EINT_enuCallBack+0x68>
		}
		else
		{
			Local_enuErrorState=ES_OUT_OF_RANGE;
    2eea:	83 e0       	ldi	r24, 0x03	; 3
    2eec:	89 83       	std	Y+1, r24	; 0x01
    2eee:	02 c0       	rjmp	.+4      	; 0x2ef4 <EINT_enuCallBack+0x68>
		}
	}
	else
	{
		Local_enuErrorState=ES_NULL_POINTER;
    2ef0:	82 e0       	ldi	r24, 0x02	; 2
    2ef2:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    2ef4:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ef6:	26 96       	adiw	r28, 0x06	; 6
    2ef8:	0f b6       	in	r0, 0x3f	; 63
    2efa:	f8 94       	cli
    2efc:	de bf       	out	0x3e, r29	; 62
    2efe:	0f be       	out	0x3f, r0	; 63
    2f00:	cd bf       	out	0x3d, r28	; 61
    2f02:	cf 91       	pop	r28
    2f04:	df 91       	pop	r29
    2f06:	08 95       	ret

00002f08 <__vector_1>:

ISR(VECT_INT0)
{
    2f08:	1f 92       	push	r1
    2f0a:	0f 92       	push	r0
    2f0c:	0f b6       	in	r0, 0x3f	; 63
    2f0e:	0f 92       	push	r0
    2f10:	11 24       	eor	r1, r1
    2f12:	2f 93       	push	r18
    2f14:	3f 93       	push	r19
    2f16:	4f 93       	push	r20
    2f18:	5f 93       	push	r21
    2f1a:	6f 93       	push	r22
    2f1c:	7f 93       	push	r23
    2f1e:	8f 93       	push	r24
    2f20:	9f 93       	push	r25
    2f22:	af 93       	push	r26
    2f24:	bf 93       	push	r27
    2f26:	ef 93       	push	r30
    2f28:	ff 93       	push	r31
    2f2a:	df 93       	push	r29
    2f2c:	cf 93       	push	r28
    2f2e:	cd b7       	in	r28, 0x3d	; 61
    2f30:	de b7       	in	r29, 0x3e	; 62
	if(EINT_pfunINT[EINT0]!=NULL)
    2f32:	80 91 82 07 	lds	r24, 0x0782
    2f36:	90 91 83 07 	lds	r25, 0x0783
    2f3a:	00 97       	sbiw	r24, 0x00	; 0
    2f3c:	49 f0       	breq	.+18     	; 0x2f50 <__vector_1+0x48>
	{
		EINT_pfunINT[EINT0](EINT_ApvoidINT[EINT0]);
    2f3e:	e0 91 82 07 	lds	r30, 0x0782
    2f42:	f0 91 83 07 	lds	r31, 0x0783
    2f46:	80 91 88 07 	lds	r24, 0x0788
    2f4a:	90 91 89 07 	lds	r25, 0x0789
    2f4e:	09 95       	icall
	}
}
    2f50:	cf 91       	pop	r28
    2f52:	df 91       	pop	r29
    2f54:	ff 91       	pop	r31
    2f56:	ef 91       	pop	r30
    2f58:	bf 91       	pop	r27
    2f5a:	af 91       	pop	r26
    2f5c:	9f 91       	pop	r25
    2f5e:	8f 91       	pop	r24
    2f60:	7f 91       	pop	r23
    2f62:	6f 91       	pop	r22
    2f64:	5f 91       	pop	r21
    2f66:	4f 91       	pop	r20
    2f68:	3f 91       	pop	r19
    2f6a:	2f 91       	pop	r18
    2f6c:	0f 90       	pop	r0
    2f6e:	0f be       	out	0x3f, r0	; 63
    2f70:	0f 90       	pop	r0
    2f72:	1f 90       	pop	r1
    2f74:	18 95       	reti

00002f76 <__vector_2>:
ISR(VECT_INT1)
{
    2f76:	1f 92       	push	r1
    2f78:	0f 92       	push	r0
    2f7a:	0f b6       	in	r0, 0x3f	; 63
    2f7c:	0f 92       	push	r0
    2f7e:	11 24       	eor	r1, r1
    2f80:	2f 93       	push	r18
    2f82:	3f 93       	push	r19
    2f84:	4f 93       	push	r20
    2f86:	5f 93       	push	r21
    2f88:	6f 93       	push	r22
    2f8a:	7f 93       	push	r23
    2f8c:	8f 93       	push	r24
    2f8e:	9f 93       	push	r25
    2f90:	af 93       	push	r26
    2f92:	bf 93       	push	r27
    2f94:	ef 93       	push	r30
    2f96:	ff 93       	push	r31
    2f98:	df 93       	push	r29
    2f9a:	cf 93       	push	r28
    2f9c:	cd b7       	in	r28, 0x3d	; 61
    2f9e:	de b7       	in	r29, 0x3e	; 62
	if(EINT_pfunINT[EINT1]!=NULL)
    2fa0:	80 91 84 07 	lds	r24, 0x0784
    2fa4:	90 91 85 07 	lds	r25, 0x0785
    2fa8:	00 97       	sbiw	r24, 0x00	; 0
    2faa:	49 f0       	breq	.+18     	; 0x2fbe <__vector_2+0x48>
	{
		EINT_pfunINT[EINT1](EINT_ApvoidINT[EINT1]);
    2fac:	e0 91 84 07 	lds	r30, 0x0784
    2fb0:	f0 91 85 07 	lds	r31, 0x0785
    2fb4:	80 91 8a 07 	lds	r24, 0x078A
    2fb8:	90 91 8b 07 	lds	r25, 0x078B
    2fbc:	09 95       	icall
	}
}
    2fbe:	cf 91       	pop	r28
    2fc0:	df 91       	pop	r29
    2fc2:	ff 91       	pop	r31
    2fc4:	ef 91       	pop	r30
    2fc6:	bf 91       	pop	r27
    2fc8:	af 91       	pop	r26
    2fca:	9f 91       	pop	r25
    2fcc:	8f 91       	pop	r24
    2fce:	7f 91       	pop	r23
    2fd0:	6f 91       	pop	r22
    2fd2:	5f 91       	pop	r21
    2fd4:	4f 91       	pop	r20
    2fd6:	3f 91       	pop	r19
    2fd8:	2f 91       	pop	r18
    2fda:	0f 90       	pop	r0
    2fdc:	0f be       	out	0x3f, r0	; 63
    2fde:	0f 90       	pop	r0
    2fe0:	1f 90       	pop	r1
    2fe2:	18 95       	reti

00002fe4 <__vector_3>:
ISR(VECT_INT2)
{
    2fe4:	1f 92       	push	r1
    2fe6:	0f 92       	push	r0
    2fe8:	0f b6       	in	r0, 0x3f	; 63
    2fea:	0f 92       	push	r0
    2fec:	11 24       	eor	r1, r1
    2fee:	2f 93       	push	r18
    2ff0:	3f 93       	push	r19
    2ff2:	4f 93       	push	r20
    2ff4:	5f 93       	push	r21
    2ff6:	6f 93       	push	r22
    2ff8:	7f 93       	push	r23
    2ffa:	8f 93       	push	r24
    2ffc:	9f 93       	push	r25
    2ffe:	af 93       	push	r26
    3000:	bf 93       	push	r27
    3002:	ef 93       	push	r30
    3004:	ff 93       	push	r31
    3006:	df 93       	push	r29
    3008:	cf 93       	push	r28
    300a:	cd b7       	in	r28, 0x3d	; 61
    300c:	de b7       	in	r29, 0x3e	; 62
	if(EINT_pfunINT[EINT2]!=NULL)
    300e:	80 91 86 07 	lds	r24, 0x0786
    3012:	90 91 87 07 	lds	r25, 0x0787
    3016:	00 97       	sbiw	r24, 0x00	; 0
    3018:	49 f0       	breq	.+18     	; 0x302c <__vector_3+0x48>
	{
		EINT_pfunINT[EINT2](EINT_ApvoidINT[EINT2]);
    301a:	e0 91 86 07 	lds	r30, 0x0786
    301e:	f0 91 87 07 	lds	r31, 0x0787
    3022:	80 91 8c 07 	lds	r24, 0x078C
    3026:	90 91 8d 07 	lds	r25, 0x078D
    302a:	09 95       	icall
	}
}
    302c:	cf 91       	pop	r28
    302e:	df 91       	pop	r29
    3030:	ff 91       	pop	r31
    3032:	ef 91       	pop	r30
    3034:	bf 91       	pop	r27
    3036:	af 91       	pop	r26
    3038:	9f 91       	pop	r25
    303a:	8f 91       	pop	r24
    303c:	7f 91       	pop	r23
    303e:	6f 91       	pop	r22
    3040:	5f 91       	pop	r21
    3042:	4f 91       	pop	r20
    3044:	3f 91       	pop	r19
    3046:	2f 91       	pop	r18
    3048:	0f 90       	pop	r0
    304a:	0f be       	out	0x3f, r0	; 63
    304c:	0f 90       	pop	r0
    304e:	1f 90       	pop	r1
    3050:	18 95       	reti

00003052 <DIO_enuInit>:
#include "DIO_private.h"



ES_t DIO_enuInit(void)
{
    3052:	df 93       	push	r29
    3054:	cf 93       	push	r28
    3056:	0f 92       	push	r0
    3058:	cd b7       	in	r28, 0x3d	; 61
    305a:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorstate=ES_NOK;
    305c:	19 82       	std	Y+1, r1	; 0x01

	DDRA= CONC(PA_PIN7_DIR,PA_PIN6_DIR,PA_PIN5_DIR,PA_PIN4_DIR,PA_PIN3_DIR,PA_PIN2_DIR,PA_PIN1_DIR,PA_PIN0_DIR);
    305e:	ea e3       	ldi	r30, 0x3A	; 58
    3060:	f0 e0       	ldi	r31, 0x00	; 0
    3062:	8f ef       	ldi	r24, 0xFF	; 255
    3064:	80 83       	st	Z, r24
	DDRB= CONC(PB_PIN7_DIR,PB_PIN6_DIR,PB_PIN5_DIR,PB_PIN4_DIR,PB_PIN3_DIR,PB_PIN2_DIR,PB_PIN1_DIR,PB_PIN0_DIR);
    3066:	e7 e3       	ldi	r30, 0x37	; 55
    3068:	f0 e0       	ldi	r31, 0x00	; 0
    306a:	86 e9       	ldi	r24, 0x96	; 150
    306c:	80 83       	st	Z, r24
	DDRC= CONC(PC_PIN7_DIR,PC_PIN6_DIR,PC_PIN5_DIR,PC_PIN4_DIR,PC_PIN3_DIR,PC_PIN2_DIR,PC_PIN1_DIR,PC_PIN0_DIR);
    306e:	e4 e3       	ldi	r30, 0x34	; 52
    3070:	f0 e0       	ldi	r31, 0x00	; 0
    3072:	86 e9       	ldi	r24, 0x96	; 150
    3074:	80 83       	st	Z, r24
	DDRD= CONC(PD_PIN7_DIR,PD_PIN6_DIR,PD_PIN5_DIR,PD_PIN4_DIR,PD_PIN3_DIR,PD_PIN2_DIR,PD_PIN1_DIR,PD_PIN0_DIR);
    3076:	e1 e3       	ldi	r30, 0x31	; 49
    3078:	f0 e0       	ldi	r31, 0x00	; 0
    307a:	86 e9       	ldi	r24, 0x96	; 150
    307c:	80 83       	st	Z, r24

	PORTA= CONC(PA_PIN7_VAL,PA_PIN6_VAL,PA_PIN5_VAL,PA_PIN4_VAL,PA_PIN3_VAL,PA_PIN2_VAL,PA_PIN1_VAL,PA_PIN0_VAL);
    307e:	eb e3       	ldi	r30, 0x3B	; 59
    3080:	f0 e0       	ldi	r31, 0x00	; 0
    3082:	10 82       	st	Z, r1
	PORTB= CONC(PB_PIN7_VAL,PB_PIN6_VAL,PB_PIN5_VAL,PB_PIN4_VAL,PB_PIN3_VAL,PB_PIN2_VAL,PB_PIN1_VAL,PB_PIN0_VAL);
    3084:	e8 e3       	ldi	r30, 0x38	; 56
    3086:	f0 e0       	ldi	r31, 0x00	; 0
    3088:	8a e5       	ldi	r24, 0x5A	; 90
    308a:	80 83       	st	Z, r24
	PORTC= CONC(PC_PIN7_VAL,PC_PIN6_VAL,PC_PIN5_VAL,PC_PIN4_VAL,PC_PIN3_VAL,PC_PIN2_VAL,PC_PIN1_VAL,PC_PIN0_VAL);
    308c:	e5 e3       	ldi	r30, 0x35	; 53
    308e:	f0 e0       	ldi	r31, 0x00	; 0
    3090:	8a e5       	ldi	r24, 0x5A	; 90
    3092:	80 83       	st	Z, r24
	PORTD= CONC(PD_PIN7_VAL,PD_PIN6_VAL,PD_PIN5_VAL,PD_PIN4_VAL,PD_PIN3_VAL,PD_PIN2_VAL,PD_PIN1_VAL,PD_PIN0_VAL);
    3094:	e2 e3       	ldi	r30, 0x32	; 50
    3096:	f0 e0       	ldi	r31, 0x00	; 0
    3098:	8a e5       	ldi	r24, 0x5A	; 90
    309a:	80 83       	st	Z, r24

	Local_enuErrorstate=ES_OK;
    309c:	81 e0       	ldi	r24, 0x01	; 1
    309e:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorstate;
    30a0:	89 81       	ldd	r24, Y+1	; 0x01
}
    30a2:	0f 90       	pop	r0
    30a4:	cf 91       	pop	r28
    30a6:	df 91       	pop	r29
    30a8:	08 95       	ret

000030aa <DIO_enuSetPortDirection>:

ES_t DIO_enuSetPortDirection(u8 Copy_u8PortID ,u8 Copy_u8Value)
{
    30aa:	df 93       	push	r29
    30ac:	cf 93       	push	r28
    30ae:	00 d0       	rcall	.+0      	; 0x30b0 <DIO_enuSetPortDirection+0x6>
    30b0:	00 d0       	rcall	.+0      	; 0x30b2 <DIO_enuSetPortDirection+0x8>
    30b2:	0f 92       	push	r0
    30b4:	cd b7       	in	r28, 0x3d	; 61
    30b6:	de b7       	in	r29, 0x3e	; 62
    30b8:	8a 83       	std	Y+2, r24	; 0x02
    30ba:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate=ES_NOK;
    30bc:	19 82       	std	Y+1, r1	; 0x01

	if( Copy_u8PortID <= DIO_PORTD)
    30be:	8a 81       	ldd	r24, Y+2	; 0x02
    30c0:	84 30       	cpi	r24, 0x04	; 4
    30c2:	a8 f5       	brcc	.+106    	; 0x312e <DIO_enuSetPortDirection+0x84>
	{
		switch(Copy_u8PortID)
    30c4:	8a 81       	ldd	r24, Y+2	; 0x02
    30c6:	28 2f       	mov	r18, r24
    30c8:	30 e0       	ldi	r19, 0x00	; 0
    30ca:	3d 83       	std	Y+5, r19	; 0x05
    30cc:	2c 83       	std	Y+4, r18	; 0x04
    30ce:	8c 81       	ldd	r24, Y+4	; 0x04
    30d0:	9d 81       	ldd	r25, Y+5	; 0x05
    30d2:	81 30       	cpi	r24, 0x01	; 1
    30d4:	91 05       	cpc	r25, r1
    30d6:	d1 f0       	breq	.+52     	; 0x310c <DIO_enuSetPortDirection+0x62>
    30d8:	2c 81       	ldd	r18, Y+4	; 0x04
    30da:	3d 81       	ldd	r19, Y+5	; 0x05
    30dc:	22 30       	cpi	r18, 0x02	; 2
    30de:	31 05       	cpc	r19, r1
    30e0:	2c f4       	brge	.+10     	; 0x30ec <DIO_enuSetPortDirection+0x42>
    30e2:	8c 81       	ldd	r24, Y+4	; 0x04
    30e4:	9d 81       	ldd	r25, Y+5	; 0x05
    30e6:	00 97       	sbiw	r24, 0x00	; 0
    30e8:	61 f0       	breq	.+24     	; 0x3102 <DIO_enuSetPortDirection+0x58>
    30ea:	1e c0       	rjmp	.+60     	; 0x3128 <DIO_enuSetPortDirection+0x7e>
    30ec:	2c 81       	ldd	r18, Y+4	; 0x04
    30ee:	3d 81       	ldd	r19, Y+5	; 0x05
    30f0:	22 30       	cpi	r18, 0x02	; 2
    30f2:	31 05       	cpc	r19, r1
    30f4:	81 f0       	breq	.+32     	; 0x3116 <DIO_enuSetPortDirection+0x6c>
    30f6:	8c 81       	ldd	r24, Y+4	; 0x04
    30f8:	9d 81       	ldd	r25, Y+5	; 0x05
    30fa:	83 30       	cpi	r24, 0x03	; 3
    30fc:	91 05       	cpc	r25, r1
    30fe:	81 f0       	breq	.+32     	; 0x3120 <DIO_enuSetPortDirection+0x76>
    3100:	13 c0       	rjmp	.+38     	; 0x3128 <DIO_enuSetPortDirection+0x7e>
		{
		case DIO_PORTA:
			DDRA=Copy_u8Value;
    3102:	ea e3       	ldi	r30, 0x3A	; 58
    3104:	f0 e0       	ldi	r31, 0x00	; 0
    3106:	8b 81       	ldd	r24, Y+3	; 0x03
    3108:	80 83       	st	Z, r24
    310a:	0e c0       	rjmp	.+28     	; 0x3128 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTB:
			DDRB=Copy_u8Value;
    310c:	e7 e3       	ldi	r30, 0x37	; 55
    310e:	f0 e0       	ldi	r31, 0x00	; 0
    3110:	8b 81       	ldd	r24, Y+3	; 0x03
    3112:	80 83       	st	Z, r24
    3114:	09 c0       	rjmp	.+18     	; 0x3128 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTC:
			DDRC=Copy_u8Value;
    3116:	e4 e3       	ldi	r30, 0x34	; 52
    3118:	f0 e0       	ldi	r31, 0x00	; 0
    311a:	8b 81       	ldd	r24, Y+3	; 0x03
    311c:	80 83       	st	Z, r24
    311e:	04 c0       	rjmp	.+8      	; 0x3128 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTD:
			DDRD=Copy_u8Value;
    3120:	e1 e3       	ldi	r30, 0x31	; 49
    3122:	f0 e0       	ldi	r31, 0x00	; 0
    3124:	8b 81       	ldd	r24, Y+3	; 0x03
    3126:	80 83       	st	Z, r24
			break;
		}
		 Local_enuErrorstate=ES_OK;
    3128:	81 e0       	ldi	r24, 0x01	; 1
    312a:	89 83       	std	Y+1, r24	; 0x01
    312c:	02 c0       	rjmp	.+4      	; 0x3132 <DIO_enuSetPortDirection+0x88>
	}
	else
	{
		Local_enuErrorstate=ES_OUT_OF_RANGE;
    312e:	83 e0       	ldi	r24, 0x03	; 3
    3130:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    3132:	89 81       	ldd	r24, Y+1	; 0x01
}
    3134:	0f 90       	pop	r0
    3136:	0f 90       	pop	r0
    3138:	0f 90       	pop	r0
    313a:	0f 90       	pop	r0
    313c:	0f 90       	pop	r0
    313e:	cf 91       	pop	r28
    3140:	df 91       	pop	r29
    3142:	08 95       	ret

00003144 <DIO_enuSetPortValue>:

ES_t DIO_enuSetPortValue(u8 Copy_u8PortID ,u8 Copy_u8Value)
{
    3144:	df 93       	push	r29
    3146:	cf 93       	push	r28
    3148:	00 d0       	rcall	.+0      	; 0x314a <DIO_enuSetPortValue+0x6>
    314a:	00 d0       	rcall	.+0      	; 0x314c <DIO_enuSetPortValue+0x8>
    314c:	0f 92       	push	r0
    314e:	cd b7       	in	r28, 0x3d	; 61
    3150:	de b7       	in	r29, 0x3e	; 62
    3152:	8a 83       	std	Y+2, r24	; 0x02
    3154:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate=ES_NOK;
    3156:	19 82       	std	Y+1, r1	; 0x01
	if( Copy_u8PortID <= DIO_PORTD)
    3158:	8a 81       	ldd	r24, Y+2	; 0x02
    315a:	84 30       	cpi	r24, 0x04	; 4
    315c:	a8 f5       	brcc	.+106    	; 0x31c8 <DIO_enuSetPortValue+0x84>
	{
		switch(Copy_u8PortID)
    315e:	8a 81       	ldd	r24, Y+2	; 0x02
    3160:	28 2f       	mov	r18, r24
    3162:	30 e0       	ldi	r19, 0x00	; 0
    3164:	3d 83       	std	Y+5, r19	; 0x05
    3166:	2c 83       	std	Y+4, r18	; 0x04
    3168:	8c 81       	ldd	r24, Y+4	; 0x04
    316a:	9d 81       	ldd	r25, Y+5	; 0x05
    316c:	81 30       	cpi	r24, 0x01	; 1
    316e:	91 05       	cpc	r25, r1
    3170:	d1 f0       	breq	.+52     	; 0x31a6 <DIO_enuSetPortValue+0x62>
    3172:	2c 81       	ldd	r18, Y+4	; 0x04
    3174:	3d 81       	ldd	r19, Y+5	; 0x05
    3176:	22 30       	cpi	r18, 0x02	; 2
    3178:	31 05       	cpc	r19, r1
    317a:	2c f4       	brge	.+10     	; 0x3186 <DIO_enuSetPortValue+0x42>
    317c:	8c 81       	ldd	r24, Y+4	; 0x04
    317e:	9d 81       	ldd	r25, Y+5	; 0x05
    3180:	00 97       	sbiw	r24, 0x00	; 0
    3182:	61 f0       	breq	.+24     	; 0x319c <DIO_enuSetPortValue+0x58>
    3184:	1e c0       	rjmp	.+60     	; 0x31c2 <DIO_enuSetPortValue+0x7e>
    3186:	2c 81       	ldd	r18, Y+4	; 0x04
    3188:	3d 81       	ldd	r19, Y+5	; 0x05
    318a:	22 30       	cpi	r18, 0x02	; 2
    318c:	31 05       	cpc	r19, r1
    318e:	81 f0       	breq	.+32     	; 0x31b0 <DIO_enuSetPortValue+0x6c>
    3190:	8c 81       	ldd	r24, Y+4	; 0x04
    3192:	9d 81       	ldd	r25, Y+5	; 0x05
    3194:	83 30       	cpi	r24, 0x03	; 3
    3196:	91 05       	cpc	r25, r1
    3198:	81 f0       	breq	.+32     	; 0x31ba <DIO_enuSetPortValue+0x76>
    319a:	13 c0       	rjmp	.+38     	; 0x31c2 <DIO_enuSetPortValue+0x7e>
		{
		case DIO_PORTA:
			PORTA=Copy_u8Value;
    319c:	eb e3       	ldi	r30, 0x3B	; 59
    319e:	f0 e0       	ldi	r31, 0x00	; 0
    31a0:	8b 81       	ldd	r24, Y+3	; 0x03
    31a2:	80 83       	st	Z, r24
    31a4:	0e c0       	rjmp	.+28     	; 0x31c2 <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTB:
			PORTB=Copy_u8Value;
    31a6:	e8 e3       	ldi	r30, 0x38	; 56
    31a8:	f0 e0       	ldi	r31, 0x00	; 0
    31aa:	8b 81       	ldd	r24, Y+3	; 0x03
    31ac:	80 83       	st	Z, r24
    31ae:	09 c0       	rjmp	.+18     	; 0x31c2 <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTC:
			PORTC=Copy_u8Value;
    31b0:	e5 e3       	ldi	r30, 0x35	; 53
    31b2:	f0 e0       	ldi	r31, 0x00	; 0
    31b4:	8b 81       	ldd	r24, Y+3	; 0x03
    31b6:	80 83       	st	Z, r24
    31b8:	04 c0       	rjmp	.+8      	; 0x31c2 <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTD:
			PORTD=Copy_u8Value;
    31ba:	e2 e3       	ldi	r30, 0x32	; 50
    31bc:	f0 e0       	ldi	r31, 0x00	; 0
    31be:	8b 81       	ldd	r24, Y+3	; 0x03
    31c0:	80 83       	st	Z, r24
			break;
		}
		 Local_enuErrorstate=ES_OK;
    31c2:	81 e0       	ldi	r24, 0x01	; 1
    31c4:	89 83       	std	Y+1, r24	; 0x01
    31c6:	02 c0       	rjmp	.+4      	; 0x31cc <DIO_enuSetPortValue+0x88>
	}
	else
	{
		Local_enuErrorstate=ES_OUT_OF_RANGE;
    31c8:	83 e0       	ldi	r24, 0x03	; 3
    31ca:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorstate;
    31cc:	89 81       	ldd	r24, Y+1	; 0x01
}
    31ce:	0f 90       	pop	r0
    31d0:	0f 90       	pop	r0
    31d2:	0f 90       	pop	r0
    31d4:	0f 90       	pop	r0
    31d6:	0f 90       	pop	r0
    31d8:	cf 91       	pop	r28
    31da:	df 91       	pop	r29
    31dc:	08 95       	ret

000031de <DIO_enuTogPortValue>:

ES_t DIO_enuTogPortValue(u8 Copy_u8PortID )
{
    31de:	df 93       	push	r29
    31e0:	cf 93       	push	r28
    31e2:	00 d0       	rcall	.+0      	; 0x31e4 <DIO_enuTogPortValue+0x6>
    31e4:	00 d0       	rcall	.+0      	; 0x31e6 <DIO_enuTogPortValue+0x8>
    31e6:	cd b7       	in	r28, 0x3d	; 61
    31e8:	de b7       	in	r29, 0x3e	; 62
    31ea:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate=ES_NOK;
    31ec:	19 82       	std	Y+1, r1	; 0x01
	if( Copy_u8PortID <= DIO_PORTD)
    31ee:	8a 81       	ldd	r24, Y+2	; 0x02
    31f0:	84 30       	cpi	r24, 0x04	; 4
    31f2:	08 f0       	brcs	.+2      	; 0x31f6 <DIO_enuTogPortValue+0x18>
    31f4:	41 c0       	rjmp	.+130    	; 0x3278 <DIO_enuTogPortValue+0x9a>
	{
		switch(Copy_u8PortID)
    31f6:	8a 81       	ldd	r24, Y+2	; 0x02
    31f8:	28 2f       	mov	r18, r24
    31fa:	30 e0       	ldi	r19, 0x00	; 0
    31fc:	3c 83       	std	Y+4, r19	; 0x04
    31fe:	2b 83       	std	Y+3, r18	; 0x03
    3200:	8b 81       	ldd	r24, Y+3	; 0x03
    3202:	9c 81       	ldd	r25, Y+4	; 0x04
    3204:	81 30       	cpi	r24, 0x01	; 1
    3206:	91 05       	cpc	r25, r1
    3208:	e9 f0       	breq	.+58     	; 0x3244 <DIO_enuTogPortValue+0x66>
    320a:	2b 81       	ldd	r18, Y+3	; 0x03
    320c:	3c 81       	ldd	r19, Y+4	; 0x04
    320e:	22 30       	cpi	r18, 0x02	; 2
    3210:	31 05       	cpc	r19, r1
    3212:	2c f4       	brge	.+10     	; 0x321e <DIO_enuTogPortValue+0x40>
    3214:	8b 81       	ldd	r24, Y+3	; 0x03
    3216:	9c 81       	ldd	r25, Y+4	; 0x04
    3218:	00 97       	sbiw	r24, 0x00	; 0
    321a:	61 f0       	breq	.+24     	; 0x3234 <DIO_enuTogPortValue+0x56>
    321c:	2a c0       	rjmp	.+84     	; 0x3272 <DIO_enuTogPortValue+0x94>
    321e:	2b 81       	ldd	r18, Y+3	; 0x03
    3220:	3c 81       	ldd	r19, Y+4	; 0x04
    3222:	22 30       	cpi	r18, 0x02	; 2
    3224:	31 05       	cpc	r19, r1
    3226:	b1 f0       	breq	.+44     	; 0x3254 <DIO_enuTogPortValue+0x76>
    3228:	8b 81       	ldd	r24, Y+3	; 0x03
    322a:	9c 81       	ldd	r25, Y+4	; 0x04
    322c:	83 30       	cpi	r24, 0x03	; 3
    322e:	91 05       	cpc	r25, r1
    3230:	c9 f0       	breq	.+50     	; 0x3264 <DIO_enuTogPortValue+0x86>
    3232:	1f c0       	rjmp	.+62     	; 0x3272 <DIO_enuTogPortValue+0x94>
		{
		case DIO_PORTA:
			PORTA=~PORTA;
    3234:	ab e3       	ldi	r26, 0x3B	; 59
    3236:	b0 e0       	ldi	r27, 0x00	; 0
    3238:	eb e3       	ldi	r30, 0x3B	; 59
    323a:	f0 e0       	ldi	r31, 0x00	; 0
    323c:	80 81       	ld	r24, Z
    323e:	80 95       	com	r24
    3240:	8c 93       	st	X, r24
    3242:	17 c0       	rjmp	.+46     	; 0x3272 <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTB:
			PORTB=~PORTB;
    3244:	a8 e3       	ldi	r26, 0x38	; 56
    3246:	b0 e0       	ldi	r27, 0x00	; 0
    3248:	e8 e3       	ldi	r30, 0x38	; 56
    324a:	f0 e0       	ldi	r31, 0x00	; 0
    324c:	80 81       	ld	r24, Z
    324e:	80 95       	com	r24
    3250:	8c 93       	st	X, r24
    3252:	0f c0       	rjmp	.+30     	; 0x3272 <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTC:
			PORTC=~PORTC;
    3254:	a5 e3       	ldi	r26, 0x35	; 53
    3256:	b0 e0       	ldi	r27, 0x00	; 0
    3258:	e5 e3       	ldi	r30, 0x35	; 53
    325a:	f0 e0       	ldi	r31, 0x00	; 0
    325c:	80 81       	ld	r24, Z
    325e:	80 95       	com	r24
    3260:	8c 93       	st	X, r24
    3262:	07 c0       	rjmp	.+14     	; 0x3272 <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTD:
			PORTD=~PORTD;
    3264:	a2 e3       	ldi	r26, 0x32	; 50
    3266:	b0 e0       	ldi	r27, 0x00	; 0
    3268:	e2 e3       	ldi	r30, 0x32	; 50
    326a:	f0 e0       	ldi	r31, 0x00	; 0
    326c:	80 81       	ld	r24, Z
    326e:	80 95       	com	r24
    3270:	8c 93       	st	X, r24
			break;
		}
		 Local_enuErrorstate=ES_OK;
    3272:	81 e0       	ldi	r24, 0x01	; 1
    3274:	89 83       	std	Y+1, r24	; 0x01
    3276:	02 c0       	rjmp	.+4      	; 0x327c <DIO_enuTogPortValue+0x9e>
	}
	else
	{
		Local_enuErrorstate=ES_OUT_OF_RANGE;
    3278:	83 e0       	ldi	r24, 0x03	; 3
    327a:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorstate;
    327c:	89 81       	ldd	r24, Y+1	; 0x01
}
    327e:	0f 90       	pop	r0
    3280:	0f 90       	pop	r0
    3282:	0f 90       	pop	r0
    3284:	0f 90       	pop	r0
    3286:	cf 91       	pop	r28
    3288:	df 91       	pop	r29
    328a:	08 95       	ret

0000328c <DIO_enuGetPortValue>:

ES_t DIO_enuGetPortValue(u8 Copy_u8PortID ,u8* Copy_pu8Value)
{
    328c:	df 93       	push	r29
    328e:	cf 93       	push	r28
    3290:	00 d0       	rcall	.+0      	; 0x3292 <DIO_enuGetPortValue+0x6>
    3292:	00 d0       	rcall	.+0      	; 0x3294 <DIO_enuGetPortValue+0x8>
    3294:	00 d0       	rcall	.+0      	; 0x3296 <DIO_enuGetPortValue+0xa>
    3296:	cd b7       	in	r28, 0x3d	; 61
    3298:	de b7       	in	r29, 0x3e	; 62
    329a:	8a 83       	std	Y+2, r24	; 0x02
    329c:	7c 83       	std	Y+4, r23	; 0x04
    329e:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate=ES_NOK;
    32a0:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pu8Value !=NULL)
    32a2:	8b 81       	ldd	r24, Y+3	; 0x03
    32a4:	9c 81       	ldd	r25, Y+4	; 0x04
    32a6:	00 97       	sbiw	r24, 0x00	; 0
    32a8:	09 f4       	brne	.+2      	; 0x32ac <DIO_enuGetPortValue+0x20>
    32aa:	41 c0       	rjmp	.+130    	; 0x332e <DIO_enuGetPortValue+0xa2>
	{
		if( Copy_u8PortID <= DIO_PORTD)
    32ac:	8a 81       	ldd	r24, Y+2	; 0x02
    32ae:	84 30       	cpi	r24, 0x04	; 4
    32b0:	d8 f5       	brcc	.+118    	; 0x3328 <DIO_enuGetPortValue+0x9c>
		{
			switch(Copy_u8PortID)
    32b2:	8a 81       	ldd	r24, Y+2	; 0x02
    32b4:	28 2f       	mov	r18, r24
    32b6:	30 e0       	ldi	r19, 0x00	; 0
    32b8:	3e 83       	std	Y+6, r19	; 0x06
    32ba:	2d 83       	std	Y+5, r18	; 0x05
    32bc:	8d 81       	ldd	r24, Y+5	; 0x05
    32be:	9e 81       	ldd	r25, Y+6	; 0x06
    32c0:	81 30       	cpi	r24, 0x01	; 1
    32c2:	91 05       	cpc	r25, r1
    32c4:	e1 f0       	breq	.+56     	; 0x32fe <DIO_enuGetPortValue+0x72>
    32c6:	2d 81       	ldd	r18, Y+5	; 0x05
    32c8:	3e 81       	ldd	r19, Y+6	; 0x06
    32ca:	22 30       	cpi	r18, 0x02	; 2
    32cc:	31 05       	cpc	r19, r1
    32ce:	2c f4       	brge	.+10     	; 0x32da <DIO_enuGetPortValue+0x4e>
    32d0:	8d 81       	ldd	r24, Y+5	; 0x05
    32d2:	9e 81       	ldd	r25, Y+6	; 0x06
    32d4:	00 97       	sbiw	r24, 0x00	; 0
    32d6:	61 f0       	breq	.+24     	; 0x32f0 <DIO_enuGetPortValue+0x64>
    32d8:	2c c0       	rjmp	.+88     	; 0x3332 <DIO_enuGetPortValue+0xa6>
    32da:	2d 81       	ldd	r18, Y+5	; 0x05
    32dc:	3e 81       	ldd	r19, Y+6	; 0x06
    32de:	22 30       	cpi	r18, 0x02	; 2
    32e0:	31 05       	cpc	r19, r1
    32e2:	a1 f0       	breq	.+40     	; 0x330c <DIO_enuGetPortValue+0x80>
    32e4:	8d 81       	ldd	r24, Y+5	; 0x05
    32e6:	9e 81       	ldd	r25, Y+6	; 0x06
    32e8:	83 30       	cpi	r24, 0x03	; 3
    32ea:	91 05       	cpc	r25, r1
    32ec:	b1 f0       	breq	.+44     	; 0x331a <DIO_enuGetPortValue+0x8e>
    32ee:	21 c0       	rjmp	.+66     	; 0x3332 <DIO_enuGetPortValue+0xa6>
			{
			case DIO_PORTA:
				*Copy_pu8Value=PINA;
    32f0:	e9 e3       	ldi	r30, 0x39	; 57
    32f2:	f0 e0       	ldi	r31, 0x00	; 0
    32f4:	80 81       	ld	r24, Z
    32f6:	eb 81       	ldd	r30, Y+3	; 0x03
    32f8:	fc 81       	ldd	r31, Y+4	; 0x04
    32fa:	80 83       	st	Z, r24
    32fc:	1a c0       	rjmp	.+52     	; 0x3332 <DIO_enuGetPortValue+0xa6>
				break;
			case DIO_PORTB:
				*Copy_pu8Value=PINB;
    32fe:	e6 e3       	ldi	r30, 0x36	; 54
    3300:	f0 e0       	ldi	r31, 0x00	; 0
    3302:	80 81       	ld	r24, Z
    3304:	eb 81       	ldd	r30, Y+3	; 0x03
    3306:	fc 81       	ldd	r31, Y+4	; 0x04
    3308:	80 83       	st	Z, r24
    330a:	13 c0       	rjmp	.+38     	; 0x3332 <DIO_enuGetPortValue+0xa6>
				break;
			case DIO_PORTC:
				*Copy_pu8Value=PINC;
    330c:	e3 e3       	ldi	r30, 0x33	; 51
    330e:	f0 e0       	ldi	r31, 0x00	; 0
    3310:	80 81       	ld	r24, Z
    3312:	eb 81       	ldd	r30, Y+3	; 0x03
    3314:	fc 81       	ldd	r31, Y+4	; 0x04
    3316:	80 83       	st	Z, r24
    3318:	0c c0       	rjmp	.+24     	; 0x3332 <DIO_enuGetPortValue+0xa6>
				break;
			case DIO_PORTD:
				*Copy_pu8Value=PIND;
    331a:	e0 e3       	ldi	r30, 0x30	; 48
    331c:	f0 e0       	ldi	r31, 0x00	; 0
    331e:	80 81       	ld	r24, Z
    3320:	eb 81       	ldd	r30, Y+3	; 0x03
    3322:	fc 81       	ldd	r31, Y+4	; 0x04
    3324:	80 83       	st	Z, r24
    3326:	05 c0       	rjmp	.+10     	; 0x3332 <DIO_enuGetPortValue+0xa6>
				break;
			}
		}
		else
		{
			Local_enuErrorstate=ES_OUT_OF_RANGE;
    3328:	83 e0       	ldi	r24, 0x03	; 3
    332a:	89 83       	std	Y+1, r24	; 0x01
    332c:	02 c0       	rjmp	.+4      	; 0x3332 <DIO_enuGetPortValue+0xa6>
		}
	}
	else
	{
		Local_enuErrorstate=ES_NULL_POINTER;
    332e:	82 e0       	ldi	r24, 0x02	; 2
    3330:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorstate;
    3332:	89 81       	ldd	r24, Y+1	; 0x01
}
    3334:	26 96       	adiw	r28, 0x06	; 6
    3336:	0f b6       	in	r0, 0x3f	; 63
    3338:	f8 94       	cli
    333a:	de bf       	out	0x3e, r29	; 62
    333c:	0f be       	out	0x3f, r0	; 63
    333e:	cd bf       	out	0x3d, r28	; 61
    3340:	cf 91       	pop	r28
    3342:	df 91       	pop	r29
    3344:	08 95       	ret

00003346 <DIO_enuSetPinDirection>:

ES_t DIO_enuSetPinDirection(u8 Copy_u8PortID ,u8 Copy_u8PinID ,u8 Copy_u8Value)
{
    3346:	df 93       	push	r29
    3348:	cf 93       	push	r28
    334a:	00 d0       	rcall	.+0      	; 0x334c <DIO_enuSetPinDirection+0x6>
    334c:	00 d0       	rcall	.+0      	; 0x334e <DIO_enuSetPinDirection+0x8>
    334e:	00 d0       	rcall	.+0      	; 0x3350 <DIO_enuSetPinDirection+0xa>
    3350:	cd b7       	in	r28, 0x3d	; 61
    3352:	de b7       	in	r29, 0x3e	; 62
    3354:	8a 83       	std	Y+2, r24	; 0x02
    3356:	6b 83       	std	Y+3, r22	; 0x03
    3358:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate=ES_NOK;
    335a:	19 82       	std	Y+1, r1	; 0x01

	if( Copy_u8PortID <= DIO_PORTD && Copy_u8PinID<=DIO_PIN7 && Copy_u8Value <=OUTPUT )
    335c:	8a 81       	ldd	r24, Y+2	; 0x02
    335e:	84 30       	cpi	r24, 0x04	; 4
    3360:	08 f0       	brcs	.+2      	; 0x3364 <DIO_enuSetPinDirection+0x1e>
    3362:	d1 c0       	rjmp	.+418    	; 0x3506 <DIO_enuSetPinDirection+0x1c0>
    3364:	8b 81       	ldd	r24, Y+3	; 0x03
    3366:	88 30       	cpi	r24, 0x08	; 8
    3368:	08 f0       	brcs	.+2      	; 0x336c <DIO_enuSetPinDirection+0x26>
    336a:	cd c0       	rjmp	.+410    	; 0x3506 <DIO_enuSetPinDirection+0x1c0>
    336c:	8c 81       	ldd	r24, Y+4	; 0x04
    336e:	82 30       	cpi	r24, 0x02	; 2
    3370:	08 f0       	brcs	.+2      	; 0x3374 <DIO_enuSetPinDirection+0x2e>
    3372:	c9 c0       	rjmp	.+402    	; 0x3506 <DIO_enuSetPinDirection+0x1c0>
	{
		switch(Copy_u8PortID)
    3374:	8a 81       	ldd	r24, Y+2	; 0x02
    3376:	28 2f       	mov	r18, r24
    3378:	30 e0       	ldi	r19, 0x00	; 0
    337a:	3e 83       	std	Y+6, r19	; 0x06
    337c:	2d 83       	std	Y+5, r18	; 0x05
    337e:	6d 81       	ldd	r22, Y+5	; 0x05
    3380:	7e 81       	ldd	r23, Y+6	; 0x06
    3382:	61 30       	cpi	r22, 0x01	; 1
    3384:	71 05       	cpc	r23, r1
    3386:	09 f4       	brne	.+2      	; 0x338a <DIO_enuSetPinDirection+0x44>
    3388:	41 c0       	rjmp	.+130    	; 0x340c <DIO_enuSetPinDirection+0xc6>
    338a:	8d 81       	ldd	r24, Y+5	; 0x05
    338c:	9e 81       	ldd	r25, Y+6	; 0x06
    338e:	82 30       	cpi	r24, 0x02	; 2
    3390:	91 05       	cpc	r25, r1
    3392:	34 f4       	brge	.+12     	; 0x33a0 <DIO_enuSetPinDirection+0x5a>
    3394:	2d 81       	ldd	r18, Y+5	; 0x05
    3396:	3e 81       	ldd	r19, Y+6	; 0x06
    3398:	21 15       	cp	r18, r1
    339a:	31 05       	cpc	r19, r1
    339c:	71 f0       	breq	.+28     	; 0x33ba <DIO_enuSetPinDirection+0x74>
    339e:	b0 c0       	rjmp	.+352    	; 0x3500 <DIO_enuSetPinDirection+0x1ba>
    33a0:	6d 81       	ldd	r22, Y+5	; 0x05
    33a2:	7e 81       	ldd	r23, Y+6	; 0x06
    33a4:	62 30       	cpi	r22, 0x02	; 2
    33a6:	71 05       	cpc	r23, r1
    33a8:	09 f4       	brne	.+2      	; 0x33ac <DIO_enuSetPinDirection+0x66>
    33aa:	59 c0       	rjmp	.+178    	; 0x345e <DIO_enuSetPinDirection+0x118>
    33ac:	8d 81       	ldd	r24, Y+5	; 0x05
    33ae:	9e 81       	ldd	r25, Y+6	; 0x06
    33b0:	83 30       	cpi	r24, 0x03	; 3
    33b2:	91 05       	cpc	r25, r1
    33b4:	09 f4       	brne	.+2      	; 0x33b8 <DIO_enuSetPinDirection+0x72>
    33b6:	7c c0       	rjmp	.+248    	; 0x34b0 <DIO_enuSetPinDirection+0x16a>
    33b8:	a3 c0       	rjmp	.+326    	; 0x3500 <DIO_enuSetPinDirection+0x1ba>
		{
		case DIO_PORTA:
			DDRA&=~(DIO_MASK_BIT<<Copy_u8PinID);
    33ba:	aa e3       	ldi	r26, 0x3A	; 58
    33bc:	b0 e0       	ldi	r27, 0x00	; 0
    33be:	ea e3       	ldi	r30, 0x3A	; 58
    33c0:	f0 e0       	ldi	r31, 0x00	; 0
    33c2:	80 81       	ld	r24, Z
    33c4:	48 2f       	mov	r20, r24
    33c6:	8b 81       	ldd	r24, Y+3	; 0x03
    33c8:	28 2f       	mov	r18, r24
    33ca:	30 e0       	ldi	r19, 0x00	; 0
    33cc:	81 e0       	ldi	r24, 0x01	; 1
    33ce:	90 e0       	ldi	r25, 0x00	; 0
    33d0:	02 c0       	rjmp	.+4      	; 0x33d6 <DIO_enuSetPinDirection+0x90>
    33d2:	88 0f       	add	r24, r24
    33d4:	99 1f       	adc	r25, r25
    33d6:	2a 95       	dec	r18
    33d8:	e2 f7       	brpl	.-8      	; 0x33d2 <DIO_enuSetPinDirection+0x8c>
    33da:	80 95       	com	r24
    33dc:	84 23       	and	r24, r20
    33de:	8c 93       	st	X, r24
			DDRA |=(Copy_u8Value<<Copy_u8PinID);
    33e0:	aa e3       	ldi	r26, 0x3A	; 58
    33e2:	b0 e0       	ldi	r27, 0x00	; 0
    33e4:	ea e3       	ldi	r30, 0x3A	; 58
    33e6:	f0 e0       	ldi	r31, 0x00	; 0
    33e8:	80 81       	ld	r24, Z
    33ea:	48 2f       	mov	r20, r24
    33ec:	8c 81       	ldd	r24, Y+4	; 0x04
    33ee:	28 2f       	mov	r18, r24
    33f0:	30 e0       	ldi	r19, 0x00	; 0
    33f2:	8b 81       	ldd	r24, Y+3	; 0x03
    33f4:	88 2f       	mov	r24, r24
    33f6:	90 e0       	ldi	r25, 0x00	; 0
    33f8:	b9 01       	movw	r22, r18
    33fa:	02 c0       	rjmp	.+4      	; 0x3400 <DIO_enuSetPinDirection+0xba>
    33fc:	66 0f       	add	r22, r22
    33fe:	77 1f       	adc	r23, r23
    3400:	8a 95       	dec	r24
    3402:	e2 f7       	brpl	.-8      	; 0x33fc <DIO_enuSetPinDirection+0xb6>
    3404:	cb 01       	movw	r24, r22
    3406:	84 2b       	or	r24, r20
    3408:	8c 93       	st	X, r24
    340a:	7a c0       	rjmp	.+244    	; 0x3500 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTB:
			DDRB&=~(DIO_MASK_BIT<<Copy_u8PinID);
    340c:	a7 e3       	ldi	r26, 0x37	; 55
    340e:	b0 e0       	ldi	r27, 0x00	; 0
    3410:	e7 e3       	ldi	r30, 0x37	; 55
    3412:	f0 e0       	ldi	r31, 0x00	; 0
    3414:	80 81       	ld	r24, Z
    3416:	48 2f       	mov	r20, r24
    3418:	8b 81       	ldd	r24, Y+3	; 0x03
    341a:	28 2f       	mov	r18, r24
    341c:	30 e0       	ldi	r19, 0x00	; 0
    341e:	81 e0       	ldi	r24, 0x01	; 1
    3420:	90 e0       	ldi	r25, 0x00	; 0
    3422:	02 c0       	rjmp	.+4      	; 0x3428 <DIO_enuSetPinDirection+0xe2>
    3424:	88 0f       	add	r24, r24
    3426:	99 1f       	adc	r25, r25
    3428:	2a 95       	dec	r18
    342a:	e2 f7       	brpl	.-8      	; 0x3424 <DIO_enuSetPinDirection+0xde>
    342c:	80 95       	com	r24
    342e:	84 23       	and	r24, r20
    3430:	8c 93       	st	X, r24
			DDRB |=(Copy_u8Value<<Copy_u8PinID);
    3432:	a7 e3       	ldi	r26, 0x37	; 55
    3434:	b0 e0       	ldi	r27, 0x00	; 0
    3436:	e7 e3       	ldi	r30, 0x37	; 55
    3438:	f0 e0       	ldi	r31, 0x00	; 0
    343a:	80 81       	ld	r24, Z
    343c:	48 2f       	mov	r20, r24
    343e:	8c 81       	ldd	r24, Y+4	; 0x04
    3440:	28 2f       	mov	r18, r24
    3442:	30 e0       	ldi	r19, 0x00	; 0
    3444:	8b 81       	ldd	r24, Y+3	; 0x03
    3446:	88 2f       	mov	r24, r24
    3448:	90 e0       	ldi	r25, 0x00	; 0
    344a:	b9 01       	movw	r22, r18
    344c:	02 c0       	rjmp	.+4      	; 0x3452 <DIO_enuSetPinDirection+0x10c>
    344e:	66 0f       	add	r22, r22
    3450:	77 1f       	adc	r23, r23
    3452:	8a 95       	dec	r24
    3454:	e2 f7       	brpl	.-8      	; 0x344e <DIO_enuSetPinDirection+0x108>
    3456:	cb 01       	movw	r24, r22
    3458:	84 2b       	or	r24, r20
    345a:	8c 93       	st	X, r24
    345c:	51 c0       	rjmp	.+162    	; 0x3500 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTC:
			DDRC&=~(DIO_MASK_BIT<<Copy_u8PinID);
    345e:	a4 e3       	ldi	r26, 0x34	; 52
    3460:	b0 e0       	ldi	r27, 0x00	; 0
    3462:	e4 e3       	ldi	r30, 0x34	; 52
    3464:	f0 e0       	ldi	r31, 0x00	; 0
    3466:	80 81       	ld	r24, Z
    3468:	48 2f       	mov	r20, r24
    346a:	8b 81       	ldd	r24, Y+3	; 0x03
    346c:	28 2f       	mov	r18, r24
    346e:	30 e0       	ldi	r19, 0x00	; 0
    3470:	81 e0       	ldi	r24, 0x01	; 1
    3472:	90 e0       	ldi	r25, 0x00	; 0
    3474:	02 c0       	rjmp	.+4      	; 0x347a <DIO_enuSetPinDirection+0x134>
    3476:	88 0f       	add	r24, r24
    3478:	99 1f       	adc	r25, r25
    347a:	2a 95       	dec	r18
    347c:	e2 f7       	brpl	.-8      	; 0x3476 <DIO_enuSetPinDirection+0x130>
    347e:	80 95       	com	r24
    3480:	84 23       	and	r24, r20
    3482:	8c 93       	st	X, r24
			DDRC |=(Copy_u8Value<<Copy_u8PinID);
    3484:	a4 e3       	ldi	r26, 0x34	; 52
    3486:	b0 e0       	ldi	r27, 0x00	; 0
    3488:	e4 e3       	ldi	r30, 0x34	; 52
    348a:	f0 e0       	ldi	r31, 0x00	; 0
    348c:	80 81       	ld	r24, Z
    348e:	48 2f       	mov	r20, r24
    3490:	8c 81       	ldd	r24, Y+4	; 0x04
    3492:	28 2f       	mov	r18, r24
    3494:	30 e0       	ldi	r19, 0x00	; 0
    3496:	8b 81       	ldd	r24, Y+3	; 0x03
    3498:	88 2f       	mov	r24, r24
    349a:	90 e0       	ldi	r25, 0x00	; 0
    349c:	b9 01       	movw	r22, r18
    349e:	02 c0       	rjmp	.+4      	; 0x34a4 <DIO_enuSetPinDirection+0x15e>
    34a0:	66 0f       	add	r22, r22
    34a2:	77 1f       	adc	r23, r23
    34a4:	8a 95       	dec	r24
    34a6:	e2 f7       	brpl	.-8      	; 0x34a0 <DIO_enuSetPinDirection+0x15a>
    34a8:	cb 01       	movw	r24, r22
    34aa:	84 2b       	or	r24, r20
    34ac:	8c 93       	st	X, r24
    34ae:	28 c0       	rjmp	.+80     	; 0x3500 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTD:
			DDRD&=~(DIO_MASK_BIT<<Copy_u8PinID);
    34b0:	a1 e3       	ldi	r26, 0x31	; 49
    34b2:	b0 e0       	ldi	r27, 0x00	; 0
    34b4:	e1 e3       	ldi	r30, 0x31	; 49
    34b6:	f0 e0       	ldi	r31, 0x00	; 0
    34b8:	80 81       	ld	r24, Z
    34ba:	48 2f       	mov	r20, r24
    34bc:	8b 81       	ldd	r24, Y+3	; 0x03
    34be:	28 2f       	mov	r18, r24
    34c0:	30 e0       	ldi	r19, 0x00	; 0
    34c2:	81 e0       	ldi	r24, 0x01	; 1
    34c4:	90 e0       	ldi	r25, 0x00	; 0
    34c6:	02 c0       	rjmp	.+4      	; 0x34cc <DIO_enuSetPinDirection+0x186>
    34c8:	88 0f       	add	r24, r24
    34ca:	99 1f       	adc	r25, r25
    34cc:	2a 95       	dec	r18
    34ce:	e2 f7       	brpl	.-8      	; 0x34c8 <DIO_enuSetPinDirection+0x182>
    34d0:	80 95       	com	r24
    34d2:	84 23       	and	r24, r20
    34d4:	8c 93       	st	X, r24
			DDRD |=(Copy_u8Value<<Copy_u8PinID);
    34d6:	a1 e3       	ldi	r26, 0x31	; 49
    34d8:	b0 e0       	ldi	r27, 0x00	; 0
    34da:	e1 e3       	ldi	r30, 0x31	; 49
    34dc:	f0 e0       	ldi	r31, 0x00	; 0
    34de:	80 81       	ld	r24, Z
    34e0:	48 2f       	mov	r20, r24
    34e2:	8c 81       	ldd	r24, Y+4	; 0x04
    34e4:	28 2f       	mov	r18, r24
    34e6:	30 e0       	ldi	r19, 0x00	; 0
    34e8:	8b 81       	ldd	r24, Y+3	; 0x03
    34ea:	88 2f       	mov	r24, r24
    34ec:	90 e0       	ldi	r25, 0x00	; 0
    34ee:	b9 01       	movw	r22, r18
    34f0:	02 c0       	rjmp	.+4      	; 0x34f6 <DIO_enuSetPinDirection+0x1b0>
    34f2:	66 0f       	add	r22, r22
    34f4:	77 1f       	adc	r23, r23
    34f6:	8a 95       	dec	r24
    34f8:	e2 f7       	brpl	.-8      	; 0x34f2 <DIO_enuSetPinDirection+0x1ac>
    34fa:	cb 01       	movw	r24, r22
    34fc:	84 2b       	or	r24, r20
    34fe:	8c 93       	st	X, r24
			break;
		}
		 Local_enuErrorstate=ES_OK;
    3500:	81 e0       	ldi	r24, 0x01	; 1
    3502:	89 83       	std	Y+1, r24	; 0x01
    3504:	02 c0       	rjmp	.+4      	; 0x350a <DIO_enuSetPinDirection+0x1c4>
	}
	else
	{
		Local_enuErrorstate=ES_OUT_OF_RANGE;
    3506:	83 e0       	ldi	r24, 0x03	; 3
    3508:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    350a:	89 81       	ldd	r24, Y+1	; 0x01
}
    350c:	26 96       	adiw	r28, 0x06	; 6
    350e:	0f b6       	in	r0, 0x3f	; 63
    3510:	f8 94       	cli
    3512:	de bf       	out	0x3e, r29	; 62
    3514:	0f be       	out	0x3f, r0	; 63
    3516:	cd bf       	out	0x3d, r28	; 61
    3518:	cf 91       	pop	r28
    351a:	df 91       	pop	r29
    351c:	08 95       	ret

0000351e <DIO_enuSetPinValue>:

ES_t DIO_enuSetPinValue(u8 Copy_u8PortID ,u8 Copy_u8PinID ,u8 Copy_u8Value)
{
    351e:	df 93       	push	r29
    3520:	cf 93       	push	r28
    3522:	00 d0       	rcall	.+0      	; 0x3524 <DIO_enuSetPinValue+0x6>
    3524:	00 d0       	rcall	.+0      	; 0x3526 <DIO_enuSetPinValue+0x8>
    3526:	00 d0       	rcall	.+0      	; 0x3528 <DIO_enuSetPinValue+0xa>
    3528:	cd b7       	in	r28, 0x3d	; 61
    352a:	de b7       	in	r29, 0x3e	; 62
    352c:	8a 83       	std	Y+2, r24	; 0x02
    352e:	6b 83       	std	Y+3, r22	; 0x03
    3530:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate=ES_NOK;
    3532:	19 82       	std	Y+1, r1	; 0x01
	if( Copy_u8PortID <= DIO_PORTD && Copy_u8PinID<=DIO_PIN7 && Copy_u8Value <=OUTPUT )
    3534:	8a 81       	ldd	r24, Y+2	; 0x02
    3536:	84 30       	cpi	r24, 0x04	; 4
    3538:	08 f0       	brcs	.+2      	; 0x353c <DIO_enuSetPinValue+0x1e>
    353a:	d1 c0       	rjmp	.+418    	; 0x36de <DIO_enuSetPinValue+0x1c0>
    353c:	8b 81       	ldd	r24, Y+3	; 0x03
    353e:	88 30       	cpi	r24, 0x08	; 8
    3540:	08 f0       	brcs	.+2      	; 0x3544 <DIO_enuSetPinValue+0x26>
    3542:	cd c0       	rjmp	.+410    	; 0x36de <DIO_enuSetPinValue+0x1c0>
    3544:	8c 81       	ldd	r24, Y+4	; 0x04
    3546:	82 30       	cpi	r24, 0x02	; 2
    3548:	08 f0       	brcs	.+2      	; 0x354c <DIO_enuSetPinValue+0x2e>
    354a:	c9 c0       	rjmp	.+402    	; 0x36de <DIO_enuSetPinValue+0x1c0>
	{
		switch(Copy_u8PortID)
    354c:	8a 81       	ldd	r24, Y+2	; 0x02
    354e:	28 2f       	mov	r18, r24
    3550:	30 e0       	ldi	r19, 0x00	; 0
    3552:	3e 83       	std	Y+6, r19	; 0x06
    3554:	2d 83       	std	Y+5, r18	; 0x05
    3556:	6d 81       	ldd	r22, Y+5	; 0x05
    3558:	7e 81       	ldd	r23, Y+6	; 0x06
    355a:	61 30       	cpi	r22, 0x01	; 1
    355c:	71 05       	cpc	r23, r1
    355e:	09 f4       	brne	.+2      	; 0x3562 <DIO_enuSetPinValue+0x44>
    3560:	41 c0       	rjmp	.+130    	; 0x35e4 <DIO_enuSetPinValue+0xc6>
    3562:	8d 81       	ldd	r24, Y+5	; 0x05
    3564:	9e 81       	ldd	r25, Y+6	; 0x06
    3566:	82 30       	cpi	r24, 0x02	; 2
    3568:	91 05       	cpc	r25, r1
    356a:	34 f4       	brge	.+12     	; 0x3578 <DIO_enuSetPinValue+0x5a>
    356c:	2d 81       	ldd	r18, Y+5	; 0x05
    356e:	3e 81       	ldd	r19, Y+6	; 0x06
    3570:	21 15       	cp	r18, r1
    3572:	31 05       	cpc	r19, r1
    3574:	71 f0       	breq	.+28     	; 0x3592 <DIO_enuSetPinValue+0x74>
    3576:	b0 c0       	rjmp	.+352    	; 0x36d8 <DIO_enuSetPinValue+0x1ba>
    3578:	6d 81       	ldd	r22, Y+5	; 0x05
    357a:	7e 81       	ldd	r23, Y+6	; 0x06
    357c:	62 30       	cpi	r22, 0x02	; 2
    357e:	71 05       	cpc	r23, r1
    3580:	09 f4       	brne	.+2      	; 0x3584 <DIO_enuSetPinValue+0x66>
    3582:	59 c0       	rjmp	.+178    	; 0x3636 <DIO_enuSetPinValue+0x118>
    3584:	8d 81       	ldd	r24, Y+5	; 0x05
    3586:	9e 81       	ldd	r25, Y+6	; 0x06
    3588:	83 30       	cpi	r24, 0x03	; 3
    358a:	91 05       	cpc	r25, r1
    358c:	09 f4       	brne	.+2      	; 0x3590 <DIO_enuSetPinValue+0x72>
    358e:	7c c0       	rjmp	.+248    	; 0x3688 <DIO_enuSetPinValue+0x16a>
    3590:	a3 c0       	rjmp	.+326    	; 0x36d8 <DIO_enuSetPinValue+0x1ba>
		{
		case DIO_PORTA:
			PORTA&=~(DIO_MASK_BIT<<Copy_u8PinID);
    3592:	ab e3       	ldi	r26, 0x3B	; 59
    3594:	b0 e0       	ldi	r27, 0x00	; 0
    3596:	eb e3       	ldi	r30, 0x3B	; 59
    3598:	f0 e0       	ldi	r31, 0x00	; 0
    359a:	80 81       	ld	r24, Z
    359c:	48 2f       	mov	r20, r24
    359e:	8b 81       	ldd	r24, Y+3	; 0x03
    35a0:	28 2f       	mov	r18, r24
    35a2:	30 e0       	ldi	r19, 0x00	; 0
    35a4:	81 e0       	ldi	r24, 0x01	; 1
    35a6:	90 e0       	ldi	r25, 0x00	; 0
    35a8:	02 c0       	rjmp	.+4      	; 0x35ae <DIO_enuSetPinValue+0x90>
    35aa:	88 0f       	add	r24, r24
    35ac:	99 1f       	adc	r25, r25
    35ae:	2a 95       	dec	r18
    35b0:	e2 f7       	brpl	.-8      	; 0x35aa <DIO_enuSetPinValue+0x8c>
    35b2:	80 95       	com	r24
    35b4:	84 23       	and	r24, r20
    35b6:	8c 93       	st	X, r24
			PORTA |=(Copy_u8Value<<Copy_u8PinID);
    35b8:	ab e3       	ldi	r26, 0x3B	; 59
    35ba:	b0 e0       	ldi	r27, 0x00	; 0
    35bc:	eb e3       	ldi	r30, 0x3B	; 59
    35be:	f0 e0       	ldi	r31, 0x00	; 0
    35c0:	80 81       	ld	r24, Z
    35c2:	48 2f       	mov	r20, r24
    35c4:	8c 81       	ldd	r24, Y+4	; 0x04
    35c6:	28 2f       	mov	r18, r24
    35c8:	30 e0       	ldi	r19, 0x00	; 0
    35ca:	8b 81       	ldd	r24, Y+3	; 0x03
    35cc:	88 2f       	mov	r24, r24
    35ce:	90 e0       	ldi	r25, 0x00	; 0
    35d0:	b9 01       	movw	r22, r18
    35d2:	02 c0       	rjmp	.+4      	; 0x35d8 <DIO_enuSetPinValue+0xba>
    35d4:	66 0f       	add	r22, r22
    35d6:	77 1f       	adc	r23, r23
    35d8:	8a 95       	dec	r24
    35da:	e2 f7       	brpl	.-8      	; 0x35d4 <DIO_enuSetPinValue+0xb6>
    35dc:	cb 01       	movw	r24, r22
    35de:	84 2b       	or	r24, r20
    35e0:	8c 93       	st	X, r24
    35e2:	7a c0       	rjmp	.+244    	; 0x36d8 <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTB:
			PORTB&=~(DIO_MASK_BIT<<Copy_u8PinID);
    35e4:	a8 e3       	ldi	r26, 0x38	; 56
    35e6:	b0 e0       	ldi	r27, 0x00	; 0
    35e8:	e8 e3       	ldi	r30, 0x38	; 56
    35ea:	f0 e0       	ldi	r31, 0x00	; 0
    35ec:	80 81       	ld	r24, Z
    35ee:	48 2f       	mov	r20, r24
    35f0:	8b 81       	ldd	r24, Y+3	; 0x03
    35f2:	28 2f       	mov	r18, r24
    35f4:	30 e0       	ldi	r19, 0x00	; 0
    35f6:	81 e0       	ldi	r24, 0x01	; 1
    35f8:	90 e0       	ldi	r25, 0x00	; 0
    35fa:	02 c0       	rjmp	.+4      	; 0x3600 <DIO_enuSetPinValue+0xe2>
    35fc:	88 0f       	add	r24, r24
    35fe:	99 1f       	adc	r25, r25
    3600:	2a 95       	dec	r18
    3602:	e2 f7       	brpl	.-8      	; 0x35fc <DIO_enuSetPinValue+0xde>
    3604:	80 95       	com	r24
    3606:	84 23       	and	r24, r20
    3608:	8c 93       	st	X, r24
			PORTB |=(Copy_u8Value<<Copy_u8PinID);
    360a:	a8 e3       	ldi	r26, 0x38	; 56
    360c:	b0 e0       	ldi	r27, 0x00	; 0
    360e:	e8 e3       	ldi	r30, 0x38	; 56
    3610:	f0 e0       	ldi	r31, 0x00	; 0
    3612:	80 81       	ld	r24, Z
    3614:	48 2f       	mov	r20, r24
    3616:	8c 81       	ldd	r24, Y+4	; 0x04
    3618:	28 2f       	mov	r18, r24
    361a:	30 e0       	ldi	r19, 0x00	; 0
    361c:	8b 81       	ldd	r24, Y+3	; 0x03
    361e:	88 2f       	mov	r24, r24
    3620:	90 e0       	ldi	r25, 0x00	; 0
    3622:	b9 01       	movw	r22, r18
    3624:	02 c0       	rjmp	.+4      	; 0x362a <DIO_enuSetPinValue+0x10c>
    3626:	66 0f       	add	r22, r22
    3628:	77 1f       	adc	r23, r23
    362a:	8a 95       	dec	r24
    362c:	e2 f7       	brpl	.-8      	; 0x3626 <DIO_enuSetPinValue+0x108>
    362e:	cb 01       	movw	r24, r22
    3630:	84 2b       	or	r24, r20
    3632:	8c 93       	st	X, r24
    3634:	51 c0       	rjmp	.+162    	; 0x36d8 <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTC:
			PORTC&=~(DIO_MASK_BIT<<Copy_u8PinID);
    3636:	a5 e3       	ldi	r26, 0x35	; 53
    3638:	b0 e0       	ldi	r27, 0x00	; 0
    363a:	e5 e3       	ldi	r30, 0x35	; 53
    363c:	f0 e0       	ldi	r31, 0x00	; 0
    363e:	80 81       	ld	r24, Z
    3640:	48 2f       	mov	r20, r24
    3642:	8b 81       	ldd	r24, Y+3	; 0x03
    3644:	28 2f       	mov	r18, r24
    3646:	30 e0       	ldi	r19, 0x00	; 0
    3648:	81 e0       	ldi	r24, 0x01	; 1
    364a:	90 e0       	ldi	r25, 0x00	; 0
    364c:	02 c0       	rjmp	.+4      	; 0x3652 <DIO_enuSetPinValue+0x134>
    364e:	88 0f       	add	r24, r24
    3650:	99 1f       	adc	r25, r25
    3652:	2a 95       	dec	r18
    3654:	e2 f7       	brpl	.-8      	; 0x364e <DIO_enuSetPinValue+0x130>
    3656:	80 95       	com	r24
    3658:	84 23       	and	r24, r20
    365a:	8c 93       	st	X, r24
			PORTC |=(Copy_u8Value<<Copy_u8PinID);
    365c:	a5 e3       	ldi	r26, 0x35	; 53
    365e:	b0 e0       	ldi	r27, 0x00	; 0
    3660:	e5 e3       	ldi	r30, 0x35	; 53
    3662:	f0 e0       	ldi	r31, 0x00	; 0
    3664:	80 81       	ld	r24, Z
    3666:	48 2f       	mov	r20, r24
    3668:	8c 81       	ldd	r24, Y+4	; 0x04
    366a:	28 2f       	mov	r18, r24
    366c:	30 e0       	ldi	r19, 0x00	; 0
    366e:	8b 81       	ldd	r24, Y+3	; 0x03
    3670:	88 2f       	mov	r24, r24
    3672:	90 e0       	ldi	r25, 0x00	; 0
    3674:	b9 01       	movw	r22, r18
    3676:	02 c0       	rjmp	.+4      	; 0x367c <DIO_enuSetPinValue+0x15e>
    3678:	66 0f       	add	r22, r22
    367a:	77 1f       	adc	r23, r23
    367c:	8a 95       	dec	r24
    367e:	e2 f7       	brpl	.-8      	; 0x3678 <DIO_enuSetPinValue+0x15a>
    3680:	cb 01       	movw	r24, r22
    3682:	84 2b       	or	r24, r20
    3684:	8c 93       	st	X, r24
    3686:	28 c0       	rjmp	.+80     	; 0x36d8 <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTD:
			PORTD&=~(DIO_MASK_BIT<<Copy_u8PinID);
    3688:	a2 e3       	ldi	r26, 0x32	; 50
    368a:	b0 e0       	ldi	r27, 0x00	; 0
    368c:	e2 e3       	ldi	r30, 0x32	; 50
    368e:	f0 e0       	ldi	r31, 0x00	; 0
    3690:	80 81       	ld	r24, Z
    3692:	48 2f       	mov	r20, r24
    3694:	8b 81       	ldd	r24, Y+3	; 0x03
    3696:	28 2f       	mov	r18, r24
    3698:	30 e0       	ldi	r19, 0x00	; 0
    369a:	81 e0       	ldi	r24, 0x01	; 1
    369c:	90 e0       	ldi	r25, 0x00	; 0
    369e:	02 c0       	rjmp	.+4      	; 0x36a4 <DIO_enuSetPinValue+0x186>
    36a0:	88 0f       	add	r24, r24
    36a2:	99 1f       	adc	r25, r25
    36a4:	2a 95       	dec	r18
    36a6:	e2 f7       	brpl	.-8      	; 0x36a0 <DIO_enuSetPinValue+0x182>
    36a8:	80 95       	com	r24
    36aa:	84 23       	and	r24, r20
    36ac:	8c 93       	st	X, r24
			PORTD |=(Copy_u8Value<<Copy_u8PinID);
    36ae:	a2 e3       	ldi	r26, 0x32	; 50
    36b0:	b0 e0       	ldi	r27, 0x00	; 0
    36b2:	e2 e3       	ldi	r30, 0x32	; 50
    36b4:	f0 e0       	ldi	r31, 0x00	; 0
    36b6:	80 81       	ld	r24, Z
    36b8:	48 2f       	mov	r20, r24
    36ba:	8c 81       	ldd	r24, Y+4	; 0x04
    36bc:	28 2f       	mov	r18, r24
    36be:	30 e0       	ldi	r19, 0x00	; 0
    36c0:	8b 81       	ldd	r24, Y+3	; 0x03
    36c2:	88 2f       	mov	r24, r24
    36c4:	90 e0       	ldi	r25, 0x00	; 0
    36c6:	b9 01       	movw	r22, r18
    36c8:	02 c0       	rjmp	.+4      	; 0x36ce <DIO_enuSetPinValue+0x1b0>
    36ca:	66 0f       	add	r22, r22
    36cc:	77 1f       	adc	r23, r23
    36ce:	8a 95       	dec	r24
    36d0:	e2 f7       	brpl	.-8      	; 0x36ca <DIO_enuSetPinValue+0x1ac>
    36d2:	cb 01       	movw	r24, r22
    36d4:	84 2b       	or	r24, r20
    36d6:	8c 93       	st	X, r24
			break;
		}
		 Local_enuErrorstate=ES_OK;
    36d8:	81 e0       	ldi	r24, 0x01	; 1
    36da:	89 83       	std	Y+1, r24	; 0x01
    36dc:	02 c0       	rjmp	.+4      	; 0x36e2 <DIO_enuSetPinValue+0x1c4>
	}
	else
	{
		Local_enuErrorstate=ES_OUT_OF_RANGE;
    36de:	83 e0       	ldi	r24, 0x03	; 3
    36e0:	89 83       	std	Y+1, r24	; 0x01
	}



	return Local_enuErrorstate;
    36e2:	89 81       	ldd	r24, Y+1	; 0x01
}
    36e4:	26 96       	adiw	r28, 0x06	; 6
    36e6:	0f b6       	in	r0, 0x3f	; 63
    36e8:	f8 94       	cli
    36ea:	de bf       	out	0x3e, r29	; 62
    36ec:	0f be       	out	0x3f, r0	; 63
    36ee:	cd bf       	out	0x3d, r28	; 61
    36f0:	cf 91       	pop	r28
    36f2:	df 91       	pop	r29
    36f4:	08 95       	ret

000036f6 <DIO_enuTogPinValue>:

ES_t DIO_enuTogPinValue(u8 Copy_u8PortID ,u8 Copy_u8PinID )
{
    36f6:	df 93       	push	r29
    36f8:	cf 93       	push	r28
    36fa:	00 d0       	rcall	.+0      	; 0x36fc <DIO_enuTogPinValue+0x6>
    36fc:	00 d0       	rcall	.+0      	; 0x36fe <DIO_enuTogPinValue+0x8>
    36fe:	0f 92       	push	r0
    3700:	cd b7       	in	r28, 0x3d	; 61
    3702:	de b7       	in	r29, 0x3e	; 62
    3704:	8a 83       	std	Y+2, r24	; 0x02
    3706:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate=ES_NOK;
    3708:	19 82       	std	Y+1, r1	; 0x01
	if( Copy_u8PortID <= DIO_PORTD && Copy_u8PinID<=DIO_PIN7  )
    370a:	8a 81       	ldd	r24, Y+2	; 0x02
    370c:	84 30       	cpi	r24, 0x04	; 4
    370e:	08 f0       	brcs	.+2      	; 0x3712 <DIO_enuTogPinValue+0x1c>
    3710:	75 c0       	rjmp	.+234    	; 0x37fc <DIO_enuTogPinValue+0x106>
    3712:	8b 81       	ldd	r24, Y+3	; 0x03
    3714:	88 30       	cpi	r24, 0x08	; 8
    3716:	08 f0       	brcs	.+2      	; 0x371a <DIO_enuTogPinValue+0x24>
    3718:	71 c0       	rjmp	.+226    	; 0x37fc <DIO_enuTogPinValue+0x106>
	{
		switch(Copy_u8PortID)
    371a:	8a 81       	ldd	r24, Y+2	; 0x02
    371c:	28 2f       	mov	r18, r24
    371e:	30 e0       	ldi	r19, 0x00	; 0
    3720:	3d 83       	std	Y+5, r19	; 0x05
    3722:	2c 83       	std	Y+4, r18	; 0x04
    3724:	8c 81       	ldd	r24, Y+4	; 0x04
    3726:	9d 81       	ldd	r25, Y+5	; 0x05
    3728:	81 30       	cpi	r24, 0x01	; 1
    372a:	91 05       	cpc	r25, r1
    372c:	49 f1       	breq	.+82     	; 0x3780 <DIO_enuTogPinValue+0x8a>
    372e:	2c 81       	ldd	r18, Y+4	; 0x04
    3730:	3d 81       	ldd	r19, Y+5	; 0x05
    3732:	22 30       	cpi	r18, 0x02	; 2
    3734:	31 05       	cpc	r19, r1
    3736:	2c f4       	brge	.+10     	; 0x3742 <DIO_enuTogPinValue+0x4c>
    3738:	8c 81       	ldd	r24, Y+4	; 0x04
    373a:	9d 81       	ldd	r25, Y+5	; 0x05
    373c:	00 97       	sbiw	r24, 0x00	; 0
    373e:	61 f0       	breq	.+24     	; 0x3758 <DIO_enuTogPinValue+0x62>
    3740:	5a c0       	rjmp	.+180    	; 0x37f6 <DIO_enuTogPinValue+0x100>
    3742:	2c 81       	ldd	r18, Y+4	; 0x04
    3744:	3d 81       	ldd	r19, Y+5	; 0x05
    3746:	22 30       	cpi	r18, 0x02	; 2
    3748:	31 05       	cpc	r19, r1
    374a:	71 f1       	breq	.+92     	; 0x37a8 <DIO_enuTogPinValue+0xb2>
    374c:	8c 81       	ldd	r24, Y+4	; 0x04
    374e:	9d 81       	ldd	r25, Y+5	; 0x05
    3750:	83 30       	cpi	r24, 0x03	; 3
    3752:	91 05       	cpc	r25, r1
    3754:	e9 f1       	breq	.+122    	; 0x37d0 <DIO_enuTogPinValue+0xda>
    3756:	4f c0       	rjmp	.+158    	; 0x37f6 <DIO_enuTogPinValue+0x100>
		{
		case DIO_PORTA:
			PORTA ^=(DIO_MASK_BIT<<Copy_u8PinID);
    3758:	ab e3       	ldi	r26, 0x3B	; 59
    375a:	b0 e0       	ldi	r27, 0x00	; 0
    375c:	eb e3       	ldi	r30, 0x3B	; 59
    375e:	f0 e0       	ldi	r31, 0x00	; 0
    3760:	80 81       	ld	r24, Z
    3762:	48 2f       	mov	r20, r24
    3764:	8b 81       	ldd	r24, Y+3	; 0x03
    3766:	28 2f       	mov	r18, r24
    3768:	30 e0       	ldi	r19, 0x00	; 0
    376a:	81 e0       	ldi	r24, 0x01	; 1
    376c:	90 e0       	ldi	r25, 0x00	; 0
    376e:	02 2e       	mov	r0, r18
    3770:	02 c0       	rjmp	.+4      	; 0x3776 <DIO_enuTogPinValue+0x80>
    3772:	88 0f       	add	r24, r24
    3774:	99 1f       	adc	r25, r25
    3776:	0a 94       	dec	r0
    3778:	e2 f7       	brpl	.-8      	; 0x3772 <DIO_enuTogPinValue+0x7c>
    377a:	84 27       	eor	r24, r20
    377c:	8c 93       	st	X, r24
    377e:	3b c0       	rjmp	.+118    	; 0x37f6 <DIO_enuTogPinValue+0x100>
			break;
		case DIO_PORTB:
			PORTB ^=(DIO_MASK_BIT<<Copy_u8PinID);
    3780:	a8 e3       	ldi	r26, 0x38	; 56
    3782:	b0 e0       	ldi	r27, 0x00	; 0
    3784:	e8 e3       	ldi	r30, 0x38	; 56
    3786:	f0 e0       	ldi	r31, 0x00	; 0
    3788:	80 81       	ld	r24, Z
    378a:	48 2f       	mov	r20, r24
    378c:	8b 81       	ldd	r24, Y+3	; 0x03
    378e:	28 2f       	mov	r18, r24
    3790:	30 e0       	ldi	r19, 0x00	; 0
    3792:	81 e0       	ldi	r24, 0x01	; 1
    3794:	90 e0       	ldi	r25, 0x00	; 0
    3796:	02 2e       	mov	r0, r18
    3798:	02 c0       	rjmp	.+4      	; 0x379e <DIO_enuTogPinValue+0xa8>
    379a:	88 0f       	add	r24, r24
    379c:	99 1f       	adc	r25, r25
    379e:	0a 94       	dec	r0
    37a0:	e2 f7       	brpl	.-8      	; 0x379a <DIO_enuTogPinValue+0xa4>
    37a2:	84 27       	eor	r24, r20
    37a4:	8c 93       	st	X, r24
    37a6:	27 c0       	rjmp	.+78     	; 0x37f6 <DIO_enuTogPinValue+0x100>
			break;
		case DIO_PORTC:
			PORTC ^=(DIO_MASK_BIT<<Copy_u8PinID);
    37a8:	a5 e3       	ldi	r26, 0x35	; 53
    37aa:	b0 e0       	ldi	r27, 0x00	; 0
    37ac:	e5 e3       	ldi	r30, 0x35	; 53
    37ae:	f0 e0       	ldi	r31, 0x00	; 0
    37b0:	80 81       	ld	r24, Z
    37b2:	48 2f       	mov	r20, r24
    37b4:	8b 81       	ldd	r24, Y+3	; 0x03
    37b6:	28 2f       	mov	r18, r24
    37b8:	30 e0       	ldi	r19, 0x00	; 0
    37ba:	81 e0       	ldi	r24, 0x01	; 1
    37bc:	90 e0       	ldi	r25, 0x00	; 0
    37be:	02 2e       	mov	r0, r18
    37c0:	02 c0       	rjmp	.+4      	; 0x37c6 <DIO_enuTogPinValue+0xd0>
    37c2:	88 0f       	add	r24, r24
    37c4:	99 1f       	adc	r25, r25
    37c6:	0a 94       	dec	r0
    37c8:	e2 f7       	brpl	.-8      	; 0x37c2 <DIO_enuTogPinValue+0xcc>
    37ca:	84 27       	eor	r24, r20
    37cc:	8c 93       	st	X, r24
    37ce:	13 c0       	rjmp	.+38     	; 0x37f6 <DIO_enuTogPinValue+0x100>
			break;
		case DIO_PORTD:
			PORTD ^=(DIO_MASK_BIT<<Copy_u8PinID);
    37d0:	a2 e3       	ldi	r26, 0x32	; 50
    37d2:	b0 e0       	ldi	r27, 0x00	; 0
    37d4:	e2 e3       	ldi	r30, 0x32	; 50
    37d6:	f0 e0       	ldi	r31, 0x00	; 0
    37d8:	80 81       	ld	r24, Z
    37da:	48 2f       	mov	r20, r24
    37dc:	8b 81       	ldd	r24, Y+3	; 0x03
    37de:	28 2f       	mov	r18, r24
    37e0:	30 e0       	ldi	r19, 0x00	; 0
    37e2:	81 e0       	ldi	r24, 0x01	; 1
    37e4:	90 e0       	ldi	r25, 0x00	; 0
    37e6:	02 2e       	mov	r0, r18
    37e8:	02 c0       	rjmp	.+4      	; 0x37ee <DIO_enuTogPinValue+0xf8>
    37ea:	88 0f       	add	r24, r24
    37ec:	99 1f       	adc	r25, r25
    37ee:	0a 94       	dec	r0
    37f0:	e2 f7       	brpl	.-8      	; 0x37ea <DIO_enuTogPinValue+0xf4>
    37f2:	84 27       	eor	r24, r20
    37f4:	8c 93       	st	X, r24
			break;
		}
		 Local_enuErrorstate=ES_OK;
    37f6:	81 e0       	ldi	r24, 0x01	; 1
    37f8:	89 83       	std	Y+1, r24	; 0x01
    37fa:	02 c0       	rjmp	.+4      	; 0x3800 <DIO_enuTogPinValue+0x10a>
	}
	else
	{
		Local_enuErrorstate=ES_OUT_OF_RANGE;
    37fc:	83 e0       	ldi	r24, 0x03	; 3
    37fe:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorstate;
    3800:	89 81       	ldd	r24, Y+1	; 0x01
}
    3802:	0f 90       	pop	r0
    3804:	0f 90       	pop	r0
    3806:	0f 90       	pop	r0
    3808:	0f 90       	pop	r0
    380a:	0f 90       	pop	r0
    380c:	cf 91       	pop	r28
    380e:	df 91       	pop	r29
    3810:	08 95       	ret

00003812 <DIO_enuGetPinValue>:

ES_t DIO_enuGetPinValue(u8 Copy_u8PortID ,u8 Copy_u8PinID ,u8* Copy_pu8Value)
{
    3812:	df 93       	push	r29
    3814:	cf 93       	push	r28
    3816:	cd b7       	in	r28, 0x3d	; 61
    3818:	de b7       	in	r29, 0x3e	; 62
    381a:	27 97       	sbiw	r28, 0x07	; 7
    381c:	0f b6       	in	r0, 0x3f	; 63
    381e:	f8 94       	cli
    3820:	de bf       	out	0x3e, r29	; 62
    3822:	0f be       	out	0x3f, r0	; 63
    3824:	cd bf       	out	0x3d, r28	; 61
    3826:	8a 83       	std	Y+2, r24	; 0x02
    3828:	6b 83       	std	Y+3, r22	; 0x03
    382a:	5d 83       	std	Y+5, r21	; 0x05
    382c:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate=ES_NOK;
    382e:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pu8Value !=NULL)
    3830:	8c 81       	ldd	r24, Y+4	; 0x04
    3832:	9d 81       	ldd	r25, Y+5	; 0x05
    3834:	00 97       	sbiw	r24, 0x00	; 0
    3836:	09 f4       	brne	.+2      	; 0x383a <DIO_enuGetPinValue+0x28>
    3838:	7c c0       	rjmp	.+248    	; 0x3932 <DIO_enuGetPinValue+0x120>
	{
		if( Copy_u8PortID <= DIO_PORTD && Copy_u8PinID<=DIO_PIN7 )
    383a:	8a 81       	ldd	r24, Y+2	; 0x02
    383c:	84 30       	cpi	r24, 0x04	; 4
    383e:	08 f0       	brcs	.+2      	; 0x3842 <DIO_enuGetPinValue+0x30>
    3840:	75 c0       	rjmp	.+234    	; 0x392c <DIO_enuGetPinValue+0x11a>
    3842:	8b 81       	ldd	r24, Y+3	; 0x03
    3844:	88 30       	cpi	r24, 0x08	; 8
    3846:	08 f0       	brcs	.+2      	; 0x384a <DIO_enuGetPinValue+0x38>
    3848:	71 c0       	rjmp	.+226    	; 0x392c <DIO_enuGetPinValue+0x11a>
		{
			switch(Copy_u8PortID)
    384a:	8a 81       	ldd	r24, Y+2	; 0x02
    384c:	28 2f       	mov	r18, r24
    384e:	30 e0       	ldi	r19, 0x00	; 0
    3850:	3f 83       	std	Y+7, r19	; 0x07
    3852:	2e 83       	std	Y+6, r18	; 0x06
    3854:	4e 81       	ldd	r20, Y+6	; 0x06
    3856:	5f 81       	ldd	r21, Y+7	; 0x07
    3858:	41 30       	cpi	r20, 0x01	; 1
    385a:	51 05       	cpc	r21, r1
    385c:	59 f1       	breq	.+86     	; 0x38b4 <DIO_enuGetPinValue+0xa2>
    385e:	8e 81       	ldd	r24, Y+6	; 0x06
    3860:	9f 81       	ldd	r25, Y+7	; 0x07
    3862:	82 30       	cpi	r24, 0x02	; 2
    3864:	91 05       	cpc	r25, r1
    3866:	34 f4       	brge	.+12     	; 0x3874 <DIO_enuGetPinValue+0x62>
    3868:	2e 81       	ldd	r18, Y+6	; 0x06
    386a:	3f 81       	ldd	r19, Y+7	; 0x07
    386c:	21 15       	cp	r18, r1
    386e:	31 05       	cpc	r19, r1
    3870:	69 f0       	breq	.+26     	; 0x388c <DIO_enuGetPinValue+0x7a>
    3872:	61 c0       	rjmp	.+194    	; 0x3936 <DIO_enuGetPinValue+0x124>
    3874:	4e 81       	ldd	r20, Y+6	; 0x06
    3876:	5f 81       	ldd	r21, Y+7	; 0x07
    3878:	42 30       	cpi	r20, 0x02	; 2
    387a:	51 05       	cpc	r21, r1
    387c:	79 f1       	breq	.+94     	; 0x38dc <DIO_enuGetPinValue+0xca>
    387e:	8e 81       	ldd	r24, Y+6	; 0x06
    3880:	9f 81       	ldd	r25, Y+7	; 0x07
    3882:	83 30       	cpi	r24, 0x03	; 3
    3884:	91 05       	cpc	r25, r1
    3886:	09 f4       	brne	.+2      	; 0x388a <DIO_enuGetPinValue+0x78>
    3888:	3d c0       	rjmp	.+122    	; 0x3904 <DIO_enuGetPinValue+0xf2>
    388a:	55 c0       	rjmp	.+170    	; 0x3936 <DIO_enuGetPinValue+0x124>
			{
			case DIO_PORTA:
				*Copy_pu8Value=!((PINA & (DIO_MASK_BIT << Copy_u8PinID)) == 0);
    388c:	e9 e3       	ldi	r30, 0x39	; 57
    388e:	f0 e0       	ldi	r31, 0x00	; 0
    3890:	80 81       	ld	r24, Z
    3892:	28 2f       	mov	r18, r24
    3894:	30 e0       	ldi	r19, 0x00	; 0
    3896:	8b 81       	ldd	r24, Y+3	; 0x03
    3898:	88 2f       	mov	r24, r24
    389a:	90 e0       	ldi	r25, 0x00	; 0
    389c:	a9 01       	movw	r20, r18
    389e:	02 c0       	rjmp	.+4      	; 0x38a4 <DIO_enuGetPinValue+0x92>
    38a0:	55 95       	asr	r21
    38a2:	47 95       	ror	r20
    38a4:	8a 95       	dec	r24
    38a6:	e2 f7       	brpl	.-8      	; 0x38a0 <DIO_enuGetPinValue+0x8e>
    38a8:	ca 01       	movw	r24, r20
    38aa:	81 70       	andi	r24, 0x01	; 1
    38ac:	ec 81       	ldd	r30, Y+4	; 0x04
    38ae:	fd 81       	ldd	r31, Y+5	; 0x05
    38b0:	80 83       	st	Z, r24
    38b2:	41 c0       	rjmp	.+130    	; 0x3936 <DIO_enuGetPinValue+0x124>
				break;
			case DIO_PORTB:
				*Copy_pu8Value=!((PINB & (DIO_MASK_BIT << Copy_u8PinID)) == 0);
    38b4:	e6 e3       	ldi	r30, 0x36	; 54
    38b6:	f0 e0       	ldi	r31, 0x00	; 0
    38b8:	80 81       	ld	r24, Z
    38ba:	28 2f       	mov	r18, r24
    38bc:	30 e0       	ldi	r19, 0x00	; 0
    38be:	8b 81       	ldd	r24, Y+3	; 0x03
    38c0:	88 2f       	mov	r24, r24
    38c2:	90 e0       	ldi	r25, 0x00	; 0
    38c4:	a9 01       	movw	r20, r18
    38c6:	02 c0       	rjmp	.+4      	; 0x38cc <DIO_enuGetPinValue+0xba>
    38c8:	55 95       	asr	r21
    38ca:	47 95       	ror	r20
    38cc:	8a 95       	dec	r24
    38ce:	e2 f7       	brpl	.-8      	; 0x38c8 <DIO_enuGetPinValue+0xb6>
    38d0:	ca 01       	movw	r24, r20
    38d2:	81 70       	andi	r24, 0x01	; 1
    38d4:	ec 81       	ldd	r30, Y+4	; 0x04
    38d6:	fd 81       	ldd	r31, Y+5	; 0x05
    38d8:	80 83       	st	Z, r24
    38da:	2d c0       	rjmp	.+90     	; 0x3936 <DIO_enuGetPinValue+0x124>
				break;
			case DIO_PORTC:
				*Copy_pu8Value=!((PINC & (DIO_MASK_BIT << Copy_u8PinID)) == 0);
    38dc:	e3 e3       	ldi	r30, 0x33	; 51
    38de:	f0 e0       	ldi	r31, 0x00	; 0
    38e0:	80 81       	ld	r24, Z
    38e2:	28 2f       	mov	r18, r24
    38e4:	30 e0       	ldi	r19, 0x00	; 0
    38e6:	8b 81       	ldd	r24, Y+3	; 0x03
    38e8:	88 2f       	mov	r24, r24
    38ea:	90 e0       	ldi	r25, 0x00	; 0
    38ec:	a9 01       	movw	r20, r18
    38ee:	02 c0       	rjmp	.+4      	; 0x38f4 <DIO_enuGetPinValue+0xe2>
    38f0:	55 95       	asr	r21
    38f2:	47 95       	ror	r20
    38f4:	8a 95       	dec	r24
    38f6:	e2 f7       	brpl	.-8      	; 0x38f0 <DIO_enuGetPinValue+0xde>
    38f8:	ca 01       	movw	r24, r20
    38fa:	81 70       	andi	r24, 0x01	; 1
    38fc:	ec 81       	ldd	r30, Y+4	; 0x04
    38fe:	fd 81       	ldd	r31, Y+5	; 0x05
    3900:	80 83       	st	Z, r24
    3902:	19 c0       	rjmp	.+50     	; 0x3936 <DIO_enuGetPinValue+0x124>
				break;
			case DIO_PORTD:
				*Copy_pu8Value=!((PIND & (DIO_MASK_BIT << Copy_u8PinID)) == 0);
    3904:	e0 e3       	ldi	r30, 0x30	; 48
    3906:	f0 e0       	ldi	r31, 0x00	; 0
    3908:	80 81       	ld	r24, Z
    390a:	28 2f       	mov	r18, r24
    390c:	30 e0       	ldi	r19, 0x00	; 0
    390e:	8b 81       	ldd	r24, Y+3	; 0x03
    3910:	88 2f       	mov	r24, r24
    3912:	90 e0       	ldi	r25, 0x00	; 0
    3914:	a9 01       	movw	r20, r18
    3916:	02 c0       	rjmp	.+4      	; 0x391c <DIO_enuGetPinValue+0x10a>
    3918:	55 95       	asr	r21
    391a:	47 95       	ror	r20
    391c:	8a 95       	dec	r24
    391e:	e2 f7       	brpl	.-8      	; 0x3918 <DIO_enuGetPinValue+0x106>
    3920:	ca 01       	movw	r24, r20
    3922:	81 70       	andi	r24, 0x01	; 1
    3924:	ec 81       	ldd	r30, Y+4	; 0x04
    3926:	fd 81       	ldd	r31, Y+5	; 0x05
    3928:	80 83       	st	Z, r24
    392a:	05 c0       	rjmp	.+10     	; 0x3936 <DIO_enuGetPinValue+0x124>
				break;
			}
		}
		else
		{
			Local_enuErrorstate=ES_OUT_OF_RANGE;
    392c:	83 e0       	ldi	r24, 0x03	; 3
    392e:	89 83       	std	Y+1, r24	; 0x01
    3930:	02 c0       	rjmp	.+4      	; 0x3936 <DIO_enuGetPinValue+0x124>
		}
	}
	else
	{
		Local_enuErrorstate=ES_NULL_POINTER;
    3932:	82 e0       	ldi	r24, 0x02	; 2
    3934:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorstate;
    3936:	89 81       	ldd	r24, Y+1	; 0x01
}
    3938:	27 96       	adiw	r28, 0x07	; 7
    393a:	0f b6       	in	r0, 0x3f	; 63
    393c:	f8 94       	cli
    393e:	de bf       	out	0x3e, r29	; 62
    3940:	0f be       	out	0x3f, r0	; 63
    3942:	cd bf       	out	0x3d, r28	; 61
    3944:	cf 91       	pop	r28
    3946:	df 91       	pop	r29
    3948:	08 95       	ret

0000394a <ADC_enuInit>:

static void (*ADC_pfunISRFun)(void *)=NULL;
static void *ADC_pvidISRParameter =NULL;

ES_t ADC_enuInit(void)
{
    394a:	df 93       	push	r29
    394c:	cf 93       	push	r28
    394e:	0f 92       	push	r0
    3950:	cd b7       	in	r28, 0x3d	; 61
    3952:	de b7       	in	r29, 0x3e	; 62
	 ES_t Local_enuErrorState=ES_NOK;
    3954:	19 82       	std	Y+1, r1	; 0x01
	 ADCSRA |=(1<<2);
	 ADCSRA |=(1<<1);
	 ADCSRA &=~(1<<0);
	 Local_enuErrorState=ES_OK;
#elif ADC_PRES==PRES_128
	 ADCSRA |=(1<<2);
    3956:	a6 e2       	ldi	r26, 0x26	; 38
    3958:	b0 e0       	ldi	r27, 0x00	; 0
    395a:	e6 e2       	ldi	r30, 0x26	; 38
    395c:	f0 e0       	ldi	r31, 0x00	; 0
    395e:	80 81       	ld	r24, Z
    3960:	84 60       	ori	r24, 0x04	; 4
    3962:	8c 93       	st	X, r24
	 ADCSRA |=(1<<1);
    3964:	a6 e2       	ldi	r26, 0x26	; 38
    3966:	b0 e0       	ldi	r27, 0x00	; 0
    3968:	e6 e2       	ldi	r30, 0x26	; 38
    396a:	f0 e0       	ldi	r31, 0x00	; 0
    396c:	80 81       	ld	r24, Z
    396e:	82 60       	ori	r24, 0x02	; 2
    3970:	8c 93       	st	X, r24
	 ADCSRA |=(1<<0);
    3972:	a6 e2       	ldi	r26, 0x26	; 38
    3974:	b0 e0       	ldi	r27, 0x00	; 0
    3976:	e6 e2       	ldi	r30, 0x26	; 38
    3978:	f0 e0       	ldi	r31, 0x00	; 0
    397a:	80 81       	ld	r24, Z
    397c:	81 60       	ori	r24, 0x01	; 1
    397e:	8c 93       	st	X, r24
	 Local_enuErrorState=ES_OK;
    3980:	81 e0       	ldi	r24, 0x01	; 1
    3982:	89 83       	std	Y+1, r24	; 0x01
#if ADC_REF_VOLT==AREF_REF
	 ADMUX &=~(1<<7);
	 ADMUX &=~(1<<6);
	 Local_enuErrorState=ES_OK;
#elif ADC_REF_VOLT==AVCC_REF
	 ADMUX &=~(1<<7);
    3984:	a7 e2       	ldi	r26, 0x27	; 39
    3986:	b0 e0       	ldi	r27, 0x00	; 0
    3988:	e7 e2       	ldi	r30, 0x27	; 39
    398a:	f0 e0       	ldi	r31, 0x00	; 0
    398c:	80 81       	ld	r24, Z
    398e:	8f 77       	andi	r24, 0x7F	; 127
    3990:	8c 93       	st	X, r24
	 ADMUX |=(1<<6);
    3992:	a7 e2       	ldi	r26, 0x27	; 39
    3994:	b0 e0       	ldi	r27, 0x00	; 0
    3996:	e7 e2       	ldi	r30, 0x27	; 39
    3998:	f0 e0       	ldi	r31, 0x00	; 0
    399a:	80 81       	ld	r24, Z
    399c:	80 64       	ori	r24, 0x40	; 64
    399e:	8c 93       	st	X, r24
	 Local_enuErrorState=ES_OK;
    39a0:	81 e0       	ldi	r24, 0x01	; 1
    39a2:	89 83       	std	Y+1, r24	; 0x01
#error"your ADC_REF_VOLT has a wrong selection"
#endif

	 //ADJUSTEMENT
#if ADC_ADJ==RIGHT_ADJ
	 ADMUX &=~(1<<5);
    39a4:	a7 e2       	ldi	r26, 0x27	; 39
    39a6:	b0 e0       	ldi	r27, 0x00	; 0
    39a8:	e7 e2       	ldi	r30, 0x27	; 39
    39aa:	f0 e0       	ldi	r31, 0x00	; 0
    39ac:	80 81       	ld	r24, Z
    39ae:	8f 7d       	andi	r24, 0xDF	; 223
    39b0:	8c 93       	st	X, r24
	 Local_enuErrorState=ES_OK;
    39b2:	81 e0       	ldi	r24, 0x01	; 1
    39b4:	89 83       	std	Y+1, r24	; 0x01
	 Local_enuErrorState=ES_OUT_OF_RANGE;
#error"your ADC_ADJ has a wrong selection"
#endif


	 return Local_enuErrorState;
    39b6:	89 81       	ldd	r24, Y+1	; 0x01
}
    39b8:	0f 90       	pop	r0
    39ba:	cf 91       	pop	r28
    39bc:	df 91       	pop	r29
    39be:	08 95       	ret

000039c0 <ADC_enuStartConversion>:

ES_t ADC_enuStartConversion(void)
{
    39c0:	df 93       	push	r29
    39c2:	cf 93       	push	r28
    39c4:	0f 92       	push	r0
    39c6:	cd b7       	in	r28, 0x3d	; 61
    39c8:	de b7       	in	r29, 0x3e	; 62
	 ES_t Local_enuErrorState=ES_NOK;
    39ca:	19 82       	std	Y+1, r1	; 0x01

	 ADCSRA |=(1<<6);
    39cc:	a6 e2       	ldi	r26, 0x26	; 38
    39ce:	b0 e0       	ldi	r27, 0x00	; 0
    39d0:	e6 e2       	ldi	r30, 0x26	; 38
    39d2:	f0 e0       	ldi	r31, 0x00	; 0
    39d4:	80 81       	ld	r24, Z
    39d6:	80 64       	ori	r24, 0x40	; 64
    39d8:	8c 93       	st	X, r24
	 Local_enuErrorState=ES_OK;
    39da:	81 e0       	ldi	r24, 0x01	; 1
    39dc:	89 83       	std	Y+1, r24	; 0x01

	 return Local_enuErrorState;
    39de:	89 81       	ldd	r24, Y+1	; 0x01
}
    39e0:	0f 90       	pop	r0
    39e2:	cf 91       	pop	r28
    39e4:	df 91       	pop	r29
    39e6:	08 95       	ret

000039e8 <ADC_enuPollingSystem>:

ES_t ADC_enuPollingSystem(void)
{
    39e8:	df 93       	push	r29
    39ea:	cf 93       	push	r28
    39ec:	0f 92       	push	r0
    39ee:	cd b7       	in	r28, 0x3d	; 61
    39f0:	de b7       	in	r29, 0x3e	; 62
	 ES_t Local_enuErrorState=ES_NOK;
    39f2:	19 82       	std	Y+1, r1	; 0x01

	 while(((ADCSRA >>4)&1)==0); //WAIT FOR FLAG (ADIF)
    39f4:	e6 e2       	ldi	r30, 0x26	; 38
    39f6:	f0 e0       	ldi	r31, 0x00	; 0
    39f8:	80 81       	ld	r24, Z
    39fa:	82 95       	swap	r24
    39fc:	8f 70       	andi	r24, 0x0F	; 15
    39fe:	88 2f       	mov	r24, r24
    3a00:	90 e0       	ldi	r25, 0x00	; 0
    3a02:	81 70       	andi	r24, 0x01	; 1
    3a04:	90 70       	andi	r25, 0x00	; 0
    3a06:	00 97       	sbiw	r24, 0x00	; 0
    3a08:	a9 f3       	breq	.-22     	; 0x39f4 <ADC_enuPollingSystem+0xc>
	 ADCSRA |=(1<<4);   //CLEAR FLAG
    3a0a:	a6 e2       	ldi	r26, 0x26	; 38
    3a0c:	b0 e0       	ldi	r27, 0x00	; 0
    3a0e:	e6 e2       	ldi	r30, 0x26	; 38
    3a10:	f0 e0       	ldi	r31, 0x00	; 0
    3a12:	80 81       	ld	r24, Z
    3a14:	80 61       	ori	r24, 0x10	; 16
    3a16:	8c 93       	st	X, r24
	 Local_enuErrorState=ES_OK;
    3a18:	81 e0       	ldi	r24, 0x01	; 1
    3a1a:	89 83       	std	Y+1, r24	; 0x01

	 return Local_enuErrorState;
    3a1c:	89 81       	ldd	r24, Y+1	; 0x01
}
    3a1e:	0f 90       	pop	r0
    3a20:	cf 91       	pop	r28
    3a22:	df 91       	pop	r29
    3a24:	08 95       	ret

00003a26 <ADC_enuReadHighValue>:

ES_t ADC_enuReadHighValue(u8 *Copy_pu8Value)
{
    3a26:	df 93       	push	r29
    3a28:	cf 93       	push	r28
    3a2a:	00 d0       	rcall	.+0      	; 0x3a2c <ADC_enuReadHighValue+0x6>
    3a2c:	0f 92       	push	r0
    3a2e:	cd b7       	in	r28, 0x3d	; 61
    3a30:	de b7       	in	r29, 0x3e	; 62
    3a32:	9b 83       	std	Y+3, r25	; 0x03
    3a34:	8a 83       	std	Y+2, r24	; 0x02
	 ES_t Local_enuErrorState=ES_NOK;
    3a36:	19 82       	std	Y+1, r1	; 0x01

#if ADC_ADJ==RIGHT_ADJ
	 *Copy_pu8Value =(ADCL >>2);
    3a38:	e4 e2       	ldi	r30, 0x24	; 36
    3a3a:	f0 e0       	ldi	r31, 0x00	; 0
    3a3c:	80 81       	ld	r24, Z
    3a3e:	86 95       	lsr	r24
    3a40:	86 95       	lsr	r24
    3a42:	ea 81       	ldd	r30, Y+2	; 0x02
    3a44:	fb 81       	ldd	r31, Y+3	; 0x03
    3a46:	80 83       	st	Z, r24
	 *Copy_pu8Value |=(ADCH <<6);
    3a48:	ea 81       	ldd	r30, Y+2	; 0x02
    3a4a:	fb 81       	ldd	r31, Y+3	; 0x03
    3a4c:	80 81       	ld	r24, Z
    3a4e:	28 2f       	mov	r18, r24
    3a50:	e5 e2       	ldi	r30, 0x25	; 37
    3a52:	f0 e0       	ldi	r31, 0x00	; 0
    3a54:	80 81       	ld	r24, Z
    3a56:	88 2f       	mov	r24, r24
    3a58:	90 e0       	ldi	r25, 0x00	; 0
    3a5a:	00 24       	eor	r0, r0
    3a5c:	96 95       	lsr	r25
    3a5e:	87 95       	ror	r24
    3a60:	07 94       	ror	r0
    3a62:	96 95       	lsr	r25
    3a64:	87 95       	ror	r24
    3a66:	07 94       	ror	r0
    3a68:	98 2f       	mov	r25, r24
    3a6a:	80 2d       	mov	r24, r0
    3a6c:	82 2b       	or	r24, r18
    3a6e:	ea 81       	ldd	r30, Y+2	; 0x02
    3a70:	fb 81       	ldd	r31, Y+3	; 0x03
    3a72:	80 83       	st	Z, r24
	 Local_enuErrorState=ES_OK;
    3a74:	81 e0       	ldi	r24, 0x01	; 1
    3a76:	89 83       	std	Y+1, r24	; 0x01
#else
	 Local_enuErrorState=ES_OUT_OF_RANGE;
#error"your ADC_ADJ has a wrong selection"
#endif

	 return Local_enuErrorState;
    3a78:	89 81       	ldd	r24, Y+1	; 0x01
}
    3a7a:	0f 90       	pop	r0
    3a7c:	0f 90       	pop	r0
    3a7e:	0f 90       	pop	r0
    3a80:	cf 91       	pop	r28
    3a82:	df 91       	pop	r29
    3a84:	08 95       	ret

00003a86 <ADC_enuRead>:

ES_t ADC_enuRead(u16 *Copy_pu16Value)
{
    3a86:	df 93       	push	r29
    3a88:	cf 93       	push	r28
    3a8a:	00 d0       	rcall	.+0      	; 0x3a8c <ADC_enuRead+0x6>
    3a8c:	0f 92       	push	r0
    3a8e:	cd b7       	in	r28, 0x3d	; 61
    3a90:	de b7       	in	r29, 0x3e	; 62
    3a92:	9b 83       	std	Y+3, r25	; 0x03
    3a94:	8a 83       	std	Y+2, r24	; 0x02
	 ES_t Local_enuErrorState=ES_NOK;
    3a96:	19 82       	std	Y+1, r1	; 0x01

#if ADC_ADJ==RIGHT_ADJ
	 *Copy_pu16Value =ADCL;
    3a98:	e4 e2       	ldi	r30, 0x24	; 36
    3a9a:	f0 e0       	ldi	r31, 0x00	; 0
    3a9c:	80 81       	ld	r24, Z
    3a9e:	88 2f       	mov	r24, r24
    3aa0:	90 e0       	ldi	r25, 0x00	; 0
    3aa2:	ea 81       	ldd	r30, Y+2	; 0x02
    3aa4:	fb 81       	ldd	r31, Y+3	; 0x03
    3aa6:	91 83       	std	Z+1, r25	; 0x01
    3aa8:	80 83       	st	Z, r24
	 *Copy_pu16Value |=((u16)ADCH <<8);
    3aaa:	ea 81       	ldd	r30, Y+2	; 0x02
    3aac:	fb 81       	ldd	r31, Y+3	; 0x03
    3aae:	20 81       	ld	r18, Z
    3ab0:	31 81       	ldd	r19, Z+1	; 0x01
    3ab2:	e5 e2       	ldi	r30, 0x25	; 37
    3ab4:	f0 e0       	ldi	r31, 0x00	; 0
    3ab6:	80 81       	ld	r24, Z
    3ab8:	88 2f       	mov	r24, r24
    3aba:	90 e0       	ldi	r25, 0x00	; 0
    3abc:	98 2f       	mov	r25, r24
    3abe:	88 27       	eor	r24, r24
    3ac0:	82 2b       	or	r24, r18
    3ac2:	93 2b       	or	r25, r19
    3ac4:	ea 81       	ldd	r30, Y+2	; 0x02
    3ac6:	fb 81       	ldd	r31, Y+3	; 0x03
    3ac8:	91 83       	std	Z+1, r25	; 0x01
    3aca:	80 83       	st	Z, r24
	 Local_enuErrorState=ES_OK;
    3acc:	81 e0       	ldi	r24, 0x01	; 1
    3ace:	89 83       	std	Y+1, r24	; 0x01
#else
	 Local_enuErrorState=ES_OUT_OF_RANGE;
#error"your ADC_ADJ has a wrong selection"
#endif

	 return Local_enuErrorState;
    3ad0:	89 81       	ldd	r24, Y+1	; 0x01
}
    3ad2:	0f 90       	pop	r0
    3ad4:	0f 90       	pop	r0
    3ad6:	0f 90       	pop	r0
    3ad8:	cf 91       	pop	r28
    3ada:	df 91       	pop	r29
    3adc:	08 95       	ret

00003ade <ADC_enuCallBack>:

ES_t ADC_enuCallBack(void(Copy_pfunAppFun)(void*),void *Copy_pvidAppParameter)
{
    3ade:	df 93       	push	r29
    3ae0:	cf 93       	push	r28
    3ae2:	00 d0       	rcall	.+0      	; 0x3ae4 <ADC_enuCallBack+0x6>
    3ae4:	00 d0       	rcall	.+0      	; 0x3ae6 <ADC_enuCallBack+0x8>
    3ae6:	0f 92       	push	r0
    3ae8:	cd b7       	in	r28, 0x3d	; 61
    3aea:	de b7       	in	r29, 0x3e	; 62
    3aec:	9b 83       	std	Y+3, r25	; 0x03
    3aee:	8a 83       	std	Y+2, r24	; 0x02
    3af0:	7d 83       	std	Y+5, r23	; 0x05
    3af2:	6c 83       	std	Y+4, r22	; 0x04
	 ES_t Local_enuErrorState=ES_NOK;
    3af4:	19 82       	std	Y+1, r1	; 0x01

	 if(Copy_pfunAppFun!=NULL)
    3af6:	8a 81       	ldd	r24, Y+2	; 0x02
    3af8:	9b 81       	ldd	r25, Y+3	; 0x03
    3afa:	00 97       	sbiw	r24, 0x00	; 0
    3afc:	79 f0       	breq	.+30     	; 0x3b1c <ADC_enuCallBack+0x3e>
	 {
		 ADC_pfunISRFun=Copy_pfunAppFun;
    3afe:	8a 81       	ldd	r24, Y+2	; 0x02
    3b00:	9b 81       	ldd	r25, Y+3	; 0x03
    3b02:	90 93 8f 07 	sts	0x078F, r25
    3b06:	80 93 8e 07 	sts	0x078E, r24
		 ADC_pvidISRParameter=Copy_pvidAppParameter;
    3b0a:	8c 81       	ldd	r24, Y+4	; 0x04
    3b0c:	9d 81       	ldd	r25, Y+5	; 0x05
    3b0e:	90 93 91 07 	sts	0x0791, r25
    3b12:	80 93 90 07 	sts	0x0790, r24
		 Local_enuErrorState=ES_OK;
    3b16:	81 e0       	ldi	r24, 0x01	; 1
    3b18:	89 83       	std	Y+1, r24	; 0x01
    3b1a:	02 c0       	rjmp	.+4      	; 0x3b20 <ADC_enuCallBack+0x42>
	 }
	 else
	 {
		 Local_enuErrorState=ES_NULL_POINTER;
    3b1c:	82 e0       	ldi	r24, 0x02	; 2
    3b1e:	89 83       	std	Y+1, r24	; 0x01
	 }

	 return Local_enuErrorState;
    3b20:	89 81       	ldd	r24, Y+1	; 0x01
}
    3b22:	0f 90       	pop	r0
    3b24:	0f 90       	pop	r0
    3b26:	0f 90       	pop	r0
    3b28:	0f 90       	pop	r0
    3b2a:	0f 90       	pop	r0
    3b2c:	cf 91       	pop	r28
    3b2e:	df 91       	pop	r29
    3b30:	08 95       	ret

00003b32 <ADC_enuSelectChannel>:

ES_t ADC_enuSelectChannel(u8 Copy_u8ChannelID)
{
    3b32:	df 93       	push	r29
    3b34:	cf 93       	push	r28
    3b36:	00 d0       	rcall	.+0      	; 0x3b38 <ADC_enuSelectChannel+0x6>
    3b38:	cd b7       	in	r28, 0x3d	; 61
    3b3a:	de b7       	in	r29, 0x3e	; 62
    3b3c:	8a 83       	std	Y+2, r24	; 0x02
	 ES_t Local_enuErrorState=ES_NOK;
    3b3e:	19 82       	std	Y+1, r1	; 0x01

	 if(Copy_u8ChannelID<32)
    3b40:	8a 81       	ldd	r24, Y+2	; 0x02
    3b42:	80 32       	cpi	r24, 0x20	; 32
    3b44:	90 f4       	brcc	.+36     	; 0x3b6a <ADC_enuSelectChannel+0x38>
	 {
		 ADMUX &=~ 0x1F;  //clear bits 4 3 2 1 0 >> 0b00011111 ~ 0b11100000
    3b46:	a7 e2       	ldi	r26, 0x27	; 39
    3b48:	b0 e0       	ldi	r27, 0x00	; 0
    3b4a:	e7 e2       	ldi	r30, 0x27	; 39
    3b4c:	f0 e0       	ldi	r31, 0x00	; 0
    3b4e:	80 81       	ld	r24, Z
    3b50:	80 7e       	andi	r24, 0xE0	; 224
    3b52:	8c 93       	st	X, r24
		 ADMUX |=Copy_u8ChannelID;
    3b54:	a7 e2       	ldi	r26, 0x27	; 39
    3b56:	b0 e0       	ldi	r27, 0x00	; 0
    3b58:	e7 e2       	ldi	r30, 0x27	; 39
    3b5a:	f0 e0       	ldi	r31, 0x00	; 0
    3b5c:	90 81       	ld	r25, Z
    3b5e:	8a 81       	ldd	r24, Y+2	; 0x02
    3b60:	89 2b       	or	r24, r25
    3b62:	8c 93       	st	X, r24
		 Local_enuErrorState=ES_OK;
    3b64:	81 e0       	ldi	r24, 0x01	; 1
    3b66:	89 83       	std	Y+1, r24	; 0x01
    3b68:	02 c0       	rjmp	.+4      	; 0x3b6e <ADC_enuSelectChannel+0x3c>
	 }
	 else
	 {
		 Local_enuErrorState=ES_OUT_OF_RANGE;
    3b6a:	83 e0       	ldi	r24, 0x03	; 3
    3b6c:	89 83       	std	Y+1, r24	; 0x01
	 }

	 return Local_enuErrorState;
    3b6e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3b70:	0f 90       	pop	r0
    3b72:	0f 90       	pop	r0
    3b74:	cf 91       	pop	r28
    3b76:	df 91       	pop	r29
    3b78:	08 95       	ret

00003b7a <ADC_enuEnableTriggeringMode>:

ES_t ADC_enuEnableTriggeringMode(u8 Copy_u8TriggeringSource)
{
    3b7a:	df 93       	push	r29
    3b7c:	cf 93       	push	r28
    3b7e:	00 d0       	rcall	.+0      	; 0x3b80 <ADC_enuEnableTriggeringMode+0x6>
    3b80:	00 d0       	rcall	.+0      	; 0x3b82 <ADC_enuEnableTriggeringMode+0x8>
    3b82:	cd b7       	in	r28, 0x3d	; 61
    3b84:	de b7       	in	r29, 0x3e	; 62
    3b86:	8a 83       	std	Y+2, r24	; 0x02
	 ES_t Local_enuErrorState=ES_NOK;
    3b88:	19 82       	std	Y+1, r1	; 0x01

	 ADCSRA &=~(1<<5); //CLOSE AUTO_TRIGEERING TO SELECT TRIGGER SOURCE
    3b8a:	a6 e2       	ldi	r26, 0x26	; 38
    3b8c:	b0 e0       	ldi	r27, 0x00	; 0
    3b8e:	e6 e2       	ldi	r30, 0x26	; 38
    3b90:	f0 e0       	ldi	r31, 0x00	; 0
    3b92:	80 81       	ld	r24, Z
    3b94:	8f 7d       	andi	r24, 0xDF	; 223
    3b96:	8c 93       	st	X, r24

	 switch(Copy_u8TriggeringSource)
    3b98:	8a 81       	ldd	r24, Y+2	; 0x02
    3b9a:	28 2f       	mov	r18, r24
    3b9c:	30 e0       	ldi	r19, 0x00	; 0
    3b9e:	3c 83       	std	Y+4, r19	; 0x04
    3ba0:	2b 83       	std	Y+3, r18	; 0x03
    3ba2:	8b 81       	ldd	r24, Y+3	; 0x03
    3ba4:	9c 81       	ldd	r25, Y+4	; 0x04
    3ba6:	84 30       	cpi	r24, 0x04	; 4
    3ba8:	91 05       	cpc	r25, r1
    3baa:	09 f4       	brne	.+2      	; 0x3bae <ADC_enuEnableTriggeringMode+0x34>
    3bac:	77 c0       	rjmp	.+238    	; 0x3c9c <ADC_enuEnableTriggeringMode+0x122>
    3bae:	2b 81       	ldd	r18, Y+3	; 0x03
    3bb0:	3c 81       	ldd	r19, Y+4	; 0x04
    3bb2:	25 30       	cpi	r18, 0x05	; 5
    3bb4:	31 05       	cpc	r19, r1
    3bb6:	8c f4       	brge	.+34     	; 0x3bda <ADC_enuEnableTriggeringMode+0x60>
    3bb8:	8b 81       	ldd	r24, Y+3	; 0x03
    3bba:	9c 81       	ldd	r25, Y+4	; 0x04
    3bbc:	82 30       	cpi	r24, 0x02	; 2
    3bbe:	91 05       	cpc	r25, r1
    3bc0:	e9 f1       	breq	.+122    	; 0x3c3c <ADC_enuEnableTriggeringMode+0xc2>
    3bc2:	2b 81       	ldd	r18, Y+3	; 0x03
    3bc4:	3c 81       	ldd	r19, Y+4	; 0x04
    3bc6:	23 30       	cpi	r18, 0x03	; 3
    3bc8:	31 05       	cpc	r19, r1
    3bca:	0c f0       	brlt	.+2      	; 0x3bce <ADC_enuEnableTriggeringMode+0x54>
    3bcc:	4f c0       	rjmp	.+158    	; 0x3c6c <ADC_enuEnableTriggeringMode+0xf2>
    3bce:	8b 81       	ldd	r24, Y+3	; 0x03
    3bd0:	9c 81       	ldd	r25, Y+4	; 0x04
    3bd2:	81 30       	cpi	r24, 0x01	; 1
    3bd4:	91 05       	cpc	r25, r1
    3bd6:	d1 f0       	breq	.+52     	; 0x3c0c <ADC_enuEnableTriggeringMode+0x92>
    3bd8:	d9 c0       	rjmp	.+434    	; 0x3d8c <ADC_enuEnableTriggeringMode+0x212>
    3bda:	2b 81       	ldd	r18, Y+3	; 0x03
    3bdc:	3c 81       	ldd	r19, Y+4	; 0x04
    3bde:	26 30       	cpi	r18, 0x06	; 6
    3be0:	31 05       	cpc	r19, r1
    3be2:	09 f4       	brne	.+2      	; 0x3be6 <ADC_enuEnableTriggeringMode+0x6c>
    3be4:	8b c0       	rjmp	.+278    	; 0x3cfc <ADC_enuEnableTriggeringMode+0x182>
    3be6:	8b 81       	ldd	r24, Y+3	; 0x03
    3be8:	9c 81       	ldd	r25, Y+4	; 0x04
    3bea:	86 30       	cpi	r24, 0x06	; 6
    3bec:	91 05       	cpc	r25, r1
    3bee:	0c f4       	brge	.+2      	; 0x3bf2 <ADC_enuEnableTriggeringMode+0x78>
    3bf0:	6d c0       	rjmp	.+218    	; 0x3ccc <ADC_enuEnableTriggeringMode+0x152>
    3bf2:	2b 81       	ldd	r18, Y+3	; 0x03
    3bf4:	3c 81       	ldd	r19, Y+4	; 0x04
    3bf6:	27 30       	cpi	r18, 0x07	; 7
    3bf8:	31 05       	cpc	r19, r1
    3bfa:	09 f4       	brne	.+2      	; 0x3bfe <ADC_enuEnableTriggeringMode+0x84>
    3bfc:	97 c0       	rjmp	.+302    	; 0x3d2c <ADC_enuEnableTriggeringMode+0x1b2>
    3bfe:	8b 81       	ldd	r24, Y+3	; 0x03
    3c00:	9c 81       	ldd	r25, Y+4	; 0x04
    3c02:	88 30       	cpi	r24, 0x08	; 8
    3c04:	91 05       	cpc	r25, r1
    3c06:	09 f4       	brne	.+2      	; 0x3c0a <ADC_enuEnableTriggeringMode+0x90>
    3c08:	a9 c0       	rjmp	.+338    	; 0x3d5c <ADC_enuEnableTriggeringMode+0x1e2>
    3c0a:	c0 c0       	rjmp	.+384    	; 0x3d8c <ADC_enuEnableTriggeringMode+0x212>
	 {
	 case FREE_RUNNING:
		 SFIOR &=~(1<<7);
    3c0c:	a0 e5       	ldi	r26, 0x50	; 80
    3c0e:	b0 e0       	ldi	r27, 0x00	; 0
    3c10:	e0 e5       	ldi	r30, 0x50	; 80
    3c12:	f0 e0       	ldi	r31, 0x00	; 0
    3c14:	80 81       	ld	r24, Z
    3c16:	8f 77       	andi	r24, 0x7F	; 127
    3c18:	8c 93       	st	X, r24
		 SFIOR &=~(1<<6);
    3c1a:	a0 e5       	ldi	r26, 0x50	; 80
    3c1c:	b0 e0       	ldi	r27, 0x00	; 0
    3c1e:	e0 e5       	ldi	r30, 0x50	; 80
    3c20:	f0 e0       	ldi	r31, 0x00	; 0
    3c22:	80 81       	ld	r24, Z
    3c24:	8f 7b       	andi	r24, 0xBF	; 191
    3c26:	8c 93       	st	X, r24
		 SFIOR &=~(1<<5);
    3c28:	a0 e5       	ldi	r26, 0x50	; 80
    3c2a:	b0 e0       	ldi	r27, 0x00	; 0
    3c2c:	e0 e5       	ldi	r30, 0x50	; 80
    3c2e:	f0 e0       	ldi	r31, 0x00	; 0
    3c30:	80 81       	ld	r24, Z
    3c32:	8f 7d       	andi	r24, 0xDF	; 223
    3c34:	8c 93       	st	X, r24
		 Local_enuErrorState=ES_OK;
    3c36:	81 e0       	ldi	r24, 0x01	; 1
    3c38:	89 83       	std	Y+1, r24	; 0x01
    3c3a:	aa c0       	rjmp	.+340    	; 0x3d90 <ADC_enuEnableTriggeringMode+0x216>
		 break;
	 case ANALOG_COMPARATOR:
		 SFIOR &=~(1<<7);
    3c3c:	a0 e5       	ldi	r26, 0x50	; 80
    3c3e:	b0 e0       	ldi	r27, 0x00	; 0
    3c40:	e0 e5       	ldi	r30, 0x50	; 80
    3c42:	f0 e0       	ldi	r31, 0x00	; 0
    3c44:	80 81       	ld	r24, Z
    3c46:	8f 77       	andi	r24, 0x7F	; 127
    3c48:	8c 93       	st	X, r24
		 SFIOR &=~(1<<6);
    3c4a:	a0 e5       	ldi	r26, 0x50	; 80
    3c4c:	b0 e0       	ldi	r27, 0x00	; 0
    3c4e:	e0 e5       	ldi	r30, 0x50	; 80
    3c50:	f0 e0       	ldi	r31, 0x00	; 0
    3c52:	80 81       	ld	r24, Z
    3c54:	8f 7b       	andi	r24, 0xBF	; 191
    3c56:	8c 93       	st	X, r24
		 SFIOR |=(1<<5);
    3c58:	a0 e5       	ldi	r26, 0x50	; 80
    3c5a:	b0 e0       	ldi	r27, 0x00	; 0
    3c5c:	e0 e5       	ldi	r30, 0x50	; 80
    3c5e:	f0 e0       	ldi	r31, 0x00	; 0
    3c60:	80 81       	ld	r24, Z
    3c62:	80 62       	ori	r24, 0x20	; 32
    3c64:	8c 93       	st	X, r24
		 Local_enuErrorState=ES_OK;
    3c66:	81 e0       	ldi	r24, 0x01	; 1
    3c68:	89 83       	std	Y+1, r24	; 0x01
    3c6a:	92 c0       	rjmp	.+292    	; 0x3d90 <ADC_enuEnableTriggeringMode+0x216>
		 break;
	 case EXT_INT0_REQ:
		 SFIOR &=~(1<<7);
    3c6c:	a0 e5       	ldi	r26, 0x50	; 80
    3c6e:	b0 e0       	ldi	r27, 0x00	; 0
    3c70:	e0 e5       	ldi	r30, 0x50	; 80
    3c72:	f0 e0       	ldi	r31, 0x00	; 0
    3c74:	80 81       	ld	r24, Z
    3c76:	8f 77       	andi	r24, 0x7F	; 127
    3c78:	8c 93       	st	X, r24
		 SFIOR |=(1<<6);
    3c7a:	a0 e5       	ldi	r26, 0x50	; 80
    3c7c:	b0 e0       	ldi	r27, 0x00	; 0
    3c7e:	e0 e5       	ldi	r30, 0x50	; 80
    3c80:	f0 e0       	ldi	r31, 0x00	; 0
    3c82:	80 81       	ld	r24, Z
    3c84:	80 64       	ori	r24, 0x40	; 64
    3c86:	8c 93       	st	X, r24
		 SFIOR &=~(1<<5);
    3c88:	a0 e5       	ldi	r26, 0x50	; 80
    3c8a:	b0 e0       	ldi	r27, 0x00	; 0
    3c8c:	e0 e5       	ldi	r30, 0x50	; 80
    3c8e:	f0 e0       	ldi	r31, 0x00	; 0
    3c90:	80 81       	ld	r24, Z
    3c92:	8f 7d       	andi	r24, 0xDF	; 223
    3c94:	8c 93       	st	X, r24
		 Local_enuErrorState=ES_OK;
    3c96:	81 e0       	ldi	r24, 0x01	; 1
    3c98:	89 83       	std	Y+1, r24	; 0x01
    3c9a:	7a c0       	rjmp	.+244    	; 0x3d90 <ADC_enuEnableTriggeringMode+0x216>
		 break;
	 case TIM_COUNT_0_COMPARE_MATCH:
		 SFIOR &=~(1<<7);
    3c9c:	a0 e5       	ldi	r26, 0x50	; 80
    3c9e:	b0 e0       	ldi	r27, 0x00	; 0
    3ca0:	e0 e5       	ldi	r30, 0x50	; 80
    3ca2:	f0 e0       	ldi	r31, 0x00	; 0
    3ca4:	80 81       	ld	r24, Z
    3ca6:	8f 77       	andi	r24, 0x7F	; 127
    3ca8:	8c 93       	st	X, r24
		 SFIOR |=(1<<6);
    3caa:	a0 e5       	ldi	r26, 0x50	; 80
    3cac:	b0 e0       	ldi	r27, 0x00	; 0
    3cae:	e0 e5       	ldi	r30, 0x50	; 80
    3cb0:	f0 e0       	ldi	r31, 0x00	; 0
    3cb2:	80 81       	ld	r24, Z
    3cb4:	80 64       	ori	r24, 0x40	; 64
    3cb6:	8c 93       	st	X, r24
		 SFIOR |=(1<<5);
    3cb8:	a0 e5       	ldi	r26, 0x50	; 80
    3cba:	b0 e0       	ldi	r27, 0x00	; 0
    3cbc:	e0 e5       	ldi	r30, 0x50	; 80
    3cbe:	f0 e0       	ldi	r31, 0x00	; 0
    3cc0:	80 81       	ld	r24, Z
    3cc2:	80 62       	ori	r24, 0x20	; 32
    3cc4:	8c 93       	st	X, r24
		 Local_enuErrorState=ES_OK;
    3cc6:	81 e0       	ldi	r24, 0x01	; 1
    3cc8:	89 83       	std	Y+1, r24	; 0x01
    3cca:	62 c0       	rjmp	.+196    	; 0x3d90 <ADC_enuEnableTriggeringMode+0x216>
		 break;
	 case TIM_COUNT_0_OVERFLOW:
		 SFIOR |=(1<<7);
    3ccc:	a0 e5       	ldi	r26, 0x50	; 80
    3cce:	b0 e0       	ldi	r27, 0x00	; 0
    3cd0:	e0 e5       	ldi	r30, 0x50	; 80
    3cd2:	f0 e0       	ldi	r31, 0x00	; 0
    3cd4:	80 81       	ld	r24, Z
    3cd6:	80 68       	ori	r24, 0x80	; 128
    3cd8:	8c 93       	st	X, r24
		 SFIOR &=~(1<<6);
    3cda:	a0 e5       	ldi	r26, 0x50	; 80
    3cdc:	b0 e0       	ldi	r27, 0x00	; 0
    3cde:	e0 e5       	ldi	r30, 0x50	; 80
    3ce0:	f0 e0       	ldi	r31, 0x00	; 0
    3ce2:	80 81       	ld	r24, Z
    3ce4:	8f 7b       	andi	r24, 0xBF	; 191
    3ce6:	8c 93       	st	X, r24
		 SFIOR &=~(1<<5);
    3ce8:	a0 e5       	ldi	r26, 0x50	; 80
    3cea:	b0 e0       	ldi	r27, 0x00	; 0
    3cec:	e0 e5       	ldi	r30, 0x50	; 80
    3cee:	f0 e0       	ldi	r31, 0x00	; 0
    3cf0:	80 81       	ld	r24, Z
    3cf2:	8f 7d       	andi	r24, 0xDF	; 223
    3cf4:	8c 93       	st	X, r24
		 Local_enuErrorState=ES_OK;
    3cf6:	81 e0       	ldi	r24, 0x01	; 1
    3cf8:	89 83       	std	Y+1, r24	; 0x01
    3cfa:	4a c0       	rjmp	.+148    	; 0x3d90 <ADC_enuEnableTriggeringMode+0x216>
		 break;
	 case TIM_COUNT_1_COMPARE_MATCH:
		 SFIOR |=(1<<7);
    3cfc:	a0 e5       	ldi	r26, 0x50	; 80
    3cfe:	b0 e0       	ldi	r27, 0x00	; 0
    3d00:	e0 e5       	ldi	r30, 0x50	; 80
    3d02:	f0 e0       	ldi	r31, 0x00	; 0
    3d04:	80 81       	ld	r24, Z
    3d06:	80 68       	ori	r24, 0x80	; 128
    3d08:	8c 93       	st	X, r24
		 SFIOR &=~(1<<6);
    3d0a:	a0 e5       	ldi	r26, 0x50	; 80
    3d0c:	b0 e0       	ldi	r27, 0x00	; 0
    3d0e:	e0 e5       	ldi	r30, 0x50	; 80
    3d10:	f0 e0       	ldi	r31, 0x00	; 0
    3d12:	80 81       	ld	r24, Z
    3d14:	8f 7b       	andi	r24, 0xBF	; 191
    3d16:	8c 93       	st	X, r24
		 SFIOR |=(1<<5);
    3d18:	a0 e5       	ldi	r26, 0x50	; 80
    3d1a:	b0 e0       	ldi	r27, 0x00	; 0
    3d1c:	e0 e5       	ldi	r30, 0x50	; 80
    3d1e:	f0 e0       	ldi	r31, 0x00	; 0
    3d20:	80 81       	ld	r24, Z
    3d22:	80 62       	ori	r24, 0x20	; 32
    3d24:	8c 93       	st	X, r24
		 Local_enuErrorState=ES_OK;
    3d26:	81 e0       	ldi	r24, 0x01	; 1
    3d28:	89 83       	std	Y+1, r24	; 0x01
    3d2a:	32 c0       	rjmp	.+100    	; 0x3d90 <ADC_enuEnableTriggeringMode+0x216>
		 break;
	 case TIM_COUNT_1_OVERFLOW:
		 SFIOR |=(1<<7);
    3d2c:	a0 e5       	ldi	r26, 0x50	; 80
    3d2e:	b0 e0       	ldi	r27, 0x00	; 0
    3d30:	e0 e5       	ldi	r30, 0x50	; 80
    3d32:	f0 e0       	ldi	r31, 0x00	; 0
    3d34:	80 81       	ld	r24, Z
    3d36:	80 68       	ori	r24, 0x80	; 128
    3d38:	8c 93       	st	X, r24
		 SFIOR |=(1<<6);
    3d3a:	a0 e5       	ldi	r26, 0x50	; 80
    3d3c:	b0 e0       	ldi	r27, 0x00	; 0
    3d3e:	e0 e5       	ldi	r30, 0x50	; 80
    3d40:	f0 e0       	ldi	r31, 0x00	; 0
    3d42:	80 81       	ld	r24, Z
    3d44:	80 64       	ori	r24, 0x40	; 64
    3d46:	8c 93       	st	X, r24
		 SFIOR &=~(1<<5);
    3d48:	a0 e5       	ldi	r26, 0x50	; 80
    3d4a:	b0 e0       	ldi	r27, 0x00	; 0
    3d4c:	e0 e5       	ldi	r30, 0x50	; 80
    3d4e:	f0 e0       	ldi	r31, 0x00	; 0
    3d50:	80 81       	ld	r24, Z
    3d52:	8f 7d       	andi	r24, 0xDF	; 223
    3d54:	8c 93       	st	X, r24
		 Local_enuErrorState=ES_OK;
    3d56:	81 e0       	ldi	r24, 0x01	; 1
    3d58:	89 83       	std	Y+1, r24	; 0x01
    3d5a:	1a c0       	rjmp	.+52     	; 0x3d90 <ADC_enuEnableTriggeringMode+0x216>
		 break;
	 case TIM_COUNT_1_CAP_EVENT:
		 SFIOR |=(1<<7);
    3d5c:	a0 e5       	ldi	r26, 0x50	; 80
    3d5e:	b0 e0       	ldi	r27, 0x00	; 0
    3d60:	e0 e5       	ldi	r30, 0x50	; 80
    3d62:	f0 e0       	ldi	r31, 0x00	; 0
    3d64:	80 81       	ld	r24, Z
    3d66:	80 68       	ori	r24, 0x80	; 128
    3d68:	8c 93       	st	X, r24
		 SFIOR |=(1<<6);
    3d6a:	a0 e5       	ldi	r26, 0x50	; 80
    3d6c:	b0 e0       	ldi	r27, 0x00	; 0
    3d6e:	e0 e5       	ldi	r30, 0x50	; 80
    3d70:	f0 e0       	ldi	r31, 0x00	; 0
    3d72:	80 81       	ld	r24, Z
    3d74:	80 64       	ori	r24, 0x40	; 64
    3d76:	8c 93       	st	X, r24
		 SFIOR |=(1<<5);
    3d78:	a0 e5       	ldi	r26, 0x50	; 80
    3d7a:	b0 e0       	ldi	r27, 0x00	; 0
    3d7c:	e0 e5       	ldi	r30, 0x50	; 80
    3d7e:	f0 e0       	ldi	r31, 0x00	; 0
    3d80:	80 81       	ld	r24, Z
    3d82:	80 62       	ori	r24, 0x20	; 32
    3d84:	8c 93       	st	X, r24
		 Local_enuErrorState=ES_OK;
    3d86:	81 e0       	ldi	r24, 0x01	; 1
    3d88:	89 83       	std	Y+1, r24	; 0x01
    3d8a:	02 c0       	rjmp	.+4      	; 0x3d90 <ADC_enuEnableTriggeringMode+0x216>
		 break;
	 default:
		 Local_enuErrorState=ES_OUT_OF_RANGE;
    3d8c:	83 e0       	ldi	r24, 0x03	; 3
    3d8e:	89 83       	std	Y+1, r24	; 0x01
		 break;
	 }
	 ADCSRA |=(1<<5);
    3d90:	a6 e2       	ldi	r26, 0x26	; 38
    3d92:	b0 e0       	ldi	r27, 0x00	; 0
    3d94:	e6 e2       	ldi	r30, 0x26	; 38
    3d96:	f0 e0       	ldi	r31, 0x00	; 0
    3d98:	80 81       	ld	r24, Z
    3d9a:	80 62       	ori	r24, 0x20	; 32
    3d9c:	8c 93       	st	X, r24

	 return Local_enuErrorState;
    3d9e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3da0:	0f 90       	pop	r0
    3da2:	0f 90       	pop	r0
    3da4:	0f 90       	pop	r0
    3da6:	0f 90       	pop	r0
    3da8:	cf 91       	pop	r28
    3daa:	df 91       	pop	r29
    3dac:	08 95       	ret

00003dae <ADC_enuDisableTriggeringMode>:

ES_t ADC_enuDisableTriggeringMode(void)
{
    3dae:	df 93       	push	r29
    3db0:	cf 93       	push	r28
    3db2:	0f 92       	push	r0
    3db4:	cd b7       	in	r28, 0x3d	; 61
    3db6:	de b7       	in	r29, 0x3e	; 62
	 ES_t Local_enuErrorState=ES_NOK;
    3db8:	19 82       	std	Y+1, r1	; 0x01

	 ADCSRA &=~(1<<5);
    3dba:	a6 e2       	ldi	r26, 0x26	; 38
    3dbc:	b0 e0       	ldi	r27, 0x00	; 0
    3dbe:	e6 e2       	ldi	r30, 0x26	; 38
    3dc0:	f0 e0       	ldi	r31, 0x00	; 0
    3dc2:	80 81       	ld	r24, Z
    3dc4:	8f 7d       	andi	r24, 0xDF	; 223
    3dc6:	8c 93       	st	X, r24
	 Local_enuErrorState=ES_OK;
    3dc8:	81 e0       	ldi	r24, 0x01	; 1
    3dca:	89 83       	std	Y+1, r24	; 0x01

	 return Local_enuErrorState;
    3dcc:	89 81       	ldd	r24, Y+1	; 0x01
}
    3dce:	0f 90       	pop	r0
    3dd0:	cf 91       	pop	r28
    3dd2:	df 91       	pop	r29
    3dd4:	08 95       	ret

00003dd6 <ADC_enuEnableInterruptMode>:

ES_t ADC_enuEnableInterruptMode(void)
{
    3dd6:	df 93       	push	r29
    3dd8:	cf 93       	push	r28
    3dda:	0f 92       	push	r0
    3ddc:	cd b7       	in	r28, 0x3d	; 61
    3dde:	de b7       	in	r29, 0x3e	; 62
	 ES_t Local_enuErrorState=ES_NOK;
    3de0:	19 82       	std	Y+1, r1	; 0x01

	 ADCSRA |=(1<<3);
    3de2:	a6 e2       	ldi	r26, 0x26	; 38
    3de4:	b0 e0       	ldi	r27, 0x00	; 0
    3de6:	e6 e2       	ldi	r30, 0x26	; 38
    3de8:	f0 e0       	ldi	r31, 0x00	; 0
    3dea:	80 81       	ld	r24, Z
    3dec:	88 60       	ori	r24, 0x08	; 8
    3dee:	8c 93       	st	X, r24
	 Local_enuErrorState=ES_OK;
    3df0:	81 e0       	ldi	r24, 0x01	; 1
    3df2:	89 83       	std	Y+1, r24	; 0x01

	 return Local_enuErrorState;
    3df4:	89 81       	ldd	r24, Y+1	; 0x01
}
    3df6:	0f 90       	pop	r0
    3df8:	cf 91       	pop	r28
    3dfa:	df 91       	pop	r29
    3dfc:	08 95       	ret

00003dfe <ADC_enuDisableInterruptMode>:

ES_t ADC_enuDisableInterruptMode(void)
{
    3dfe:	df 93       	push	r29
    3e00:	cf 93       	push	r28
    3e02:	0f 92       	push	r0
    3e04:	cd b7       	in	r28, 0x3d	; 61
    3e06:	de b7       	in	r29, 0x3e	; 62
	 ES_t Local_enuErrorState=ES_NOK;
    3e08:	19 82       	std	Y+1, r1	; 0x01

	 ADCSRA &=~(1<<3);
    3e0a:	a6 e2       	ldi	r26, 0x26	; 38
    3e0c:	b0 e0       	ldi	r27, 0x00	; 0
    3e0e:	e6 e2       	ldi	r30, 0x26	; 38
    3e10:	f0 e0       	ldi	r31, 0x00	; 0
    3e12:	80 81       	ld	r24, Z
    3e14:	87 7f       	andi	r24, 0xF7	; 247
    3e16:	8c 93       	st	X, r24
	 Local_enuErrorState=ES_OK;
    3e18:	81 e0       	ldi	r24, 0x01	; 1
    3e1a:	89 83       	std	Y+1, r24	; 0x01

	 return Local_enuErrorState;
    3e1c:	89 81       	ldd	r24, Y+1	; 0x01
}
    3e1e:	0f 90       	pop	r0
    3e20:	cf 91       	pop	r28
    3e22:	df 91       	pop	r29
    3e24:	08 95       	ret

00003e26 <ADC_enuEnable>:

ES_t ADC_enuEnable(void)
{
    3e26:	df 93       	push	r29
    3e28:	cf 93       	push	r28
    3e2a:	0f 92       	push	r0
    3e2c:	cd b7       	in	r28, 0x3d	; 61
    3e2e:	de b7       	in	r29, 0x3e	; 62
	 ES_t Local_enuErrorState=ES_NOK;
    3e30:	19 82       	std	Y+1, r1	; 0x01

	 ADCSRA |=(1<<7);
    3e32:	a6 e2       	ldi	r26, 0x26	; 38
    3e34:	b0 e0       	ldi	r27, 0x00	; 0
    3e36:	e6 e2       	ldi	r30, 0x26	; 38
    3e38:	f0 e0       	ldi	r31, 0x00	; 0
    3e3a:	80 81       	ld	r24, Z
    3e3c:	80 68       	ori	r24, 0x80	; 128
    3e3e:	8c 93       	st	X, r24
	 Local_enuErrorState=ES_OK;
    3e40:	81 e0       	ldi	r24, 0x01	; 1
    3e42:	89 83       	std	Y+1, r24	; 0x01

	 return Local_enuErrorState;
    3e44:	89 81       	ldd	r24, Y+1	; 0x01
}
    3e46:	0f 90       	pop	r0
    3e48:	cf 91       	pop	r28
    3e4a:	df 91       	pop	r29
    3e4c:	08 95       	ret

00003e4e <ADC_enuDisable>:

ES_t ADC_enuDisable(void)
{
    3e4e:	df 93       	push	r29
    3e50:	cf 93       	push	r28
    3e52:	0f 92       	push	r0
    3e54:	cd b7       	in	r28, 0x3d	; 61
    3e56:	de b7       	in	r29, 0x3e	; 62
	 ES_t Local_enuErrorState=ES_NOK;
    3e58:	19 82       	std	Y+1, r1	; 0x01

	 ADCSRA &=~(1<<7);
    3e5a:	a6 e2       	ldi	r26, 0x26	; 38
    3e5c:	b0 e0       	ldi	r27, 0x00	; 0
    3e5e:	e6 e2       	ldi	r30, 0x26	; 38
    3e60:	f0 e0       	ldi	r31, 0x00	; 0
    3e62:	80 81       	ld	r24, Z
    3e64:	8f 77       	andi	r24, 0x7F	; 127
    3e66:	8c 93       	st	X, r24
	 Local_enuErrorState=ES_OK;
    3e68:	81 e0       	ldi	r24, 0x01	; 1
    3e6a:	89 83       	std	Y+1, r24	; 0x01

	 return Local_enuErrorState;
    3e6c:	89 81       	ldd	r24, Y+1	; 0x01
}
    3e6e:	0f 90       	pop	r0
    3e70:	cf 91       	pop	r28
    3e72:	df 91       	pop	r29
    3e74:	08 95       	ret

00003e76 <ADC_Read_From_Ch>:

ES_t ADC_Read_From_Ch(u16 *Copy_pu16ReadValue, u8 Copy_u8ChannelID)
{
    3e76:	df 93       	push	r29
    3e78:	cf 93       	push	r28
    3e7a:	00 d0       	rcall	.+0      	; 0x3e7c <ADC_Read_From_Ch+0x6>
    3e7c:	00 d0       	rcall	.+0      	; 0x3e7e <ADC_Read_From_Ch+0x8>
    3e7e:	cd b7       	in	r28, 0x3d	; 61
    3e80:	de b7       	in	r29, 0x3e	; 62
    3e82:	9b 83       	std	Y+3, r25	; 0x03
    3e84:	8a 83       	std	Y+2, r24	; 0x02
    3e86:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    3e88:	19 82       	std	Y+1, r1	; 0x01

	ADC_enuEnable();
    3e8a:	0e 94 13 1f 	call	0x3e26	; 0x3e26 <ADC_enuEnable>
	ADC_enuDisableTriggeringMode();
    3e8e:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <ADC_enuDisableTriggeringMode>
	ADC_enuSelectChannel(Copy_u8ChannelID);
    3e92:	8c 81       	ldd	r24, Y+4	; 0x04
    3e94:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <ADC_enuSelectChannel>
	ADC_enuStartConversion();
    3e98:	0e 94 e0 1c 	call	0x39c0	; 0x39c0 <ADC_enuStartConversion>
	ADC_enuDisableInterruptMode();
    3e9c:	0e 94 ff 1e 	call	0x3dfe	; 0x3dfe <ADC_enuDisableInterruptMode>
	ADC_enuPollingSystem();
    3ea0:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <ADC_enuPollingSystem>
	ADC_enuRead(Copy_pu16ReadValue);
    3ea4:	8a 81       	ldd	r24, Y+2	; 0x02
    3ea6:	9b 81       	ldd	r25, Y+3	; 0x03
    3ea8:	0e 94 43 1d 	call	0x3a86	; 0x3a86 <ADC_enuRead>
	ADC_enuDisable();
    3eac:	0e 94 27 1f 	call	0x3e4e	; 0x3e4e <ADC_enuDisable>

	return Local_enuErrorState;
    3eb0:	89 81       	ldd	r24, Y+1	; 0x01
}
    3eb2:	0f 90       	pop	r0
    3eb4:	0f 90       	pop	r0
    3eb6:	0f 90       	pop	r0
    3eb8:	0f 90       	pop	r0
    3eba:	cf 91       	pop	r28
    3ebc:	df 91       	pop	r29
    3ebe:	08 95       	ret

00003ec0 <__vector_16>:
ISR(VECT_ADC)
{
    3ec0:	1f 92       	push	r1
    3ec2:	0f 92       	push	r0
    3ec4:	0f b6       	in	r0, 0x3f	; 63
    3ec6:	0f 92       	push	r0
    3ec8:	11 24       	eor	r1, r1
    3eca:	2f 93       	push	r18
    3ecc:	3f 93       	push	r19
    3ece:	4f 93       	push	r20
    3ed0:	5f 93       	push	r21
    3ed2:	6f 93       	push	r22
    3ed4:	7f 93       	push	r23
    3ed6:	8f 93       	push	r24
    3ed8:	9f 93       	push	r25
    3eda:	af 93       	push	r26
    3edc:	bf 93       	push	r27
    3ede:	ef 93       	push	r30
    3ee0:	ff 93       	push	r31
    3ee2:	df 93       	push	r29
    3ee4:	cf 93       	push	r28
    3ee6:	cd b7       	in	r28, 0x3d	; 61
    3ee8:	de b7       	in	r29, 0x3e	; 62
	if(ADC_pfunISRFun!=NULL)
    3eea:	80 91 8e 07 	lds	r24, 0x078E
    3eee:	90 91 8f 07 	lds	r25, 0x078F
    3ef2:	00 97       	sbiw	r24, 0x00	; 0
    3ef4:	49 f0       	breq	.+18     	; 0x3f08 <__vector_16+0x48>
	{
		ADC_pfunISRFun(ADC_pvidISRParameter);
    3ef6:	e0 91 8e 07 	lds	r30, 0x078E
    3efa:	f0 91 8f 07 	lds	r31, 0x078F
    3efe:	80 91 90 07 	lds	r24, 0x0790
    3f02:	90 91 91 07 	lds	r25, 0x0791
    3f06:	09 95       	icall
	}

}
    3f08:	cf 91       	pop	r28
    3f0a:	df 91       	pop	r29
    3f0c:	ff 91       	pop	r31
    3f0e:	ef 91       	pop	r30
    3f10:	bf 91       	pop	r27
    3f12:	af 91       	pop	r26
    3f14:	9f 91       	pop	r25
    3f16:	8f 91       	pop	r24
    3f18:	7f 91       	pop	r23
    3f1a:	6f 91       	pop	r22
    3f1c:	5f 91       	pop	r21
    3f1e:	4f 91       	pop	r20
    3f20:	3f 91       	pop	r19
    3f22:	2f 91       	pop	r18
    3f24:	0f 90       	pop	r0
    3f26:	0f be       	out	0x3f, r0	; 63
    3f28:	0f 90       	pop	r0
    3f2a:	1f 90       	pop	r1
    3f2c:	18 95       	reti

00003f2e <SERVO_enudInit>:
#include "Servo_priv.h"



ES_t SERVO_enudInit(void)
{
    3f2e:	df 93       	push	r29
    3f30:	cf 93       	push	r28
    3f32:	0f 92       	push	r0
    3f34:	cd b7       	in	r28, 0x3d	; 61
    3f36:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
    3f38:	19 82       	std	Y+1, r1	; 0x01


	Local_enuErrorState= TIMER1_enuInit();
    3f3a:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <TIMER1_enuInit>
    3f3e:	89 83       	std	Y+1, r24	; 0x01
#if SERVO_CHANNEL==TIMER1_Channel_A
	Local_enuErrorState= DIO_enuSetPinDirection(DIO_u8PORTD,DIO_u8PIN5,DIO_u8OUTPUT);
	Local_enuErrorState= DIO_enuSetPinValue(DIO_u8PORTD,DIO_u8PIN5,DIO_u8LOW);

#elif SERVO_CHANNEL==TIMER1_Channel_B
	Local_enuErrorState= DIO_enuSetPinDirection(DIO_u8PORTD,DIO_u8PIN4,DIO_u8OUTPUT);
    3f40:	83 e0       	ldi	r24, 0x03	; 3
    3f42:	64 e0       	ldi	r22, 0x04	; 4
    3f44:	41 e0       	ldi	r20, 0x01	; 1
    3f46:	0e 94 a3 19 	call	0x3346	; 0x3346 <DIO_enuSetPinDirection>
    3f4a:	89 83       	std	Y+1, r24	; 0x01
	Local_enuErrorState= DIO_enuSetPinValue(DIO_u8PORTD,DIO_u8PIN4,DIO_u8LOW);
    3f4c:	83 e0       	ldi	r24, 0x03	; 3
    3f4e:	64 e0       	ldi	r22, 0x04	; 4
    3f50:	40 e0       	ldi	r20, 0x00	; 0
    3f52:	0e 94 8f 1a 	call	0x351e	; 0x351e <DIO_enuSetPinValue>
    3f56:	89 83       	std	Y+1, r24	; 0x01
#else
#error "Attention!!, your PWM_CHANNEL Selection is Wrong...."

#endif

	Local_enuErrorState= TIMER1_enuSetICR(SERVO_PERIOD);
    3f58:	80 e2       	ldi	r24, 0x20	; 32
    3f5a:	9e e4       	ldi	r25, 0x4E	; 78
    3f5c:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <TIMER1_enuSetICR>
    3f60:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    3f62:	89 81       	ldd	r24, Y+1	; 0x01
}
    3f64:	0f 90       	pop	r0
    3f66:	cf 91       	pop	r28
    3f68:	df 91       	pop	r29
    3f6a:	08 95       	ret

00003f6c <SERVO_enuSetAngle>:

ES_t SERVO_enuSetAngle(s8 Copy_s8Angle)
{
    3f6c:	df 93       	push	r29
    3f6e:	cf 93       	push	r28
    3f70:	00 d0       	rcall	.+0      	; 0x3f72 <SERVO_enuSetAngle+0x6>
    3f72:	00 d0       	rcall	.+0      	; 0x3f74 <SERVO_enuSetAngle+0x8>
    3f74:	00 d0       	rcall	.+0      	; 0x3f76 <SERVO_enuSetAngle+0xa>
    3f76:	cd b7       	in	r28, 0x3d	; 61
    3f78:	de b7       	in	r29, 0x3e	; 62
    3f7a:	8e 83       	std	Y+6, r24	; 0x06
	ES_t Local_enuErrorState=ES_NOK;
    3f7c:	1d 82       	std	Y+5, r1	; 0x05

	Copy_s8Angle+=90;
    3f7e:	8e 81       	ldd	r24, Y+6	; 0x06
    3f80:	86 5a       	subi	r24, 0xA6	; 166
    3f82:	8e 83       	std	Y+6, r24	; 0x06
	u32 Local_u32TON=1000+((u32)Copy_s8Angle*1000/180);
    3f84:	8e 81       	ldd	r24, Y+6	; 0x06
    3f86:	88 2f       	mov	r24, r24
    3f88:	90 e0       	ldi	r25, 0x00	; 0
    3f8a:	a0 e0       	ldi	r26, 0x00	; 0
    3f8c:	b0 e0       	ldi	r27, 0x00	; 0
    3f8e:	28 ee       	ldi	r18, 0xE8	; 232
    3f90:	33 e0       	ldi	r19, 0x03	; 3
    3f92:	40 e0       	ldi	r20, 0x00	; 0
    3f94:	50 e0       	ldi	r21, 0x00	; 0
    3f96:	bc 01       	movw	r22, r24
    3f98:	cd 01       	movw	r24, r26
    3f9a:	0e 94 d9 35 	call	0x6bb2	; 0x6bb2 <__mulsi3>
    3f9e:	dc 01       	movw	r26, r24
    3fa0:	cb 01       	movw	r24, r22
    3fa2:	24 eb       	ldi	r18, 0xB4	; 180
    3fa4:	30 e0       	ldi	r19, 0x00	; 0
    3fa6:	40 e0       	ldi	r20, 0x00	; 0
    3fa8:	50 e0       	ldi	r21, 0x00	; 0
    3faa:	bc 01       	movw	r22, r24
    3fac:	cd 01       	movw	r24, r26
    3fae:	0e 94 f8 35 	call	0x6bf0	; 0x6bf0 <__udivmodsi4>
    3fb2:	da 01       	movw	r26, r20
    3fb4:	c9 01       	movw	r24, r18
    3fb6:	88 51       	subi	r24, 0x18	; 24
    3fb8:	9c 4f       	sbci	r25, 0xFC	; 252
    3fba:	af 4f       	sbci	r26, 0xFF	; 255
    3fbc:	bf 4f       	sbci	r27, 0xFF	; 255
    3fbe:	89 83       	std	Y+1, r24	; 0x01
    3fc0:	9a 83       	std	Y+2, r25	; 0x02
    3fc2:	ab 83       	std	Y+3, r26	; 0x03
    3fc4:	bc 83       	std	Y+4, r27	; 0x04

#if SERVO_CHANNEL==TIMER1_Channel_A
	Local_enuErrorState= TIMER1_enuSetChannelACTC(Local_u32TON);

#elif SERVO_CHANNEL==TIMER1_Channel_B
	Local_enuErrorState= TIMER1_enuSetChannelBCTC(Local_u32TON);
    3fc6:	89 81       	ldd	r24, Y+1	; 0x01
    3fc8:	9a 81       	ldd	r25, Y+2	; 0x02
    3fca:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <TIMER1_enuSetChannelBCTC>
    3fce:	8d 83       	std	Y+5, r24	; 0x05

#endif



	return Local_enuErrorState;
    3fd0:	8d 81       	ldd	r24, Y+5	; 0x05
}
    3fd2:	26 96       	adiw	r28, 0x06	; 6
    3fd4:	0f b6       	in	r0, 0x3f	; 63
    3fd6:	f8 94       	cli
    3fd8:	de bf       	out	0x3e, r29	; 62
    3fda:	0f be       	out	0x3f, r0	; 63
    3fdc:	cd bf       	out	0x3d, r28	; 61
    3fde:	cf 91       	pop	r28
    3fe0:	df 91       	pop	r29
    3fe2:	08 95       	ret

00003fe4 <LED_enuInit>:




ES_t LED_enuInit(LED_t * copy_pstrLedConfig)
{
    3fe4:	df 93       	push	r29
    3fe6:	cf 93       	push	r28
    3fe8:	00 d0       	rcall	.+0      	; 0x3fea <LED_enuInit+0x6>
    3fea:	00 d0       	rcall	.+0      	; 0x3fec <LED_enuInit+0x8>
    3fec:	0f 92       	push	r0
    3fee:	cd b7       	in	r28, 0x3d	; 61
    3ff0:	de b7       	in	r29, 0x3e	; 62
    3ff2:	9c 83       	std	Y+4, r25	; 0x04
    3ff4:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState=ES_NOK;
    3ff6:	1a 82       	std	Y+2, r1	; 0x02
	if(copy_pstrLedConfig !=NULL)
    3ff8:	8b 81       	ldd	r24, Y+3	; 0x03
    3ffa:	9c 81       	ldd	r25, Y+4	; 0x04
    3ffc:	00 97       	sbiw	r24, 0x00	; 0
    3ffe:	09 f4       	brne	.+2      	; 0x4002 <LED_enuInit+0x1e>
    4000:	24 c1       	rjmp	.+584    	; 0x424a <LED_enuInit+0x266>
	{
		u8 Local_enuIterator=0;
    4002:	19 82       	std	Y+1, r1	; 0x01
		for(Local_enuIterator=0;Local_enuIterator<LED_NUM;Local_enuIterator++)
    4004:	19 82       	std	Y+1, r1	; 0x01
    4006:	1c c1       	rjmp	.+568    	; 0x4240 <LED_enuInit+0x25c>
		{
			Local_enuErrorState=DIO_enuSetPinDirection(copy_pstrLedConfig[Local_enuIterator].LED_u8PortID,copy_pstrLedConfig[Local_enuIterator].LED_u8PinID,DIO_u8OUTPUT);
    4008:	89 81       	ldd	r24, Y+1	; 0x01
    400a:	88 2f       	mov	r24, r24
    400c:	90 e0       	ldi	r25, 0x00	; 0
    400e:	9c 01       	movw	r18, r24
    4010:	22 0f       	add	r18, r18
    4012:	33 1f       	adc	r19, r19
    4014:	22 0f       	add	r18, r18
    4016:	33 1f       	adc	r19, r19
    4018:	8b 81       	ldd	r24, Y+3	; 0x03
    401a:	9c 81       	ldd	r25, Y+4	; 0x04
    401c:	fc 01       	movw	r30, r24
    401e:	e2 0f       	add	r30, r18
    4020:	f3 1f       	adc	r31, r19
    4022:	40 81       	ld	r20, Z
    4024:	89 81       	ldd	r24, Y+1	; 0x01
    4026:	88 2f       	mov	r24, r24
    4028:	90 e0       	ldi	r25, 0x00	; 0
    402a:	9c 01       	movw	r18, r24
    402c:	22 0f       	add	r18, r18
    402e:	33 1f       	adc	r19, r19
    4030:	22 0f       	add	r18, r18
    4032:	33 1f       	adc	r19, r19
    4034:	8b 81       	ldd	r24, Y+3	; 0x03
    4036:	9c 81       	ldd	r25, Y+4	; 0x04
    4038:	fc 01       	movw	r30, r24
    403a:	e2 0f       	add	r30, r18
    403c:	f3 1f       	adc	r31, r19
    403e:	91 81       	ldd	r25, Z+1	; 0x01
    4040:	84 2f       	mov	r24, r20
    4042:	69 2f       	mov	r22, r25
    4044:	41 e0       	ldi	r20, 0x01	; 1
    4046:	0e 94 a3 19 	call	0x3346	; 0x3346 <DIO_enuSetPinDirection>
    404a:	8a 83       	std	Y+2, r24	; 0x02
			if(copy_pstrLedConfig[Local_enuIterator].LED_u8Connection==LED_SINK)
    404c:	89 81       	ldd	r24, Y+1	; 0x01
    404e:	88 2f       	mov	r24, r24
    4050:	90 e0       	ldi	r25, 0x00	; 0
    4052:	9c 01       	movw	r18, r24
    4054:	22 0f       	add	r18, r18
    4056:	33 1f       	adc	r19, r19
    4058:	22 0f       	add	r18, r18
    405a:	33 1f       	adc	r19, r19
    405c:	8b 81       	ldd	r24, Y+3	; 0x03
    405e:	9c 81       	ldd	r25, Y+4	; 0x04
    4060:	fc 01       	movw	r30, r24
    4062:	e2 0f       	add	r30, r18
    4064:	f3 1f       	adc	r31, r19
    4066:	82 81       	ldd	r24, Z+2	; 0x02
    4068:	88 23       	and	r24, r24
    406a:	09 f0       	breq	.+2      	; 0x406e <LED_enuInit+0x8a>
    406c:	69 c0       	rjmp	.+210    	; 0x4140 <LED_enuInit+0x15c>
			{
				if(copy_pstrLedConfig[Local_enuIterator].LED_u8InitState==LED_ON)
    406e:	89 81       	ldd	r24, Y+1	; 0x01
    4070:	88 2f       	mov	r24, r24
    4072:	90 e0       	ldi	r25, 0x00	; 0
    4074:	9c 01       	movw	r18, r24
    4076:	22 0f       	add	r18, r18
    4078:	33 1f       	adc	r19, r19
    407a:	22 0f       	add	r18, r18
    407c:	33 1f       	adc	r19, r19
    407e:	8b 81       	ldd	r24, Y+3	; 0x03
    4080:	9c 81       	ldd	r25, Y+4	; 0x04
    4082:	fc 01       	movw	r30, r24
    4084:	e2 0f       	add	r30, r18
    4086:	f3 1f       	adc	r31, r19
    4088:	83 81       	ldd	r24, Z+3	; 0x03
    408a:	89 30       	cpi	r24, 0x09	; 9
    408c:	19 f5       	brne	.+70     	; 0x40d4 <LED_enuInit+0xf0>
				{
					Local_enuErrorState=DIO_enuSetPinValue(copy_pstrLedConfig[Local_enuIterator].LED_u8PortID,copy_pstrLedConfig[Local_enuIterator].LED_u8PinID,DIO_u8LOW);
    408e:	89 81       	ldd	r24, Y+1	; 0x01
    4090:	88 2f       	mov	r24, r24
    4092:	90 e0       	ldi	r25, 0x00	; 0
    4094:	9c 01       	movw	r18, r24
    4096:	22 0f       	add	r18, r18
    4098:	33 1f       	adc	r19, r19
    409a:	22 0f       	add	r18, r18
    409c:	33 1f       	adc	r19, r19
    409e:	8b 81       	ldd	r24, Y+3	; 0x03
    40a0:	9c 81       	ldd	r25, Y+4	; 0x04
    40a2:	fc 01       	movw	r30, r24
    40a4:	e2 0f       	add	r30, r18
    40a6:	f3 1f       	adc	r31, r19
    40a8:	40 81       	ld	r20, Z
    40aa:	89 81       	ldd	r24, Y+1	; 0x01
    40ac:	88 2f       	mov	r24, r24
    40ae:	90 e0       	ldi	r25, 0x00	; 0
    40b0:	9c 01       	movw	r18, r24
    40b2:	22 0f       	add	r18, r18
    40b4:	33 1f       	adc	r19, r19
    40b6:	22 0f       	add	r18, r18
    40b8:	33 1f       	adc	r19, r19
    40ba:	8b 81       	ldd	r24, Y+3	; 0x03
    40bc:	9c 81       	ldd	r25, Y+4	; 0x04
    40be:	fc 01       	movw	r30, r24
    40c0:	e2 0f       	add	r30, r18
    40c2:	f3 1f       	adc	r31, r19
    40c4:	91 81       	ldd	r25, Z+1	; 0x01
    40c6:	84 2f       	mov	r24, r20
    40c8:	69 2f       	mov	r22, r25
    40ca:	40 e0       	ldi	r20, 0x00	; 0
    40cc:	0e 94 8f 1a 	call	0x351e	; 0x351e <DIO_enuSetPinValue>
    40d0:	8a 83       	std	Y+2, r24	; 0x02
    40d2:	b3 c0       	rjmp	.+358    	; 0x423a <LED_enuInit+0x256>
				}
				else if(copy_pstrLedConfig[Local_enuIterator].LED_u8InitState==LED_OFF)
    40d4:	89 81       	ldd	r24, Y+1	; 0x01
    40d6:	88 2f       	mov	r24, r24
    40d8:	90 e0       	ldi	r25, 0x00	; 0
    40da:	9c 01       	movw	r18, r24
    40dc:	22 0f       	add	r18, r18
    40de:	33 1f       	adc	r19, r19
    40e0:	22 0f       	add	r18, r18
    40e2:	33 1f       	adc	r19, r19
    40e4:	8b 81       	ldd	r24, Y+3	; 0x03
    40e6:	9c 81       	ldd	r25, Y+4	; 0x04
    40e8:	fc 01       	movw	r30, r24
    40ea:	e2 0f       	add	r30, r18
    40ec:	f3 1f       	adc	r31, r19
    40ee:	83 81       	ldd	r24, Z+3	; 0x03
    40f0:	8b 37       	cpi	r24, 0x7B	; 123
    40f2:	19 f5       	brne	.+70     	; 0x413a <LED_enuInit+0x156>
				{
					Local_enuErrorState=DIO_enuSetPinValue(copy_pstrLedConfig[Local_enuIterator].LED_u8PortID,copy_pstrLedConfig[Local_enuIterator].LED_u8PinID,DIO_u8HIGH);
    40f4:	89 81       	ldd	r24, Y+1	; 0x01
    40f6:	88 2f       	mov	r24, r24
    40f8:	90 e0       	ldi	r25, 0x00	; 0
    40fa:	9c 01       	movw	r18, r24
    40fc:	22 0f       	add	r18, r18
    40fe:	33 1f       	adc	r19, r19
    4100:	22 0f       	add	r18, r18
    4102:	33 1f       	adc	r19, r19
    4104:	8b 81       	ldd	r24, Y+3	; 0x03
    4106:	9c 81       	ldd	r25, Y+4	; 0x04
    4108:	fc 01       	movw	r30, r24
    410a:	e2 0f       	add	r30, r18
    410c:	f3 1f       	adc	r31, r19
    410e:	40 81       	ld	r20, Z
    4110:	89 81       	ldd	r24, Y+1	; 0x01
    4112:	88 2f       	mov	r24, r24
    4114:	90 e0       	ldi	r25, 0x00	; 0
    4116:	9c 01       	movw	r18, r24
    4118:	22 0f       	add	r18, r18
    411a:	33 1f       	adc	r19, r19
    411c:	22 0f       	add	r18, r18
    411e:	33 1f       	adc	r19, r19
    4120:	8b 81       	ldd	r24, Y+3	; 0x03
    4122:	9c 81       	ldd	r25, Y+4	; 0x04
    4124:	fc 01       	movw	r30, r24
    4126:	e2 0f       	add	r30, r18
    4128:	f3 1f       	adc	r31, r19
    412a:	91 81       	ldd	r25, Z+1	; 0x01
    412c:	84 2f       	mov	r24, r20
    412e:	69 2f       	mov	r22, r25
    4130:	41 e0       	ldi	r20, 0x01	; 1
    4132:	0e 94 8f 1a 	call	0x351e	; 0x351e <DIO_enuSetPinValue>
    4136:	8a 83       	std	Y+2, r24	; 0x02
    4138:	80 c0       	rjmp	.+256    	; 0x423a <LED_enuInit+0x256>
				}
				else
				{
					return ES_OUT_OF_RANGE;
    413a:	83 e0       	ldi	r24, 0x03	; 3
    413c:	8d 83       	std	Y+5, r24	; 0x05
    413e:	89 c0       	rjmp	.+274    	; 0x4252 <LED_enuInit+0x26e>
				}
			}
			else if(copy_pstrLedConfig[Local_enuIterator].LED_u8Connection==LED_SOURCE)
    4140:	89 81       	ldd	r24, Y+1	; 0x01
    4142:	88 2f       	mov	r24, r24
    4144:	90 e0       	ldi	r25, 0x00	; 0
    4146:	9c 01       	movw	r18, r24
    4148:	22 0f       	add	r18, r18
    414a:	33 1f       	adc	r19, r19
    414c:	22 0f       	add	r18, r18
    414e:	33 1f       	adc	r19, r19
    4150:	8b 81       	ldd	r24, Y+3	; 0x03
    4152:	9c 81       	ldd	r25, Y+4	; 0x04
    4154:	fc 01       	movw	r30, r24
    4156:	e2 0f       	add	r30, r18
    4158:	f3 1f       	adc	r31, r19
    415a:	82 81       	ldd	r24, Z+2	; 0x02
    415c:	81 30       	cpi	r24, 0x01	; 1
    415e:	09 f0       	breq	.+2      	; 0x4162 <LED_enuInit+0x17e>
    4160:	69 c0       	rjmp	.+210    	; 0x4234 <LED_enuInit+0x250>
			{
				if(copy_pstrLedConfig[Local_enuIterator].LED_u8InitState==LED_ON)
    4162:	89 81       	ldd	r24, Y+1	; 0x01
    4164:	88 2f       	mov	r24, r24
    4166:	90 e0       	ldi	r25, 0x00	; 0
    4168:	9c 01       	movw	r18, r24
    416a:	22 0f       	add	r18, r18
    416c:	33 1f       	adc	r19, r19
    416e:	22 0f       	add	r18, r18
    4170:	33 1f       	adc	r19, r19
    4172:	8b 81       	ldd	r24, Y+3	; 0x03
    4174:	9c 81       	ldd	r25, Y+4	; 0x04
    4176:	fc 01       	movw	r30, r24
    4178:	e2 0f       	add	r30, r18
    417a:	f3 1f       	adc	r31, r19
    417c:	83 81       	ldd	r24, Z+3	; 0x03
    417e:	89 30       	cpi	r24, 0x09	; 9
    4180:	19 f5       	brne	.+70     	; 0x41c8 <LED_enuInit+0x1e4>
				{
					Local_enuErrorState=DIO_enuSetPinValue(copy_pstrLedConfig[Local_enuIterator].LED_u8PortID,copy_pstrLedConfig[Local_enuIterator].LED_u8PinID,DIO_u8HIGH);
    4182:	89 81       	ldd	r24, Y+1	; 0x01
    4184:	88 2f       	mov	r24, r24
    4186:	90 e0       	ldi	r25, 0x00	; 0
    4188:	9c 01       	movw	r18, r24
    418a:	22 0f       	add	r18, r18
    418c:	33 1f       	adc	r19, r19
    418e:	22 0f       	add	r18, r18
    4190:	33 1f       	adc	r19, r19
    4192:	8b 81       	ldd	r24, Y+3	; 0x03
    4194:	9c 81       	ldd	r25, Y+4	; 0x04
    4196:	fc 01       	movw	r30, r24
    4198:	e2 0f       	add	r30, r18
    419a:	f3 1f       	adc	r31, r19
    419c:	40 81       	ld	r20, Z
    419e:	89 81       	ldd	r24, Y+1	; 0x01
    41a0:	88 2f       	mov	r24, r24
    41a2:	90 e0       	ldi	r25, 0x00	; 0
    41a4:	9c 01       	movw	r18, r24
    41a6:	22 0f       	add	r18, r18
    41a8:	33 1f       	adc	r19, r19
    41aa:	22 0f       	add	r18, r18
    41ac:	33 1f       	adc	r19, r19
    41ae:	8b 81       	ldd	r24, Y+3	; 0x03
    41b0:	9c 81       	ldd	r25, Y+4	; 0x04
    41b2:	fc 01       	movw	r30, r24
    41b4:	e2 0f       	add	r30, r18
    41b6:	f3 1f       	adc	r31, r19
    41b8:	91 81       	ldd	r25, Z+1	; 0x01
    41ba:	84 2f       	mov	r24, r20
    41bc:	69 2f       	mov	r22, r25
    41be:	41 e0       	ldi	r20, 0x01	; 1
    41c0:	0e 94 8f 1a 	call	0x351e	; 0x351e <DIO_enuSetPinValue>
    41c4:	8a 83       	std	Y+2, r24	; 0x02
    41c6:	39 c0       	rjmp	.+114    	; 0x423a <LED_enuInit+0x256>
				}
				else if(copy_pstrLedConfig[Local_enuIterator].LED_u8InitState==LED_OFF)
    41c8:	89 81       	ldd	r24, Y+1	; 0x01
    41ca:	88 2f       	mov	r24, r24
    41cc:	90 e0       	ldi	r25, 0x00	; 0
    41ce:	9c 01       	movw	r18, r24
    41d0:	22 0f       	add	r18, r18
    41d2:	33 1f       	adc	r19, r19
    41d4:	22 0f       	add	r18, r18
    41d6:	33 1f       	adc	r19, r19
    41d8:	8b 81       	ldd	r24, Y+3	; 0x03
    41da:	9c 81       	ldd	r25, Y+4	; 0x04
    41dc:	fc 01       	movw	r30, r24
    41de:	e2 0f       	add	r30, r18
    41e0:	f3 1f       	adc	r31, r19
    41e2:	83 81       	ldd	r24, Z+3	; 0x03
    41e4:	8b 37       	cpi	r24, 0x7B	; 123
    41e6:	19 f5       	brne	.+70     	; 0x422e <LED_enuInit+0x24a>
				{
					Local_enuErrorState=DIO_enuSetPinValue(copy_pstrLedConfig[Local_enuIterator].LED_u8PortID,copy_pstrLedConfig[Local_enuIterator].LED_u8PinID,DIO_u8LOW);
    41e8:	89 81       	ldd	r24, Y+1	; 0x01
    41ea:	88 2f       	mov	r24, r24
    41ec:	90 e0       	ldi	r25, 0x00	; 0
    41ee:	9c 01       	movw	r18, r24
    41f0:	22 0f       	add	r18, r18
    41f2:	33 1f       	adc	r19, r19
    41f4:	22 0f       	add	r18, r18
    41f6:	33 1f       	adc	r19, r19
    41f8:	8b 81       	ldd	r24, Y+3	; 0x03
    41fa:	9c 81       	ldd	r25, Y+4	; 0x04
    41fc:	fc 01       	movw	r30, r24
    41fe:	e2 0f       	add	r30, r18
    4200:	f3 1f       	adc	r31, r19
    4202:	40 81       	ld	r20, Z
    4204:	89 81       	ldd	r24, Y+1	; 0x01
    4206:	88 2f       	mov	r24, r24
    4208:	90 e0       	ldi	r25, 0x00	; 0
    420a:	9c 01       	movw	r18, r24
    420c:	22 0f       	add	r18, r18
    420e:	33 1f       	adc	r19, r19
    4210:	22 0f       	add	r18, r18
    4212:	33 1f       	adc	r19, r19
    4214:	8b 81       	ldd	r24, Y+3	; 0x03
    4216:	9c 81       	ldd	r25, Y+4	; 0x04
    4218:	fc 01       	movw	r30, r24
    421a:	e2 0f       	add	r30, r18
    421c:	f3 1f       	adc	r31, r19
    421e:	91 81       	ldd	r25, Z+1	; 0x01
    4220:	84 2f       	mov	r24, r20
    4222:	69 2f       	mov	r22, r25
    4224:	40 e0       	ldi	r20, 0x00	; 0
    4226:	0e 94 8f 1a 	call	0x351e	; 0x351e <DIO_enuSetPinValue>
    422a:	8a 83       	std	Y+2, r24	; 0x02
    422c:	06 c0       	rjmp	.+12     	; 0x423a <LED_enuInit+0x256>
				}
				else
				{
					return ES_OUT_OF_RANGE;
    422e:	83 e0       	ldi	r24, 0x03	; 3
    4230:	8d 83       	std	Y+5, r24	; 0x05
    4232:	0f c0       	rjmp	.+30     	; 0x4252 <LED_enuInit+0x26e>
				}
			}
			else
			{
				return ES_OUT_OF_RANGE;
    4234:	83 e0       	ldi	r24, 0x03	; 3
    4236:	8d 83       	std	Y+5, r24	; 0x05
    4238:	0c c0       	rjmp	.+24     	; 0x4252 <LED_enuInit+0x26e>
{
	ES_t Local_enuErrorState=ES_NOK;
	if(copy_pstrLedConfig !=NULL)
	{
		u8 Local_enuIterator=0;
		for(Local_enuIterator=0;Local_enuIterator<LED_NUM;Local_enuIterator++)
    423a:	89 81       	ldd	r24, Y+1	; 0x01
    423c:	8f 5f       	subi	r24, 0xFF	; 255
    423e:	89 83       	std	Y+1, r24	; 0x01
    4240:	89 81       	ldd	r24, Y+1	; 0x01
    4242:	85 30       	cpi	r24, 0x05	; 5
    4244:	08 f4       	brcc	.+2      	; 0x4248 <LED_enuInit+0x264>
    4246:	e0 ce       	rjmp	.-576    	; 0x4008 <LED_enuInit+0x24>
    4248:	02 c0       	rjmp	.+4      	; 0x424e <LED_enuInit+0x26a>
			}
		}
	}
	else
	{
		Local_enuErrorState=ES_NULL_POINTER;
    424a:	82 e0       	ldi	r24, 0x02	; 2
    424c:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_enuErrorState;
    424e:	8a 81       	ldd	r24, Y+2	; 0x02
    4250:	8d 83       	std	Y+5, r24	; 0x05
    4252:	8d 81       	ldd	r24, Y+5	; 0x05
}
    4254:	0f 90       	pop	r0
    4256:	0f 90       	pop	r0
    4258:	0f 90       	pop	r0
    425a:	0f 90       	pop	r0
    425c:	0f 90       	pop	r0
    425e:	cf 91       	pop	r28
    4260:	df 91       	pop	r29
    4262:	08 95       	ret

00004264 <LED_enuTurnON>:

ES_t LED_enuTurnON(LED_t * copy_pstrLedID)
{
    4264:	df 93       	push	r29
    4266:	cf 93       	push	r28
    4268:	00 d0       	rcall	.+0      	; 0x426a <LED_enuTurnON+0x6>
    426a:	0f 92       	push	r0
    426c:	cd b7       	in	r28, 0x3d	; 61
    426e:	de b7       	in	r29, 0x3e	; 62
    4270:	9b 83       	std	Y+3, r25	; 0x03
    4272:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    4274:	19 82       	std	Y+1, r1	; 0x01
	if(copy_pstrLedID!=NULL)
    4276:	8a 81       	ldd	r24, Y+2	; 0x02
    4278:	9b 81       	ldd	r25, Y+3	; 0x03
    427a:	00 97       	sbiw	r24, 0x00	; 0
    427c:	29 f1       	breq	.+74     	; 0x42c8 <LED_enuTurnON+0x64>
	{
		if(copy_pstrLedID->LED_u8Connection==LED_SINK)
    427e:	ea 81       	ldd	r30, Y+2	; 0x02
    4280:	fb 81       	ldd	r31, Y+3	; 0x03
    4282:	82 81       	ldd	r24, Z+2	; 0x02
    4284:	88 23       	and	r24, r24
    4286:	61 f4       	brne	.+24     	; 0x42a0 <LED_enuTurnON+0x3c>
		{
			Local_enuErrorState=DIO_enuSetPinValue(copy_pstrLedID->LED_u8PortID,copy_pstrLedID->LED_u8PinID,DIO_u8LOW);
    4288:	ea 81       	ldd	r30, Y+2	; 0x02
    428a:	fb 81       	ldd	r31, Y+3	; 0x03
    428c:	80 81       	ld	r24, Z
    428e:	ea 81       	ldd	r30, Y+2	; 0x02
    4290:	fb 81       	ldd	r31, Y+3	; 0x03
    4292:	91 81       	ldd	r25, Z+1	; 0x01
    4294:	69 2f       	mov	r22, r25
    4296:	40 e0       	ldi	r20, 0x00	; 0
    4298:	0e 94 8f 1a 	call	0x351e	; 0x351e <DIO_enuSetPinValue>
    429c:	89 83       	std	Y+1, r24	; 0x01
    429e:	16 c0       	rjmp	.+44     	; 0x42cc <LED_enuTurnON+0x68>
		}
		else if(copy_pstrLedID->LED_u8Connection==LED_SOURCE)
    42a0:	ea 81       	ldd	r30, Y+2	; 0x02
    42a2:	fb 81       	ldd	r31, Y+3	; 0x03
    42a4:	82 81       	ldd	r24, Z+2	; 0x02
    42a6:	81 30       	cpi	r24, 0x01	; 1
    42a8:	61 f4       	brne	.+24     	; 0x42c2 <LED_enuTurnON+0x5e>
		{
			Local_enuErrorState=DIO_enuSetPinValue(copy_pstrLedID->LED_u8PortID,copy_pstrLedID->LED_u8PinID,DIO_u8HIGH);
    42aa:	ea 81       	ldd	r30, Y+2	; 0x02
    42ac:	fb 81       	ldd	r31, Y+3	; 0x03
    42ae:	80 81       	ld	r24, Z
    42b0:	ea 81       	ldd	r30, Y+2	; 0x02
    42b2:	fb 81       	ldd	r31, Y+3	; 0x03
    42b4:	91 81       	ldd	r25, Z+1	; 0x01
    42b6:	69 2f       	mov	r22, r25
    42b8:	41 e0       	ldi	r20, 0x01	; 1
    42ba:	0e 94 8f 1a 	call	0x351e	; 0x351e <DIO_enuSetPinValue>
    42be:	89 83       	std	Y+1, r24	; 0x01
    42c0:	05 c0       	rjmp	.+10     	; 0x42cc <LED_enuTurnON+0x68>
		}
		else
		{
			Local_enuErrorState= ES_OUT_OF_RANGE;
    42c2:	83 e0       	ldi	r24, 0x03	; 3
    42c4:	89 83       	std	Y+1, r24	; 0x01
    42c6:	02 c0       	rjmp	.+4      	; 0x42cc <LED_enuTurnON+0x68>
		}
	}
	else
	{
		Local_enuErrorState=ES_NULL_POINTER;
    42c8:	82 e0       	ldi	r24, 0x02	; 2
    42ca:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    42cc:	89 81       	ldd	r24, Y+1	; 0x01
}
    42ce:	0f 90       	pop	r0
    42d0:	0f 90       	pop	r0
    42d2:	0f 90       	pop	r0
    42d4:	cf 91       	pop	r28
    42d6:	df 91       	pop	r29
    42d8:	08 95       	ret

000042da <LED_enuTurnOFF>:

ES_t LED_enuTurnOFF(LED_t * copy_pstrLedID)
{
    42da:	df 93       	push	r29
    42dc:	cf 93       	push	r28
    42de:	00 d0       	rcall	.+0      	; 0x42e0 <LED_enuTurnOFF+0x6>
    42e0:	0f 92       	push	r0
    42e2:	cd b7       	in	r28, 0x3d	; 61
    42e4:	de b7       	in	r29, 0x3e	; 62
    42e6:	9b 83       	std	Y+3, r25	; 0x03
    42e8:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    42ea:	19 82       	std	Y+1, r1	; 0x01
	if(copy_pstrLedID!=NULL)
    42ec:	8a 81       	ldd	r24, Y+2	; 0x02
    42ee:	9b 81       	ldd	r25, Y+3	; 0x03
    42f0:	00 97       	sbiw	r24, 0x00	; 0
    42f2:	29 f1       	breq	.+74     	; 0x433e <LED_enuTurnOFF+0x64>
	{
		if(copy_pstrLedID->LED_u8Connection==LED_SINK)
    42f4:	ea 81       	ldd	r30, Y+2	; 0x02
    42f6:	fb 81       	ldd	r31, Y+3	; 0x03
    42f8:	82 81       	ldd	r24, Z+2	; 0x02
    42fa:	88 23       	and	r24, r24
    42fc:	61 f4       	brne	.+24     	; 0x4316 <LED_enuTurnOFF+0x3c>
		{
			Local_enuErrorState=DIO_enuSetPinValue(copy_pstrLedID->LED_u8PortID,copy_pstrLedID->LED_u8PinID,DIO_u8HIGH);
    42fe:	ea 81       	ldd	r30, Y+2	; 0x02
    4300:	fb 81       	ldd	r31, Y+3	; 0x03
    4302:	80 81       	ld	r24, Z
    4304:	ea 81       	ldd	r30, Y+2	; 0x02
    4306:	fb 81       	ldd	r31, Y+3	; 0x03
    4308:	91 81       	ldd	r25, Z+1	; 0x01
    430a:	69 2f       	mov	r22, r25
    430c:	41 e0       	ldi	r20, 0x01	; 1
    430e:	0e 94 8f 1a 	call	0x351e	; 0x351e <DIO_enuSetPinValue>
    4312:	89 83       	std	Y+1, r24	; 0x01
    4314:	16 c0       	rjmp	.+44     	; 0x4342 <LED_enuTurnOFF+0x68>
		}
		else if(copy_pstrLedID->LED_u8Connection==LED_SOURCE)
    4316:	ea 81       	ldd	r30, Y+2	; 0x02
    4318:	fb 81       	ldd	r31, Y+3	; 0x03
    431a:	82 81       	ldd	r24, Z+2	; 0x02
    431c:	81 30       	cpi	r24, 0x01	; 1
    431e:	61 f4       	brne	.+24     	; 0x4338 <LED_enuTurnOFF+0x5e>
		{
			Local_enuErrorState=DIO_enuSetPinValue(copy_pstrLedID->LED_u8PortID,copy_pstrLedID->LED_u8PinID,DIO_u8LOW);
    4320:	ea 81       	ldd	r30, Y+2	; 0x02
    4322:	fb 81       	ldd	r31, Y+3	; 0x03
    4324:	80 81       	ld	r24, Z
    4326:	ea 81       	ldd	r30, Y+2	; 0x02
    4328:	fb 81       	ldd	r31, Y+3	; 0x03
    432a:	91 81       	ldd	r25, Z+1	; 0x01
    432c:	69 2f       	mov	r22, r25
    432e:	40 e0       	ldi	r20, 0x00	; 0
    4330:	0e 94 8f 1a 	call	0x351e	; 0x351e <DIO_enuSetPinValue>
    4334:	89 83       	std	Y+1, r24	; 0x01
    4336:	05 c0       	rjmp	.+10     	; 0x4342 <LED_enuTurnOFF+0x68>
		}
		else
		{
			Local_enuErrorState= ES_OUT_OF_RANGE;
    4338:	83 e0       	ldi	r24, 0x03	; 3
    433a:	89 83       	std	Y+1, r24	; 0x01
    433c:	02 c0       	rjmp	.+4      	; 0x4342 <LED_enuTurnOFF+0x68>
		}
	}
	else
	{
		Local_enuErrorState=ES_NULL_POINTER;
    433e:	82 e0       	ldi	r24, 0x02	; 2
    4340:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    4342:	89 81       	ldd	r24, Y+1	; 0x01
}
    4344:	0f 90       	pop	r0
    4346:	0f 90       	pop	r0
    4348:	0f 90       	pop	r0
    434a:	cf 91       	pop	r28
    434c:	df 91       	pop	r29
    434e:	08 95       	ret

00004350 <LDR_enuInit>:
/** Return Type     : ES_t enum.                                            **/
/** Arguments       : LDR_t* Copy_PstrLDRconfig.                            **/
/** Brief           : Initializing LDR configuration (Config of pin)        **/
/*****************************************************************************/
/*****************************************************************************/
ES_t LDR_enuInit(LDR_t* Copy_PstrLDRconfig) {
    4350:	df 93       	push	r29
    4352:	cf 93       	push	r28
    4354:	00 d0       	rcall	.+0      	; 0x4356 <LDR_enuInit+0x6>
    4356:	00 d0       	rcall	.+0      	; 0x4358 <LDR_enuInit+0x8>
    4358:	cd b7       	in	r28, 0x3d	; 61
    435a:	de b7       	in	r29, 0x3e	; 62
    435c:	9c 83       	std	Y+4, r25	; 0x04
    435e:	8b 83       	std	Y+3, r24	; 0x03
    ES_t Local_enuErrorState = ES_NOK;
    4360:	1a 82       	std	Y+2, r1	; 0x02

    // Iterate through each LDR configuration
    for (u8 Local_u8Iterator = 0; Local_u8Iterator < LDRNUM; Local_u8Iterator++) {
    4362:	19 82       	std	Y+1, r1	; 0x01
    4364:	27 c0       	rjmp	.+78     	; 0x43b4 <LDR_enuInit+0x64>
        if (Copy_PstrLDRconfig[Local_u8Iterator].LDR_Channel != NOTCONNECTED) {
    4366:	89 81       	ldd	r24, Y+1	; 0x01
    4368:	88 2f       	mov	r24, r24
    436a:	90 e0       	ldi	r25, 0x00	; 0
    436c:	9c 01       	movw	r18, r24
    436e:	22 0f       	add	r18, r18
    4370:	33 1f       	adc	r19, r19
    4372:	8b 81       	ldd	r24, Y+3	; 0x03
    4374:	9c 81       	ldd	r25, Y+4	; 0x04
    4376:	fc 01       	movw	r30, r24
    4378:	e2 0f       	add	r30, r18
    437a:	f3 1f       	adc	r31, r19
    437c:	80 81       	ld	r24, Z
    437e:	91 81       	ldd	r25, Z+1	; 0x01
    4380:	8f 3f       	cpi	r24, 0xFF	; 255
    4382:	91 05       	cpc	r25, r1
    4384:	a1 f0       	breq	.+40     	; 0x43ae <LDR_enuInit+0x5e>
            // Set pin direction
            Local_enuErrorState=DIO_enuSetPinDirection(DIO_u8PORTA, Copy_PstrLDRconfig[Local_u8Iterator].LDR_Channel, DIO_u8INPUT);
    4386:	89 81       	ldd	r24, Y+1	; 0x01
    4388:	88 2f       	mov	r24, r24
    438a:	90 e0       	ldi	r25, 0x00	; 0
    438c:	9c 01       	movw	r18, r24
    438e:	22 0f       	add	r18, r18
    4390:	33 1f       	adc	r19, r19
    4392:	8b 81       	ldd	r24, Y+3	; 0x03
    4394:	9c 81       	ldd	r25, Y+4	; 0x04
    4396:	fc 01       	movw	r30, r24
    4398:	e2 0f       	add	r30, r18
    439a:	f3 1f       	adc	r31, r19
    439c:	80 81       	ld	r24, Z
    439e:	91 81       	ldd	r25, Z+1	; 0x01
    43a0:	98 2f       	mov	r25, r24
    43a2:	80 e0       	ldi	r24, 0x00	; 0
    43a4:	69 2f       	mov	r22, r25
    43a6:	40 e0       	ldi	r20, 0x00	; 0
    43a8:	0e 94 a3 19 	call	0x3346	; 0x3346 <DIO_enuSetPinDirection>
    43ac:	8a 83       	std	Y+2, r24	; 0x02
/*****************************************************************************/
ES_t LDR_enuInit(LDR_t* Copy_PstrLDRconfig) {
    ES_t Local_enuErrorState = ES_NOK;

    // Iterate through each LDR configuration
    for (u8 Local_u8Iterator = 0; Local_u8Iterator < LDRNUM; Local_u8Iterator++) {
    43ae:	89 81       	ldd	r24, Y+1	; 0x01
    43b0:	8f 5f       	subi	r24, 0xFF	; 255
    43b2:	89 83       	std	Y+1, r24	; 0x01
    43b4:	89 81       	ldd	r24, Y+1	; 0x01
    43b6:	88 23       	and	r24, r24
    43b8:	b1 f2       	breq	.-84     	; 0x4366 <LDR_enuInit+0x16>

        }
    }


    return Local_enuErrorState;
    43ba:	8a 81       	ldd	r24, Y+2	; 0x02
}
    43bc:	0f 90       	pop	r0
    43be:	0f 90       	pop	r0
    43c0:	0f 90       	pop	r0
    43c2:	0f 90       	pop	r0
    43c4:	cf 91       	pop	r28
    43c6:	df 91       	pop	r29
    43c8:	08 95       	ret

000043ca <LDR_enuGetValue>:
/** Arguments       : u16 *Copy_pu16ReadValue, u8 Copy_u8ChannelID.         **/
/** Brief           : Get the value from the specified ADC channel.         **/
/*****************************************************************************/
/*****************************************************************************/
ES_t LDR_enuGetValue(u16 *Copy_pu16ReadValue, u8 Copy_u8ChannelID)
{
    43ca:	df 93       	push	r29
    43cc:	cf 93       	push	r28
    43ce:	00 d0       	rcall	.+0      	; 0x43d0 <LDR_enuGetValue+0x6>
    43d0:	00 d0       	rcall	.+0      	; 0x43d2 <LDR_enuGetValue+0x8>
    43d2:	cd b7       	in	r28, 0x3d	; 61
    43d4:	de b7       	in	r29, 0x3e	; 62
    43d6:	9b 83       	std	Y+3, r25	; 0x03
    43d8:	8a 83       	std	Y+2, r24	; 0x02
    43da:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    43dc:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pu16ReadValue != NULL)
    43de:	8a 81       	ldd	r24, Y+2	; 0x02
    43e0:	9b 81       	ldd	r25, Y+3	; 0x03
    43e2:	00 97       	sbiw	r24, 0x00	; 0
    43e4:	41 f0       	breq	.+16     	; 0x43f6 <LDR_enuGetValue+0x2c>
	{
		ADC_Read_From_Ch(Copy_pu16ReadValue,Copy_u8ChannelID);
    43e6:	8a 81       	ldd	r24, Y+2	; 0x02
    43e8:	9b 81       	ldd	r25, Y+3	; 0x03
    43ea:	6c 81       	ldd	r22, Y+4	; 0x04
    43ec:	0e 94 3b 1f 	call	0x3e76	; 0x3e76 <ADC_Read_From_Ch>

		Local_enuErrorState = ES_OK;
    43f0:	81 e0       	ldi	r24, 0x01	; 1
    43f2:	89 83       	std	Y+1, r24	; 0x01
    43f4:	02 c0       	rjmp	.+4      	; 0x43fa <LDR_enuGetValue+0x30>
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    43f6:	82 e0       	ldi	r24, 0x02	; 2
    43f8:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorState;
    43fa:	89 81       	ldd	r24, Y+1	; 0x01
}
    43fc:	0f 90       	pop	r0
    43fe:	0f 90       	pop	r0
    4400:	0f 90       	pop	r0
    4402:	0f 90       	pop	r0
    4404:	cf 91       	pop	r28
    4406:	df 91       	pop	r29
    4408:	08 95       	ret

0000440a <LCD_enuInit>:
#include "LCD_priv.h"

#include "util/delay.h"

ES_t LCD_enuInit(void)
{
    440a:	0f 93       	push	r16
    440c:	1f 93       	push	r17
    440e:	df 93       	push	r29
    4410:	cf 93       	push	r28
    4412:	cd b7       	in	r28, 0x3d	; 61
    4414:	de b7       	in	r29, 0x3e	; 62
    4416:	c7 54       	subi	r28, 0x47	; 71
    4418:	d0 40       	sbci	r29, 0x00	; 0
    441a:	0f b6       	in	r0, 0x3f	; 63
    441c:	f8 94       	cli
    441e:	de bf       	out	0x3e, r29	; 62
    4420:	0f be       	out	0x3f, r0	; 63
    4422:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState=ES_NOK;
    4424:	fe 01       	movw	r30, r28
    4426:	e9 5b       	subi	r30, 0xB9	; 185
    4428:	ff 4f       	sbci	r31, 0xFF	; 255
    442a:	10 82       	st	Z, r1
    442c:	fe 01       	movw	r30, r28
    442e:	ed 5b       	subi	r30, 0xBD	; 189
    4430:	ff 4f       	sbci	r31, 0xFF	; 255
    4432:	80 e0       	ldi	r24, 0x00	; 0
    4434:	90 e0       	ldi	r25, 0x00	; 0
    4436:	ac e0       	ldi	r26, 0x0C	; 12
    4438:	b2 e4       	ldi	r27, 0x42	; 66
    443a:	80 83       	st	Z, r24
    443c:	91 83       	std	Z+1, r25	; 0x01
    443e:	a2 83       	std	Z+2, r26	; 0x02
    4440:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4442:	8e 01       	movw	r16, r28
    4444:	01 5c       	subi	r16, 0xC1	; 193
    4446:	1f 4f       	sbci	r17, 0xFF	; 255
    4448:	fe 01       	movw	r30, r28
    444a:	ed 5b       	subi	r30, 0xBD	; 189
    444c:	ff 4f       	sbci	r31, 0xFF	; 255
    444e:	60 81       	ld	r22, Z
    4450:	71 81       	ldd	r23, Z+1	; 0x01
    4452:	82 81       	ldd	r24, Z+2	; 0x02
    4454:	93 81       	ldd	r25, Z+3	; 0x03
    4456:	20 e0       	ldi	r18, 0x00	; 0
    4458:	30 e0       	ldi	r19, 0x00	; 0
    445a:	4a ef       	ldi	r20, 0xFA	; 250
    445c:	54 e4       	ldi	r21, 0x44	; 68
    445e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4462:	dc 01       	movw	r26, r24
    4464:	cb 01       	movw	r24, r22
    4466:	f8 01       	movw	r30, r16
    4468:	80 83       	st	Z, r24
    446a:	91 83       	std	Z+1, r25	; 0x01
    446c:	a2 83       	std	Z+2, r26	; 0x02
    446e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4470:	fe 01       	movw	r30, r28
    4472:	ff 96       	adiw	r30, 0x3f	; 63
    4474:	60 81       	ld	r22, Z
    4476:	71 81       	ldd	r23, Z+1	; 0x01
    4478:	82 81       	ldd	r24, Z+2	; 0x02
    447a:	93 81       	ldd	r25, Z+3	; 0x03
    447c:	20 e0       	ldi	r18, 0x00	; 0
    447e:	30 e0       	ldi	r19, 0x00	; 0
    4480:	40 e8       	ldi	r20, 0x80	; 128
    4482:	5f e3       	ldi	r21, 0x3F	; 63
    4484:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4488:	88 23       	and	r24, r24
    448a:	2c f4       	brge	.+10     	; 0x4496 <LCD_enuInit+0x8c>
		__ticks = 1;
    448c:	81 e0       	ldi	r24, 0x01	; 1
    448e:	90 e0       	ldi	r25, 0x00	; 0
    4490:	9e af       	std	Y+62, r25	; 0x3e
    4492:	8d af       	std	Y+61, r24	; 0x3d
    4494:	46 c0       	rjmp	.+140    	; 0x4522 <LCD_enuInit+0x118>
	else if (__tmp > 65535)
    4496:	fe 01       	movw	r30, r28
    4498:	ff 96       	adiw	r30, 0x3f	; 63
    449a:	60 81       	ld	r22, Z
    449c:	71 81       	ldd	r23, Z+1	; 0x01
    449e:	82 81       	ldd	r24, Z+2	; 0x02
    44a0:	93 81       	ldd	r25, Z+3	; 0x03
    44a2:	20 e0       	ldi	r18, 0x00	; 0
    44a4:	3f ef       	ldi	r19, 0xFF	; 255
    44a6:	4f e7       	ldi	r20, 0x7F	; 127
    44a8:	57 e4       	ldi	r21, 0x47	; 71
    44aa:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    44ae:	18 16       	cp	r1, r24
    44b0:	64 f5       	brge	.+88     	; 0x450a <LCD_enuInit+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    44b2:	fe 01       	movw	r30, r28
    44b4:	ed 5b       	subi	r30, 0xBD	; 189
    44b6:	ff 4f       	sbci	r31, 0xFF	; 255
    44b8:	60 81       	ld	r22, Z
    44ba:	71 81       	ldd	r23, Z+1	; 0x01
    44bc:	82 81       	ldd	r24, Z+2	; 0x02
    44be:	93 81       	ldd	r25, Z+3	; 0x03
    44c0:	20 e0       	ldi	r18, 0x00	; 0
    44c2:	30 e0       	ldi	r19, 0x00	; 0
    44c4:	40 e2       	ldi	r20, 0x20	; 32
    44c6:	51 e4       	ldi	r21, 0x41	; 65
    44c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44cc:	dc 01       	movw	r26, r24
    44ce:	cb 01       	movw	r24, r22
    44d0:	bc 01       	movw	r22, r24
    44d2:	cd 01       	movw	r24, r26
    44d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44d8:	dc 01       	movw	r26, r24
    44da:	cb 01       	movw	r24, r22
    44dc:	9e af       	std	Y+62, r25	; 0x3e
    44de:	8d af       	std	Y+61, r24	; 0x3d
    44e0:	0f c0       	rjmp	.+30     	; 0x4500 <LCD_enuInit+0xf6>
    44e2:	88 ec       	ldi	r24, 0xC8	; 200
    44e4:	90 e0       	ldi	r25, 0x00	; 0
    44e6:	9c af       	std	Y+60, r25	; 0x3c
    44e8:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    44ea:	8b ad       	ldd	r24, Y+59	; 0x3b
    44ec:	9c ad       	ldd	r25, Y+60	; 0x3c
    44ee:	01 97       	sbiw	r24, 0x01	; 1
    44f0:	f1 f7       	brne	.-4      	; 0x44ee <LCD_enuInit+0xe4>
    44f2:	9c af       	std	Y+60, r25	; 0x3c
    44f4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44f6:	8d ad       	ldd	r24, Y+61	; 0x3d
    44f8:	9e ad       	ldd	r25, Y+62	; 0x3e
    44fa:	01 97       	sbiw	r24, 0x01	; 1
    44fc:	9e af       	std	Y+62, r25	; 0x3e
    44fe:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4500:	8d ad       	ldd	r24, Y+61	; 0x3d
    4502:	9e ad       	ldd	r25, Y+62	; 0x3e
    4504:	00 97       	sbiw	r24, 0x00	; 0
    4506:	69 f7       	brne	.-38     	; 0x44e2 <LCD_enuInit+0xd8>
    4508:	16 c0       	rjmp	.+44     	; 0x4536 <LCD_enuInit+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    450a:	fe 01       	movw	r30, r28
    450c:	ff 96       	adiw	r30, 0x3f	; 63
    450e:	60 81       	ld	r22, Z
    4510:	71 81       	ldd	r23, Z+1	; 0x01
    4512:	82 81       	ldd	r24, Z+2	; 0x02
    4514:	93 81       	ldd	r25, Z+3	; 0x03
    4516:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    451a:	dc 01       	movw	r26, r24
    451c:	cb 01       	movw	r24, r22
    451e:	9e af       	std	Y+62, r25	; 0x3e
    4520:	8d af       	std	Y+61, r24	; 0x3d
    4522:	8d ad       	ldd	r24, Y+61	; 0x3d
    4524:	9e ad       	ldd	r25, Y+62	; 0x3e
    4526:	9a af       	std	Y+58, r25	; 0x3a
    4528:	89 af       	std	Y+57, r24	; 0x39
    452a:	89 ad       	ldd	r24, Y+57	; 0x39
    452c:	9a ad       	ldd	r25, Y+58	; 0x3a
    452e:	01 97       	sbiw	r24, 0x01	; 1
    4530:	f1 f7       	brne	.-4      	; 0x452e <LCD_enuInit+0x124>
    4532:	9a af       	std	Y+58, r25	; 0x3a
    4534:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(35);
	DIO_enuSetPinDirection(RS_PORT,RS_PIN,DIO_u8OUTPUT);
    4536:	81 e0       	ldi	r24, 0x01	; 1
    4538:	60 e0       	ldi	r22, 0x00	; 0
    453a:	41 e0       	ldi	r20, 0x01	; 1
    453c:	0e 94 a3 19 	call	0x3346	; 0x3346 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(RW_PORT,RW_PIN,DIO_u8OUTPUT);
    4540:	81 e0       	ldi	r24, 0x01	; 1
    4542:	61 e0       	ldi	r22, 0x01	; 1
    4544:	41 e0       	ldi	r20, 0x01	; 1
    4546:	0e 94 a3 19 	call	0x3346	; 0x3346 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(EN_PORT,EN_PIN,DIO_u8OUTPUT);
    454a:	81 e0       	ldi	r24, 0x01	; 1
    454c:	62 e0       	ldi	r22, 0x02	; 2
    454e:	41 e0       	ldi	r20, 0x01	; 1
    4550:	0e 94 a3 19 	call	0x3346	; 0x3346 <DIO_enuSetPinDirection>

	DIO_enuSetPinDirection(D7_PORT,D7_PIN,DIO_u8OUTPUT);
    4554:	81 e0       	ldi	r24, 0x01	; 1
    4556:	63 e0       	ldi	r22, 0x03	; 3
    4558:	41 e0       	ldi	r20, 0x01	; 1
    455a:	0e 94 a3 19 	call	0x3346	; 0x3346 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D6_PORT,D6_PIN,DIO_u8OUTPUT);
    455e:	80 e0       	ldi	r24, 0x00	; 0
    4560:	66 e0       	ldi	r22, 0x06	; 6
    4562:	41 e0       	ldi	r20, 0x01	; 1
    4564:	0e 94 a3 19 	call	0x3346	; 0x3346 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D5_PORT,D5_PIN,DIO_u8OUTPUT);
    4568:	80 e0       	ldi	r24, 0x00	; 0
    456a:	65 e0       	ldi	r22, 0x05	; 5
    456c:	41 e0       	ldi	r20, 0x01	; 1
    456e:	0e 94 a3 19 	call	0x3346	; 0x3346 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D4_PORT,D4_PIN,DIO_u8OUTPUT);
    4572:	80 e0       	ldi	r24, 0x00	; 0
    4574:	64 e0       	ldi	r22, 0x04	; 4
    4576:	41 e0       	ldi	r20, 0x01	; 1
    4578:	0e 94 a3 19 	call	0x3346	; 0x3346 <DIO_enuSetPinDirection>

	//FUNCTION SET
#if LCD_MODE==EIGHT_BIT
	DIO_enuSetPinDirection(D3_PORT,D3_PIN,DIO_u8OUTPUT);
    457c:	80 e0       	ldi	r24, 0x00	; 0
    457e:	63 e0       	ldi	r22, 0x03	; 3
    4580:	41 e0       	ldi	r20, 0x01	; 1
    4582:	0e 94 a3 19 	call	0x3346	; 0x3346 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D2_PORT,D2_PIN,DIO_u8OUTPUT);
    4586:	80 e0       	ldi	r24, 0x00	; 0
    4588:	62 e0       	ldi	r22, 0x02	; 2
    458a:	41 e0       	ldi	r20, 0x01	; 1
    458c:	0e 94 a3 19 	call	0x3346	; 0x3346 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D1_PORT,D1_PIN,DIO_u8OUTPUT);
    4590:	80 e0       	ldi	r24, 0x00	; 0
    4592:	61 e0       	ldi	r22, 0x01	; 1
    4594:	41 e0       	ldi	r20, 0x01	; 1
    4596:	0e 94 a3 19 	call	0x3346	; 0x3346 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D0_PORT,D0_PIN,DIO_u8OUTPUT);
    459a:	80 e0       	ldi	r24, 0x00	; 0
    459c:	60 e0       	ldi	r22, 0x00	; 0
    459e:	41 e0       	ldi	r20, 0x01	; 1
    45a0:	0e 94 a3 19 	call	0x3346	; 0x3346 <DIO_enuSetPinDirection>

	//FUNCTION SET
	LCD_invidSendCommand(EIGHT_BIT_MODE);
    45a4:	88 e3       	ldi	r24, 0x38	; 56
    45a6:	0e 94 27 28 	call	0x504e	; 0x504e <LCD_invidSendCommand>

	Local_enuErrorState=ES_OK;
    45aa:	fe 01       	movw	r30, r28
    45ac:	e9 5b       	subi	r30, 0xB9	; 185
    45ae:	ff 4f       	sbci	r31, 0xFF	; 255
    45b0:	81 e0       	ldi	r24, 0x01	; 1
    45b2:	80 83       	st	Z, r24
    45b4:	80 e0       	ldi	r24, 0x00	; 0
    45b6:	90 e0       	ldi	r25, 0x00	; 0
    45b8:	a0 e8       	ldi	r26, 0x80	; 128
    45ba:	bf e3       	ldi	r27, 0x3F	; 63
    45bc:	8d ab       	std	Y+53, r24	; 0x35
    45be:	9e ab       	std	Y+54, r25	; 0x36
    45c0:	af ab       	std	Y+55, r26	; 0x37
    45c2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    45c4:	6d a9       	ldd	r22, Y+53	; 0x35
    45c6:	7e a9       	ldd	r23, Y+54	; 0x36
    45c8:	8f a9       	ldd	r24, Y+55	; 0x37
    45ca:	98 ad       	ldd	r25, Y+56	; 0x38
    45cc:	20 e0       	ldi	r18, 0x00	; 0
    45ce:	30 e0       	ldi	r19, 0x00	; 0
    45d0:	4a ef       	ldi	r20, 0xFA	; 250
    45d2:	54 e4       	ldi	r21, 0x44	; 68
    45d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45d8:	dc 01       	movw	r26, r24
    45da:	cb 01       	movw	r24, r22
    45dc:	89 ab       	std	Y+49, r24	; 0x31
    45de:	9a ab       	std	Y+50, r25	; 0x32
    45e0:	ab ab       	std	Y+51, r26	; 0x33
    45e2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    45e4:	69 a9       	ldd	r22, Y+49	; 0x31
    45e6:	7a a9       	ldd	r23, Y+50	; 0x32
    45e8:	8b a9       	ldd	r24, Y+51	; 0x33
    45ea:	9c a9       	ldd	r25, Y+52	; 0x34
    45ec:	20 e0       	ldi	r18, 0x00	; 0
    45ee:	30 e0       	ldi	r19, 0x00	; 0
    45f0:	40 e8       	ldi	r20, 0x80	; 128
    45f2:	5f e3       	ldi	r21, 0x3F	; 63
    45f4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    45f8:	88 23       	and	r24, r24
    45fa:	2c f4       	brge	.+10     	; 0x4606 <LCD_enuInit+0x1fc>
		__ticks = 1;
    45fc:	81 e0       	ldi	r24, 0x01	; 1
    45fe:	90 e0       	ldi	r25, 0x00	; 0
    4600:	98 ab       	std	Y+48, r25	; 0x30
    4602:	8f a7       	std	Y+47, r24	; 0x2f
    4604:	3f c0       	rjmp	.+126    	; 0x4684 <LCD_enuInit+0x27a>
	else if (__tmp > 65535)
    4606:	69 a9       	ldd	r22, Y+49	; 0x31
    4608:	7a a9       	ldd	r23, Y+50	; 0x32
    460a:	8b a9       	ldd	r24, Y+51	; 0x33
    460c:	9c a9       	ldd	r25, Y+52	; 0x34
    460e:	20 e0       	ldi	r18, 0x00	; 0
    4610:	3f ef       	ldi	r19, 0xFF	; 255
    4612:	4f e7       	ldi	r20, 0x7F	; 127
    4614:	57 e4       	ldi	r21, 0x47	; 71
    4616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    461a:	18 16       	cp	r1, r24
    461c:	4c f5       	brge	.+82     	; 0x4670 <LCD_enuInit+0x266>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    461e:	6d a9       	ldd	r22, Y+53	; 0x35
    4620:	7e a9       	ldd	r23, Y+54	; 0x36
    4622:	8f a9       	ldd	r24, Y+55	; 0x37
    4624:	98 ad       	ldd	r25, Y+56	; 0x38
    4626:	20 e0       	ldi	r18, 0x00	; 0
    4628:	30 e0       	ldi	r19, 0x00	; 0
    462a:	40 e2       	ldi	r20, 0x20	; 32
    462c:	51 e4       	ldi	r21, 0x41	; 65
    462e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4632:	dc 01       	movw	r26, r24
    4634:	cb 01       	movw	r24, r22
    4636:	bc 01       	movw	r22, r24
    4638:	cd 01       	movw	r24, r26
    463a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    463e:	dc 01       	movw	r26, r24
    4640:	cb 01       	movw	r24, r22
    4642:	98 ab       	std	Y+48, r25	; 0x30
    4644:	8f a7       	std	Y+47, r24	; 0x2f
    4646:	0f c0       	rjmp	.+30     	; 0x4666 <LCD_enuInit+0x25c>
    4648:	88 ec       	ldi	r24, 0xC8	; 200
    464a:	90 e0       	ldi	r25, 0x00	; 0
    464c:	9e a7       	std	Y+46, r25	; 0x2e
    464e:	8d a7       	std	Y+45, r24	; 0x2d
    4650:	8d a5       	ldd	r24, Y+45	; 0x2d
    4652:	9e a5       	ldd	r25, Y+46	; 0x2e
    4654:	01 97       	sbiw	r24, 0x01	; 1
    4656:	f1 f7       	brne	.-4      	; 0x4654 <LCD_enuInit+0x24a>
    4658:	9e a7       	std	Y+46, r25	; 0x2e
    465a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    465c:	8f a5       	ldd	r24, Y+47	; 0x2f
    465e:	98 a9       	ldd	r25, Y+48	; 0x30
    4660:	01 97       	sbiw	r24, 0x01	; 1
    4662:	98 ab       	std	Y+48, r25	; 0x30
    4664:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4666:	8f a5       	ldd	r24, Y+47	; 0x2f
    4668:	98 a9       	ldd	r25, Y+48	; 0x30
    466a:	00 97       	sbiw	r24, 0x00	; 0
    466c:	69 f7       	brne	.-38     	; 0x4648 <LCD_enuInit+0x23e>
    466e:	14 c0       	rjmp	.+40     	; 0x4698 <LCD_enuInit+0x28e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4670:	69 a9       	ldd	r22, Y+49	; 0x31
    4672:	7a a9       	ldd	r23, Y+50	; 0x32
    4674:	8b a9       	ldd	r24, Y+51	; 0x33
    4676:	9c a9       	ldd	r25, Y+52	; 0x34
    4678:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    467c:	dc 01       	movw	r26, r24
    467e:	cb 01       	movw	r24, r22
    4680:	98 ab       	std	Y+48, r25	; 0x30
    4682:	8f a7       	std	Y+47, r24	; 0x2f
    4684:	8f a5       	ldd	r24, Y+47	; 0x2f
    4686:	98 a9       	ldd	r25, Y+48	; 0x30
    4688:	9c a7       	std	Y+44, r25	; 0x2c
    468a:	8b a7       	std	Y+43, r24	; 0x2b
    468c:	8b a5       	ldd	r24, Y+43	; 0x2b
    468e:	9c a5       	ldd	r25, Y+44	; 0x2c
    4690:	01 97       	sbiw	r24, 0x01	; 1
    4692:	f1 f7       	brne	.-4      	; 0x4690 <LCD_enuInit+0x286>
    4694:	9c a7       	std	Y+44, r25	; 0x2c
    4696:	8b a7       	std	Y+43, r24	; 0x2b
#endif

	_delay_ms(1);
	//display on/off
	//LCD_invidSendCommand(0x0f);
	LCD_invidSendCommand(DISPLAY_ON_CURSOR_BLINK);
    4698:	8e e0       	ldi	r24, 0x0E	; 14
    469a:	0e 94 27 28 	call	0x504e	; 0x504e <LCD_invidSendCommand>
    469e:	80 e0       	ldi	r24, 0x00	; 0
    46a0:	90 e0       	ldi	r25, 0x00	; 0
    46a2:	a0 e8       	ldi	r26, 0x80	; 128
    46a4:	bf e3       	ldi	r27, 0x3F	; 63
    46a6:	8f a3       	std	Y+39, r24	; 0x27
    46a8:	98 a7       	std	Y+40, r25	; 0x28
    46aa:	a9 a7       	std	Y+41, r26	; 0x29
    46ac:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    46ae:	6f a1       	ldd	r22, Y+39	; 0x27
    46b0:	78 a5       	ldd	r23, Y+40	; 0x28
    46b2:	89 a5       	ldd	r24, Y+41	; 0x29
    46b4:	9a a5       	ldd	r25, Y+42	; 0x2a
    46b6:	20 e0       	ldi	r18, 0x00	; 0
    46b8:	30 e0       	ldi	r19, 0x00	; 0
    46ba:	4a ef       	ldi	r20, 0xFA	; 250
    46bc:	54 e4       	ldi	r21, 0x44	; 68
    46be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46c2:	dc 01       	movw	r26, r24
    46c4:	cb 01       	movw	r24, r22
    46c6:	8b a3       	std	Y+35, r24	; 0x23
    46c8:	9c a3       	std	Y+36, r25	; 0x24
    46ca:	ad a3       	std	Y+37, r26	; 0x25
    46cc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    46ce:	6b a1       	ldd	r22, Y+35	; 0x23
    46d0:	7c a1       	ldd	r23, Y+36	; 0x24
    46d2:	8d a1       	ldd	r24, Y+37	; 0x25
    46d4:	9e a1       	ldd	r25, Y+38	; 0x26
    46d6:	20 e0       	ldi	r18, 0x00	; 0
    46d8:	30 e0       	ldi	r19, 0x00	; 0
    46da:	40 e8       	ldi	r20, 0x80	; 128
    46dc:	5f e3       	ldi	r21, 0x3F	; 63
    46de:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    46e2:	88 23       	and	r24, r24
    46e4:	2c f4       	brge	.+10     	; 0x46f0 <LCD_enuInit+0x2e6>
		__ticks = 1;
    46e6:	81 e0       	ldi	r24, 0x01	; 1
    46e8:	90 e0       	ldi	r25, 0x00	; 0
    46ea:	9a a3       	std	Y+34, r25	; 0x22
    46ec:	89 a3       	std	Y+33, r24	; 0x21
    46ee:	3f c0       	rjmp	.+126    	; 0x476e <LCD_enuInit+0x364>
	else if (__tmp > 65535)
    46f0:	6b a1       	ldd	r22, Y+35	; 0x23
    46f2:	7c a1       	ldd	r23, Y+36	; 0x24
    46f4:	8d a1       	ldd	r24, Y+37	; 0x25
    46f6:	9e a1       	ldd	r25, Y+38	; 0x26
    46f8:	20 e0       	ldi	r18, 0x00	; 0
    46fa:	3f ef       	ldi	r19, 0xFF	; 255
    46fc:	4f e7       	ldi	r20, 0x7F	; 127
    46fe:	57 e4       	ldi	r21, 0x47	; 71
    4700:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4704:	18 16       	cp	r1, r24
    4706:	4c f5       	brge	.+82     	; 0x475a <LCD_enuInit+0x350>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4708:	6f a1       	ldd	r22, Y+39	; 0x27
    470a:	78 a5       	ldd	r23, Y+40	; 0x28
    470c:	89 a5       	ldd	r24, Y+41	; 0x29
    470e:	9a a5       	ldd	r25, Y+42	; 0x2a
    4710:	20 e0       	ldi	r18, 0x00	; 0
    4712:	30 e0       	ldi	r19, 0x00	; 0
    4714:	40 e2       	ldi	r20, 0x20	; 32
    4716:	51 e4       	ldi	r21, 0x41	; 65
    4718:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    471c:	dc 01       	movw	r26, r24
    471e:	cb 01       	movw	r24, r22
    4720:	bc 01       	movw	r22, r24
    4722:	cd 01       	movw	r24, r26
    4724:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4728:	dc 01       	movw	r26, r24
    472a:	cb 01       	movw	r24, r22
    472c:	9a a3       	std	Y+34, r25	; 0x22
    472e:	89 a3       	std	Y+33, r24	; 0x21
    4730:	0f c0       	rjmp	.+30     	; 0x4750 <LCD_enuInit+0x346>
    4732:	88 ec       	ldi	r24, 0xC8	; 200
    4734:	90 e0       	ldi	r25, 0x00	; 0
    4736:	98 a3       	std	Y+32, r25	; 0x20
    4738:	8f 8f       	std	Y+31, r24	; 0x1f
    473a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    473c:	98 a1       	ldd	r25, Y+32	; 0x20
    473e:	01 97       	sbiw	r24, 0x01	; 1
    4740:	f1 f7       	brne	.-4      	; 0x473e <LCD_enuInit+0x334>
    4742:	98 a3       	std	Y+32, r25	; 0x20
    4744:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4746:	89 a1       	ldd	r24, Y+33	; 0x21
    4748:	9a a1       	ldd	r25, Y+34	; 0x22
    474a:	01 97       	sbiw	r24, 0x01	; 1
    474c:	9a a3       	std	Y+34, r25	; 0x22
    474e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4750:	89 a1       	ldd	r24, Y+33	; 0x21
    4752:	9a a1       	ldd	r25, Y+34	; 0x22
    4754:	00 97       	sbiw	r24, 0x00	; 0
    4756:	69 f7       	brne	.-38     	; 0x4732 <LCD_enuInit+0x328>
    4758:	14 c0       	rjmp	.+40     	; 0x4782 <LCD_enuInit+0x378>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    475a:	6b a1       	ldd	r22, Y+35	; 0x23
    475c:	7c a1       	ldd	r23, Y+36	; 0x24
    475e:	8d a1       	ldd	r24, Y+37	; 0x25
    4760:	9e a1       	ldd	r25, Y+38	; 0x26
    4762:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4766:	dc 01       	movw	r26, r24
    4768:	cb 01       	movw	r24, r22
    476a:	9a a3       	std	Y+34, r25	; 0x22
    476c:	89 a3       	std	Y+33, r24	; 0x21
    476e:	89 a1       	ldd	r24, Y+33	; 0x21
    4770:	9a a1       	ldd	r25, Y+34	; 0x22
    4772:	9e 8f       	std	Y+30, r25	; 0x1e
    4774:	8d 8f       	std	Y+29, r24	; 0x1d
    4776:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4778:	9e 8d       	ldd	r25, Y+30	; 0x1e
    477a:	01 97       	sbiw	r24, 0x01	; 1
    477c:	f1 f7       	brne	.-4      	; 0x477a <LCD_enuInit+0x370>
    477e:	9e 8f       	std	Y+30, r25	; 0x1e
    4780:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	//display clear
	LCD_invidSendCommand(CLEAR_DISPLAY);
    4782:	81 e0       	ldi	r24, 0x01	; 1
    4784:	0e 94 27 28 	call	0x504e	; 0x504e <LCD_invidSendCommand>
    4788:	80 e0       	ldi	r24, 0x00	; 0
    478a:	90 e0       	ldi	r25, 0x00	; 0
    478c:	a0 e0       	ldi	r26, 0x00	; 0
    478e:	b0 e4       	ldi	r27, 0x40	; 64
    4790:	89 8f       	std	Y+25, r24	; 0x19
    4792:	9a 8f       	std	Y+26, r25	; 0x1a
    4794:	ab 8f       	std	Y+27, r26	; 0x1b
    4796:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4798:	69 8d       	ldd	r22, Y+25	; 0x19
    479a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    479c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    479e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    47a0:	20 e0       	ldi	r18, 0x00	; 0
    47a2:	30 e0       	ldi	r19, 0x00	; 0
    47a4:	4a ef       	ldi	r20, 0xFA	; 250
    47a6:	54 e4       	ldi	r21, 0x44	; 68
    47a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47ac:	dc 01       	movw	r26, r24
    47ae:	cb 01       	movw	r24, r22
    47b0:	8d 8b       	std	Y+21, r24	; 0x15
    47b2:	9e 8b       	std	Y+22, r25	; 0x16
    47b4:	af 8b       	std	Y+23, r26	; 0x17
    47b6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    47b8:	6d 89       	ldd	r22, Y+21	; 0x15
    47ba:	7e 89       	ldd	r23, Y+22	; 0x16
    47bc:	8f 89       	ldd	r24, Y+23	; 0x17
    47be:	98 8d       	ldd	r25, Y+24	; 0x18
    47c0:	20 e0       	ldi	r18, 0x00	; 0
    47c2:	30 e0       	ldi	r19, 0x00	; 0
    47c4:	40 e8       	ldi	r20, 0x80	; 128
    47c6:	5f e3       	ldi	r21, 0x3F	; 63
    47c8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    47cc:	88 23       	and	r24, r24
    47ce:	2c f4       	brge	.+10     	; 0x47da <LCD_enuInit+0x3d0>
		__ticks = 1;
    47d0:	81 e0       	ldi	r24, 0x01	; 1
    47d2:	90 e0       	ldi	r25, 0x00	; 0
    47d4:	9c 8b       	std	Y+20, r25	; 0x14
    47d6:	8b 8b       	std	Y+19, r24	; 0x13
    47d8:	3f c0       	rjmp	.+126    	; 0x4858 <LCD_enuInit+0x44e>
	else if (__tmp > 65535)
    47da:	6d 89       	ldd	r22, Y+21	; 0x15
    47dc:	7e 89       	ldd	r23, Y+22	; 0x16
    47de:	8f 89       	ldd	r24, Y+23	; 0x17
    47e0:	98 8d       	ldd	r25, Y+24	; 0x18
    47e2:	20 e0       	ldi	r18, 0x00	; 0
    47e4:	3f ef       	ldi	r19, 0xFF	; 255
    47e6:	4f e7       	ldi	r20, 0x7F	; 127
    47e8:	57 e4       	ldi	r21, 0x47	; 71
    47ea:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    47ee:	18 16       	cp	r1, r24
    47f0:	4c f5       	brge	.+82     	; 0x4844 <LCD_enuInit+0x43a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    47f2:	69 8d       	ldd	r22, Y+25	; 0x19
    47f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    47f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    47f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    47fa:	20 e0       	ldi	r18, 0x00	; 0
    47fc:	30 e0       	ldi	r19, 0x00	; 0
    47fe:	40 e2       	ldi	r20, 0x20	; 32
    4800:	51 e4       	ldi	r21, 0x41	; 65
    4802:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4806:	dc 01       	movw	r26, r24
    4808:	cb 01       	movw	r24, r22
    480a:	bc 01       	movw	r22, r24
    480c:	cd 01       	movw	r24, r26
    480e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4812:	dc 01       	movw	r26, r24
    4814:	cb 01       	movw	r24, r22
    4816:	9c 8b       	std	Y+20, r25	; 0x14
    4818:	8b 8b       	std	Y+19, r24	; 0x13
    481a:	0f c0       	rjmp	.+30     	; 0x483a <LCD_enuInit+0x430>
    481c:	88 ec       	ldi	r24, 0xC8	; 200
    481e:	90 e0       	ldi	r25, 0x00	; 0
    4820:	9a 8b       	std	Y+18, r25	; 0x12
    4822:	89 8b       	std	Y+17, r24	; 0x11
    4824:	89 89       	ldd	r24, Y+17	; 0x11
    4826:	9a 89       	ldd	r25, Y+18	; 0x12
    4828:	01 97       	sbiw	r24, 0x01	; 1
    482a:	f1 f7       	brne	.-4      	; 0x4828 <LCD_enuInit+0x41e>
    482c:	9a 8b       	std	Y+18, r25	; 0x12
    482e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4830:	8b 89       	ldd	r24, Y+19	; 0x13
    4832:	9c 89       	ldd	r25, Y+20	; 0x14
    4834:	01 97       	sbiw	r24, 0x01	; 1
    4836:	9c 8b       	std	Y+20, r25	; 0x14
    4838:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    483a:	8b 89       	ldd	r24, Y+19	; 0x13
    483c:	9c 89       	ldd	r25, Y+20	; 0x14
    483e:	00 97       	sbiw	r24, 0x00	; 0
    4840:	69 f7       	brne	.-38     	; 0x481c <LCD_enuInit+0x412>
    4842:	14 c0       	rjmp	.+40     	; 0x486c <LCD_enuInit+0x462>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4844:	6d 89       	ldd	r22, Y+21	; 0x15
    4846:	7e 89       	ldd	r23, Y+22	; 0x16
    4848:	8f 89       	ldd	r24, Y+23	; 0x17
    484a:	98 8d       	ldd	r25, Y+24	; 0x18
    484c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4850:	dc 01       	movw	r26, r24
    4852:	cb 01       	movw	r24, r22
    4854:	9c 8b       	std	Y+20, r25	; 0x14
    4856:	8b 8b       	std	Y+19, r24	; 0x13
    4858:	8b 89       	ldd	r24, Y+19	; 0x13
    485a:	9c 89       	ldd	r25, Y+20	; 0x14
    485c:	98 8b       	std	Y+16, r25	; 0x10
    485e:	8f 87       	std	Y+15, r24	; 0x0f
    4860:	8f 85       	ldd	r24, Y+15	; 0x0f
    4862:	98 89       	ldd	r25, Y+16	; 0x10
    4864:	01 97       	sbiw	r24, 0x01	; 1
    4866:	f1 f7       	brne	.-4      	; 0x4864 <LCD_enuInit+0x45a>
    4868:	98 8b       	std	Y+16, r25	; 0x10
    486a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	//Entry mode set
	LCD_invidSendCommand(INCREMENT_CURSOR_TO_RIGHT);
    486c:	86 e0       	ldi	r24, 0x06	; 6
    486e:	0e 94 27 28 	call	0x504e	; 0x504e <LCD_invidSendCommand>
    4872:	80 e0       	ldi	r24, 0x00	; 0
    4874:	90 e0       	ldi	r25, 0x00	; 0
    4876:	a0 e8       	ldi	r26, 0x80	; 128
    4878:	bf e3       	ldi	r27, 0x3F	; 63
    487a:	8b 87       	std	Y+11, r24	; 0x0b
    487c:	9c 87       	std	Y+12, r25	; 0x0c
    487e:	ad 87       	std	Y+13, r26	; 0x0d
    4880:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4882:	6b 85       	ldd	r22, Y+11	; 0x0b
    4884:	7c 85       	ldd	r23, Y+12	; 0x0c
    4886:	8d 85       	ldd	r24, Y+13	; 0x0d
    4888:	9e 85       	ldd	r25, Y+14	; 0x0e
    488a:	20 e0       	ldi	r18, 0x00	; 0
    488c:	30 e0       	ldi	r19, 0x00	; 0
    488e:	4a ef       	ldi	r20, 0xFA	; 250
    4890:	54 e4       	ldi	r21, 0x44	; 68
    4892:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4896:	dc 01       	movw	r26, r24
    4898:	cb 01       	movw	r24, r22
    489a:	8f 83       	std	Y+7, r24	; 0x07
    489c:	98 87       	std	Y+8, r25	; 0x08
    489e:	a9 87       	std	Y+9, r26	; 0x09
    48a0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    48a2:	6f 81       	ldd	r22, Y+7	; 0x07
    48a4:	78 85       	ldd	r23, Y+8	; 0x08
    48a6:	89 85       	ldd	r24, Y+9	; 0x09
    48a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    48aa:	20 e0       	ldi	r18, 0x00	; 0
    48ac:	30 e0       	ldi	r19, 0x00	; 0
    48ae:	40 e8       	ldi	r20, 0x80	; 128
    48b0:	5f e3       	ldi	r21, 0x3F	; 63
    48b2:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    48b6:	88 23       	and	r24, r24
    48b8:	2c f4       	brge	.+10     	; 0x48c4 <LCD_enuInit+0x4ba>
		__ticks = 1;
    48ba:	81 e0       	ldi	r24, 0x01	; 1
    48bc:	90 e0       	ldi	r25, 0x00	; 0
    48be:	9e 83       	std	Y+6, r25	; 0x06
    48c0:	8d 83       	std	Y+5, r24	; 0x05
    48c2:	3f c0       	rjmp	.+126    	; 0x4942 <LCD_enuInit+0x538>
	else if (__tmp > 65535)
    48c4:	6f 81       	ldd	r22, Y+7	; 0x07
    48c6:	78 85       	ldd	r23, Y+8	; 0x08
    48c8:	89 85       	ldd	r24, Y+9	; 0x09
    48ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    48cc:	20 e0       	ldi	r18, 0x00	; 0
    48ce:	3f ef       	ldi	r19, 0xFF	; 255
    48d0:	4f e7       	ldi	r20, 0x7F	; 127
    48d2:	57 e4       	ldi	r21, 0x47	; 71
    48d4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    48d8:	18 16       	cp	r1, r24
    48da:	4c f5       	brge	.+82     	; 0x492e <LCD_enuInit+0x524>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    48dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    48de:	7c 85       	ldd	r23, Y+12	; 0x0c
    48e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    48e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    48e4:	20 e0       	ldi	r18, 0x00	; 0
    48e6:	30 e0       	ldi	r19, 0x00	; 0
    48e8:	40 e2       	ldi	r20, 0x20	; 32
    48ea:	51 e4       	ldi	r21, 0x41	; 65
    48ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48f0:	dc 01       	movw	r26, r24
    48f2:	cb 01       	movw	r24, r22
    48f4:	bc 01       	movw	r22, r24
    48f6:	cd 01       	movw	r24, r26
    48f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48fc:	dc 01       	movw	r26, r24
    48fe:	cb 01       	movw	r24, r22
    4900:	9e 83       	std	Y+6, r25	; 0x06
    4902:	8d 83       	std	Y+5, r24	; 0x05
    4904:	0f c0       	rjmp	.+30     	; 0x4924 <LCD_enuInit+0x51a>
    4906:	88 ec       	ldi	r24, 0xC8	; 200
    4908:	90 e0       	ldi	r25, 0x00	; 0
    490a:	9c 83       	std	Y+4, r25	; 0x04
    490c:	8b 83       	std	Y+3, r24	; 0x03
    490e:	8b 81       	ldd	r24, Y+3	; 0x03
    4910:	9c 81       	ldd	r25, Y+4	; 0x04
    4912:	01 97       	sbiw	r24, 0x01	; 1
    4914:	f1 f7       	brne	.-4      	; 0x4912 <LCD_enuInit+0x508>
    4916:	9c 83       	std	Y+4, r25	; 0x04
    4918:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    491a:	8d 81       	ldd	r24, Y+5	; 0x05
    491c:	9e 81       	ldd	r25, Y+6	; 0x06
    491e:	01 97       	sbiw	r24, 0x01	; 1
    4920:	9e 83       	std	Y+6, r25	; 0x06
    4922:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4924:	8d 81       	ldd	r24, Y+5	; 0x05
    4926:	9e 81       	ldd	r25, Y+6	; 0x06
    4928:	00 97       	sbiw	r24, 0x00	; 0
    492a:	69 f7       	brne	.-38     	; 0x4906 <LCD_enuInit+0x4fc>
    492c:	14 c0       	rjmp	.+40     	; 0x4956 <LCD_enuInit+0x54c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    492e:	6f 81       	ldd	r22, Y+7	; 0x07
    4930:	78 85       	ldd	r23, Y+8	; 0x08
    4932:	89 85       	ldd	r24, Y+9	; 0x09
    4934:	9a 85       	ldd	r25, Y+10	; 0x0a
    4936:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    493a:	dc 01       	movw	r26, r24
    493c:	cb 01       	movw	r24, r22
    493e:	9e 83       	std	Y+6, r25	; 0x06
    4940:	8d 83       	std	Y+5, r24	; 0x05
    4942:	8d 81       	ldd	r24, Y+5	; 0x05
    4944:	9e 81       	ldd	r25, Y+6	; 0x06
    4946:	9a 83       	std	Y+2, r25	; 0x02
    4948:	89 83       	std	Y+1, r24	; 0x01
    494a:	89 81       	ldd	r24, Y+1	; 0x01
    494c:	9a 81       	ldd	r25, Y+2	; 0x02
    494e:	01 97       	sbiw	r24, 0x01	; 1
    4950:	f1 f7       	brne	.-4      	; 0x494e <LCD_enuInit+0x544>
    4952:	9a 83       	std	Y+2, r25	; 0x02
    4954:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(1);
	LCD_invidSendCommand(FORCE_CURSOR_START_FIRST_LINE);
    4956:	80 e8       	ldi	r24, 0x80	; 128
    4958:	0e 94 27 28 	call	0x504e	; 0x504e <LCD_invidSendCommand>


	return Local_enuErrorState;
    495c:	fe 01       	movw	r30, r28
    495e:	e9 5b       	subi	r30, 0xB9	; 185
    4960:	ff 4f       	sbci	r31, 0xFF	; 255
    4962:	80 81       	ld	r24, Z
}
    4964:	c9 5b       	subi	r28, 0xB9	; 185
    4966:	df 4f       	sbci	r29, 0xFF	; 255
    4968:	0f b6       	in	r0, 0x3f	; 63
    496a:	f8 94       	cli
    496c:	de bf       	out	0x3e, r29	; 62
    496e:	0f be       	out	0x3f, r0	; 63
    4970:	cd bf       	out	0x3d, r28	; 61
    4972:	cf 91       	pop	r28
    4974:	df 91       	pop	r29
    4976:	1f 91       	pop	r17
    4978:	0f 91       	pop	r16
    497a:	08 95       	ret

0000497c <LCD_enuDisplayChar>:

ES_t LCD_enuDisplayChar(u8 Copy_u8Data)
{
    497c:	df 93       	push	r29
    497e:	cf 93       	push	r28
    4980:	00 d0       	rcall	.+0      	; 0x4982 <LCD_enuDisplayChar+0x6>
    4982:	cd b7       	in	r28, 0x3d	; 61
    4984:	de b7       	in	r29, 0x3e	; 62
    4986:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    4988:	19 82       	std	Y+1, r1	; 0x01

	//set RS as data
	Local_enuErrorState=DIO_enuSetPinValue(RS_PORT,RS_PIN,DIO_u8HIGH);
    498a:	81 e0       	ldi	r24, 0x01	; 1
    498c:	60 e0       	ldi	r22, 0x00	; 0
    498e:	41 e0       	ldi	r20, 0x01	; 1
    4990:	0e 94 8f 1a 	call	0x351e	; 0x351e <DIO_enuSetPinValue>
    4994:	89 83       	std	Y+1, r24	; 0x01

	LCD_vidLatch(Copy_u8Data);
    4996:	8a 81       	ldd	r24, Y+2	; 0x02
    4998:	0e 94 ca 26 	call	0x4d94	; 0x4d94 <LCD_vidLatch>

	return Local_enuErrorState;
    499c:	89 81       	ldd	r24, Y+1	; 0x01
}
    499e:	0f 90       	pop	r0
    49a0:	0f 90       	pop	r0
    49a2:	cf 91       	pop	r28
    49a4:	df 91       	pop	r29
    49a6:	08 95       	ret

000049a8 <LCD_enuDisplayString>:

ES_t LCD_enuDisplayString(u8 *Copy_pu8Data)
{
    49a8:	df 93       	push	r29
    49aa:	cf 93       	push	r28
    49ac:	00 d0       	rcall	.+0      	; 0x49ae <LCD_enuDisplayString+0x6>
    49ae:	0f 92       	push	r0
    49b0:	cd b7       	in	r28, 0x3d	; 61
    49b2:	de b7       	in	r29, 0x3e	; 62
    49b4:	9b 83       	std	Y+3, r25	; 0x03
    49b6:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    49b8:	19 82       	std	Y+1, r1	; 0x01
    49ba:	13 c0       	rjmp	.+38     	; 0x49e2 <LCD_enuDisplayString+0x3a>
	{
		Local_enuErrorState=LCD_enuDisplayChar(Copy_pu8Data[Local_u8Counter]);
	}*/
	while(*Copy_pu8Data)
		{
			LCD_enuDisplayChar(*Copy_pu8Data);
    49bc:	ea 81       	ldd	r30, Y+2	; 0x02
    49be:	fb 81       	ldd	r31, Y+3	; 0x03
    49c0:	80 81       	ld	r24, Z
    49c2:	0e 94 be 24 	call	0x497c	; 0x497c <LCD_enuDisplayChar>
			if (!(*(Copy_pu8Data+1))) {Local_enuErrorState =ES_OK;}
    49c6:	8a 81       	ldd	r24, Y+2	; 0x02
    49c8:	9b 81       	ldd	r25, Y+3	; 0x03
    49ca:	fc 01       	movw	r30, r24
    49cc:	31 96       	adiw	r30, 0x01	; 1
    49ce:	80 81       	ld	r24, Z
    49d0:	88 23       	and	r24, r24
    49d2:	11 f4       	brne	.+4      	; 0x49d8 <LCD_enuDisplayString+0x30>
    49d4:	81 e0       	ldi	r24, 0x01	; 1
    49d6:	89 83       	std	Y+1, r24	; 0x01
			Copy_pu8Data++;
    49d8:	8a 81       	ldd	r24, Y+2	; 0x02
    49da:	9b 81       	ldd	r25, Y+3	; 0x03
    49dc:	01 96       	adiw	r24, 0x01	; 1
    49de:	9b 83       	std	Y+3, r25	; 0x03
    49e0:	8a 83       	std	Y+2, r24	; 0x02
	/*u8 Local_u8Counter;
	for(Local_u8Counter=0;Copy_pu8Data;Local_u8Counter++)
	{
		Local_enuErrorState=LCD_enuDisplayChar(Copy_pu8Data[Local_u8Counter]);
	}*/
	while(*Copy_pu8Data)
    49e2:	ea 81       	ldd	r30, Y+2	; 0x02
    49e4:	fb 81       	ldd	r31, Y+3	; 0x03
    49e6:	80 81       	ld	r24, Z
    49e8:	88 23       	and	r24, r24
    49ea:	41 f7       	brne	.-48     	; 0x49bc <LCD_enuDisplayString+0x14>
			LCD_enuDisplayChar(*Copy_pu8Data);
			if (!(*(Copy_pu8Data+1))) {Local_enuErrorState =ES_OK;}
			Copy_pu8Data++;
		}

	return Local_enuErrorState;
    49ec:	89 81       	ldd	r24, Y+1	; 0x01
}
    49ee:	0f 90       	pop	r0
    49f0:	0f 90       	pop	r0
    49f2:	0f 90       	pop	r0
    49f4:	cf 91       	pop	r28
    49f6:	df 91       	pop	r29
    49f8:	08 95       	ret

000049fa <LCD_enuSendCommand>:

ES_t LCD_enuSendCommand(u8 Copy_u8Command)
{
    49fa:	df 93       	push	r29
    49fc:	cf 93       	push	r28
    49fe:	00 d0       	rcall	.+0      	; 0x4a00 <LCD_enuSendCommand+0x6>
    4a00:	cd b7       	in	r28, 0x3d	; 61
    4a02:	de b7       	in	r29, 0x3e	; 62
    4a04:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    4a06:	19 82       	std	Y+1, r1	; 0x01

	//set RS as command
	Local_enuErrorState=DIO_enuSetPinValue(RS_PORT,RS_PIN,DIO_u8LOW);
    4a08:	81 e0       	ldi	r24, 0x01	; 1
    4a0a:	60 e0       	ldi	r22, 0x00	; 0
    4a0c:	40 e0       	ldi	r20, 0x00	; 0
    4a0e:	0e 94 8f 1a 	call	0x351e	; 0x351e <DIO_enuSetPinValue>
    4a12:	89 83       	std	Y+1, r24	; 0x01

	LCD_vidLatch(Copy_u8Command);
    4a14:	8a 81       	ldd	r24, Y+2	; 0x02
    4a16:	0e 94 ca 26 	call	0x4d94	; 0x4d94 <LCD_vidLatch>

	return Local_enuErrorState;
    4a1a:	89 81       	ldd	r24, Y+1	; 0x01
}
    4a1c:	0f 90       	pop	r0
    4a1e:	0f 90       	pop	r0
    4a20:	cf 91       	pop	r28
    4a22:	df 91       	pop	r29
    4a24:	08 95       	ret

00004a26 <LCD_enuGoToPosition>:

ES_t LCD_enuGoToPosition (u8 Copy_u8Row , u8 Copy_u8Col)
{
    4a26:	df 93       	push	r29
    4a28:	cf 93       	push	r28
    4a2a:	00 d0       	rcall	.+0      	; 0x4a2c <LCD_enuGoToPosition+0x6>
    4a2c:	00 d0       	rcall	.+0      	; 0x4a2e <LCD_enuGoToPosition+0x8>
    4a2e:	0f 92       	push	r0
    4a30:	cd b7       	in	r28, 0x3d	; 61
    4a32:	de b7       	in	r29, 0x3e	; 62
    4a34:	8c 83       	std	Y+4, r24	; 0x04
    4a36:	6d 83       	std	Y+5, r22	; 0x05
	ES_t Local_enuErrorState=ES_NOK;
    4a38:	19 82       	std	Y+1, r1	; 0x01

	u8 Local_u8RowLocation [] = {FORCE_CURSOR_START_FIRST_LINE,FORCE_CURSOR_START_SECOND_LINE};
    4a3a:	80 e8       	ldi	r24, 0x80	; 128
    4a3c:	8a 83       	std	Y+2, r24	; 0x02
    4a3e:	80 ec       	ldi	r24, 0xC0	; 192
    4a40:	8b 83       	std	Y+3, r24	; 0x03

	LCD_enuSendCommand(Local_u8RowLocation[Copy_u8Row-1]+(Copy_u8Col-1));
    4a42:	8c 81       	ldd	r24, Y+4	; 0x04
    4a44:	88 2f       	mov	r24, r24
    4a46:	90 e0       	ldi	r25, 0x00	; 0
    4a48:	9c 01       	movw	r18, r24
    4a4a:	21 50       	subi	r18, 0x01	; 1
    4a4c:	30 40       	sbci	r19, 0x00	; 0
    4a4e:	ce 01       	movw	r24, r28
    4a50:	02 96       	adiw	r24, 0x02	; 2
    4a52:	fc 01       	movw	r30, r24
    4a54:	e2 0f       	add	r30, r18
    4a56:	f3 1f       	adc	r31, r19
    4a58:	90 81       	ld	r25, Z
    4a5a:	8d 81       	ldd	r24, Y+5	; 0x05
    4a5c:	89 0f       	add	r24, r25
    4a5e:	81 50       	subi	r24, 0x01	; 1
    4a60:	0e 94 fd 24 	call	0x49fa	; 0x49fa <LCD_enuSendCommand>

	Local_enuErrorState=ES_OK;
    4a64:	81 e0       	ldi	r24, 0x01	; 1
    4a66:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    4a68:	89 81       	ldd	r24, Y+1	; 0x01
}
    4a6a:	0f 90       	pop	r0
    4a6c:	0f 90       	pop	r0
    4a6e:	0f 90       	pop	r0
    4a70:	0f 90       	pop	r0
    4a72:	0f 90       	pop	r0
    4a74:	cf 91       	pop	r28
    4a76:	df 91       	pop	r29
    4a78:	08 95       	ret

00004a7a <LCD_enuDisplayNum>:

ES_t LCD_enuDisplayNum(u8 Copy_u8Num)
{
    4a7a:	df 93       	push	r29
    4a7c:	cf 93       	push	r28
    4a7e:	cd b7       	in	r28, 0x3d	; 61
    4a80:	de b7       	in	r29, 0x3e	; 62
    4a82:	28 97       	sbiw	r28, 0x08	; 8
    4a84:	0f b6       	in	r0, 0x3f	; 63
    4a86:	f8 94       	cli
    4a88:	de bf       	out	0x3e, r29	; 62
    4a8a:	0f be       	out	0x3f, r0	; 63
    4a8c:	cd bf       	out	0x3d, r28	; 61
    4a8e:	88 87       	std	Y+8, r24	; 0x08
	ES_t Local_enuErrorState=ES_NOK;
    4a90:	1f 82       	std	Y+7, r1	; 0x07

	if(Copy_u8Num>=0 && Copy_u8Num<=9)
    4a92:	88 85       	ldd	r24, Y+8	; 0x08
    4a94:	8a 30       	cpi	r24, 0x0A	; 10
    4a96:	28 f4       	brcc	.+10     	; 0x4aa2 <LCD_enuDisplayNum+0x28>
	{
		LCD_enuDisplayChar(0x30+Copy_u8Num);
    4a98:	88 85       	ldd	r24, Y+8	; 0x08
    4a9a:	80 5d       	subi	r24, 0xD0	; 208
    4a9c:	0e 94 be 24 	call	0x497c	; 0x497c <LCD_enuDisplayChar>
    4aa0:	86 c0       	rjmp	.+268    	; 0x4bae <LCD_enuDisplayNum+0x134>
	}
	else
	{
		u8 Local_u8Iterator=0;
    4aa2:	1e 82       	std	Y+6, r1	; 0x06
		u32 Local_u8Divisor=10;
    4aa4:	8a e0       	ldi	r24, 0x0A	; 10
    4aa6:	90 e0       	ldi	r25, 0x00	; 0
    4aa8:	a0 e0       	ldi	r26, 0x00	; 0
    4aaa:	b0 e0       	ldi	r27, 0x00	; 0
    4aac:	8a 83       	std	Y+2, r24	; 0x02
    4aae:	9b 83       	std	Y+3, r25	; 0x03
    4ab0:	ac 83       	std	Y+4, r26	; 0x04
    4ab2:	bd 83       	std	Y+5, r27	; 0x05

		while(1)
		{
			if((Copy_u8Num/Local_u8Divisor)==0)
    4ab4:	88 85       	ldd	r24, Y+8	; 0x08
    4ab6:	88 2f       	mov	r24, r24
    4ab8:	90 e0       	ldi	r25, 0x00	; 0
    4aba:	a0 e0       	ldi	r26, 0x00	; 0
    4abc:	b0 e0       	ldi	r27, 0x00	; 0
    4abe:	2a 81       	ldd	r18, Y+2	; 0x02
    4ac0:	3b 81       	ldd	r19, Y+3	; 0x03
    4ac2:	4c 81       	ldd	r20, Y+4	; 0x04
    4ac4:	5d 81       	ldd	r21, Y+5	; 0x05
    4ac6:	bc 01       	movw	r22, r24
    4ac8:	cd 01       	movw	r24, r26
    4aca:	0e 94 f8 35 	call	0x6bf0	; 0x6bf0 <__udivmodsi4>
    4ace:	da 01       	movw	r26, r20
    4ad0:	c9 01       	movw	r24, r18
    4ad2:	00 97       	sbiw	r24, 0x00	; 0
    4ad4:	a1 05       	cpc	r26, r1
    4ad6:	b1 05       	cpc	r27, r1
    4ad8:	09 f0       	breq	.+2      	; 0x4adc <LCD_enuDisplayNum+0x62>
    4ada:	53 c0       	rjmp	.+166    	; 0x4b82 <LCD_enuDisplayNum+0x108>
			{
				for(u8 Local_u8Iter=0; Local_u8Iter<=Local_u8Iterator ;Local_u8Iter++)
    4adc:	19 82       	std	Y+1, r1	; 0x01
    4ade:	4b c0       	rjmp	.+150    	; 0x4b76 <LCD_enuDisplayNum+0xfc>
				{
					Local_u8Divisor=Local_u8Divisor/10;
    4ae0:	8a 81       	ldd	r24, Y+2	; 0x02
    4ae2:	9b 81       	ldd	r25, Y+3	; 0x03
    4ae4:	ac 81       	ldd	r26, Y+4	; 0x04
    4ae6:	bd 81       	ldd	r27, Y+5	; 0x05
    4ae8:	2a e0       	ldi	r18, 0x0A	; 10
    4aea:	30 e0       	ldi	r19, 0x00	; 0
    4aec:	40 e0       	ldi	r20, 0x00	; 0
    4aee:	50 e0       	ldi	r21, 0x00	; 0
    4af0:	bc 01       	movw	r22, r24
    4af2:	cd 01       	movw	r24, r26
    4af4:	0e 94 f8 35 	call	0x6bf0	; 0x6bf0 <__udivmodsi4>
    4af8:	da 01       	movw	r26, r20
    4afa:	c9 01       	movw	r24, r18
    4afc:	8a 83       	std	Y+2, r24	; 0x02
    4afe:	9b 83       	std	Y+3, r25	; 0x03
    4b00:	ac 83       	std	Y+4, r26	; 0x04
    4b02:	bd 83       	std	Y+5, r27	; 0x05
					if((Copy_u8Num/Local_u8Divisor)>=0  && (Copy_u8Num/Local_u8Divisor)<=9 )
    4b04:	88 85       	ldd	r24, Y+8	; 0x08
    4b06:	88 2f       	mov	r24, r24
    4b08:	90 e0       	ldi	r25, 0x00	; 0
    4b0a:	a0 e0       	ldi	r26, 0x00	; 0
    4b0c:	b0 e0       	ldi	r27, 0x00	; 0
    4b0e:	2a 81       	ldd	r18, Y+2	; 0x02
    4b10:	3b 81       	ldd	r19, Y+3	; 0x03
    4b12:	4c 81       	ldd	r20, Y+4	; 0x04
    4b14:	5d 81       	ldd	r21, Y+5	; 0x05
    4b16:	bc 01       	movw	r22, r24
    4b18:	cd 01       	movw	r24, r26
    4b1a:	0e 94 f8 35 	call	0x6bf0	; 0x6bf0 <__udivmodsi4>
    4b1e:	da 01       	movw	r26, r20
    4b20:	c9 01       	movw	r24, r18
    4b22:	8a 30       	cpi	r24, 0x0A	; 10
    4b24:	91 05       	cpc	r25, r1
    4b26:	a1 05       	cpc	r26, r1
    4b28:	b1 05       	cpc	r27, r1
    4b2a:	90 f4       	brcc	.+36     	; 0x4b50 <LCD_enuDisplayNum+0xd6>
					{
						//LCD_enuDisplayChar(Array_u8Num[(Copy_u8Num/Local_u8Divisor)]);
						//LCD_enuDisplayChar('0'+(Copy_u8Num/Local_u8Divisor));
						LCD_enuDisplayChar(0x30+(Copy_u8Num/Local_u8Divisor));
    4b2c:	88 85       	ldd	r24, Y+8	; 0x08
    4b2e:	88 2f       	mov	r24, r24
    4b30:	90 e0       	ldi	r25, 0x00	; 0
    4b32:	a0 e0       	ldi	r26, 0x00	; 0
    4b34:	b0 e0       	ldi	r27, 0x00	; 0
    4b36:	2a 81       	ldd	r18, Y+2	; 0x02
    4b38:	3b 81       	ldd	r19, Y+3	; 0x03
    4b3a:	4c 81       	ldd	r20, Y+4	; 0x04
    4b3c:	5d 81       	ldd	r21, Y+5	; 0x05
    4b3e:	bc 01       	movw	r22, r24
    4b40:	cd 01       	movw	r24, r26
    4b42:	0e 94 f8 35 	call	0x6bf0	; 0x6bf0 <__udivmodsi4>
    4b46:	da 01       	movw	r26, r20
    4b48:	c9 01       	movw	r24, r18
    4b4a:	80 5d       	subi	r24, 0xD0	; 208
    4b4c:	0e 94 be 24 	call	0x497c	; 0x497c <LCD_enuDisplayChar>
					}
					Copy_u8Num= Copy_u8Num % Local_u8Divisor;
    4b50:	88 85       	ldd	r24, Y+8	; 0x08
    4b52:	88 2f       	mov	r24, r24
    4b54:	90 e0       	ldi	r25, 0x00	; 0
    4b56:	a0 e0       	ldi	r26, 0x00	; 0
    4b58:	b0 e0       	ldi	r27, 0x00	; 0
    4b5a:	2a 81       	ldd	r18, Y+2	; 0x02
    4b5c:	3b 81       	ldd	r19, Y+3	; 0x03
    4b5e:	4c 81       	ldd	r20, Y+4	; 0x04
    4b60:	5d 81       	ldd	r21, Y+5	; 0x05
    4b62:	bc 01       	movw	r22, r24
    4b64:	cd 01       	movw	r24, r26
    4b66:	0e 94 f8 35 	call	0x6bf0	; 0x6bf0 <__udivmodsi4>
    4b6a:	dc 01       	movw	r26, r24
    4b6c:	cb 01       	movw	r24, r22
    4b6e:	88 87       	std	Y+8, r24	; 0x08

		while(1)
		{
			if((Copy_u8Num/Local_u8Divisor)==0)
			{
				for(u8 Local_u8Iter=0; Local_u8Iter<=Local_u8Iterator ;Local_u8Iter++)
    4b70:	89 81       	ldd	r24, Y+1	; 0x01
    4b72:	8f 5f       	subi	r24, 0xFF	; 255
    4b74:	89 83       	std	Y+1, r24	; 0x01
    4b76:	99 81       	ldd	r25, Y+1	; 0x01
    4b78:	8e 81       	ldd	r24, Y+6	; 0x06
    4b7a:	89 17       	cp	r24, r25
    4b7c:	08 f0       	brcs	.+2      	; 0x4b80 <LCD_enuDisplayNum+0x106>
    4b7e:	b0 cf       	rjmp	.-160    	; 0x4ae0 <LCD_enuDisplayNum+0x66>
    4b80:	16 c0       	rjmp	.+44     	; 0x4bae <LCD_enuDisplayNum+0x134>
				}
				break;
			}
			else
			{
				Local_u8Divisor=Local_u8Divisor*10;
    4b82:	8a 81       	ldd	r24, Y+2	; 0x02
    4b84:	9b 81       	ldd	r25, Y+3	; 0x03
    4b86:	ac 81       	ldd	r26, Y+4	; 0x04
    4b88:	bd 81       	ldd	r27, Y+5	; 0x05
    4b8a:	2a e0       	ldi	r18, 0x0A	; 10
    4b8c:	30 e0       	ldi	r19, 0x00	; 0
    4b8e:	40 e0       	ldi	r20, 0x00	; 0
    4b90:	50 e0       	ldi	r21, 0x00	; 0
    4b92:	bc 01       	movw	r22, r24
    4b94:	cd 01       	movw	r24, r26
    4b96:	0e 94 d9 35 	call	0x6bb2	; 0x6bb2 <__mulsi3>
    4b9a:	dc 01       	movw	r26, r24
    4b9c:	cb 01       	movw	r24, r22
    4b9e:	8a 83       	std	Y+2, r24	; 0x02
    4ba0:	9b 83       	std	Y+3, r25	; 0x03
    4ba2:	ac 83       	std	Y+4, r26	; 0x04
    4ba4:	bd 83       	std	Y+5, r27	; 0x05
				Local_u8Iterator++;
    4ba6:	8e 81       	ldd	r24, Y+6	; 0x06
    4ba8:	8f 5f       	subi	r24, 0xFF	; 255
    4baa:	8e 83       	std	Y+6, r24	; 0x06
    4bac:	83 cf       	rjmp	.-250    	; 0x4ab4 <LCD_enuDisplayNum+0x3a>
			}
		}
	}

		Local_enuErrorState=ES_OK;
    4bae:	81 e0       	ldi	r24, 0x01	; 1
    4bb0:	8f 83       	std	Y+7, r24	; 0x07

		return Local_enuErrorState;
    4bb2:	8f 81       	ldd	r24, Y+7	; 0x07
}
    4bb4:	28 96       	adiw	r28, 0x08	; 8
    4bb6:	0f b6       	in	r0, 0x3f	; 63
    4bb8:	f8 94       	cli
    4bba:	de bf       	out	0x3e, r29	; 62
    4bbc:	0f be       	out	0x3f, r0	; 63
    4bbe:	cd bf       	out	0x3d, r28	; 61
    4bc0:	cf 91       	pop	r28
    4bc2:	df 91       	pop	r29
    4bc4:	08 95       	ret

00004bc6 <LCD_enuSendSpecialNumber>:

ES_t LCD_enuSendSpecialNumber(u32 Copy_u32Number)
{
    4bc6:	df 93       	push	r29
    4bc8:	cf 93       	push	r28
    4bca:	cd b7       	in	r28, 0x3d	; 61
    4bcc:	de b7       	in	r29, 0x3e	; 62
    4bce:	2f 97       	sbiw	r28, 0x0f	; 15
    4bd0:	0f b6       	in	r0, 0x3f	; 63
    4bd2:	f8 94       	cli
    4bd4:	de bf       	out	0x3e, r29	; 62
    4bd6:	0f be       	out	0x3f, r0	; 63
    4bd8:	cd bf       	out	0x3d, r28	; 61
    4bda:	6c 87       	std	Y+12, r22	; 0x0c
    4bdc:	7d 87       	std	Y+13, r23	; 0x0d
    4bde:	8e 87       	std	Y+14, r24	; 0x0e
    4be0:	9f 87       	std	Y+15, r25	; 0x0f
	ES_t error_enuState = ES_NOK;
    4be2:	1b 86       	std	Y+11, r1	; 0x0b

	u8 Local_u8Iteration , Local_u8NumOfDigits=LCD_ZERO;
    4be4:	19 86       	std	Y+9, r1	; 0x09
	u32 Local_u32Reminder , Local_u8PowerTen ;
	Local_u32Reminder=Copy_u32Number;
    4be6:	8c 85       	ldd	r24, Y+12	; 0x0c
    4be8:	9d 85       	ldd	r25, Y+13	; 0x0d
    4bea:	ae 85       	ldd	r26, Y+14	; 0x0e
    4bec:	bf 85       	ldd	r27, Y+15	; 0x0f
    4bee:	8d 83       	std	Y+5, r24	; 0x05
    4bf0:	9e 83       	std	Y+6, r25	; 0x06
    4bf2:	af 83       	std	Y+7, r26	; 0x07
    4bf4:	b8 87       	std	Y+8, r27	; 0x08

	for (Local_u8Iteration = LCD_ONE ;  ; Local_u8Iteration++)
    4bf6:	81 e0       	ldi	r24, 0x01	; 1
    4bf8:	8a 87       	std	Y+10, r24	; 0x0a
	{
		Copy_u32Number=Local_u32Reminder;
    4bfa:	8d 81       	ldd	r24, Y+5	; 0x05
    4bfc:	9e 81       	ldd	r25, Y+6	; 0x06
    4bfe:	af 81       	ldd	r26, Y+7	; 0x07
    4c00:	b8 85       	ldd	r27, Y+8	; 0x08
    4c02:	8c 87       	std	Y+12, r24	; 0x0c
    4c04:	9d 87       	std	Y+13, r25	; 0x0d
    4c06:	ae 87       	std	Y+14, r26	; 0x0e
    4c08:	bf 87       	std	Y+15, r27	; 0x0f
		Local_u8PowerTen=POWER_u32PowerNumbers( LCD_TEN , Local_u8Iteration);
    4c0a:	6a e0       	ldi	r22, 0x0A	; 10
    4c0c:	70 e0       	ldi	r23, 0x00	; 0
    4c0e:	80 e0       	ldi	r24, 0x00	; 0
    4c10:	90 e0       	ldi	r25, 0x00	; 0
    4c12:	4a 85       	ldd	r20, Y+10	; 0x0a
    4c14:	0e 94 88 26 	call	0x4d10	; 0x4d10 <POWER_u32PowerNumbers>
    4c18:	dc 01       	movw	r26, r24
    4c1a:	cb 01       	movw	r24, r22
    4c1c:	89 83       	std	Y+1, r24	; 0x01
    4c1e:	9a 83       	std	Y+2, r25	; 0x02
    4c20:	ab 83       	std	Y+3, r26	; 0x03
    4c22:	bc 83       	std	Y+4, r27	; 0x04
		Copy_u32Number /= Local_u8PowerTen;
    4c24:	8c 85       	ldd	r24, Y+12	; 0x0c
    4c26:	9d 85       	ldd	r25, Y+13	; 0x0d
    4c28:	ae 85       	ldd	r26, Y+14	; 0x0e
    4c2a:	bf 85       	ldd	r27, Y+15	; 0x0f
    4c2c:	29 81       	ldd	r18, Y+1	; 0x01
    4c2e:	3a 81       	ldd	r19, Y+2	; 0x02
    4c30:	4b 81       	ldd	r20, Y+3	; 0x03
    4c32:	5c 81       	ldd	r21, Y+4	; 0x04
    4c34:	bc 01       	movw	r22, r24
    4c36:	cd 01       	movw	r24, r26
    4c38:	0e 94 f8 35 	call	0x6bf0	; 0x6bf0 <__udivmodsi4>
    4c3c:	da 01       	movw	r26, r20
    4c3e:	c9 01       	movw	r24, r18
    4c40:	8c 87       	std	Y+12, r24	; 0x0c
    4c42:	9d 87       	std	Y+13, r25	; 0x0d
    4c44:	ae 87       	std	Y+14, r26	; 0x0e
    4c46:	bf 87       	std	Y+15, r27	; 0x0f

		if (! (Copy_u32Number))
    4c48:	8c 85       	ldd	r24, Y+12	; 0x0c
    4c4a:	9d 85       	ldd	r25, Y+13	; 0x0d
    4c4c:	ae 85       	ldd	r26, Y+14	; 0x0e
    4c4e:	bf 85       	ldd	r27, Y+15	; 0x0f
    4c50:	00 97       	sbiw	r24, 0x00	; 0
    4c52:	a1 05       	cpc	r26, r1
    4c54:	b1 05       	cpc	r27, r1
    4c56:	29 f4       	brne	.+10     	; 0x4c62 <LCD_enuSendSpecialNumber+0x9c>
		{
			Local_u8NumOfDigits=Local_u8Iteration;
    4c58:	8a 85       	ldd	r24, Y+10	; 0x0a
    4c5a:	89 87       	std	Y+9, r24	; 0x09
			break;
		}
	}

	for (Local_u8Iteration = Local_u8NumOfDigits ; Local_u8Iteration > LCD_ZERO ;Local_u8Iteration--)
    4c5c:	89 85       	ldd	r24, Y+9	; 0x09
    4c5e:	8a 87       	std	Y+10, r24	; 0x0a
    4c60:	47 c0       	rjmp	.+142    	; 0x4cf0 <LCD_enuSendSpecialNumber+0x12a>

	u8 Local_u8Iteration , Local_u8NumOfDigits=LCD_ZERO;
	u32 Local_u32Reminder , Local_u8PowerTen ;
	Local_u32Reminder=Copy_u32Number;

	for (Local_u8Iteration = LCD_ONE ;  ; Local_u8Iteration++)
    4c62:	8a 85       	ldd	r24, Y+10	; 0x0a
    4c64:	8f 5f       	subi	r24, 0xFF	; 255
    4c66:	8a 87       	std	Y+10, r24	; 0x0a
    4c68:	c8 cf       	rjmp	.-112    	; 0x4bfa <LCD_enuSendSpecialNumber+0x34>
		}
	}

	for (Local_u8Iteration = Local_u8NumOfDigits ; Local_u8Iteration > LCD_ZERO ;Local_u8Iteration--)
	{
		Copy_u32Number=Local_u32Reminder;
    4c6a:	8d 81       	ldd	r24, Y+5	; 0x05
    4c6c:	9e 81       	ldd	r25, Y+6	; 0x06
    4c6e:	af 81       	ldd	r26, Y+7	; 0x07
    4c70:	b8 85       	ldd	r27, Y+8	; 0x08
    4c72:	8c 87       	std	Y+12, r24	; 0x0c
    4c74:	9d 87       	std	Y+13, r25	; 0x0d
    4c76:	ae 87       	std	Y+14, r26	; 0x0e
    4c78:	bf 87       	std	Y+15, r27	; 0x0f
		Local_u8PowerTen=POWER_u32PowerNumbers( LCD_TEN , Local_u8Iteration - LCD_ONE);
    4c7a:	8a 85       	ldd	r24, Y+10	; 0x0a
    4c7c:	28 2f       	mov	r18, r24
    4c7e:	21 50       	subi	r18, 0x01	; 1
    4c80:	6a e0       	ldi	r22, 0x0A	; 10
    4c82:	70 e0       	ldi	r23, 0x00	; 0
    4c84:	80 e0       	ldi	r24, 0x00	; 0
    4c86:	90 e0       	ldi	r25, 0x00	; 0
    4c88:	42 2f       	mov	r20, r18
    4c8a:	0e 94 88 26 	call	0x4d10	; 0x4d10 <POWER_u32PowerNumbers>
    4c8e:	dc 01       	movw	r26, r24
    4c90:	cb 01       	movw	r24, r22
    4c92:	89 83       	std	Y+1, r24	; 0x01
    4c94:	9a 83       	std	Y+2, r25	; 0x02
    4c96:	ab 83       	std	Y+3, r26	; 0x03
    4c98:	bc 83       	std	Y+4, r27	; 0x04

		Local_u32Reminder  %= Local_u8PowerTen;
    4c9a:	8d 81       	ldd	r24, Y+5	; 0x05
    4c9c:	9e 81       	ldd	r25, Y+6	; 0x06
    4c9e:	af 81       	ldd	r26, Y+7	; 0x07
    4ca0:	b8 85       	ldd	r27, Y+8	; 0x08
    4ca2:	29 81       	ldd	r18, Y+1	; 0x01
    4ca4:	3a 81       	ldd	r19, Y+2	; 0x02
    4ca6:	4b 81       	ldd	r20, Y+3	; 0x03
    4ca8:	5c 81       	ldd	r21, Y+4	; 0x04
    4caa:	bc 01       	movw	r22, r24
    4cac:	cd 01       	movw	r24, r26
    4cae:	0e 94 f8 35 	call	0x6bf0	; 0x6bf0 <__udivmodsi4>
    4cb2:	dc 01       	movw	r26, r24
    4cb4:	cb 01       	movw	r24, r22
    4cb6:	8d 83       	std	Y+5, r24	; 0x05
    4cb8:	9e 83       	std	Y+6, r25	; 0x06
    4cba:	af 83       	std	Y+7, r26	; 0x07
    4cbc:	b8 87       	std	Y+8, r27	; 0x08

		Copy_u32Number /= (Local_u8PowerTen);
    4cbe:	8c 85       	ldd	r24, Y+12	; 0x0c
    4cc0:	9d 85       	ldd	r25, Y+13	; 0x0d
    4cc2:	ae 85       	ldd	r26, Y+14	; 0x0e
    4cc4:	bf 85       	ldd	r27, Y+15	; 0x0f
    4cc6:	29 81       	ldd	r18, Y+1	; 0x01
    4cc8:	3a 81       	ldd	r19, Y+2	; 0x02
    4cca:	4b 81       	ldd	r20, Y+3	; 0x03
    4ccc:	5c 81       	ldd	r21, Y+4	; 0x04
    4cce:	bc 01       	movw	r22, r24
    4cd0:	cd 01       	movw	r24, r26
    4cd2:	0e 94 f8 35 	call	0x6bf0	; 0x6bf0 <__udivmodsi4>
    4cd6:	da 01       	movw	r26, r20
    4cd8:	c9 01       	movw	r24, r18
    4cda:	8c 87       	std	Y+12, r24	; 0x0c
    4cdc:	9d 87       	std	Y+13, r25	; 0x0d
    4cde:	ae 87       	std	Y+14, r26	; 0x0e
    4ce0:	bf 87       	std	Y+15, r27	; 0x0f

		LCD_enuDisplayChar(Copy_u32Number+'0');
    4ce2:	8c 85       	ldd	r24, Y+12	; 0x0c
    4ce4:	80 5d       	subi	r24, 0xD0	; 208
    4ce6:	0e 94 be 24 	call	0x497c	; 0x497c <LCD_enuDisplayChar>
			Local_u8NumOfDigits=Local_u8Iteration;
			break;
		}
	}

	for (Local_u8Iteration = Local_u8NumOfDigits ; Local_u8Iteration > LCD_ZERO ;Local_u8Iteration--)
    4cea:	8a 85       	ldd	r24, Y+10	; 0x0a
    4cec:	81 50       	subi	r24, 0x01	; 1
    4cee:	8a 87       	std	Y+10, r24	; 0x0a
    4cf0:	8a 85       	ldd	r24, Y+10	; 0x0a
    4cf2:	88 23       	and	r24, r24
    4cf4:	09 f0       	breq	.+2      	; 0x4cf8 <LCD_enuSendSpecialNumber+0x132>
    4cf6:	b9 cf       	rjmp	.-142    	; 0x4c6a <LCD_enuSendSpecialNumber+0xa4>

		Copy_u32Number /= (Local_u8PowerTen);

		LCD_enuDisplayChar(Copy_u32Number+'0');
	}
	error_enuState = ES_OK;
    4cf8:	81 e0       	ldi	r24, 0x01	; 1
    4cfa:	8b 87       	std	Y+11, r24	; 0x0b

	return error_enuState;
    4cfc:	8b 85       	ldd	r24, Y+11	; 0x0b
}
    4cfe:	2f 96       	adiw	r28, 0x0f	; 15
    4d00:	0f b6       	in	r0, 0x3f	; 63
    4d02:	f8 94       	cli
    4d04:	de bf       	out	0x3e, r29	; 62
    4d06:	0f be       	out	0x3f, r0	; 63
    4d08:	cd bf       	out	0x3d, r28	; 61
    4d0a:	cf 91       	pop	r28
    4d0c:	df 91       	pop	r29
    4d0e:	08 95       	ret

00004d10 <POWER_u32PowerNumbers>:

u32 POWER_u32PowerNumbers(u32 Copy_u32Number , u8 Copy_u8Power)
{
    4d10:	df 93       	push	r29
    4d12:	cf 93       	push	r28
    4d14:	cd b7       	in	r28, 0x3d	; 61
    4d16:	de b7       	in	r29, 0x3e	; 62
    4d18:	2a 97       	sbiw	r28, 0x0a	; 10
    4d1a:	0f b6       	in	r0, 0x3f	; 63
    4d1c:	f8 94       	cli
    4d1e:	de bf       	out	0x3e, r29	; 62
    4d20:	0f be       	out	0x3f, r0	; 63
    4d22:	cd bf       	out	0x3d, r28	; 61
    4d24:	6e 83       	std	Y+6, r22	; 0x06
    4d26:	7f 83       	std	Y+7, r23	; 0x07
    4d28:	88 87       	std	Y+8, r24	; 0x08
    4d2a:	99 87       	std	Y+9, r25	; 0x09
    4d2c:	4a 87       	std	Y+10, r20	; 0x0a
	u32 Local_u32Result = LCD_ONE ;
    4d2e:	81 e0       	ldi	r24, 0x01	; 1
    4d30:	90 e0       	ldi	r25, 0x00	; 0
    4d32:	a0 e0       	ldi	r26, 0x00	; 0
    4d34:	b0 e0       	ldi	r27, 0x00	; 0
    4d36:	8a 83       	std	Y+2, r24	; 0x02
    4d38:	9b 83       	std	Y+3, r25	; 0x03
    4d3a:	ac 83       	std	Y+4, r26	; 0x04
    4d3c:	bd 83       	std	Y+5, r27	; 0x05
	u8 Local_u8Iteration ;

	for (Local_u8Iteration = LCD_ONE ; Local_u8Iteration <= Copy_u8Power ; Local_u8Iteration++)
    4d3e:	81 e0       	ldi	r24, 0x01	; 1
    4d40:	89 83       	std	Y+1, r24	; 0x01
    4d42:	15 c0       	rjmp	.+42     	; 0x4d6e <POWER_u32PowerNumbers+0x5e>
	{
		Local_u32Result *=Copy_u32Number ;
    4d44:	8a 81       	ldd	r24, Y+2	; 0x02
    4d46:	9b 81       	ldd	r25, Y+3	; 0x03
    4d48:	ac 81       	ldd	r26, Y+4	; 0x04
    4d4a:	bd 81       	ldd	r27, Y+5	; 0x05
    4d4c:	2e 81       	ldd	r18, Y+6	; 0x06
    4d4e:	3f 81       	ldd	r19, Y+7	; 0x07
    4d50:	48 85       	ldd	r20, Y+8	; 0x08
    4d52:	59 85       	ldd	r21, Y+9	; 0x09
    4d54:	bc 01       	movw	r22, r24
    4d56:	cd 01       	movw	r24, r26
    4d58:	0e 94 d9 35 	call	0x6bb2	; 0x6bb2 <__mulsi3>
    4d5c:	dc 01       	movw	r26, r24
    4d5e:	cb 01       	movw	r24, r22
    4d60:	8a 83       	std	Y+2, r24	; 0x02
    4d62:	9b 83       	std	Y+3, r25	; 0x03
    4d64:	ac 83       	std	Y+4, r26	; 0x04
    4d66:	bd 83       	std	Y+5, r27	; 0x05
u32 POWER_u32PowerNumbers(u32 Copy_u32Number , u8 Copy_u8Power)
{
	u32 Local_u32Result = LCD_ONE ;
	u8 Local_u8Iteration ;

	for (Local_u8Iteration = LCD_ONE ; Local_u8Iteration <= Copy_u8Power ; Local_u8Iteration++)
    4d68:	89 81       	ldd	r24, Y+1	; 0x01
    4d6a:	8f 5f       	subi	r24, 0xFF	; 255
    4d6c:	89 83       	std	Y+1, r24	; 0x01
    4d6e:	99 81       	ldd	r25, Y+1	; 0x01
    4d70:	8a 85       	ldd	r24, Y+10	; 0x0a
    4d72:	89 17       	cp	r24, r25
    4d74:	38 f7       	brcc	.-50     	; 0x4d44 <POWER_u32PowerNumbers+0x34>
	{
		Local_u32Result *=Copy_u32Number ;
	}

	return Local_u32Result ;
    4d76:	8a 81       	ldd	r24, Y+2	; 0x02
    4d78:	9b 81       	ldd	r25, Y+3	; 0x03
    4d7a:	ac 81       	ldd	r26, Y+4	; 0x04
    4d7c:	bd 81       	ldd	r27, Y+5	; 0x05
}
    4d7e:	bc 01       	movw	r22, r24
    4d80:	cd 01       	movw	r24, r26
    4d82:	2a 96       	adiw	r28, 0x0a	; 10
    4d84:	0f b6       	in	r0, 0x3f	; 63
    4d86:	f8 94       	cli
    4d88:	de bf       	out	0x3e, r29	; 62
    4d8a:	0f be       	out	0x3f, r0	; 63
    4d8c:	cd bf       	out	0x3d, r28	; 61
    4d8e:	cf 91       	pop	r28
    4d90:	df 91       	pop	r29
    4d92:	08 95       	ret

00004d94 <LCD_vidLatch>:


static void LCD_vidLatch(u8 Copy_u8Data)
{
    4d94:	df 93       	push	r29
    4d96:	cf 93       	push	r28
    4d98:	cd b7       	in	r28, 0x3d	; 61
    4d9a:	de b7       	in	r29, 0x3e	; 62
    4d9c:	6d 97       	sbiw	r28, 0x1d	; 29
    4d9e:	0f b6       	in	r0, 0x3f	; 63
    4da0:	f8 94       	cli
    4da2:	de bf       	out	0x3e, r29	; 62
    4da4:	0f be       	out	0x3f, r0	; 63
    4da6:	cd bf       	out	0x3d, r28	; 61
    4da8:	8d 8f       	std	Y+29, r24	; 0x1d
	//set EN as low
		DIO_enuSetPinValue(EN_PORT,EN_PIN,DIO_u8LOW);
    4daa:	81 e0       	ldi	r24, 0x01	; 1
    4dac:	62 e0       	ldi	r22, 0x02	; 2
    4dae:	40 e0       	ldi	r20, 0x00	; 0
    4db0:	0e 94 8f 1a 	call	0x351e	; 0x351e <DIO_enuSetPinValue>
		//set RW as write operation
		DIO_enuSetPinValue(RW_PORT,RW_PIN,DIO_u8LOW);
    4db4:	81 e0       	ldi	r24, 0x01	; 1
    4db6:	61 e0       	ldi	r22, 0x01	; 1
    4db8:	40 e0       	ldi	r20, 0x00	; 0
    4dba:	0e 94 8f 1a 	call	0x351e	; 0x351e <DIO_enuSetPinValue>
		//write data
		DIO_enuSetPinValue(D7_PORT,D7_PIN,((Copy_u8Data>>7)&LCD_MASK_BIT));
    4dbe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4dc0:	98 2f       	mov	r25, r24
    4dc2:	99 1f       	adc	r25, r25
    4dc4:	99 27       	eor	r25, r25
    4dc6:	99 1f       	adc	r25, r25
    4dc8:	81 e0       	ldi	r24, 0x01	; 1
    4dca:	63 e0       	ldi	r22, 0x03	; 3
    4dcc:	49 2f       	mov	r20, r25
    4dce:	0e 94 8f 1a 	call	0x351e	; 0x351e <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D6_PORT,D6_PIN,((Copy_u8Data>>6)&LCD_MASK_BIT));
    4dd2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4dd4:	82 95       	swap	r24
    4dd6:	86 95       	lsr	r24
    4dd8:	86 95       	lsr	r24
    4dda:	83 70       	andi	r24, 0x03	; 3
    4ddc:	98 2f       	mov	r25, r24
    4dde:	91 70       	andi	r25, 0x01	; 1
    4de0:	80 e0       	ldi	r24, 0x00	; 0
    4de2:	66 e0       	ldi	r22, 0x06	; 6
    4de4:	49 2f       	mov	r20, r25
    4de6:	0e 94 8f 1a 	call	0x351e	; 0x351e <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D5_PORT,D5_PIN,((Copy_u8Data>>5)&LCD_MASK_BIT));
    4dea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4dec:	82 95       	swap	r24
    4dee:	86 95       	lsr	r24
    4df0:	87 70       	andi	r24, 0x07	; 7
    4df2:	98 2f       	mov	r25, r24
    4df4:	91 70       	andi	r25, 0x01	; 1
    4df6:	80 e0       	ldi	r24, 0x00	; 0
    4df8:	65 e0       	ldi	r22, 0x05	; 5
    4dfa:	49 2f       	mov	r20, r25
    4dfc:	0e 94 8f 1a 	call	0x351e	; 0x351e <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D4_PORT,D4_PIN,((Copy_u8Data>>4)&LCD_MASK_BIT));
    4e00:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4e02:	82 95       	swap	r24
    4e04:	8f 70       	andi	r24, 0x0F	; 15
    4e06:	98 2f       	mov	r25, r24
    4e08:	91 70       	andi	r25, 0x01	; 1
    4e0a:	80 e0       	ldi	r24, 0x00	; 0
    4e0c:	64 e0       	ldi	r22, 0x04	; 4
    4e0e:	49 2f       	mov	r20, r25
    4e10:	0e 94 8f 1a 	call	0x351e	; 0x351e <DIO_enuSetPinValue>
#if LCD_MODE==EIGHT_BIT
		DIO_enuSetPinValue(D3_PORT,D3_PIN,((Copy_u8Data>>3)&LCD_MASK_BIT));
    4e14:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4e16:	86 95       	lsr	r24
    4e18:	86 95       	lsr	r24
    4e1a:	86 95       	lsr	r24
    4e1c:	98 2f       	mov	r25, r24
    4e1e:	91 70       	andi	r25, 0x01	; 1
    4e20:	80 e0       	ldi	r24, 0x00	; 0
    4e22:	63 e0       	ldi	r22, 0x03	; 3
    4e24:	49 2f       	mov	r20, r25
    4e26:	0e 94 8f 1a 	call	0x351e	; 0x351e <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D2_PORT,D2_PIN,((Copy_u8Data>>2)&LCD_MASK_BIT));
    4e2a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4e2c:	86 95       	lsr	r24
    4e2e:	86 95       	lsr	r24
    4e30:	98 2f       	mov	r25, r24
    4e32:	91 70       	andi	r25, 0x01	; 1
    4e34:	80 e0       	ldi	r24, 0x00	; 0
    4e36:	62 e0       	ldi	r22, 0x02	; 2
    4e38:	49 2f       	mov	r20, r25
    4e3a:	0e 94 8f 1a 	call	0x351e	; 0x351e <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D1_PORT,D1_PIN,((Copy_u8Data>>1)&LCD_MASK_BIT));
    4e3e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4e40:	86 95       	lsr	r24
    4e42:	98 2f       	mov	r25, r24
    4e44:	91 70       	andi	r25, 0x01	; 1
    4e46:	80 e0       	ldi	r24, 0x00	; 0
    4e48:	61 e0       	ldi	r22, 0x01	; 1
    4e4a:	49 2f       	mov	r20, r25
    4e4c:	0e 94 8f 1a 	call	0x351e	; 0x351e <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D0_PORT,D0_PIN,((Copy_u8Data>>0)&LCD_MASK_BIT));
    4e50:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4e52:	98 2f       	mov	r25, r24
    4e54:	91 70       	andi	r25, 0x01	; 1
    4e56:	80 e0       	ldi	r24, 0x00	; 0
    4e58:	60 e0       	ldi	r22, 0x00	; 0
    4e5a:	49 2f       	mov	r20, r25
    4e5c:	0e 94 8f 1a 	call	0x351e	; 0x351e <DIO_enuSetPinValue>
#else
#error"your LCD_MODE has a wrong selection"
#endif

		//enable latch
		DIO_enuSetPinValue(EN_PORT,EN_PIN,DIO_u8HIGH);
    4e60:	81 e0       	ldi	r24, 0x01	; 1
    4e62:	62 e0       	ldi	r22, 0x02	; 2
    4e64:	41 e0       	ldi	r20, 0x01	; 1
    4e66:	0e 94 8f 1a 	call	0x351e	; 0x351e <DIO_enuSetPinValue>
    4e6a:	80 e0       	ldi	r24, 0x00	; 0
    4e6c:	90 e0       	ldi	r25, 0x00	; 0
    4e6e:	a0 e2       	ldi	r26, 0x20	; 32
    4e70:	b1 e4       	ldi	r27, 0x41	; 65
    4e72:	89 8f       	std	Y+25, r24	; 0x19
    4e74:	9a 8f       	std	Y+26, r25	; 0x1a
    4e76:	ab 8f       	std	Y+27, r26	; 0x1b
    4e78:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e7a:	69 8d       	ldd	r22, Y+25	; 0x19
    4e7c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4e7e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4e80:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4e82:	20 e0       	ldi	r18, 0x00	; 0
    4e84:	30 e0       	ldi	r19, 0x00	; 0
    4e86:	4a ef       	ldi	r20, 0xFA	; 250
    4e88:	54 e4       	ldi	r21, 0x44	; 68
    4e8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e8e:	dc 01       	movw	r26, r24
    4e90:	cb 01       	movw	r24, r22
    4e92:	8d 8b       	std	Y+21, r24	; 0x15
    4e94:	9e 8b       	std	Y+22, r25	; 0x16
    4e96:	af 8b       	std	Y+23, r26	; 0x17
    4e98:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4e9a:	6d 89       	ldd	r22, Y+21	; 0x15
    4e9c:	7e 89       	ldd	r23, Y+22	; 0x16
    4e9e:	8f 89       	ldd	r24, Y+23	; 0x17
    4ea0:	98 8d       	ldd	r25, Y+24	; 0x18
    4ea2:	20 e0       	ldi	r18, 0x00	; 0
    4ea4:	30 e0       	ldi	r19, 0x00	; 0
    4ea6:	40 e8       	ldi	r20, 0x80	; 128
    4ea8:	5f e3       	ldi	r21, 0x3F	; 63
    4eaa:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4eae:	88 23       	and	r24, r24
    4eb0:	2c f4       	brge	.+10     	; 0x4ebc <LCD_vidLatch+0x128>
		__ticks = 1;
    4eb2:	81 e0       	ldi	r24, 0x01	; 1
    4eb4:	90 e0       	ldi	r25, 0x00	; 0
    4eb6:	9c 8b       	std	Y+20, r25	; 0x14
    4eb8:	8b 8b       	std	Y+19, r24	; 0x13
    4eba:	3f c0       	rjmp	.+126    	; 0x4f3a <LCD_vidLatch+0x1a6>
	else if (__tmp > 65535)
    4ebc:	6d 89       	ldd	r22, Y+21	; 0x15
    4ebe:	7e 89       	ldd	r23, Y+22	; 0x16
    4ec0:	8f 89       	ldd	r24, Y+23	; 0x17
    4ec2:	98 8d       	ldd	r25, Y+24	; 0x18
    4ec4:	20 e0       	ldi	r18, 0x00	; 0
    4ec6:	3f ef       	ldi	r19, 0xFF	; 255
    4ec8:	4f e7       	ldi	r20, 0x7F	; 127
    4eca:	57 e4       	ldi	r21, 0x47	; 71
    4ecc:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4ed0:	18 16       	cp	r1, r24
    4ed2:	4c f5       	brge	.+82     	; 0x4f26 <LCD_vidLatch+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ed4:	69 8d       	ldd	r22, Y+25	; 0x19
    4ed6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4ed8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4eda:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4edc:	20 e0       	ldi	r18, 0x00	; 0
    4ede:	30 e0       	ldi	r19, 0x00	; 0
    4ee0:	40 e2       	ldi	r20, 0x20	; 32
    4ee2:	51 e4       	ldi	r21, 0x41	; 65
    4ee4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ee8:	dc 01       	movw	r26, r24
    4eea:	cb 01       	movw	r24, r22
    4eec:	bc 01       	movw	r22, r24
    4eee:	cd 01       	movw	r24, r26
    4ef0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ef4:	dc 01       	movw	r26, r24
    4ef6:	cb 01       	movw	r24, r22
    4ef8:	9c 8b       	std	Y+20, r25	; 0x14
    4efa:	8b 8b       	std	Y+19, r24	; 0x13
    4efc:	0f c0       	rjmp	.+30     	; 0x4f1c <LCD_vidLatch+0x188>
    4efe:	88 ec       	ldi	r24, 0xC8	; 200
    4f00:	90 e0       	ldi	r25, 0x00	; 0
    4f02:	9a 8b       	std	Y+18, r25	; 0x12
    4f04:	89 8b       	std	Y+17, r24	; 0x11
    4f06:	89 89       	ldd	r24, Y+17	; 0x11
    4f08:	9a 89       	ldd	r25, Y+18	; 0x12
    4f0a:	01 97       	sbiw	r24, 0x01	; 1
    4f0c:	f1 f7       	brne	.-4      	; 0x4f0a <LCD_vidLatch+0x176>
    4f0e:	9a 8b       	std	Y+18, r25	; 0x12
    4f10:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f12:	8b 89       	ldd	r24, Y+19	; 0x13
    4f14:	9c 89       	ldd	r25, Y+20	; 0x14
    4f16:	01 97       	sbiw	r24, 0x01	; 1
    4f18:	9c 8b       	std	Y+20, r25	; 0x14
    4f1a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f1c:	8b 89       	ldd	r24, Y+19	; 0x13
    4f1e:	9c 89       	ldd	r25, Y+20	; 0x14
    4f20:	00 97       	sbiw	r24, 0x00	; 0
    4f22:	69 f7       	brne	.-38     	; 0x4efe <LCD_vidLatch+0x16a>
    4f24:	14 c0       	rjmp	.+40     	; 0x4f4e <LCD_vidLatch+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f26:	6d 89       	ldd	r22, Y+21	; 0x15
    4f28:	7e 89       	ldd	r23, Y+22	; 0x16
    4f2a:	8f 89       	ldd	r24, Y+23	; 0x17
    4f2c:	98 8d       	ldd	r25, Y+24	; 0x18
    4f2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f32:	dc 01       	movw	r26, r24
    4f34:	cb 01       	movw	r24, r22
    4f36:	9c 8b       	std	Y+20, r25	; 0x14
    4f38:	8b 8b       	std	Y+19, r24	; 0x13
    4f3a:	8b 89       	ldd	r24, Y+19	; 0x13
    4f3c:	9c 89       	ldd	r25, Y+20	; 0x14
    4f3e:	98 8b       	std	Y+16, r25	; 0x10
    4f40:	8f 87       	std	Y+15, r24	; 0x0f
    4f42:	8f 85       	ldd	r24, Y+15	; 0x0f
    4f44:	98 89       	ldd	r25, Y+16	; 0x10
    4f46:	01 97       	sbiw	r24, 0x01	; 1
    4f48:	f1 f7       	brne	.-4      	; 0x4f46 <LCD_vidLatch+0x1b2>
    4f4a:	98 8b       	std	Y+16, r25	; 0x10
    4f4c:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(10);
		DIO_enuSetPinValue(EN_PORT,EN_PIN,DIO_u8LOW);
    4f4e:	81 e0       	ldi	r24, 0x01	; 1
    4f50:	62 e0       	ldi	r22, 0x02	; 2
    4f52:	40 e0       	ldi	r20, 0x00	; 0
    4f54:	0e 94 8f 1a 	call	0x351e	; 0x351e <DIO_enuSetPinValue>
    4f58:	80 e0       	ldi	r24, 0x00	; 0
    4f5a:	90 e0       	ldi	r25, 0x00	; 0
    4f5c:	a0 e2       	ldi	r26, 0x20	; 32
    4f5e:	b1 e4       	ldi	r27, 0x41	; 65
    4f60:	8b 87       	std	Y+11, r24	; 0x0b
    4f62:	9c 87       	std	Y+12, r25	; 0x0c
    4f64:	ad 87       	std	Y+13, r26	; 0x0d
    4f66:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f68:	6b 85       	ldd	r22, Y+11	; 0x0b
    4f6a:	7c 85       	ldd	r23, Y+12	; 0x0c
    4f6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    4f6e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4f70:	20 e0       	ldi	r18, 0x00	; 0
    4f72:	30 e0       	ldi	r19, 0x00	; 0
    4f74:	4a ef       	ldi	r20, 0xFA	; 250
    4f76:	54 e4       	ldi	r21, 0x44	; 68
    4f78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f7c:	dc 01       	movw	r26, r24
    4f7e:	cb 01       	movw	r24, r22
    4f80:	8f 83       	std	Y+7, r24	; 0x07
    4f82:	98 87       	std	Y+8, r25	; 0x08
    4f84:	a9 87       	std	Y+9, r26	; 0x09
    4f86:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4f88:	6f 81       	ldd	r22, Y+7	; 0x07
    4f8a:	78 85       	ldd	r23, Y+8	; 0x08
    4f8c:	89 85       	ldd	r24, Y+9	; 0x09
    4f8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f90:	20 e0       	ldi	r18, 0x00	; 0
    4f92:	30 e0       	ldi	r19, 0x00	; 0
    4f94:	40 e8       	ldi	r20, 0x80	; 128
    4f96:	5f e3       	ldi	r21, 0x3F	; 63
    4f98:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4f9c:	88 23       	and	r24, r24
    4f9e:	2c f4       	brge	.+10     	; 0x4faa <LCD_vidLatch+0x216>
		__ticks = 1;
    4fa0:	81 e0       	ldi	r24, 0x01	; 1
    4fa2:	90 e0       	ldi	r25, 0x00	; 0
    4fa4:	9e 83       	std	Y+6, r25	; 0x06
    4fa6:	8d 83       	std	Y+5, r24	; 0x05
    4fa8:	3f c0       	rjmp	.+126    	; 0x5028 <LCD_vidLatch+0x294>
	else if (__tmp > 65535)
    4faa:	6f 81       	ldd	r22, Y+7	; 0x07
    4fac:	78 85       	ldd	r23, Y+8	; 0x08
    4fae:	89 85       	ldd	r24, Y+9	; 0x09
    4fb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    4fb2:	20 e0       	ldi	r18, 0x00	; 0
    4fb4:	3f ef       	ldi	r19, 0xFF	; 255
    4fb6:	4f e7       	ldi	r20, 0x7F	; 127
    4fb8:	57 e4       	ldi	r21, 0x47	; 71
    4fba:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4fbe:	18 16       	cp	r1, r24
    4fc0:	4c f5       	brge	.+82     	; 0x5014 <LCD_vidLatch+0x280>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4fc2:	6b 85       	ldd	r22, Y+11	; 0x0b
    4fc4:	7c 85       	ldd	r23, Y+12	; 0x0c
    4fc6:	8d 85       	ldd	r24, Y+13	; 0x0d
    4fc8:	9e 85       	ldd	r25, Y+14	; 0x0e
    4fca:	20 e0       	ldi	r18, 0x00	; 0
    4fcc:	30 e0       	ldi	r19, 0x00	; 0
    4fce:	40 e2       	ldi	r20, 0x20	; 32
    4fd0:	51 e4       	ldi	r21, 0x41	; 65
    4fd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4fd6:	dc 01       	movw	r26, r24
    4fd8:	cb 01       	movw	r24, r22
    4fda:	bc 01       	movw	r22, r24
    4fdc:	cd 01       	movw	r24, r26
    4fde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4fe2:	dc 01       	movw	r26, r24
    4fe4:	cb 01       	movw	r24, r22
    4fe6:	9e 83       	std	Y+6, r25	; 0x06
    4fe8:	8d 83       	std	Y+5, r24	; 0x05
    4fea:	0f c0       	rjmp	.+30     	; 0x500a <LCD_vidLatch+0x276>
    4fec:	88 ec       	ldi	r24, 0xC8	; 200
    4fee:	90 e0       	ldi	r25, 0x00	; 0
    4ff0:	9c 83       	std	Y+4, r25	; 0x04
    4ff2:	8b 83       	std	Y+3, r24	; 0x03
    4ff4:	8b 81       	ldd	r24, Y+3	; 0x03
    4ff6:	9c 81       	ldd	r25, Y+4	; 0x04
    4ff8:	01 97       	sbiw	r24, 0x01	; 1
    4ffa:	f1 f7       	brne	.-4      	; 0x4ff8 <LCD_vidLatch+0x264>
    4ffc:	9c 83       	std	Y+4, r25	; 0x04
    4ffe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5000:	8d 81       	ldd	r24, Y+5	; 0x05
    5002:	9e 81       	ldd	r25, Y+6	; 0x06
    5004:	01 97       	sbiw	r24, 0x01	; 1
    5006:	9e 83       	std	Y+6, r25	; 0x06
    5008:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    500a:	8d 81       	ldd	r24, Y+5	; 0x05
    500c:	9e 81       	ldd	r25, Y+6	; 0x06
    500e:	00 97       	sbiw	r24, 0x00	; 0
    5010:	69 f7       	brne	.-38     	; 0x4fec <LCD_vidLatch+0x258>
    5012:	14 c0       	rjmp	.+40     	; 0x503c <LCD_vidLatch+0x2a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5014:	6f 81       	ldd	r22, Y+7	; 0x07
    5016:	78 85       	ldd	r23, Y+8	; 0x08
    5018:	89 85       	ldd	r24, Y+9	; 0x09
    501a:	9a 85       	ldd	r25, Y+10	; 0x0a
    501c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5020:	dc 01       	movw	r26, r24
    5022:	cb 01       	movw	r24, r22
    5024:	9e 83       	std	Y+6, r25	; 0x06
    5026:	8d 83       	std	Y+5, r24	; 0x05
    5028:	8d 81       	ldd	r24, Y+5	; 0x05
    502a:	9e 81       	ldd	r25, Y+6	; 0x06
    502c:	9a 83       	std	Y+2, r25	; 0x02
    502e:	89 83       	std	Y+1, r24	; 0x01
    5030:	89 81       	ldd	r24, Y+1	; 0x01
    5032:	9a 81       	ldd	r25, Y+2	; 0x02
    5034:	01 97       	sbiw	r24, 0x01	; 1
    5036:	f1 f7       	brne	.-4      	; 0x5034 <LCD_vidLatch+0x2a0>
    5038:	9a 83       	std	Y+2, r25	; 0x02
    503a:	89 83       	std	Y+1, r24	; 0x01

		// solve prob of freq of atmega bigger than lcd (appear in real time)
		_delay_ms(10);
}
    503c:	6d 96       	adiw	r28, 0x1d	; 29
    503e:	0f b6       	in	r0, 0x3f	; 63
    5040:	f8 94       	cli
    5042:	de bf       	out	0x3e, r29	; 62
    5044:	0f be       	out	0x3f, r0	; 63
    5046:	cd bf       	out	0x3d, r28	; 61
    5048:	cf 91       	pop	r28
    504a:	df 91       	pop	r29
    504c:	08 95       	ret

0000504e <LCD_invidSendCommand>:

static inline void LCD_invidSendCommand(u8 Copy_u8Command)
{
    504e:	df 93       	push	r29
    5050:	cf 93       	push	r28
    5052:	cd b7       	in	r28, 0x3d	; 61
    5054:	de b7       	in	r29, 0x3e	; 62
    5056:	2f 97       	sbiw	r28, 0x0f	; 15
    5058:	0f b6       	in	r0, 0x3f	; 63
    505a:	f8 94       	cli
    505c:	de bf       	out	0x3e, r29	; 62
    505e:	0f be       	out	0x3f, r0	; 63
    5060:	cd bf       	out	0x3d, r28	; 61
    5062:	8f 87       	std	Y+15, r24	; 0x0f

	//set RS as command
	DIO_enuSetPinValue(RS_PORT,RS_PIN,DIO_u8LOW);
    5064:	81 e0       	ldi	r24, 0x01	; 1
    5066:	60 e0       	ldi	r22, 0x00	; 0
    5068:	40 e0       	ldi	r20, 0x00	; 0
    506a:	0e 94 8f 1a 	call	0x351e	; 0x351e <DIO_enuSetPinValue>
	//set EN as low
	DIO_enuSetPinValue(EN_PORT,EN_PIN,DIO_u8LOW);
    506e:	81 e0       	ldi	r24, 0x01	; 1
    5070:	62 e0       	ldi	r22, 0x02	; 2
    5072:	40 e0       	ldi	r20, 0x00	; 0
    5074:	0e 94 8f 1a 	call	0x351e	; 0x351e <DIO_enuSetPinValue>
	//set RW as write operation
	DIO_enuSetPinValue(RW_PORT,RW_PIN,DIO_u8LOW);
    5078:	81 e0       	ldi	r24, 0x01	; 1
    507a:	61 e0       	ldi	r22, 0x01	; 1
    507c:	40 e0       	ldi	r20, 0x00	; 0
    507e:	0e 94 8f 1a 	call	0x351e	; 0x351e <DIO_enuSetPinValue>
	//write data
	DIO_enuSetPinValue(D7_PORT,D7_PIN,((Copy_u8Command>>7)&LCD_MASK_BIT));
    5082:	8f 85       	ldd	r24, Y+15	; 0x0f
    5084:	98 2f       	mov	r25, r24
    5086:	99 1f       	adc	r25, r25
    5088:	99 27       	eor	r25, r25
    508a:	99 1f       	adc	r25, r25
    508c:	81 e0       	ldi	r24, 0x01	; 1
    508e:	63 e0       	ldi	r22, 0x03	; 3
    5090:	49 2f       	mov	r20, r25
    5092:	0e 94 8f 1a 	call	0x351e	; 0x351e <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT,D6_PIN,((Copy_u8Command>>6)&LCD_MASK_BIT));
    5096:	8f 85       	ldd	r24, Y+15	; 0x0f
    5098:	82 95       	swap	r24
    509a:	86 95       	lsr	r24
    509c:	86 95       	lsr	r24
    509e:	83 70       	andi	r24, 0x03	; 3
    50a0:	98 2f       	mov	r25, r24
    50a2:	91 70       	andi	r25, 0x01	; 1
    50a4:	80 e0       	ldi	r24, 0x00	; 0
    50a6:	66 e0       	ldi	r22, 0x06	; 6
    50a8:	49 2f       	mov	r20, r25
    50aa:	0e 94 8f 1a 	call	0x351e	; 0x351e <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT,D5_PIN,((Copy_u8Command>>5)&LCD_MASK_BIT));
    50ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    50b0:	82 95       	swap	r24
    50b2:	86 95       	lsr	r24
    50b4:	87 70       	andi	r24, 0x07	; 7
    50b6:	98 2f       	mov	r25, r24
    50b8:	91 70       	andi	r25, 0x01	; 1
    50ba:	80 e0       	ldi	r24, 0x00	; 0
    50bc:	65 e0       	ldi	r22, 0x05	; 5
    50be:	49 2f       	mov	r20, r25
    50c0:	0e 94 8f 1a 	call	0x351e	; 0x351e <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_PORT,D4_PIN,((Copy_u8Command>>4)&LCD_MASK_BIT));
    50c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    50c6:	82 95       	swap	r24
    50c8:	8f 70       	andi	r24, 0x0F	; 15
    50ca:	98 2f       	mov	r25, r24
    50cc:	91 70       	andi	r25, 0x01	; 1
    50ce:	80 e0       	ldi	r24, 0x00	; 0
    50d0:	64 e0       	ldi	r22, 0x04	; 4
    50d2:	49 2f       	mov	r20, r25
    50d4:	0e 94 8f 1a 	call	0x351e	; 0x351e <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D3_PORT,D3_PIN,((Copy_u8Command>>3)&LCD_MASK_BIT));
    50d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    50da:	86 95       	lsr	r24
    50dc:	86 95       	lsr	r24
    50de:	86 95       	lsr	r24
    50e0:	98 2f       	mov	r25, r24
    50e2:	91 70       	andi	r25, 0x01	; 1
    50e4:	80 e0       	ldi	r24, 0x00	; 0
    50e6:	63 e0       	ldi	r22, 0x03	; 3
    50e8:	49 2f       	mov	r20, r25
    50ea:	0e 94 8f 1a 	call	0x351e	; 0x351e <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D2_PORT,D2_PIN,((Copy_u8Command>>2)&LCD_MASK_BIT));
    50ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    50f0:	86 95       	lsr	r24
    50f2:	86 95       	lsr	r24
    50f4:	98 2f       	mov	r25, r24
    50f6:	91 70       	andi	r25, 0x01	; 1
    50f8:	80 e0       	ldi	r24, 0x00	; 0
    50fa:	62 e0       	ldi	r22, 0x02	; 2
    50fc:	49 2f       	mov	r20, r25
    50fe:	0e 94 8f 1a 	call	0x351e	; 0x351e <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D1_PORT,D1_PIN,((Copy_u8Command>>1)&LCD_MASK_BIT));
    5102:	8f 85       	ldd	r24, Y+15	; 0x0f
    5104:	86 95       	lsr	r24
    5106:	98 2f       	mov	r25, r24
    5108:	91 70       	andi	r25, 0x01	; 1
    510a:	80 e0       	ldi	r24, 0x00	; 0
    510c:	61 e0       	ldi	r22, 0x01	; 1
    510e:	49 2f       	mov	r20, r25
    5110:	0e 94 8f 1a 	call	0x351e	; 0x351e <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D0_PORT,D0_PIN,((Copy_u8Command>>0)&LCD_MASK_BIT));
    5114:	8f 85       	ldd	r24, Y+15	; 0x0f
    5116:	98 2f       	mov	r25, r24
    5118:	91 70       	andi	r25, 0x01	; 1
    511a:	80 e0       	ldi	r24, 0x00	; 0
    511c:	60 e0       	ldi	r22, 0x00	; 0
    511e:	49 2f       	mov	r20, r25
    5120:	0e 94 8f 1a 	call	0x351e	; 0x351e <DIO_enuSetPinValue>

	//enable latch
	DIO_enuSetPinValue(EN_PORT,EN_PIN,DIO_u8HIGH);
    5124:	81 e0       	ldi	r24, 0x01	; 1
    5126:	62 e0       	ldi	r22, 0x02	; 2
    5128:	41 e0       	ldi	r20, 0x01	; 1
    512a:	0e 94 8f 1a 	call	0x351e	; 0x351e <DIO_enuSetPinValue>
    512e:	80 e0       	ldi	r24, 0x00	; 0
    5130:	90 e0       	ldi	r25, 0x00	; 0
    5132:	a0 e2       	ldi	r26, 0x20	; 32
    5134:	b1 e4       	ldi	r27, 0x41	; 65
    5136:	8b 87       	std	Y+11, r24	; 0x0b
    5138:	9c 87       	std	Y+12, r25	; 0x0c
    513a:	ad 87       	std	Y+13, r26	; 0x0d
    513c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    513e:	6b 85       	ldd	r22, Y+11	; 0x0b
    5140:	7c 85       	ldd	r23, Y+12	; 0x0c
    5142:	8d 85       	ldd	r24, Y+13	; 0x0d
    5144:	9e 85       	ldd	r25, Y+14	; 0x0e
    5146:	20 e0       	ldi	r18, 0x00	; 0
    5148:	30 e0       	ldi	r19, 0x00	; 0
    514a:	4a ef       	ldi	r20, 0xFA	; 250
    514c:	54 e4       	ldi	r21, 0x44	; 68
    514e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5152:	dc 01       	movw	r26, r24
    5154:	cb 01       	movw	r24, r22
    5156:	8f 83       	std	Y+7, r24	; 0x07
    5158:	98 87       	std	Y+8, r25	; 0x08
    515a:	a9 87       	std	Y+9, r26	; 0x09
    515c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    515e:	6f 81       	ldd	r22, Y+7	; 0x07
    5160:	78 85       	ldd	r23, Y+8	; 0x08
    5162:	89 85       	ldd	r24, Y+9	; 0x09
    5164:	9a 85       	ldd	r25, Y+10	; 0x0a
    5166:	20 e0       	ldi	r18, 0x00	; 0
    5168:	30 e0       	ldi	r19, 0x00	; 0
    516a:	40 e8       	ldi	r20, 0x80	; 128
    516c:	5f e3       	ldi	r21, 0x3F	; 63
    516e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    5172:	88 23       	and	r24, r24
    5174:	2c f4       	brge	.+10     	; 0x5180 <LCD_invidSendCommand+0x132>
		__ticks = 1;
    5176:	81 e0       	ldi	r24, 0x01	; 1
    5178:	90 e0       	ldi	r25, 0x00	; 0
    517a:	9e 83       	std	Y+6, r25	; 0x06
    517c:	8d 83       	std	Y+5, r24	; 0x05
    517e:	3f c0       	rjmp	.+126    	; 0x51fe <LCD_invidSendCommand+0x1b0>
	else if (__tmp > 65535)
    5180:	6f 81       	ldd	r22, Y+7	; 0x07
    5182:	78 85       	ldd	r23, Y+8	; 0x08
    5184:	89 85       	ldd	r24, Y+9	; 0x09
    5186:	9a 85       	ldd	r25, Y+10	; 0x0a
    5188:	20 e0       	ldi	r18, 0x00	; 0
    518a:	3f ef       	ldi	r19, 0xFF	; 255
    518c:	4f e7       	ldi	r20, 0x7F	; 127
    518e:	57 e4       	ldi	r21, 0x47	; 71
    5190:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    5194:	18 16       	cp	r1, r24
    5196:	4c f5       	brge	.+82     	; 0x51ea <LCD_invidSendCommand+0x19c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5198:	6b 85       	ldd	r22, Y+11	; 0x0b
    519a:	7c 85       	ldd	r23, Y+12	; 0x0c
    519c:	8d 85       	ldd	r24, Y+13	; 0x0d
    519e:	9e 85       	ldd	r25, Y+14	; 0x0e
    51a0:	20 e0       	ldi	r18, 0x00	; 0
    51a2:	30 e0       	ldi	r19, 0x00	; 0
    51a4:	40 e2       	ldi	r20, 0x20	; 32
    51a6:	51 e4       	ldi	r21, 0x41	; 65
    51a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    51ac:	dc 01       	movw	r26, r24
    51ae:	cb 01       	movw	r24, r22
    51b0:	bc 01       	movw	r22, r24
    51b2:	cd 01       	movw	r24, r26
    51b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    51b8:	dc 01       	movw	r26, r24
    51ba:	cb 01       	movw	r24, r22
    51bc:	9e 83       	std	Y+6, r25	; 0x06
    51be:	8d 83       	std	Y+5, r24	; 0x05
    51c0:	0f c0       	rjmp	.+30     	; 0x51e0 <LCD_invidSendCommand+0x192>
    51c2:	88 ec       	ldi	r24, 0xC8	; 200
    51c4:	90 e0       	ldi	r25, 0x00	; 0
    51c6:	9c 83       	std	Y+4, r25	; 0x04
    51c8:	8b 83       	std	Y+3, r24	; 0x03
    51ca:	8b 81       	ldd	r24, Y+3	; 0x03
    51cc:	9c 81       	ldd	r25, Y+4	; 0x04
    51ce:	01 97       	sbiw	r24, 0x01	; 1
    51d0:	f1 f7       	brne	.-4      	; 0x51ce <LCD_invidSendCommand+0x180>
    51d2:	9c 83       	std	Y+4, r25	; 0x04
    51d4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    51d6:	8d 81       	ldd	r24, Y+5	; 0x05
    51d8:	9e 81       	ldd	r25, Y+6	; 0x06
    51da:	01 97       	sbiw	r24, 0x01	; 1
    51dc:	9e 83       	std	Y+6, r25	; 0x06
    51de:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    51e0:	8d 81       	ldd	r24, Y+5	; 0x05
    51e2:	9e 81       	ldd	r25, Y+6	; 0x06
    51e4:	00 97       	sbiw	r24, 0x00	; 0
    51e6:	69 f7       	brne	.-38     	; 0x51c2 <LCD_invidSendCommand+0x174>
    51e8:	14 c0       	rjmp	.+40     	; 0x5212 <LCD_invidSendCommand+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    51ea:	6f 81       	ldd	r22, Y+7	; 0x07
    51ec:	78 85       	ldd	r23, Y+8	; 0x08
    51ee:	89 85       	ldd	r24, Y+9	; 0x09
    51f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    51f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    51f6:	dc 01       	movw	r26, r24
    51f8:	cb 01       	movw	r24, r22
    51fa:	9e 83       	std	Y+6, r25	; 0x06
    51fc:	8d 83       	std	Y+5, r24	; 0x05
    51fe:	8d 81       	ldd	r24, Y+5	; 0x05
    5200:	9e 81       	ldd	r25, Y+6	; 0x06
    5202:	9a 83       	std	Y+2, r25	; 0x02
    5204:	89 83       	std	Y+1, r24	; 0x01
    5206:	89 81       	ldd	r24, Y+1	; 0x01
    5208:	9a 81       	ldd	r25, Y+2	; 0x02
    520a:	01 97       	sbiw	r24, 0x01	; 1
    520c:	f1 f7       	brne	.-4      	; 0x520a <LCD_invidSendCommand+0x1bc>
    520e:	9a 83       	std	Y+2, r25	; 0x02
    5210:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	DIO_enuSetPinValue(EN_PORT,EN_PIN,DIO_u8LOW);
    5212:	81 e0       	ldi	r24, 0x01	; 1
    5214:	62 e0       	ldi	r22, 0x02	; 2
    5216:	40 e0       	ldi	r20, 0x00	; 0
    5218:	0e 94 8f 1a 	call	0x351e	; 0x351e <DIO_enuSetPinValue>


}
    521c:	2f 96       	adiw	r28, 0x0f	; 15
    521e:	0f b6       	in	r0, 0x3f	; 63
    5220:	f8 94       	cli
    5222:	de bf       	out	0x3e, r29	; 62
    5224:	0f be       	out	0x3f, r0	; 63
    5226:	cd bf       	out	0x3d, r28	; 61
    5228:	cf 91       	pop	r28
    522a:	df 91       	pop	r29
    522c:	08 95       	ret

0000522e <LCD_enuClearLcd>:

ES_t LCD_enuClearLcd()
{
    522e:	df 93       	push	r29
    5230:	cf 93       	push	r28
    5232:	0f 92       	push	r0
    5234:	cd b7       	in	r28, 0x3d	; 61
    5236:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
    5238:	19 82       	std	Y+1, r1	; 0x01

	Local_enuErrorState=LCD_enuSendCommand(CLEAR_DISPLAY);
    523a:	81 e0       	ldi	r24, 0x01	; 1
    523c:	0e 94 fd 24 	call	0x49fa	; 0x49fa <LCD_enuSendCommand>
    5240:	89 83       	std	Y+1, r24	; 0x01


	return Local_enuErrorState;
    5242:	89 81       	ldd	r24, Y+1	; 0x01
}
    5244:	0f 90       	pop	r0
    5246:	cf 91       	pop	r28
    5248:	df 91       	pop	r29
    524a:	08 95       	ret

0000524c <HC_05_enuInit>:
#include "HC-05_config.h"
#include "HC-05_private.h"


ES_t HC_05_enuInit(void)
{
    524c:	df 93       	push	r29
    524e:	cf 93       	push	r28
    5250:	0f 92       	push	r0
    5252:	cd b7       	in	r28, 0x3d	; 61
    5254:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
    5256:	19 82       	std	Y+1, r1	; 0x01
	/*Set USART pins directions*/
	DIO_enuSetPinDirection(DIO_u8PORTD , DIO_u8PIN0 , DIO_u8INPUT);
    5258:	83 e0       	ldi	r24, 0x03	; 3
    525a:	60 e0       	ldi	r22, 0x00	; 0
    525c:	40 e0       	ldi	r20, 0x00	; 0
    525e:	0e 94 a3 19 	call	0x3346	; 0x3346 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(DIO_u8PORTD , DIO_u8PIN1 , DIO_u8OUTPUT);
    5262:	83 e0       	ldi	r24, 0x03	; 3
    5264:	61 e0       	ldi	r22, 0x01	; 1
    5266:	41 e0       	ldi	r20, 0x01	; 1
    5268:	0e 94 a3 19 	call	0x3346	; 0x3346 <DIO_enuSetPinDirection>
	/*USART Initialization */
	Local_enuErrorState = USART_enuInit();
    526c:	0e 94 47 07 	call	0xe8e	; 0xe8e <USART_enuInit>
    5270:	89 83       	std	Y+1, r24	; 0x01
	Local_enuErrorState =USART_enuEnableReceiver();
    5272:	0e 94 cc 08 	call	0x1198	; 0x1198 <USART_enuEnableReceiver>
    5276:	89 83       	std	Y+1, r24	; 0x01
	Local_enuErrorState =USART_enuEnableTransmitter();
    5278:	0e 94 b8 08 	call	0x1170	; 0x1170 <USART_enuEnableTransmitter>
    527c:	89 83       	std	Y+1, r24	; 0x01
   return Local_enuErrorState;
    527e:	89 81       	ldd	r24, Y+1	; 0x01
}
    5280:	0f 90       	pop	r0
    5282:	cf 91       	pop	r28
    5284:	df 91       	pop	r29
    5286:	08 95       	ret

00005288 <HC_05_enuRecieveString>:

ES_t HC_05_enuRecieveString(u8 *Copy_pcData)
{
    5288:	df 93       	push	r29
    528a:	cf 93       	push	r28
    528c:	00 d0       	rcall	.+0      	; 0x528e <HC_05_enuRecieveString+0x6>
    528e:	0f 92       	push	r0
    5290:	cd b7       	in	r28, 0x3d	; 61
    5292:	de b7       	in	r29, 0x3e	; 62
    5294:	9b 83       	std	Y+3, r25	; 0x03
    5296:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    5298:	19 82       	std	Y+1, r1	; 0x01

	Local_enuErrorState = USART_enuRecieveString(Copy_pcData);
    529a:	8a 81       	ldd	r24, Y+2	; 0x02
    529c:	9b 81       	ldd	r25, Y+3	; 0x03
    529e:	0e 94 0d 08 	call	0x101a	; 0x101a <USART_enuRecieveString>
    52a2:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    52a4:	89 81       	ldd	r24, Y+1	; 0x01

}
    52a6:	0f 90       	pop	r0
    52a8:	0f 90       	pop	r0
    52aa:	0f 90       	pop	r0
    52ac:	cf 91       	pop	r28
    52ae:	df 91       	pop	r29
    52b0:	08 95       	ret

000052b2 <HC_05_enuSendString>:
ES_t HC_05_enuSendString(const u8 *Copy_pcData)
{
    52b2:	df 93       	push	r29
    52b4:	cf 93       	push	r28
    52b6:	00 d0       	rcall	.+0      	; 0x52b8 <HC_05_enuSendString+0x6>
    52b8:	0f 92       	push	r0
    52ba:	cd b7       	in	r28, 0x3d	; 61
    52bc:	de b7       	in	r29, 0x3e	; 62
    52be:	9b 83       	std	Y+3, r25	; 0x03
    52c0:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    52c2:	19 82       	std	Y+1, r1	; 0x01

	Local_enuErrorState = USART_enuSendString(Copy_pcData);
    52c4:	8a 81       	ldd	r24, Y+2	; 0x02
    52c6:	9b 81       	ldd	r25, Y+3	; 0x03
    52c8:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <USART_enuSendString>
    52cc:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    52ce:	89 81       	ldd	r24, Y+1	; 0x01
}
    52d0:	0f 90       	pop	r0
    52d2:	0f 90       	pop	r0
    52d4:	0f 90       	pop	r0
    52d6:	cf 91       	pop	r28
    52d8:	df 91       	pop	r29
    52da:	08 95       	ret

000052dc <HC_05_enuSendChar>:

ES_t HC_05_enuSendChar(u8 Copy_u8data)
{
    52dc:	df 93       	push	r29
    52de:	cf 93       	push	r28
    52e0:	00 d0       	rcall	.+0      	; 0x52e2 <HC_05_enuSendChar+0x6>
    52e2:	cd b7       	in	r28, 0x3d	; 61
    52e4:	de b7       	in	r29, 0x3e	; 62
    52e6:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    52e8:	19 82       	std	Y+1, r1	; 0x01

	Local_enuErrorState = USART_enuSendChar(Copy_u8data);
    52ea:	8a 81       	ldd	r24, Y+2	; 0x02
    52ec:	0e 94 a1 07 	call	0xf42	; 0xf42 <USART_enuSendChar>
    52f0:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    52f2:	89 81       	ldd	r24, Y+1	; 0x01

}
    52f4:	0f 90       	pop	r0
    52f6:	0f 90       	pop	r0
    52f8:	cf 91       	pop	r28
    52fa:	df 91       	pop	r29
    52fc:	08 95       	ret

000052fe <HC_05_enuRecieveChar>:
ES_t HC_05_enuRecieveChar(u8 *Copy_pu8data)
{
    52fe:	df 93       	push	r29
    5300:	cf 93       	push	r28
    5302:	00 d0       	rcall	.+0      	; 0x5304 <HC_05_enuRecieveChar+0x6>
    5304:	0f 92       	push	r0
    5306:	cd b7       	in	r28, 0x3d	; 61
    5308:	de b7       	in	r29, 0x3e	; 62
    530a:	9b 83       	std	Y+3, r25	; 0x03
    530c:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    530e:	19 82       	std	Y+1, r1	; 0x01

	Local_enuErrorState = USART_enuRecieveChar(Copy_pu8data);
    5310:	8a 81       	ldd	r24, Y+2	; 0x02
    5312:	9b 81       	ldd	r25, Y+3	; 0x03
    5314:	0e 94 bd 07 	call	0xf7a	; 0xf7a <USART_enuRecieveChar>
    5318:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    531a:	89 81       	ldd	r24, Y+1	; 0x01

}
    531c:	0f 90       	pop	r0
    531e:	0f 90       	pop	r0
    5320:	0f 90       	pop	r0
    5322:	cf 91       	pop	r28
    5324:	df 91       	pop	r29
    5326:	08 95       	ret

00005328 <EEPROM_enuInit>:
#include "EEPROM_config.h"
#include "EEPROM_priv.h"


ES_t EEPROM_enuInit(void)
{
    5328:	df 93       	push	r29
    532a:	cf 93       	push	r28
    532c:	0f 92       	push	r0
    532e:	cd b7       	in	r28, 0x3d	; 61
    5330:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
    5332:	19 82       	std	Y+1, r1	; 0x01

	Local_enuErrorState=IIC_enuInit();
    5334:	0e 94 72 12 	call	0x24e4	; 0x24e4 <IIC_enuInit>
    5338:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    533a:	89 81       	ldd	r24, Y+1	; 0x01
}
    533c:	0f 90       	pop	r0
    533e:	cf 91       	pop	r28
    5340:	df 91       	pop	r29
    5342:	08 95       	ret

00005344 <EEPROM_enuWriteData>:

ES_t EEPROM_enuWriteData(u16 Copy_u16Address , u8 Copy_u8Data)
{
    5344:	df 93       	push	r29
    5346:	cf 93       	push	r28
    5348:	00 d0       	rcall	.+0      	; 0x534a <EEPROM_enuWriteData+0x6>
    534a:	00 d0       	rcall	.+0      	; 0x534c <EEPROM_enuWriteData+0x8>
    534c:	00 d0       	rcall	.+0      	; 0x534e <EEPROM_enuWriteData+0xa>
    534e:	cd b7       	in	r28, 0x3d	; 61
    5350:	de b7       	in	r29, 0x3e	; 62
    5352:	9d 83       	std	Y+5, r25	; 0x05
    5354:	8c 83       	std	Y+4, r24	; 0x04
    5356:	6e 83       	std	Y+6, r22	; 0x06
	ES_t Local_enuErrorState=ES_NOK;
    5358:	1b 82       	std	Y+3, r1	; 0x03
	{
		Local_enuErrorState=ES_OUT_OF_RANGE;
	}

#elif EEPROM_TYPE==TWO_KBIT
	if(Copy_u16Address<1024 && EEPROM_A2_STATE<2 && EEPROM_A1_STATE<2 && EEPROM_A0_STATE<2 )
    535a:	8c 81       	ldd	r24, Y+4	; 0x04
    535c:	9d 81       	ldd	r25, Y+5	; 0x05
    535e:	24 e0       	ldi	r18, 0x04	; 4
    5360:	80 30       	cpi	r24, 0x00	; 0
    5362:	92 07       	cpc	r25, r18
    5364:	28 f4       	brcc	.+10     	; 0x5370 <EEPROM_enuWriteData+0x2c>
	{
		Local_u8Address =( (0xA0 | (EEPROM_A2_STATE<<3) | (EEPROM_A1_STATE<<2) | (EEPROM_A1_STATE<<1) )>>1 );
    5366:	87 e5       	ldi	r24, 0x57	; 87
    5368:	8a 83       	std	Y+2, r24	; 0x02
		Local_u8ByteAddress= (u8) Copy_u16Address;
    536a:	8c 81       	ldd	r24, Y+4	; 0x04
    536c:	89 83       	std	Y+1, r24	; 0x01
    536e:	02 c0       	rjmp	.+4      	; 0x5374 <EEPROM_enuWriteData+0x30>
	}
	else
	{
		Local_enuErrorState=ES_OUT_OF_RANGE;
    5370:	83 e0       	ldi	r24, 0x03	; 3
    5372:	8b 83       	std	Y+3, r24	; 0x03

#error "EEPROM Type selection is wrong"
#endif


	if(ES_OK==IIC_enuStartCondition())
    5374:	0e 94 aa 12 	call	0x2554	; 0x2554 <IIC_enuStartCondition>
    5378:	81 30       	cpi	r24, 0x01	; 1
    537a:	99 f4       	brne	.+38     	; 0x53a2 <EEPROM_enuWriteData+0x5e>
	{
		if(ES_OK==IIC_enuWriteSlaveAddress(Local_u8Address,0))
    537c:	8a 81       	ldd	r24, Y+2	; 0x02
    537e:	60 e0       	ldi	r22, 0x00	; 0
    5380:	0e 94 2c 13 	call	0x2658	; 0x2658 <IIC_enuWriteSlaveAddress>
    5384:	81 30       	cpi	r24, 0x01	; 1
    5386:	69 f4       	brne	.+26     	; 0x53a2 <EEPROM_enuWriteData+0x5e>
		{
			if(ES_OK==IIC_enuWriteData(Local_u8ByteAddress))
    5388:	89 81       	ldd	r24, Y+1	; 0x01
    538a:	0e 94 81 13 	call	0x2702	; 0x2702 <IIC_enuWriteData>
    538e:	81 30       	cpi	r24, 0x01	; 1
    5390:	41 f4       	brne	.+16     	; 0x53a2 <EEPROM_enuWriteData+0x5e>
			{
				if(ES_OK==IIC_enuWriteData(Copy_u8Data))
    5392:	8e 81       	ldd	r24, Y+6	; 0x06
    5394:	0e 94 81 13 	call	0x2702	; 0x2702 <IIC_enuWriteData>
    5398:	81 30       	cpi	r24, 0x01	; 1
    539a:	19 f4       	brne	.+6      	; 0x53a2 <EEPROM_enuWriteData+0x5e>
				{
					Local_enuErrorState=IIC_enuStopCondition();
    539c:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <IIC_enuStopCondition>
    53a0:	8b 83       	std	Y+3, r24	; 0x03
				}
			}
		}
	}

	return Local_enuErrorState;
    53a2:	8b 81       	ldd	r24, Y+3	; 0x03
}
    53a4:	26 96       	adiw	r28, 0x06	; 6
    53a6:	0f b6       	in	r0, 0x3f	; 63
    53a8:	f8 94       	cli
    53aa:	de bf       	out	0x3e, r29	; 62
    53ac:	0f be       	out	0x3f, r0	; 63
    53ae:	cd bf       	out	0x3d, r28	; 61
    53b0:	cf 91       	pop	r28
    53b2:	df 91       	pop	r29
    53b4:	08 95       	ret

000053b6 <EEPROM_enuReadData>:

ES_t EEPROM_enuReadData(u16 Copy_u16Address , u8 *Copy_u8Data)
{
    53b6:	df 93       	push	r29
    53b8:	cf 93       	push	r28
    53ba:	cd b7       	in	r28, 0x3d	; 61
    53bc:	de b7       	in	r29, 0x3e	; 62
    53be:	27 97       	sbiw	r28, 0x07	; 7
    53c0:	0f b6       	in	r0, 0x3f	; 63
    53c2:	f8 94       	cli
    53c4:	de bf       	out	0x3e, r29	; 62
    53c6:	0f be       	out	0x3f, r0	; 63
    53c8:	cd bf       	out	0x3d, r28	; 61
    53ca:	9d 83       	std	Y+5, r25	; 0x05
    53cc:	8c 83       	std	Y+4, r24	; 0x04
    53ce:	7f 83       	std	Y+7, r23	; 0x07
    53d0:	6e 83       	std	Y+6, r22	; 0x06
	ES_t Local_enuErrorState=ES_NOK;
    53d2:	1b 82       	std	Y+3, r1	; 0x03
	{
		Local_enuErrorState=ES_OUT_OF_RANGE;
	}

#elif EEPROM_TYPE==TWO_KBIT
	if(Copy_u16Address<1024 && EEPROM_A2_STATE<2 && EEPROM_A1_STATE<2 && EEPROM_A0_STATE<2 )
    53d4:	8c 81       	ldd	r24, Y+4	; 0x04
    53d6:	9d 81       	ldd	r25, Y+5	; 0x05
    53d8:	24 e0       	ldi	r18, 0x04	; 4
    53da:	80 30       	cpi	r24, 0x00	; 0
    53dc:	92 07       	cpc	r25, r18
    53de:	28 f4       	brcc	.+10     	; 0x53ea <EEPROM_enuReadData+0x34>
	{
		Local_u8Address =( (0xA0 | (EEPROM_A2_STATE<<3) | (EEPROM_A1_STATE<<2) | (EEPROM_A1_STATE<<1) )>>1 );
    53e0:	87 e5       	ldi	r24, 0x57	; 87
    53e2:	8a 83       	std	Y+2, r24	; 0x02
		Local_u8ByteAddress= (u8) Copy_u16Address;
    53e4:	8c 81       	ldd	r24, Y+4	; 0x04
    53e6:	89 83       	std	Y+1, r24	; 0x01
    53e8:	02 c0       	rjmp	.+4      	; 0x53ee <EEPROM_enuReadData+0x38>
	}
	else
	{
		Local_enuErrorState=ES_OUT_OF_RANGE;
    53ea:	83 e0       	ldi	r24, 0x03	; 3
    53ec:	8b 83       	std	Y+3, r24	; 0x03
#else

#error "EEPROM Type selection is wrong"
#endif

	if(ES_OK==IIC_enuStartCondition())
    53ee:	0e 94 aa 12 	call	0x2554	; 0x2554 <IIC_enuStartCondition>
    53f2:	81 30       	cpi	r24, 0x01	; 1
    53f4:	f1 f4       	brne	.+60     	; 0x5432 <EEPROM_enuReadData+0x7c>
	{
		if(ES_OK==IIC_enuWriteSlaveAddress(Local_u8Address,0))
    53f6:	8a 81       	ldd	r24, Y+2	; 0x02
    53f8:	60 e0       	ldi	r22, 0x00	; 0
    53fa:	0e 94 2c 13 	call	0x2658	; 0x2658 <IIC_enuWriteSlaveAddress>
    53fe:	81 30       	cpi	r24, 0x01	; 1
    5400:	c1 f4       	brne	.+48     	; 0x5432 <EEPROM_enuReadData+0x7c>
		{
			if(ES_OK==IIC_enuWriteData(Local_u8ByteAddress))
    5402:	89 81       	ldd	r24, Y+1	; 0x01
    5404:	0e 94 81 13 	call	0x2702	; 0x2702 <IIC_enuWriteData>
    5408:	81 30       	cpi	r24, 0x01	; 1
    540a:	99 f4       	brne	.+38     	; 0x5432 <EEPROM_enuReadData+0x7c>
			{
				if(ES_OK==IIC_enuRepeatedStartCondition())
    540c:	0e 94 ca 12 	call	0x2594	; 0x2594 <IIC_enuRepeatedStartCondition>
    5410:	81 30       	cpi	r24, 0x01	; 1
    5412:	79 f4       	brne	.+30     	; 0x5432 <EEPROM_enuReadData+0x7c>
				{
					if(ES_OK==IIC_enuWriteSlaveAddress(Local_u8Address,1))
    5414:	8a 81       	ldd	r24, Y+2	; 0x02
    5416:	61 e0       	ldi	r22, 0x01	; 1
    5418:	0e 94 2c 13 	call	0x2658	; 0x2658 <IIC_enuWriteSlaveAddress>
    541c:	81 30       	cpi	r24, 0x01	; 1
    541e:	49 f4       	brne	.+18     	; 0x5432 <EEPROM_enuReadData+0x7c>
					{
						if(ES_OK==IIC_enuReadData(Copy_u8Data))
    5420:	8e 81       	ldd	r24, Y+6	; 0x06
    5422:	9f 81       	ldd	r25, Y+7	; 0x07
    5424:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <IIC_enuReadData>
    5428:	81 30       	cpi	r24, 0x01	; 1
    542a:	19 f4       	brne	.+6      	; 0x5432 <EEPROM_enuReadData+0x7c>
						{
							Local_enuErrorState=IIC_enuStopCondition();
    542c:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <IIC_enuStopCondition>
    5430:	8b 83       	std	Y+3, r24	; 0x03
			}
		}
	}


	return Local_enuErrorState;
    5432:	8b 81       	ldd	r24, Y+3	; 0x03
}
    5434:	27 96       	adiw	r28, 0x07	; 7
    5436:	0f b6       	in	r0, 0x3f	; 63
    5438:	f8 94       	cli
    543a:	de bf       	out	0x3e, r29	; 62
    543c:	0f be       	out	0x3f, r0	; 63
    543e:	cd bf       	out	0x3d, r28	; 61
    5440:	cf 91       	pop	r28
    5442:	df 91       	pop	r29
    5444:	08 95       	ret

00005446 <DC_Motor_enuInit>:
#include "DC_priv.h"



ES_t DC_Motor_enuInit(DC_MOTOR_t *Copy_PStrMotorConfig)
{
    5446:	df 93       	push	r29
    5448:	cf 93       	push	r28
    544a:	00 d0       	rcall	.+0      	; 0x544c <DC_Motor_enuInit+0x6>
    544c:	00 d0       	rcall	.+0      	; 0x544e <DC_Motor_enuInit+0x8>
    544e:	cd b7       	in	r28, 0x3d	; 61
    5450:	de b7       	in	r29, 0x3e	; 62
    5452:	9c 83       	std	Y+4, r25	; 0x04
    5454:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState=ES_NOK;
    5456:	1a 82       	std	Y+2, r1	; 0x02

	if(Copy_PStrMotorConfig != NULL)
    5458:	8b 81       	ldd	r24, Y+3	; 0x03
    545a:	9c 81       	ldd	r25, Y+4	; 0x04
    545c:	00 97       	sbiw	r24, 0x00	; 0
    545e:	09 f4       	brne	.+2      	; 0x5462 <DC_Motor_enuInit+0x1c>
    5460:	92 c0       	rjmp	.+292    	; 0x5586 <DC_Motor_enuInit+0x140>
	{
		u8  Local_u8Iterator;

		for(Local_u8Iterator = 0 ; Local_u8Iterator < DC_MOTOR_NUM ; Local_u8Iterator++)
    5462:	19 82       	std	Y+1, r1	; 0x01
    5464:	8b c0       	rjmp	.+278    	; 0x557c <DC_Motor_enuInit+0x136>
		{

			Local_enuErrorState = DIO_enuSetPinDirection(Copy_PStrMotorConfig[Local_u8Iterator].DC_MOTOR_CW_PORT , Copy_PStrMotorConfig[Local_u8Iterator].DC_MOTOR_CW_PIN , DIO_u8OUTPUT);
    5466:	89 81       	ldd	r24, Y+1	; 0x01
    5468:	88 2f       	mov	r24, r24
    546a:	90 e0       	ldi	r25, 0x00	; 0
    546c:	9c 01       	movw	r18, r24
    546e:	22 0f       	add	r18, r18
    5470:	33 1f       	adc	r19, r19
    5472:	22 0f       	add	r18, r18
    5474:	33 1f       	adc	r19, r19
    5476:	8b 81       	ldd	r24, Y+3	; 0x03
    5478:	9c 81       	ldd	r25, Y+4	; 0x04
    547a:	fc 01       	movw	r30, r24
    547c:	e2 0f       	add	r30, r18
    547e:	f3 1f       	adc	r31, r19
    5480:	40 81       	ld	r20, Z
    5482:	89 81       	ldd	r24, Y+1	; 0x01
    5484:	88 2f       	mov	r24, r24
    5486:	90 e0       	ldi	r25, 0x00	; 0
    5488:	9c 01       	movw	r18, r24
    548a:	22 0f       	add	r18, r18
    548c:	33 1f       	adc	r19, r19
    548e:	22 0f       	add	r18, r18
    5490:	33 1f       	adc	r19, r19
    5492:	8b 81       	ldd	r24, Y+3	; 0x03
    5494:	9c 81       	ldd	r25, Y+4	; 0x04
    5496:	fc 01       	movw	r30, r24
    5498:	e2 0f       	add	r30, r18
    549a:	f3 1f       	adc	r31, r19
    549c:	91 81       	ldd	r25, Z+1	; 0x01
    549e:	84 2f       	mov	r24, r20
    54a0:	69 2f       	mov	r22, r25
    54a2:	41 e0       	ldi	r20, 0x01	; 1
    54a4:	0e 94 a3 19 	call	0x3346	; 0x3346 <DIO_enuSetPinDirection>
    54a8:	8a 83       	std	Y+2, r24	; 0x02
			Local_enuErrorState = DIO_enuSetPinDirection(Copy_PStrMotorConfig[Local_u8Iterator].DC_MOTOR_CCW_PORT , Copy_PStrMotorConfig[Local_u8Iterator].DC_MOTOR_CCW_PIN , DIO_u8OUTPUT);
    54aa:	89 81       	ldd	r24, Y+1	; 0x01
    54ac:	88 2f       	mov	r24, r24
    54ae:	90 e0       	ldi	r25, 0x00	; 0
    54b0:	9c 01       	movw	r18, r24
    54b2:	22 0f       	add	r18, r18
    54b4:	33 1f       	adc	r19, r19
    54b6:	22 0f       	add	r18, r18
    54b8:	33 1f       	adc	r19, r19
    54ba:	8b 81       	ldd	r24, Y+3	; 0x03
    54bc:	9c 81       	ldd	r25, Y+4	; 0x04
    54be:	fc 01       	movw	r30, r24
    54c0:	e2 0f       	add	r30, r18
    54c2:	f3 1f       	adc	r31, r19
    54c4:	42 81       	ldd	r20, Z+2	; 0x02
    54c6:	89 81       	ldd	r24, Y+1	; 0x01
    54c8:	88 2f       	mov	r24, r24
    54ca:	90 e0       	ldi	r25, 0x00	; 0
    54cc:	9c 01       	movw	r18, r24
    54ce:	22 0f       	add	r18, r18
    54d0:	33 1f       	adc	r19, r19
    54d2:	22 0f       	add	r18, r18
    54d4:	33 1f       	adc	r19, r19
    54d6:	8b 81       	ldd	r24, Y+3	; 0x03
    54d8:	9c 81       	ldd	r25, Y+4	; 0x04
    54da:	fc 01       	movw	r30, r24
    54dc:	e2 0f       	add	r30, r18
    54de:	f3 1f       	adc	r31, r19
    54e0:	93 81       	ldd	r25, Z+3	; 0x03
    54e2:	84 2f       	mov	r24, r20
    54e4:	69 2f       	mov	r22, r25
    54e6:	41 e0       	ldi	r20, 0x01	; 1
    54e8:	0e 94 a3 19 	call	0x3346	; 0x3346 <DIO_enuSetPinDirection>
    54ec:	8a 83       	std	Y+2, r24	; 0x02
			Local_enuErrorState = DIO_enuSetPinValue(Copy_PStrMotorConfig[Local_u8Iterator].DC_MOTOR_CW_PORT , Copy_PStrMotorConfig[Local_u8Iterator].DC_MOTOR_CW_PIN , DIO_u8LOW);
    54ee:	89 81       	ldd	r24, Y+1	; 0x01
    54f0:	88 2f       	mov	r24, r24
    54f2:	90 e0       	ldi	r25, 0x00	; 0
    54f4:	9c 01       	movw	r18, r24
    54f6:	22 0f       	add	r18, r18
    54f8:	33 1f       	adc	r19, r19
    54fa:	22 0f       	add	r18, r18
    54fc:	33 1f       	adc	r19, r19
    54fe:	8b 81       	ldd	r24, Y+3	; 0x03
    5500:	9c 81       	ldd	r25, Y+4	; 0x04
    5502:	fc 01       	movw	r30, r24
    5504:	e2 0f       	add	r30, r18
    5506:	f3 1f       	adc	r31, r19
    5508:	40 81       	ld	r20, Z
    550a:	89 81       	ldd	r24, Y+1	; 0x01
    550c:	88 2f       	mov	r24, r24
    550e:	90 e0       	ldi	r25, 0x00	; 0
    5510:	9c 01       	movw	r18, r24
    5512:	22 0f       	add	r18, r18
    5514:	33 1f       	adc	r19, r19
    5516:	22 0f       	add	r18, r18
    5518:	33 1f       	adc	r19, r19
    551a:	8b 81       	ldd	r24, Y+3	; 0x03
    551c:	9c 81       	ldd	r25, Y+4	; 0x04
    551e:	fc 01       	movw	r30, r24
    5520:	e2 0f       	add	r30, r18
    5522:	f3 1f       	adc	r31, r19
    5524:	91 81       	ldd	r25, Z+1	; 0x01
    5526:	84 2f       	mov	r24, r20
    5528:	69 2f       	mov	r22, r25
    552a:	40 e0       	ldi	r20, 0x00	; 0
    552c:	0e 94 8f 1a 	call	0x351e	; 0x351e <DIO_enuSetPinValue>
    5530:	8a 83       	std	Y+2, r24	; 0x02
			Local_enuErrorState = DIO_enuSetPinValue(Copy_PStrMotorConfig[Local_u8Iterator].DC_MOTOR_CCW_PORT , Copy_PStrMotorConfig[Local_u8Iterator].DC_MOTOR_CCW_PIN , DIO_u8LOW);
    5532:	89 81       	ldd	r24, Y+1	; 0x01
    5534:	88 2f       	mov	r24, r24
    5536:	90 e0       	ldi	r25, 0x00	; 0
    5538:	9c 01       	movw	r18, r24
    553a:	22 0f       	add	r18, r18
    553c:	33 1f       	adc	r19, r19
    553e:	22 0f       	add	r18, r18
    5540:	33 1f       	adc	r19, r19
    5542:	8b 81       	ldd	r24, Y+3	; 0x03
    5544:	9c 81       	ldd	r25, Y+4	; 0x04
    5546:	fc 01       	movw	r30, r24
    5548:	e2 0f       	add	r30, r18
    554a:	f3 1f       	adc	r31, r19
    554c:	42 81       	ldd	r20, Z+2	; 0x02
    554e:	89 81       	ldd	r24, Y+1	; 0x01
    5550:	88 2f       	mov	r24, r24
    5552:	90 e0       	ldi	r25, 0x00	; 0
    5554:	9c 01       	movw	r18, r24
    5556:	22 0f       	add	r18, r18
    5558:	33 1f       	adc	r19, r19
    555a:	22 0f       	add	r18, r18
    555c:	33 1f       	adc	r19, r19
    555e:	8b 81       	ldd	r24, Y+3	; 0x03
    5560:	9c 81       	ldd	r25, Y+4	; 0x04
    5562:	fc 01       	movw	r30, r24
    5564:	e2 0f       	add	r30, r18
    5566:	f3 1f       	adc	r31, r19
    5568:	93 81       	ldd	r25, Z+3	; 0x03
    556a:	84 2f       	mov	r24, r20
    556c:	69 2f       	mov	r22, r25
    556e:	40 e0       	ldi	r20, 0x00	; 0
    5570:	0e 94 8f 1a 	call	0x351e	; 0x351e <DIO_enuSetPinValue>
    5574:	8a 83       	std	Y+2, r24	; 0x02

	if(Copy_PStrMotorConfig != NULL)
	{
		u8  Local_u8Iterator;

		for(Local_u8Iterator = 0 ; Local_u8Iterator < DC_MOTOR_NUM ; Local_u8Iterator++)
    5576:	89 81       	ldd	r24, Y+1	; 0x01
    5578:	8f 5f       	subi	r24, 0xFF	; 255
    557a:	89 83       	std	Y+1, r24	; 0x01
    557c:	89 81       	ldd	r24, Y+1	; 0x01
    557e:	82 30       	cpi	r24, 0x02	; 2
    5580:	08 f4       	brcc	.+2      	; 0x5584 <DC_Motor_enuInit+0x13e>
    5582:	71 cf       	rjmp	.-286    	; 0x5466 <DC_Motor_enuInit+0x20>
    5584:	02 c0       	rjmp	.+4      	; 0x558a <DC_Motor_enuInit+0x144>
			Local_enuErrorState = DIO_enuSetPinValue(Copy_PStrMotorConfig[Local_u8Iterator].DC_MOTOR_CCW_PORT , Copy_PStrMotorConfig[Local_u8Iterator].DC_MOTOR_CCW_PIN , DIO_u8LOW);
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    5586:	82 e0       	ldi	r24, 0x02	; 2
    5588:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_enuErrorState;
    558a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    558c:	0f 90       	pop	r0
    558e:	0f 90       	pop	r0
    5590:	0f 90       	pop	r0
    5592:	0f 90       	pop	r0
    5594:	cf 91       	pop	r28
    5596:	df 91       	pop	r29
    5598:	08 95       	ret

0000559a <DC_Motor_enuRotate>:
ES_t DC_Motor_enuRotate(DC_MOTOR_t *Copy_PStrMotor_ID,u8 Copy_u8Direction)
{
    559a:	df 93       	push	r29
    559c:	cf 93       	push	r28
    559e:	cd b7       	in	r28, 0x3d	; 61
    55a0:	de b7       	in	r29, 0x3e	; 62
    55a2:	a2 97       	sbiw	r28, 0x22	; 34
    55a4:	0f b6       	in	r0, 0x3f	; 63
    55a6:	f8 94       	cli
    55a8:	de bf       	out	0x3e, r29	; 62
    55aa:	0f be       	out	0x3f, r0	; 63
    55ac:	cd bf       	out	0x3d, r28	; 61
    55ae:	9f 8f       	std	Y+31, r25	; 0x1f
    55b0:	8e 8f       	std	Y+30, r24	; 0x1e
    55b2:	68 a3       	std	Y+32, r22	; 0x20
	ES_t Local_enuErrorState=ES_NOK;
    55b4:	1d 8e       	std	Y+29, r1	; 0x1d

	if(Copy_PStrMotor_ID != NULL)
    55b6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    55b8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    55ba:	00 97       	sbiw	r24, 0x00	; 0
    55bc:	09 f4       	brne	.+2      	; 0x55c0 <DC_Motor_enuRotate+0x26>
    55be:	22 c1       	rjmp	.+580    	; 0x5804 <DC_Motor_enuRotate+0x26a>
	{
		switch(Copy_u8Direction)
    55c0:	88 a1       	ldd	r24, Y+32	; 0x20
    55c2:	28 2f       	mov	r18, r24
    55c4:	30 e0       	ldi	r19, 0x00	; 0
    55c6:	3a a3       	std	Y+34, r19	; 0x22
    55c8:	29 a3       	std	Y+33, r18	; 0x21
    55ca:	89 a1       	ldd	r24, Y+33	; 0x21
    55cc:	9a a1       	ldd	r25, Y+34	; 0x22
    55ce:	00 97       	sbiw	r24, 0x00	; 0
    55d0:	39 f0       	breq	.+14     	; 0x55e0 <DC_Motor_enuRotate+0x46>
    55d2:	29 a1       	ldd	r18, Y+33	; 0x21
    55d4:	3a a1       	ldd	r19, Y+34	; 0x22
    55d6:	21 30       	cpi	r18, 0x01	; 1
    55d8:	31 05       	cpc	r19, r1
    55da:	09 f4       	brne	.+2      	; 0x55de <DC_Motor_enuRotate+0x44>
    55dc:	8a c0       	rjmp	.+276    	; 0x56f2 <DC_Motor_enuRotate+0x158>
    55de:	14 c1       	rjmp	.+552    	; 0x5808 <DC_Motor_enuRotate+0x26e>
		{
		case MOTOR_CW:
			Local_enuErrorState  = DIO_enuSetPinValue(Copy_PStrMotor_ID->DC_MOTOR_CCW_PORT , Copy_PStrMotor_ID->DC_MOTOR_CCW_PIN , DIO_u8LOW);
    55e0:	ee 8d       	ldd	r30, Y+30	; 0x1e
    55e2:	ff 8d       	ldd	r31, Y+31	; 0x1f
    55e4:	82 81       	ldd	r24, Z+2	; 0x02
    55e6:	ee 8d       	ldd	r30, Y+30	; 0x1e
    55e8:	ff 8d       	ldd	r31, Y+31	; 0x1f
    55ea:	93 81       	ldd	r25, Z+3	; 0x03
    55ec:	69 2f       	mov	r22, r25
    55ee:	40 e0       	ldi	r20, 0x00	; 0
    55f0:	0e 94 8f 1a 	call	0x351e	; 0x351e <DIO_enuSetPinValue>
    55f4:	8d 8f       	std	Y+29, r24	; 0x1d
    55f6:	80 e0       	ldi	r24, 0x00	; 0
    55f8:	90 e0       	ldi	r25, 0x00	; 0
    55fa:	a0 e8       	ldi	r26, 0x80	; 128
    55fc:	bf e3       	ldi	r27, 0x3F	; 63
    55fe:	89 8f       	std	Y+25, r24	; 0x19
    5600:	9a 8f       	std	Y+26, r25	; 0x1a
    5602:	ab 8f       	std	Y+27, r26	; 0x1b
    5604:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5606:	69 8d       	ldd	r22, Y+25	; 0x19
    5608:	7a 8d       	ldd	r23, Y+26	; 0x1a
    560a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    560c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    560e:	20 e0       	ldi	r18, 0x00	; 0
    5610:	30 e0       	ldi	r19, 0x00	; 0
    5612:	4a ef       	ldi	r20, 0xFA	; 250
    5614:	54 e4       	ldi	r21, 0x44	; 68
    5616:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    561a:	dc 01       	movw	r26, r24
    561c:	cb 01       	movw	r24, r22
    561e:	8d 8b       	std	Y+21, r24	; 0x15
    5620:	9e 8b       	std	Y+22, r25	; 0x16
    5622:	af 8b       	std	Y+23, r26	; 0x17
    5624:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5626:	6d 89       	ldd	r22, Y+21	; 0x15
    5628:	7e 89       	ldd	r23, Y+22	; 0x16
    562a:	8f 89       	ldd	r24, Y+23	; 0x17
    562c:	98 8d       	ldd	r25, Y+24	; 0x18
    562e:	20 e0       	ldi	r18, 0x00	; 0
    5630:	30 e0       	ldi	r19, 0x00	; 0
    5632:	40 e8       	ldi	r20, 0x80	; 128
    5634:	5f e3       	ldi	r21, 0x3F	; 63
    5636:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    563a:	88 23       	and	r24, r24
    563c:	2c f4       	brge	.+10     	; 0x5648 <DC_Motor_enuRotate+0xae>
		__ticks = 1;
    563e:	81 e0       	ldi	r24, 0x01	; 1
    5640:	90 e0       	ldi	r25, 0x00	; 0
    5642:	9c 8b       	std	Y+20, r25	; 0x14
    5644:	8b 8b       	std	Y+19, r24	; 0x13
    5646:	3f c0       	rjmp	.+126    	; 0x56c6 <DC_Motor_enuRotate+0x12c>
	else if (__tmp > 65535)
    5648:	6d 89       	ldd	r22, Y+21	; 0x15
    564a:	7e 89       	ldd	r23, Y+22	; 0x16
    564c:	8f 89       	ldd	r24, Y+23	; 0x17
    564e:	98 8d       	ldd	r25, Y+24	; 0x18
    5650:	20 e0       	ldi	r18, 0x00	; 0
    5652:	3f ef       	ldi	r19, 0xFF	; 255
    5654:	4f e7       	ldi	r20, 0x7F	; 127
    5656:	57 e4       	ldi	r21, 0x47	; 71
    5658:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    565c:	18 16       	cp	r1, r24
    565e:	4c f5       	brge	.+82     	; 0x56b2 <DC_Motor_enuRotate+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5660:	69 8d       	ldd	r22, Y+25	; 0x19
    5662:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5664:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5666:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5668:	20 e0       	ldi	r18, 0x00	; 0
    566a:	30 e0       	ldi	r19, 0x00	; 0
    566c:	40 e2       	ldi	r20, 0x20	; 32
    566e:	51 e4       	ldi	r21, 0x41	; 65
    5670:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5674:	dc 01       	movw	r26, r24
    5676:	cb 01       	movw	r24, r22
    5678:	bc 01       	movw	r22, r24
    567a:	cd 01       	movw	r24, r26
    567c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5680:	dc 01       	movw	r26, r24
    5682:	cb 01       	movw	r24, r22
    5684:	9c 8b       	std	Y+20, r25	; 0x14
    5686:	8b 8b       	std	Y+19, r24	; 0x13
    5688:	0f c0       	rjmp	.+30     	; 0x56a8 <DC_Motor_enuRotate+0x10e>
    568a:	88 ec       	ldi	r24, 0xC8	; 200
    568c:	90 e0       	ldi	r25, 0x00	; 0
    568e:	9a 8b       	std	Y+18, r25	; 0x12
    5690:	89 8b       	std	Y+17, r24	; 0x11
    5692:	89 89       	ldd	r24, Y+17	; 0x11
    5694:	9a 89       	ldd	r25, Y+18	; 0x12
    5696:	01 97       	sbiw	r24, 0x01	; 1
    5698:	f1 f7       	brne	.-4      	; 0x5696 <DC_Motor_enuRotate+0xfc>
    569a:	9a 8b       	std	Y+18, r25	; 0x12
    569c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    569e:	8b 89       	ldd	r24, Y+19	; 0x13
    56a0:	9c 89       	ldd	r25, Y+20	; 0x14
    56a2:	01 97       	sbiw	r24, 0x01	; 1
    56a4:	9c 8b       	std	Y+20, r25	; 0x14
    56a6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    56a8:	8b 89       	ldd	r24, Y+19	; 0x13
    56aa:	9c 89       	ldd	r25, Y+20	; 0x14
    56ac:	00 97       	sbiw	r24, 0x00	; 0
    56ae:	69 f7       	brne	.-38     	; 0x568a <DC_Motor_enuRotate+0xf0>
    56b0:	14 c0       	rjmp	.+40     	; 0x56da <DC_Motor_enuRotate+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    56b2:	6d 89       	ldd	r22, Y+21	; 0x15
    56b4:	7e 89       	ldd	r23, Y+22	; 0x16
    56b6:	8f 89       	ldd	r24, Y+23	; 0x17
    56b8:	98 8d       	ldd	r25, Y+24	; 0x18
    56ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    56be:	dc 01       	movw	r26, r24
    56c0:	cb 01       	movw	r24, r22
    56c2:	9c 8b       	std	Y+20, r25	; 0x14
    56c4:	8b 8b       	std	Y+19, r24	; 0x13
    56c6:	8b 89       	ldd	r24, Y+19	; 0x13
    56c8:	9c 89       	ldd	r25, Y+20	; 0x14
    56ca:	98 8b       	std	Y+16, r25	; 0x10
    56cc:	8f 87       	std	Y+15, r24	; 0x0f
    56ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    56d0:	98 89       	ldd	r25, Y+16	; 0x10
    56d2:	01 97       	sbiw	r24, 0x01	; 1
    56d4:	f1 f7       	brne	.-4      	; 0x56d2 <DC_Motor_enuRotate+0x138>
    56d6:	98 8b       	std	Y+16, r25	; 0x10
    56d8:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1);
			Local_enuErrorState  = DIO_enuSetPinValue(Copy_PStrMotor_ID->DC_MOTOR_CW_PORT , Copy_PStrMotor_ID->DC_MOTOR_CW_PIN , DIO_u8HIGH);
    56da:	ee 8d       	ldd	r30, Y+30	; 0x1e
    56dc:	ff 8d       	ldd	r31, Y+31	; 0x1f
    56de:	80 81       	ld	r24, Z
    56e0:	ee 8d       	ldd	r30, Y+30	; 0x1e
    56e2:	ff 8d       	ldd	r31, Y+31	; 0x1f
    56e4:	91 81       	ldd	r25, Z+1	; 0x01
    56e6:	69 2f       	mov	r22, r25
    56e8:	41 e0       	ldi	r20, 0x01	; 1
    56ea:	0e 94 8f 1a 	call	0x351e	; 0x351e <DIO_enuSetPinValue>
    56ee:	8d 8f       	std	Y+29, r24	; 0x1d
    56f0:	8b c0       	rjmp	.+278    	; 0x5808 <DC_Motor_enuRotate+0x26e>
			break;
		case MOTOR_CCW:
			Local_enuErrorState  = DIO_enuSetPinValue(Copy_PStrMotor_ID->DC_MOTOR_CW_PORT , Copy_PStrMotor_ID->DC_MOTOR_CW_PIN , DIO_u8LOW);
    56f2:	ee 8d       	ldd	r30, Y+30	; 0x1e
    56f4:	ff 8d       	ldd	r31, Y+31	; 0x1f
    56f6:	80 81       	ld	r24, Z
    56f8:	ee 8d       	ldd	r30, Y+30	; 0x1e
    56fa:	ff 8d       	ldd	r31, Y+31	; 0x1f
    56fc:	91 81       	ldd	r25, Z+1	; 0x01
    56fe:	69 2f       	mov	r22, r25
    5700:	40 e0       	ldi	r20, 0x00	; 0
    5702:	0e 94 8f 1a 	call	0x351e	; 0x351e <DIO_enuSetPinValue>
    5706:	8d 8f       	std	Y+29, r24	; 0x1d
    5708:	80 e0       	ldi	r24, 0x00	; 0
    570a:	90 e0       	ldi	r25, 0x00	; 0
    570c:	a0 e8       	ldi	r26, 0x80	; 128
    570e:	bf e3       	ldi	r27, 0x3F	; 63
    5710:	8b 87       	std	Y+11, r24	; 0x0b
    5712:	9c 87       	std	Y+12, r25	; 0x0c
    5714:	ad 87       	std	Y+13, r26	; 0x0d
    5716:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5718:	6b 85       	ldd	r22, Y+11	; 0x0b
    571a:	7c 85       	ldd	r23, Y+12	; 0x0c
    571c:	8d 85       	ldd	r24, Y+13	; 0x0d
    571e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5720:	20 e0       	ldi	r18, 0x00	; 0
    5722:	30 e0       	ldi	r19, 0x00	; 0
    5724:	4a ef       	ldi	r20, 0xFA	; 250
    5726:	54 e4       	ldi	r21, 0x44	; 68
    5728:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    572c:	dc 01       	movw	r26, r24
    572e:	cb 01       	movw	r24, r22
    5730:	8f 83       	std	Y+7, r24	; 0x07
    5732:	98 87       	std	Y+8, r25	; 0x08
    5734:	a9 87       	std	Y+9, r26	; 0x09
    5736:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5738:	6f 81       	ldd	r22, Y+7	; 0x07
    573a:	78 85       	ldd	r23, Y+8	; 0x08
    573c:	89 85       	ldd	r24, Y+9	; 0x09
    573e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5740:	20 e0       	ldi	r18, 0x00	; 0
    5742:	30 e0       	ldi	r19, 0x00	; 0
    5744:	40 e8       	ldi	r20, 0x80	; 128
    5746:	5f e3       	ldi	r21, 0x3F	; 63
    5748:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    574c:	88 23       	and	r24, r24
    574e:	2c f4       	brge	.+10     	; 0x575a <DC_Motor_enuRotate+0x1c0>
		__ticks = 1;
    5750:	81 e0       	ldi	r24, 0x01	; 1
    5752:	90 e0       	ldi	r25, 0x00	; 0
    5754:	9e 83       	std	Y+6, r25	; 0x06
    5756:	8d 83       	std	Y+5, r24	; 0x05
    5758:	3f c0       	rjmp	.+126    	; 0x57d8 <DC_Motor_enuRotate+0x23e>
	else if (__tmp > 65535)
    575a:	6f 81       	ldd	r22, Y+7	; 0x07
    575c:	78 85       	ldd	r23, Y+8	; 0x08
    575e:	89 85       	ldd	r24, Y+9	; 0x09
    5760:	9a 85       	ldd	r25, Y+10	; 0x0a
    5762:	20 e0       	ldi	r18, 0x00	; 0
    5764:	3f ef       	ldi	r19, 0xFF	; 255
    5766:	4f e7       	ldi	r20, 0x7F	; 127
    5768:	57 e4       	ldi	r21, 0x47	; 71
    576a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    576e:	18 16       	cp	r1, r24
    5770:	4c f5       	brge	.+82     	; 0x57c4 <DC_Motor_enuRotate+0x22a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5772:	6b 85       	ldd	r22, Y+11	; 0x0b
    5774:	7c 85       	ldd	r23, Y+12	; 0x0c
    5776:	8d 85       	ldd	r24, Y+13	; 0x0d
    5778:	9e 85       	ldd	r25, Y+14	; 0x0e
    577a:	20 e0       	ldi	r18, 0x00	; 0
    577c:	30 e0       	ldi	r19, 0x00	; 0
    577e:	40 e2       	ldi	r20, 0x20	; 32
    5780:	51 e4       	ldi	r21, 0x41	; 65
    5782:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5786:	dc 01       	movw	r26, r24
    5788:	cb 01       	movw	r24, r22
    578a:	bc 01       	movw	r22, r24
    578c:	cd 01       	movw	r24, r26
    578e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5792:	dc 01       	movw	r26, r24
    5794:	cb 01       	movw	r24, r22
    5796:	9e 83       	std	Y+6, r25	; 0x06
    5798:	8d 83       	std	Y+5, r24	; 0x05
    579a:	0f c0       	rjmp	.+30     	; 0x57ba <DC_Motor_enuRotate+0x220>
    579c:	88 ec       	ldi	r24, 0xC8	; 200
    579e:	90 e0       	ldi	r25, 0x00	; 0
    57a0:	9c 83       	std	Y+4, r25	; 0x04
    57a2:	8b 83       	std	Y+3, r24	; 0x03
    57a4:	8b 81       	ldd	r24, Y+3	; 0x03
    57a6:	9c 81       	ldd	r25, Y+4	; 0x04
    57a8:	01 97       	sbiw	r24, 0x01	; 1
    57aa:	f1 f7       	brne	.-4      	; 0x57a8 <DC_Motor_enuRotate+0x20e>
    57ac:	9c 83       	std	Y+4, r25	; 0x04
    57ae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    57b0:	8d 81       	ldd	r24, Y+5	; 0x05
    57b2:	9e 81       	ldd	r25, Y+6	; 0x06
    57b4:	01 97       	sbiw	r24, 0x01	; 1
    57b6:	9e 83       	std	Y+6, r25	; 0x06
    57b8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    57ba:	8d 81       	ldd	r24, Y+5	; 0x05
    57bc:	9e 81       	ldd	r25, Y+6	; 0x06
    57be:	00 97       	sbiw	r24, 0x00	; 0
    57c0:	69 f7       	brne	.-38     	; 0x579c <DC_Motor_enuRotate+0x202>
    57c2:	14 c0       	rjmp	.+40     	; 0x57ec <DC_Motor_enuRotate+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    57c4:	6f 81       	ldd	r22, Y+7	; 0x07
    57c6:	78 85       	ldd	r23, Y+8	; 0x08
    57c8:	89 85       	ldd	r24, Y+9	; 0x09
    57ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    57cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    57d0:	dc 01       	movw	r26, r24
    57d2:	cb 01       	movw	r24, r22
    57d4:	9e 83       	std	Y+6, r25	; 0x06
    57d6:	8d 83       	std	Y+5, r24	; 0x05
    57d8:	8d 81       	ldd	r24, Y+5	; 0x05
    57da:	9e 81       	ldd	r25, Y+6	; 0x06
    57dc:	9a 83       	std	Y+2, r25	; 0x02
    57de:	89 83       	std	Y+1, r24	; 0x01
    57e0:	89 81       	ldd	r24, Y+1	; 0x01
    57e2:	9a 81       	ldd	r25, Y+2	; 0x02
    57e4:	01 97       	sbiw	r24, 0x01	; 1
    57e6:	f1 f7       	brne	.-4      	; 0x57e4 <DC_Motor_enuRotate+0x24a>
    57e8:	9a 83       	std	Y+2, r25	; 0x02
    57ea:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1);
			Local_enuErrorState  = DIO_enuSetPinValue(Copy_PStrMotor_ID->DC_MOTOR_CCW_PORT , Copy_PStrMotor_ID->DC_MOTOR_CCW_PIN , DIO_u8HIGH);
    57ec:	ee 8d       	ldd	r30, Y+30	; 0x1e
    57ee:	ff 8d       	ldd	r31, Y+31	; 0x1f
    57f0:	82 81       	ldd	r24, Z+2	; 0x02
    57f2:	ee 8d       	ldd	r30, Y+30	; 0x1e
    57f4:	ff 8d       	ldd	r31, Y+31	; 0x1f
    57f6:	93 81       	ldd	r25, Z+3	; 0x03
    57f8:	69 2f       	mov	r22, r25
    57fa:	41 e0       	ldi	r20, 0x01	; 1
    57fc:	0e 94 8f 1a 	call	0x351e	; 0x351e <DIO_enuSetPinValue>
    5800:	8d 8f       	std	Y+29, r24	; 0x1d
    5802:	02 c0       	rjmp	.+4      	; 0x5808 <DC_Motor_enuRotate+0x26e>
			break;
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    5804:	82 e0       	ldi	r24, 0x02	; 2
    5806:	8d 8f       	std	Y+29, r24	; 0x1d
	}



	return Local_enuErrorState;
    5808:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    580a:	a2 96       	adiw	r28, 0x22	; 34
    580c:	0f b6       	in	r0, 0x3f	; 63
    580e:	f8 94       	cli
    5810:	de bf       	out	0x3e, r29	; 62
    5812:	0f be       	out	0x3f, r0	; 63
    5814:	cd bf       	out	0x3d, r28	; 61
    5816:	cf 91       	pop	r28
    5818:	df 91       	pop	r29
    581a:	08 95       	ret

0000581c <DC_Motor_enuStop>:
ES_t DC_Motor_enuStop(DC_MOTOR_t *Copy_PStrMotor_ID)
{
    581c:	df 93       	push	r29
    581e:	cf 93       	push	r28
    5820:	cd b7       	in	r28, 0x3d	; 61
    5822:	de b7       	in	r29, 0x3e	; 62
    5824:	61 97       	sbiw	r28, 0x11	; 17
    5826:	0f b6       	in	r0, 0x3f	; 63
    5828:	f8 94       	cli
    582a:	de bf       	out	0x3e, r29	; 62
    582c:	0f be       	out	0x3f, r0	; 63
    582e:	cd bf       	out	0x3d, r28	; 61
    5830:	99 8b       	std	Y+17, r25	; 0x11
    5832:	88 8b       	std	Y+16, r24	; 0x10
	ES_t Local_enuErrorState=ES_NOK;
    5834:	1f 86       	std	Y+15, r1	; 0x0f

	if(Copy_PStrMotor_ID != NULL)
    5836:	88 89       	ldd	r24, Y+16	; 0x10
    5838:	99 89       	ldd	r25, Y+17	; 0x11
    583a:	00 97       	sbiw	r24, 0x00	; 0
    583c:	09 f4       	brne	.+2      	; 0x5840 <DC_Motor_enuStop+0x24>
    583e:	89 c0       	rjmp	.+274    	; 0x5952 <DC_Motor_enuStop+0x136>
	{
		Local_enuErrorState  = DIO_enuSetPinValue(Copy_PStrMotor_ID->DC_MOTOR_CCW_PORT , Copy_PStrMotor_ID->DC_MOTOR_CCW_PIN , DIO_u8LOW);
    5840:	e8 89       	ldd	r30, Y+16	; 0x10
    5842:	f9 89       	ldd	r31, Y+17	; 0x11
    5844:	82 81       	ldd	r24, Z+2	; 0x02
    5846:	e8 89       	ldd	r30, Y+16	; 0x10
    5848:	f9 89       	ldd	r31, Y+17	; 0x11
    584a:	93 81       	ldd	r25, Z+3	; 0x03
    584c:	69 2f       	mov	r22, r25
    584e:	40 e0       	ldi	r20, 0x00	; 0
    5850:	0e 94 8f 1a 	call	0x351e	; 0x351e <DIO_enuSetPinValue>
    5854:	8f 87       	std	Y+15, r24	; 0x0f
		Local_enuErrorState  = DIO_enuSetPinValue(Copy_PStrMotor_ID->DC_MOTOR_CW_PORT , Copy_PStrMotor_ID->DC_MOTOR_CW_PIN , DIO_u8LOW);
    5856:	e8 89       	ldd	r30, Y+16	; 0x10
    5858:	f9 89       	ldd	r31, Y+17	; 0x11
    585a:	80 81       	ld	r24, Z
    585c:	e8 89       	ldd	r30, Y+16	; 0x10
    585e:	f9 89       	ldd	r31, Y+17	; 0x11
    5860:	91 81       	ldd	r25, Z+1	; 0x01
    5862:	69 2f       	mov	r22, r25
    5864:	40 e0       	ldi	r20, 0x00	; 0
    5866:	0e 94 8f 1a 	call	0x351e	; 0x351e <DIO_enuSetPinValue>
    586a:	8f 87       	std	Y+15, r24	; 0x0f
    586c:	80 e0       	ldi	r24, 0x00	; 0
    586e:	90 e0       	ldi	r25, 0x00	; 0
    5870:	aa e7       	ldi	r26, 0x7A	; 122
    5872:	b4 e4       	ldi	r27, 0x44	; 68
    5874:	8b 87       	std	Y+11, r24	; 0x0b
    5876:	9c 87       	std	Y+12, r25	; 0x0c
    5878:	ad 87       	std	Y+13, r26	; 0x0d
    587a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    587c:	6b 85       	ldd	r22, Y+11	; 0x0b
    587e:	7c 85       	ldd	r23, Y+12	; 0x0c
    5880:	8d 85       	ldd	r24, Y+13	; 0x0d
    5882:	9e 85       	ldd	r25, Y+14	; 0x0e
    5884:	20 e0       	ldi	r18, 0x00	; 0
    5886:	30 e0       	ldi	r19, 0x00	; 0
    5888:	4a ef       	ldi	r20, 0xFA	; 250
    588a:	54 e4       	ldi	r21, 0x44	; 68
    588c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5890:	dc 01       	movw	r26, r24
    5892:	cb 01       	movw	r24, r22
    5894:	8f 83       	std	Y+7, r24	; 0x07
    5896:	98 87       	std	Y+8, r25	; 0x08
    5898:	a9 87       	std	Y+9, r26	; 0x09
    589a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    589c:	6f 81       	ldd	r22, Y+7	; 0x07
    589e:	78 85       	ldd	r23, Y+8	; 0x08
    58a0:	89 85       	ldd	r24, Y+9	; 0x09
    58a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    58a4:	20 e0       	ldi	r18, 0x00	; 0
    58a6:	30 e0       	ldi	r19, 0x00	; 0
    58a8:	40 e8       	ldi	r20, 0x80	; 128
    58aa:	5f e3       	ldi	r21, 0x3F	; 63
    58ac:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    58b0:	88 23       	and	r24, r24
    58b2:	2c f4       	brge	.+10     	; 0x58be <DC_Motor_enuStop+0xa2>
		__ticks = 1;
    58b4:	81 e0       	ldi	r24, 0x01	; 1
    58b6:	90 e0       	ldi	r25, 0x00	; 0
    58b8:	9e 83       	std	Y+6, r25	; 0x06
    58ba:	8d 83       	std	Y+5, r24	; 0x05
    58bc:	3f c0       	rjmp	.+126    	; 0x593c <DC_Motor_enuStop+0x120>
	else if (__tmp > 65535)
    58be:	6f 81       	ldd	r22, Y+7	; 0x07
    58c0:	78 85       	ldd	r23, Y+8	; 0x08
    58c2:	89 85       	ldd	r24, Y+9	; 0x09
    58c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    58c6:	20 e0       	ldi	r18, 0x00	; 0
    58c8:	3f ef       	ldi	r19, 0xFF	; 255
    58ca:	4f e7       	ldi	r20, 0x7F	; 127
    58cc:	57 e4       	ldi	r21, 0x47	; 71
    58ce:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    58d2:	18 16       	cp	r1, r24
    58d4:	4c f5       	brge	.+82     	; 0x5928 <DC_Motor_enuStop+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    58d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    58d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    58da:	8d 85       	ldd	r24, Y+13	; 0x0d
    58dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    58de:	20 e0       	ldi	r18, 0x00	; 0
    58e0:	30 e0       	ldi	r19, 0x00	; 0
    58e2:	40 e2       	ldi	r20, 0x20	; 32
    58e4:	51 e4       	ldi	r21, 0x41	; 65
    58e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    58ea:	dc 01       	movw	r26, r24
    58ec:	cb 01       	movw	r24, r22
    58ee:	bc 01       	movw	r22, r24
    58f0:	cd 01       	movw	r24, r26
    58f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    58f6:	dc 01       	movw	r26, r24
    58f8:	cb 01       	movw	r24, r22
    58fa:	9e 83       	std	Y+6, r25	; 0x06
    58fc:	8d 83       	std	Y+5, r24	; 0x05
    58fe:	0f c0       	rjmp	.+30     	; 0x591e <DC_Motor_enuStop+0x102>
    5900:	88 ec       	ldi	r24, 0xC8	; 200
    5902:	90 e0       	ldi	r25, 0x00	; 0
    5904:	9c 83       	std	Y+4, r25	; 0x04
    5906:	8b 83       	std	Y+3, r24	; 0x03
    5908:	8b 81       	ldd	r24, Y+3	; 0x03
    590a:	9c 81       	ldd	r25, Y+4	; 0x04
    590c:	01 97       	sbiw	r24, 0x01	; 1
    590e:	f1 f7       	brne	.-4      	; 0x590c <DC_Motor_enuStop+0xf0>
    5910:	9c 83       	std	Y+4, r25	; 0x04
    5912:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5914:	8d 81       	ldd	r24, Y+5	; 0x05
    5916:	9e 81       	ldd	r25, Y+6	; 0x06
    5918:	01 97       	sbiw	r24, 0x01	; 1
    591a:	9e 83       	std	Y+6, r25	; 0x06
    591c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    591e:	8d 81       	ldd	r24, Y+5	; 0x05
    5920:	9e 81       	ldd	r25, Y+6	; 0x06
    5922:	00 97       	sbiw	r24, 0x00	; 0
    5924:	69 f7       	brne	.-38     	; 0x5900 <DC_Motor_enuStop+0xe4>
    5926:	17 c0       	rjmp	.+46     	; 0x5956 <DC_Motor_enuStop+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5928:	6f 81       	ldd	r22, Y+7	; 0x07
    592a:	78 85       	ldd	r23, Y+8	; 0x08
    592c:	89 85       	ldd	r24, Y+9	; 0x09
    592e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5930:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5934:	dc 01       	movw	r26, r24
    5936:	cb 01       	movw	r24, r22
    5938:	9e 83       	std	Y+6, r25	; 0x06
    593a:	8d 83       	std	Y+5, r24	; 0x05
    593c:	8d 81       	ldd	r24, Y+5	; 0x05
    593e:	9e 81       	ldd	r25, Y+6	; 0x06
    5940:	9a 83       	std	Y+2, r25	; 0x02
    5942:	89 83       	std	Y+1, r24	; 0x01
    5944:	89 81       	ldd	r24, Y+1	; 0x01
    5946:	9a 81       	ldd	r25, Y+2	; 0x02
    5948:	01 97       	sbiw	r24, 0x01	; 1
    594a:	f1 f7       	brne	.-4      	; 0x5948 <DC_Motor_enuStop+0x12c>
    594c:	9a 83       	std	Y+2, r25	; 0x02
    594e:	89 83       	std	Y+1, r24	; 0x01
    5950:	02 c0       	rjmp	.+4      	; 0x5956 <DC_Motor_enuStop+0x13a>
		_delay_ms(1000);
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    5952:	82 e0       	ldi	r24, 0x02	; 2
    5954:	8f 87       	std	Y+15, r24	; 0x0f
	}

	return Local_enuErrorState;
    5956:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    5958:	61 96       	adiw	r28, 0x11	; 17
    595a:	0f b6       	in	r0, 0x3f	; 63
    595c:	f8 94       	cli
    595e:	de bf       	out	0x3e, r29	; 62
    5960:	0f be       	out	0x3f, r0	; 63
    5962:	cd bf       	out	0x3d, r28	; 61
    5964:	cf 91       	pop	r28
    5966:	df 91       	pop	r29
    5968:	08 95       	ret

0000596a <BUZZER_enuInit>:
#include "BUZZER_priv.h"

extern BUZZER_t BUZZER_AstrBuzzerConfig[BUZZER_NUM];

ES_t BUZZER_enuInit(BUZZER_t *Copy_pAstrBuzzerConfig)
{
    596a:	df 93       	push	r29
    596c:	cf 93       	push	r28
    596e:	00 d0       	rcall	.+0      	; 0x5970 <BUZZER_enuInit+0x6>
    5970:	00 d0       	rcall	.+0      	; 0x5972 <BUZZER_enuInit+0x8>
    5972:	cd b7       	in	r28, 0x3d	; 61
    5974:	de b7       	in	r29, 0x3e	; 62
    5976:	9c 83       	std	Y+4, r25	; 0x04
    5978:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    597a:	1a 82       	std	Y+2, r1	; 0x02

	if(Copy_pAstrBuzzerConfig != NULL)
    597c:	8b 81       	ldd	r24, Y+3	; 0x03
    597e:	9c 81       	ldd	r25, Y+4	; 0x04
    5980:	00 97       	sbiw	r24, 0x00	; 0
    5982:	09 f4       	brne	.+2      	; 0x5986 <BUZZER_enuInit+0x1c>
    5984:	93 c0       	rjmp	.+294    	; 0x5aac <BUZZER_enuInit+0x142>
	{
		u8 Local_u8Iterator;
		for(Local_u8Iterator = 0; Local_u8Iterator < BUZZER_NUM; Local_u8Iterator++)
    5986:	19 82       	std	Y+1, r1	; 0x01
    5988:	8c c0       	rjmp	.+280    	; 0x5aa2 <BUZZER_enuInit+0x138>
		{
			DIO_enuSetPinDirection(Copy_pAstrBuzzerConfig[Local_u8Iterator].BUZZER_u8PortID, Copy_pAstrBuzzerConfig[Local_u8Iterator].BUZZER_u8PinID, DIO_u8OUTPUT);
    598a:	89 81       	ldd	r24, Y+1	; 0x01
    598c:	28 2f       	mov	r18, r24
    598e:	30 e0       	ldi	r19, 0x00	; 0
    5990:	c9 01       	movw	r24, r18
    5992:	88 0f       	add	r24, r24
    5994:	99 1f       	adc	r25, r25
    5996:	28 0f       	add	r18, r24
    5998:	39 1f       	adc	r19, r25
    599a:	8b 81       	ldd	r24, Y+3	; 0x03
    599c:	9c 81       	ldd	r25, Y+4	; 0x04
    599e:	fc 01       	movw	r30, r24
    59a0:	e2 0f       	add	r30, r18
    59a2:	f3 1f       	adc	r31, r19
    59a4:	40 81       	ld	r20, Z
    59a6:	89 81       	ldd	r24, Y+1	; 0x01
    59a8:	28 2f       	mov	r18, r24
    59aa:	30 e0       	ldi	r19, 0x00	; 0
    59ac:	c9 01       	movw	r24, r18
    59ae:	88 0f       	add	r24, r24
    59b0:	99 1f       	adc	r25, r25
    59b2:	28 0f       	add	r18, r24
    59b4:	39 1f       	adc	r19, r25
    59b6:	8b 81       	ldd	r24, Y+3	; 0x03
    59b8:	9c 81       	ldd	r25, Y+4	; 0x04
    59ba:	fc 01       	movw	r30, r24
    59bc:	e2 0f       	add	r30, r18
    59be:	f3 1f       	adc	r31, r19
    59c0:	91 81       	ldd	r25, Z+1	; 0x01
    59c2:	84 2f       	mov	r24, r20
    59c4:	69 2f       	mov	r22, r25
    59c6:	41 e0       	ldi	r20, 0x01	; 1
    59c8:	0e 94 a3 19 	call	0x3346	; 0x3346 <DIO_enuSetPinDirection>
			if(Copy_pAstrBuzzerConfig[Local_u8Iterator].BUZZER_u8InitState == BUZZER_u8ON)
    59cc:	89 81       	ldd	r24, Y+1	; 0x01
    59ce:	28 2f       	mov	r18, r24
    59d0:	30 e0       	ldi	r19, 0x00	; 0
    59d2:	c9 01       	movw	r24, r18
    59d4:	88 0f       	add	r24, r24
    59d6:	99 1f       	adc	r25, r25
    59d8:	28 0f       	add	r18, r24
    59da:	39 1f       	adc	r19, r25
    59dc:	8b 81       	ldd	r24, Y+3	; 0x03
    59de:	9c 81       	ldd	r25, Y+4	; 0x04
    59e0:	fc 01       	movw	r30, r24
    59e2:	e2 0f       	add	r30, r18
    59e4:	f3 1f       	adc	r31, r19
    59e6:	82 81       	ldd	r24, Z+2	; 0x02
    59e8:	8a 30       	cpi	r24, 0x0A	; 10
    59ea:	19 f5       	brne	.+70     	; 0x5a32 <BUZZER_enuInit+0xc8>
			{
				Local_enuErrorState =DIO_enuSetPinValue(Copy_pAstrBuzzerConfig[Local_u8Iterator].BUZZER_u8PortID, Copy_pAstrBuzzerConfig[Local_u8Iterator].BUZZER_u8PinID, DIO_u8HIGH);
    59ec:	89 81       	ldd	r24, Y+1	; 0x01
    59ee:	28 2f       	mov	r18, r24
    59f0:	30 e0       	ldi	r19, 0x00	; 0
    59f2:	c9 01       	movw	r24, r18
    59f4:	88 0f       	add	r24, r24
    59f6:	99 1f       	adc	r25, r25
    59f8:	28 0f       	add	r18, r24
    59fa:	39 1f       	adc	r19, r25
    59fc:	8b 81       	ldd	r24, Y+3	; 0x03
    59fe:	9c 81       	ldd	r25, Y+4	; 0x04
    5a00:	fc 01       	movw	r30, r24
    5a02:	e2 0f       	add	r30, r18
    5a04:	f3 1f       	adc	r31, r19
    5a06:	40 81       	ld	r20, Z
    5a08:	89 81       	ldd	r24, Y+1	; 0x01
    5a0a:	28 2f       	mov	r18, r24
    5a0c:	30 e0       	ldi	r19, 0x00	; 0
    5a0e:	c9 01       	movw	r24, r18
    5a10:	88 0f       	add	r24, r24
    5a12:	99 1f       	adc	r25, r25
    5a14:	28 0f       	add	r18, r24
    5a16:	39 1f       	adc	r19, r25
    5a18:	8b 81       	ldd	r24, Y+3	; 0x03
    5a1a:	9c 81       	ldd	r25, Y+4	; 0x04
    5a1c:	fc 01       	movw	r30, r24
    5a1e:	e2 0f       	add	r30, r18
    5a20:	f3 1f       	adc	r31, r19
    5a22:	91 81       	ldd	r25, Z+1	; 0x01
    5a24:	84 2f       	mov	r24, r20
    5a26:	69 2f       	mov	r22, r25
    5a28:	41 e0       	ldi	r20, 0x01	; 1
    5a2a:	0e 94 8f 1a 	call	0x351e	; 0x351e <DIO_enuSetPinValue>
    5a2e:	8a 83       	std	Y+2, r24	; 0x02
    5a30:	35 c0       	rjmp	.+106    	; 0x5a9c <BUZZER_enuInit+0x132>
			}
			else if(Copy_pAstrBuzzerConfig[Local_u8Iterator].BUZZER_u8InitState == BUZZER_u8OFF)
    5a32:	89 81       	ldd	r24, Y+1	; 0x01
    5a34:	28 2f       	mov	r18, r24
    5a36:	30 e0       	ldi	r19, 0x00	; 0
    5a38:	c9 01       	movw	r24, r18
    5a3a:	88 0f       	add	r24, r24
    5a3c:	99 1f       	adc	r25, r25
    5a3e:	28 0f       	add	r18, r24
    5a40:	39 1f       	adc	r19, r25
    5a42:	8b 81       	ldd	r24, Y+3	; 0x03
    5a44:	9c 81       	ldd	r25, Y+4	; 0x04
    5a46:	fc 01       	movw	r30, r24
    5a48:	e2 0f       	add	r30, r18
    5a4a:	f3 1f       	adc	r31, r19
    5a4c:	82 81       	ldd	r24, Z+2	; 0x02
    5a4e:	8b 30       	cpi	r24, 0x0B	; 11
    5a50:	19 f5       	brne	.+70     	; 0x5a98 <BUZZER_enuInit+0x12e>
			{
				Local_enuErrorState = DIO_enuSetPinValue(Copy_pAstrBuzzerConfig[Local_u8Iterator].BUZZER_u8PortID, Copy_pAstrBuzzerConfig[Local_u8Iterator].BUZZER_u8PinID, DIO_u8LOW);
    5a52:	89 81       	ldd	r24, Y+1	; 0x01
    5a54:	28 2f       	mov	r18, r24
    5a56:	30 e0       	ldi	r19, 0x00	; 0
    5a58:	c9 01       	movw	r24, r18
    5a5a:	88 0f       	add	r24, r24
    5a5c:	99 1f       	adc	r25, r25
    5a5e:	28 0f       	add	r18, r24
    5a60:	39 1f       	adc	r19, r25
    5a62:	8b 81       	ldd	r24, Y+3	; 0x03
    5a64:	9c 81       	ldd	r25, Y+4	; 0x04
    5a66:	fc 01       	movw	r30, r24
    5a68:	e2 0f       	add	r30, r18
    5a6a:	f3 1f       	adc	r31, r19
    5a6c:	40 81       	ld	r20, Z
    5a6e:	89 81       	ldd	r24, Y+1	; 0x01
    5a70:	28 2f       	mov	r18, r24
    5a72:	30 e0       	ldi	r19, 0x00	; 0
    5a74:	c9 01       	movw	r24, r18
    5a76:	88 0f       	add	r24, r24
    5a78:	99 1f       	adc	r25, r25
    5a7a:	28 0f       	add	r18, r24
    5a7c:	39 1f       	adc	r19, r25
    5a7e:	8b 81       	ldd	r24, Y+3	; 0x03
    5a80:	9c 81       	ldd	r25, Y+4	; 0x04
    5a82:	fc 01       	movw	r30, r24
    5a84:	e2 0f       	add	r30, r18
    5a86:	f3 1f       	adc	r31, r19
    5a88:	91 81       	ldd	r25, Z+1	; 0x01
    5a8a:	84 2f       	mov	r24, r20
    5a8c:	69 2f       	mov	r22, r25
    5a8e:	40 e0       	ldi	r20, 0x00	; 0
    5a90:	0e 94 8f 1a 	call	0x351e	; 0x351e <DIO_enuSetPinValue>
    5a94:	8a 83       	std	Y+2, r24	; 0x02
    5a96:	02 c0       	rjmp	.+4      	; 0x5a9c <BUZZER_enuInit+0x132>
			}
			else
			{
				Local_enuErrorState = ES_OUT_OF_RANGE;
    5a98:	83 e0       	ldi	r24, 0x03	; 3
    5a9a:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;

	if(Copy_pAstrBuzzerConfig != NULL)
	{
		u8 Local_u8Iterator;
		for(Local_u8Iterator = 0; Local_u8Iterator < BUZZER_NUM; Local_u8Iterator++)
    5a9c:	89 81       	ldd	r24, Y+1	; 0x01
    5a9e:	8f 5f       	subi	r24, 0xFF	; 255
    5aa0:	89 83       	std	Y+1, r24	; 0x01
    5aa2:	89 81       	ldd	r24, Y+1	; 0x01
    5aa4:	88 23       	and	r24, r24
    5aa6:	09 f4       	brne	.+2      	; 0x5aaa <BUZZER_enuInit+0x140>
    5aa8:	70 cf       	rjmp	.-288    	; 0x598a <BUZZER_enuInit+0x20>
    5aaa:	02 c0       	rjmp	.+4      	; 0x5ab0 <BUZZER_enuInit+0x146>
			}
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    5aac:	82 e0       	ldi	r24, 0x02	; 2
    5aae:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_enuErrorState;
    5ab0:	8a 81       	ldd	r24, Y+2	; 0x02
}
    5ab2:	0f 90       	pop	r0
    5ab4:	0f 90       	pop	r0
    5ab6:	0f 90       	pop	r0
    5ab8:	0f 90       	pop	r0
    5aba:	cf 91       	pop	r28
    5abc:	df 91       	pop	r29
    5abe:	08 95       	ret

00005ac0 <BUZZER_enuTurnON>:

ES_t BUZZER_enuTurnON(u8 Copy_u8BuzzerID)
{
    5ac0:	df 93       	push	r29
    5ac2:	cf 93       	push	r28
    5ac4:	00 d0       	rcall	.+0      	; 0x5ac6 <BUZZER_enuTurnON+0x6>
    5ac6:	cd b7       	in	r28, 0x3d	; 61
    5ac8:	de b7       	in	r29, 0x3e	; 62
    5aca:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    5acc:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8BuzzerID < BUZZER_NUM)
    5ace:	8a 81       	ldd	r24, Y+2	; 0x02
    5ad0:	88 23       	and	r24, r24
    5ad2:	e1 f5       	brne	.+120    	; 0x5b4c <BUZZER_enuTurnON+0x8c>
	{
		DIO_enuSetPinDirection(BUZZER_AstrBuzzerConfig[Copy_u8BuzzerID].BUZZER_u8PortID, BUZZER_AstrBuzzerConfig[Copy_u8BuzzerID].BUZZER_u8PinID, DIO_u8OUTPUT);
    5ad4:	8a 81       	ldd	r24, Y+2	; 0x02
    5ad6:	28 2f       	mov	r18, r24
    5ad8:	30 e0       	ldi	r19, 0x00	; 0
    5ada:	c9 01       	movw	r24, r18
    5adc:	88 0f       	add	r24, r24
    5ade:	99 1f       	adc	r25, r25
    5ae0:	82 0f       	add	r24, r18
    5ae2:	93 1f       	adc	r25, r19
    5ae4:	fc 01       	movw	r30, r24
    5ae6:	e7 56       	subi	r30, 0x67	; 103
    5ae8:	f9 4f       	sbci	r31, 0xF9	; 249
    5aea:	40 81       	ld	r20, Z
    5aec:	8a 81       	ldd	r24, Y+2	; 0x02
    5aee:	28 2f       	mov	r18, r24
    5af0:	30 e0       	ldi	r19, 0x00	; 0
    5af2:	c9 01       	movw	r24, r18
    5af4:	88 0f       	add	r24, r24
    5af6:	99 1f       	adc	r25, r25
    5af8:	82 0f       	add	r24, r18
    5afa:	93 1f       	adc	r25, r19
    5afc:	fc 01       	movw	r30, r24
    5afe:	e6 56       	subi	r30, 0x66	; 102
    5b00:	f9 4f       	sbci	r31, 0xF9	; 249
    5b02:	90 81       	ld	r25, Z
    5b04:	84 2f       	mov	r24, r20
    5b06:	69 2f       	mov	r22, r25
    5b08:	41 e0       	ldi	r20, 0x01	; 1
    5b0a:	0e 94 a3 19 	call	0x3346	; 0x3346 <DIO_enuSetPinDirection>
		Local_enuErrorState = DIO_enuSetPinValue(BUZZER_AstrBuzzerConfig[Copy_u8BuzzerID].BUZZER_u8PortID, BUZZER_AstrBuzzerConfig[Copy_u8BuzzerID].BUZZER_u8PinID, DIO_u8HIGH);
    5b0e:	8a 81       	ldd	r24, Y+2	; 0x02
    5b10:	28 2f       	mov	r18, r24
    5b12:	30 e0       	ldi	r19, 0x00	; 0
    5b14:	c9 01       	movw	r24, r18
    5b16:	88 0f       	add	r24, r24
    5b18:	99 1f       	adc	r25, r25
    5b1a:	82 0f       	add	r24, r18
    5b1c:	93 1f       	adc	r25, r19
    5b1e:	fc 01       	movw	r30, r24
    5b20:	e7 56       	subi	r30, 0x67	; 103
    5b22:	f9 4f       	sbci	r31, 0xF9	; 249
    5b24:	40 81       	ld	r20, Z
    5b26:	8a 81       	ldd	r24, Y+2	; 0x02
    5b28:	28 2f       	mov	r18, r24
    5b2a:	30 e0       	ldi	r19, 0x00	; 0
    5b2c:	c9 01       	movw	r24, r18
    5b2e:	88 0f       	add	r24, r24
    5b30:	99 1f       	adc	r25, r25
    5b32:	82 0f       	add	r24, r18
    5b34:	93 1f       	adc	r25, r19
    5b36:	fc 01       	movw	r30, r24
    5b38:	e6 56       	subi	r30, 0x66	; 102
    5b3a:	f9 4f       	sbci	r31, 0xF9	; 249
    5b3c:	90 81       	ld	r25, Z
    5b3e:	84 2f       	mov	r24, r20
    5b40:	69 2f       	mov	r22, r25
    5b42:	41 e0       	ldi	r20, 0x01	; 1
    5b44:	0e 94 8f 1a 	call	0x351e	; 0x351e <DIO_enuSetPinValue>
    5b48:	89 83       	std	Y+1, r24	; 0x01
    5b4a:	02 c0       	rjmp	.+4      	; 0x5b50 <BUZZER_enuTurnON+0x90>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    5b4c:	83 e0       	ldi	r24, 0x03	; 3
    5b4e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    5b50:	89 81       	ldd	r24, Y+1	; 0x01
}
    5b52:	0f 90       	pop	r0
    5b54:	0f 90       	pop	r0
    5b56:	cf 91       	pop	r28
    5b58:	df 91       	pop	r29
    5b5a:	08 95       	ret

00005b5c <BUZZER_enuTurnOFF>:

ES_t BUZZER_enuTurnOFF(u8 Copy_u8BuzzerID)
{
    5b5c:	df 93       	push	r29
    5b5e:	cf 93       	push	r28
    5b60:	00 d0       	rcall	.+0      	; 0x5b62 <BUZZER_enuTurnOFF+0x6>
    5b62:	cd b7       	in	r28, 0x3d	; 61
    5b64:	de b7       	in	r29, 0x3e	; 62
    5b66:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    5b68:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8BuzzerID < BUZZER_NUM)
    5b6a:	8a 81       	ldd	r24, Y+2	; 0x02
    5b6c:	88 23       	and	r24, r24
    5b6e:	e1 f5       	brne	.+120    	; 0x5be8 <BUZZER_enuTurnOFF+0x8c>
	{
		DIO_enuSetPinDirection(BUZZER_AstrBuzzerConfig[Copy_u8BuzzerID].BUZZER_u8PortID, BUZZER_AstrBuzzerConfig[Copy_u8BuzzerID].BUZZER_u8PinID, DIO_u8OUTPUT);
    5b70:	8a 81       	ldd	r24, Y+2	; 0x02
    5b72:	28 2f       	mov	r18, r24
    5b74:	30 e0       	ldi	r19, 0x00	; 0
    5b76:	c9 01       	movw	r24, r18
    5b78:	88 0f       	add	r24, r24
    5b7a:	99 1f       	adc	r25, r25
    5b7c:	82 0f       	add	r24, r18
    5b7e:	93 1f       	adc	r25, r19
    5b80:	fc 01       	movw	r30, r24
    5b82:	e7 56       	subi	r30, 0x67	; 103
    5b84:	f9 4f       	sbci	r31, 0xF9	; 249
    5b86:	40 81       	ld	r20, Z
    5b88:	8a 81       	ldd	r24, Y+2	; 0x02
    5b8a:	28 2f       	mov	r18, r24
    5b8c:	30 e0       	ldi	r19, 0x00	; 0
    5b8e:	c9 01       	movw	r24, r18
    5b90:	88 0f       	add	r24, r24
    5b92:	99 1f       	adc	r25, r25
    5b94:	82 0f       	add	r24, r18
    5b96:	93 1f       	adc	r25, r19
    5b98:	fc 01       	movw	r30, r24
    5b9a:	e6 56       	subi	r30, 0x66	; 102
    5b9c:	f9 4f       	sbci	r31, 0xF9	; 249
    5b9e:	90 81       	ld	r25, Z
    5ba0:	84 2f       	mov	r24, r20
    5ba2:	69 2f       	mov	r22, r25
    5ba4:	41 e0       	ldi	r20, 0x01	; 1
    5ba6:	0e 94 a3 19 	call	0x3346	; 0x3346 <DIO_enuSetPinDirection>
		Local_enuErrorState = DIO_enuSetPinValue(BUZZER_AstrBuzzerConfig[Copy_u8BuzzerID].BUZZER_u8PortID, BUZZER_AstrBuzzerConfig[Copy_u8BuzzerID].BUZZER_u8PinID, DIO_u8LOW);
    5baa:	8a 81       	ldd	r24, Y+2	; 0x02
    5bac:	28 2f       	mov	r18, r24
    5bae:	30 e0       	ldi	r19, 0x00	; 0
    5bb0:	c9 01       	movw	r24, r18
    5bb2:	88 0f       	add	r24, r24
    5bb4:	99 1f       	adc	r25, r25
    5bb6:	82 0f       	add	r24, r18
    5bb8:	93 1f       	adc	r25, r19
    5bba:	fc 01       	movw	r30, r24
    5bbc:	e7 56       	subi	r30, 0x67	; 103
    5bbe:	f9 4f       	sbci	r31, 0xF9	; 249
    5bc0:	40 81       	ld	r20, Z
    5bc2:	8a 81       	ldd	r24, Y+2	; 0x02
    5bc4:	28 2f       	mov	r18, r24
    5bc6:	30 e0       	ldi	r19, 0x00	; 0
    5bc8:	c9 01       	movw	r24, r18
    5bca:	88 0f       	add	r24, r24
    5bcc:	99 1f       	adc	r25, r25
    5bce:	82 0f       	add	r24, r18
    5bd0:	93 1f       	adc	r25, r19
    5bd2:	fc 01       	movw	r30, r24
    5bd4:	e6 56       	subi	r30, 0x66	; 102
    5bd6:	f9 4f       	sbci	r31, 0xF9	; 249
    5bd8:	90 81       	ld	r25, Z
    5bda:	84 2f       	mov	r24, r20
    5bdc:	69 2f       	mov	r22, r25
    5bde:	40 e0       	ldi	r20, 0x00	; 0
    5be0:	0e 94 8f 1a 	call	0x351e	; 0x351e <DIO_enuSetPinValue>
    5be4:	89 83       	std	Y+1, r24	; 0x01
    5be6:	02 c0       	rjmp	.+4      	; 0x5bec <BUZZER_enuTurnOFF+0x90>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    5be8:	83 e0       	ldi	r24, 0x03	; 3
    5bea:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    5bec:	89 81       	ldd	r24, Y+1	; 0x01
}
    5bee:	0f 90       	pop	r0
    5bf0:	0f 90       	pop	r0
    5bf2:	cf 91       	pop	r28
    5bf4:	df 91       	pop	r29
    5bf6:	08 95       	ret

00005bf8 <APP_enuInit>:

/************************************************
 *Function used to initialization
 ************************************************/
ES_t APP_enuInit(void)
{
    5bf8:	df 93       	push	r29
    5bfa:	cf 93       	push	r28
    5bfc:	00 d0       	rcall	.+0      	; 0x5bfe <APP_enuInit+0x6>
    5bfe:	cd b7       	in	r28, 0x3d	; 61
    5c00:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
    5c02:	1a 82       	std	Y+2, r1	; 0x02

	Local_enuErrorState = EEPROM_enuInit();
    5c04:	0e 94 94 29 	call	0x5328	; 0x5328 <EEPROM_enuInit>
    5c08:	8a 83       	std	Y+2, r24	; 0x02
	Local_enuErrorState = HC_05_enuInit();
    5c0a:	0e 94 26 29 	call	0x524c	; 0x524c <HC_05_enuInit>
    5c0e:	8a 83       	std	Y+2, r24	; 0x02
	Local_enuErrorState = SERVO_enudInit();
    5c10:	0e 94 97 1f 	call	0x3f2e	; 0x3f2e <SERVO_enudInit>
    5c14:	8a 83       	std	Y+2, r24	; 0x02

	Local_enuErrorState = LED_enuInit(LED_AstrLedConfig);
    5c16:	83 e7       	ldi	r24, 0x73	; 115
    5c18:	96 e0       	ldi	r25, 0x06	; 6
    5c1a:	0e 94 f2 1f 	call	0x3fe4	; 0x3fe4 <LED_enuInit>
    5c1e:	8a 83       	std	Y+2, r24	; 0x02
	Local_enuErrorState= IIC_enuInit();
    5c20:	0e 94 72 12 	call	0x24e4	; 0x24e4 <IIC_enuInit>
    5c24:	8a 83       	std	Y+2, r24	; 0x02

	Local_enuErrorState= BUZZER_enuInit(BUZZER_AstrBuzzerConfig);
    5c26:	89 e9       	ldi	r24, 0x99	; 153
    5c28:	96 e0       	ldi	r25, 0x06	; 6
    5c2a:	0e 94 b5 2c 	call	0x596a	; 0x596a <BUZZER_enuInit>
    5c2e:	8a 83       	std	Y+2, r24	; 0x02
	Local_enuErrorState = LCD_enuInit();
    5c30:	0e 94 05 22 	call	0x440a	; 0x440a <LCD_enuInit>
    5c34:	8a 83       	std	Y+2, r24	; 0x02


	// SAVE USERS IN EEPROM

	for(u8 i=0;i<MAX_USERS;i++)
    5c36:	19 82       	std	Y+1, r1	; 0x01
    5c38:	11 c0       	rjmp	.+34     	; 0x5c5c <APP_enuInit+0x64>
	{

		storeUserInEEPROM(&APP_AstUsers[i],i);
    5c3a:	89 81       	ldd	r24, Y+1	; 0x01
    5c3c:	88 2f       	mov	r24, r24
    5c3e:	90 e0       	ldi	r25, 0x00	; 0
    5c40:	82 95       	swap	r24
    5c42:	92 95       	swap	r25
    5c44:	90 7f       	andi	r25, 0xF0	; 240
    5c46:	98 27       	eor	r25, r24
    5c48:	80 7f       	andi	r24, 0xF0	; 240
    5c4a:	98 27       	eor	r25, r24
    5c4c:	84 56       	subi	r24, 0x64	; 100
    5c4e:	99 4f       	sbci	r25, 0xF9	; 249
    5c50:	69 81       	ldd	r22, Y+1	; 0x01
    5c52:	0e 94 37 2e 	call	0x5c6e	; 0x5c6e <storeUserInEEPROM>
	Local_enuErrorState = LCD_enuInit();


	// SAVE USERS IN EEPROM

	for(u8 i=0;i<MAX_USERS;i++)
    5c56:	89 81       	ldd	r24, Y+1	; 0x01
    5c58:	8f 5f       	subi	r24, 0xFF	; 255
    5c5a:	89 83       	std	Y+1, r24	; 0x01
    5c5c:	89 81       	ldd	r24, Y+1	; 0x01
    5c5e:	8a 30       	cpi	r24, 0x0A	; 10
    5c60:	60 f3       	brcs	.-40     	; 0x5c3a <APP_enuInit+0x42>
	{

		storeUserInEEPROM(&APP_AstUsers[i],i);
	}

	return Local_enuErrorState;
    5c62:	8a 81       	ldd	r24, Y+2	; 0x02

}
    5c64:	0f 90       	pop	r0
    5c66:	0f 90       	pop	r0
    5c68:	cf 91       	pop	r28
    5c6a:	df 91       	pop	r29
    5c6c:	08 95       	ret

00005c6e <storeUserInEEPROM>:

/****************************************
 *  Function to store user data in EEPROM
 * ***************************************/
void storeUserInEEPROM(User_t *user, u8 userIndex)
{
    5c6e:	df 93       	push	r29
    5c70:	cf 93       	push	r28
    5c72:	cd b7       	in	r28, 0x3d	; 61
    5c74:	de b7       	in	r29, 0x3e	; 62
    5c76:	a3 97       	sbiw	r28, 0x23	; 35
    5c78:	0f b6       	in	r0, 0x3f	; 63
    5c7a:	f8 94       	cli
    5c7c:	de bf       	out	0x3e, r29	; 62
    5c7e:	0f be       	out	0x3f, r0	; 63
    5c80:	cd bf       	out	0x3d, r28	; 61
    5c82:	9a a3       	std	Y+34, r25	; 0x22
    5c84:	89 a3       	std	Y+33, r24	; 0x21
    5c86:	6b a3       	std	Y+35, r22	; 0x23
    u16 address = EEPROM_START_ADDRESS + userIndex * (USERNAME_SIZE + PASSWORD_SIZE);//example:address=0x000+1*(5+4)=9
    5c88:	8b a1       	ldd	r24, Y+35	; 0x23
    5c8a:	88 2f       	mov	r24, r24
    5c8c:	90 e0       	ldi	r25, 0x00	; 0
    5c8e:	82 95       	swap	r24
    5c90:	92 95       	swap	r25
    5c92:	90 7f       	andi	r25, 0xF0	; 240
    5c94:	98 27       	eor	r25, r24
    5c96:	80 7f       	andi	r24, 0xF0	; 240
    5c98:	98 27       	eor	r25, r24
    5c9a:	98 a3       	std	Y+32, r25	; 0x20
    5c9c:	8f 8f       	std	Y+31, r24	; 0x1f

    for(u8 i = 0; i < USERNAME_SIZE; i++)
    5c9e:	1e 8e       	std	Y+30, r1	; 0x1e
    5ca0:	8a c0       	rjmp	.+276    	; 0x5db6 <storeUserInEEPROM+0x148>
    {
        EEPROM_enuWriteData(address + i, user->username[i]);
    5ca2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5ca4:	28 2f       	mov	r18, r24
    5ca6:	30 e0       	ldi	r19, 0x00	; 0
    5ca8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5caa:	98 a1       	ldd	r25, Y+32	; 0x20
    5cac:	a9 01       	movw	r20, r18
    5cae:	48 0f       	add	r20, r24
    5cb0:	59 1f       	adc	r21, r25
    5cb2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5cb4:	28 2f       	mov	r18, r24
    5cb6:	30 e0       	ldi	r19, 0x00	; 0
    5cb8:	89 a1       	ldd	r24, Y+33	; 0x21
    5cba:	9a a1       	ldd	r25, Y+34	; 0x22
    5cbc:	fc 01       	movw	r30, r24
    5cbe:	e2 0f       	add	r30, r18
    5cc0:	f3 1f       	adc	r31, r19
    5cc2:	20 81       	ld	r18, Z
    5cc4:	ca 01       	movw	r24, r20
    5cc6:	62 2f       	mov	r22, r18
    5cc8:	0e 94 a2 29 	call	0x5344	; 0x5344 <EEPROM_enuWriteData>
    5ccc:	80 e0       	ldi	r24, 0x00	; 0
    5cce:	90 e0       	ldi	r25, 0x00	; 0
    5cd0:	a0 e2       	ldi	r26, 0x20	; 32
    5cd2:	b1 e4       	ldi	r27, 0x41	; 65
    5cd4:	89 8f       	std	Y+25, r24	; 0x19
    5cd6:	9a 8f       	std	Y+26, r25	; 0x1a
    5cd8:	ab 8f       	std	Y+27, r26	; 0x1b
    5cda:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5cdc:	69 8d       	ldd	r22, Y+25	; 0x19
    5cde:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5ce0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5ce2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5ce4:	20 e0       	ldi	r18, 0x00	; 0
    5ce6:	30 e0       	ldi	r19, 0x00	; 0
    5ce8:	4a ef       	ldi	r20, 0xFA	; 250
    5cea:	54 e4       	ldi	r21, 0x44	; 68
    5cec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5cf0:	dc 01       	movw	r26, r24
    5cf2:	cb 01       	movw	r24, r22
    5cf4:	8d 8b       	std	Y+21, r24	; 0x15
    5cf6:	9e 8b       	std	Y+22, r25	; 0x16
    5cf8:	af 8b       	std	Y+23, r26	; 0x17
    5cfa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5cfc:	6d 89       	ldd	r22, Y+21	; 0x15
    5cfe:	7e 89       	ldd	r23, Y+22	; 0x16
    5d00:	8f 89       	ldd	r24, Y+23	; 0x17
    5d02:	98 8d       	ldd	r25, Y+24	; 0x18
    5d04:	20 e0       	ldi	r18, 0x00	; 0
    5d06:	30 e0       	ldi	r19, 0x00	; 0
    5d08:	40 e8       	ldi	r20, 0x80	; 128
    5d0a:	5f e3       	ldi	r21, 0x3F	; 63
    5d0c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    5d10:	88 23       	and	r24, r24
    5d12:	2c f4       	brge	.+10     	; 0x5d1e <storeUserInEEPROM+0xb0>
		__ticks = 1;
    5d14:	81 e0       	ldi	r24, 0x01	; 1
    5d16:	90 e0       	ldi	r25, 0x00	; 0
    5d18:	9c 8b       	std	Y+20, r25	; 0x14
    5d1a:	8b 8b       	std	Y+19, r24	; 0x13
    5d1c:	3f c0       	rjmp	.+126    	; 0x5d9c <storeUserInEEPROM+0x12e>
	else if (__tmp > 65535)
    5d1e:	6d 89       	ldd	r22, Y+21	; 0x15
    5d20:	7e 89       	ldd	r23, Y+22	; 0x16
    5d22:	8f 89       	ldd	r24, Y+23	; 0x17
    5d24:	98 8d       	ldd	r25, Y+24	; 0x18
    5d26:	20 e0       	ldi	r18, 0x00	; 0
    5d28:	3f ef       	ldi	r19, 0xFF	; 255
    5d2a:	4f e7       	ldi	r20, 0x7F	; 127
    5d2c:	57 e4       	ldi	r21, 0x47	; 71
    5d2e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    5d32:	18 16       	cp	r1, r24
    5d34:	4c f5       	brge	.+82     	; 0x5d88 <storeUserInEEPROM+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5d36:	69 8d       	ldd	r22, Y+25	; 0x19
    5d38:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5d3a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5d3c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5d3e:	20 e0       	ldi	r18, 0x00	; 0
    5d40:	30 e0       	ldi	r19, 0x00	; 0
    5d42:	40 e2       	ldi	r20, 0x20	; 32
    5d44:	51 e4       	ldi	r21, 0x41	; 65
    5d46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5d4a:	dc 01       	movw	r26, r24
    5d4c:	cb 01       	movw	r24, r22
    5d4e:	bc 01       	movw	r22, r24
    5d50:	cd 01       	movw	r24, r26
    5d52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5d56:	dc 01       	movw	r26, r24
    5d58:	cb 01       	movw	r24, r22
    5d5a:	9c 8b       	std	Y+20, r25	; 0x14
    5d5c:	8b 8b       	std	Y+19, r24	; 0x13
    5d5e:	0f c0       	rjmp	.+30     	; 0x5d7e <storeUserInEEPROM+0x110>
    5d60:	88 ec       	ldi	r24, 0xC8	; 200
    5d62:	90 e0       	ldi	r25, 0x00	; 0
    5d64:	9a 8b       	std	Y+18, r25	; 0x12
    5d66:	89 8b       	std	Y+17, r24	; 0x11
    5d68:	89 89       	ldd	r24, Y+17	; 0x11
    5d6a:	9a 89       	ldd	r25, Y+18	; 0x12
    5d6c:	01 97       	sbiw	r24, 0x01	; 1
    5d6e:	f1 f7       	brne	.-4      	; 0x5d6c <storeUserInEEPROM+0xfe>
    5d70:	9a 8b       	std	Y+18, r25	; 0x12
    5d72:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5d74:	8b 89       	ldd	r24, Y+19	; 0x13
    5d76:	9c 89       	ldd	r25, Y+20	; 0x14
    5d78:	01 97       	sbiw	r24, 0x01	; 1
    5d7a:	9c 8b       	std	Y+20, r25	; 0x14
    5d7c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5d7e:	8b 89       	ldd	r24, Y+19	; 0x13
    5d80:	9c 89       	ldd	r25, Y+20	; 0x14
    5d82:	00 97       	sbiw	r24, 0x00	; 0
    5d84:	69 f7       	brne	.-38     	; 0x5d60 <storeUserInEEPROM+0xf2>
    5d86:	14 c0       	rjmp	.+40     	; 0x5db0 <storeUserInEEPROM+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5d88:	6d 89       	ldd	r22, Y+21	; 0x15
    5d8a:	7e 89       	ldd	r23, Y+22	; 0x16
    5d8c:	8f 89       	ldd	r24, Y+23	; 0x17
    5d8e:	98 8d       	ldd	r25, Y+24	; 0x18
    5d90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5d94:	dc 01       	movw	r26, r24
    5d96:	cb 01       	movw	r24, r22
    5d98:	9c 8b       	std	Y+20, r25	; 0x14
    5d9a:	8b 8b       	std	Y+19, r24	; 0x13
    5d9c:	8b 89       	ldd	r24, Y+19	; 0x13
    5d9e:	9c 89       	ldd	r25, Y+20	; 0x14
    5da0:	98 8b       	std	Y+16, r25	; 0x10
    5da2:	8f 87       	std	Y+15, r24	; 0x0f
    5da4:	8f 85       	ldd	r24, Y+15	; 0x0f
    5da6:	98 89       	ldd	r25, Y+16	; 0x10
    5da8:	01 97       	sbiw	r24, 0x01	; 1
    5daa:	f1 f7       	brne	.-4      	; 0x5da8 <storeUserInEEPROM+0x13a>
    5dac:	98 8b       	std	Y+16, r25	; 0x10
    5dae:	8f 87       	std	Y+15, r24	; 0x0f
 * ***************************************/
void storeUserInEEPROM(User_t *user, u8 userIndex)
{
    u16 address = EEPROM_START_ADDRESS + userIndex * (USERNAME_SIZE + PASSWORD_SIZE);//example:address=0x000+1*(5+4)=9

    for(u8 i = 0; i < USERNAME_SIZE; i++)
    5db0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5db2:	8f 5f       	subi	r24, 0xFF	; 255
    5db4:	8e 8f       	std	Y+30, r24	; 0x1e
    5db6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5db8:	88 30       	cpi	r24, 0x08	; 8
    5dba:	08 f4       	brcc	.+2      	; 0x5dbe <storeUserInEEPROM+0x150>
    5dbc:	72 cf       	rjmp	.-284    	; 0x5ca2 <storeUserInEEPROM+0x34>
    {
        EEPROM_enuWriteData(address + i, user->username[i]);
        _delay_ms(10);
    }
    address += USERNAME_SIZE; // after store username address is change
    5dbe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5dc0:	98 a1       	ldd	r25, Y+32	; 0x20
    5dc2:	08 96       	adiw	r24, 0x08	; 8
    5dc4:	98 a3       	std	Y+32, r25	; 0x20
    5dc6:	8f 8f       	std	Y+31, r24	; 0x1f

    // Store password in EEPROM
    for(u8 i = 0; i < PASSWORD_SIZE; i++)
    5dc8:	1d 8e       	std	Y+29, r1	; 0x1d
    5dca:	8b c0       	rjmp	.+278    	; 0x5ee2 <storeUserInEEPROM+0x274>
    {
        EEPROM_enuWriteData(address + i, user->password[i]);
    5dcc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5dce:	28 2f       	mov	r18, r24
    5dd0:	30 e0       	ldi	r19, 0x00	; 0
    5dd2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5dd4:	98 a1       	ldd	r25, Y+32	; 0x20
    5dd6:	a9 01       	movw	r20, r18
    5dd8:	48 0f       	add	r20, r24
    5dda:	59 1f       	adc	r21, r25
    5ddc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5dde:	28 2f       	mov	r18, r24
    5de0:	30 e0       	ldi	r19, 0x00	; 0
    5de2:	89 a1       	ldd	r24, Y+33	; 0x21
    5de4:	9a a1       	ldd	r25, Y+34	; 0x22
    5de6:	82 0f       	add	r24, r18
    5de8:	93 1f       	adc	r25, r19
    5dea:	fc 01       	movw	r30, r24
    5dec:	38 96       	adiw	r30, 0x08	; 8
    5dee:	20 81       	ld	r18, Z
    5df0:	ca 01       	movw	r24, r20
    5df2:	62 2f       	mov	r22, r18
    5df4:	0e 94 a2 29 	call	0x5344	; 0x5344 <EEPROM_enuWriteData>
    5df8:	80 e0       	ldi	r24, 0x00	; 0
    5dfa:	90 e0       	ldi	r25, 0x00	; 0
    5dfc:	a0 e2       	ldi	r26, 0x20	; 32
    5dfe:	b1 e4       	ldi	r27, 0x41	; 65
    5e00:	8b 87       	std	Y+11, r24	; 0x0b
    5e02:	9c 87       	std	Y+12, r25	; 0x0c
    5e04:	ad 87       	std	Y+13, r26	; 0x0d
    5e06:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5e08:	6b 85       	ldd	r22, Y+11	; 0x0b
    5e0a:	7c 85       	ldd	r23, Y+12	; 0x0c
    5e0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    5e0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5e10:	20 e0       	ldi	r18, 0x00	; 0
    5e12:	30 e0       	ldi	r19, 0x00	; 0
    5e14:	4a ef       	ldi	r20, 0xFA	; 250
    5e16:	54 e4       	ldi	r21, 0x44	; 68
    5e18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5e1c:	dc 01       	movw	r26, r24
    5e1e:	cb 01       	movw	r24, r22
    5e20:	8f 83       	std	Y+7, r24	; 0x07
    5e22:	98 87       	std	Y+8, r25	; 0x08
    5e24:	a9 87       	std	Y+9, r26	; 0x09
    5e26:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5e28:	6f 81       	ldd	r22, Y+7	; 0x07
    5e2a:	78 85       	ldd	r23, Y+8	; 0x08
    5e2c:	89 85       	ldd	r24, Y+9	; 0x09
    5e2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5e30:	20 e0       	ldi	r18, 0x00	; 0
    5e32:	30 e0       	ldi	r19, 0x00	; 0
    5e34:	40 e8       	ldi	r20, 0x80	; 128
    5e36:	5f e3       	ldi	r21, 0x3F	; 63
    5e38:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    5e3c:	88 23       	and	r24, r24
    5e3e:	2c f4       	brge	.+10     	; 0x5e4a <storeUserInEEPROM+0x1dc>
		__ticks = 1;
    5e40:	81 e0       	ldi	r24, 0x01	; 1
    5e42:	90 e0       	ldi	r25, 0x00	; 0
    5e44:	9e 83       	std	Y+6, r25	; 0x06
    5e46:	8d 83       	std	Y+5, r24	; 0x05
    5e48:	3f c0       	rjmp	.+126    	; 0x5ec8 <storeUserInEEPROM+0x25a>
	else if (__tmp > 65535)
    5e4a:	6f 81       	ldd	r22, Y+7	; 0x07
    5e4c:	78 85       	ldd	r23, Y+8	; 0x08
    5e4e:	89 85       	ldd	r24, Y+9	; 0x09
    5e50:	9a 85       	ldd	r25, Y+10	; 0x0a
    5e52:	20 e0       	ldi	r18, 0x00	; 0
    5e54:	3f ef       	ldi	r19, 0xFF	; 255
    5e56:	4f e7       	ldi	r20, 0x7F	; 127
    5e58:	57 e4       	ldi	r21, 0x47	; 71
    5e5a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    5e5e:	18 16       	cp	r1, r24
    5e60:	4c f5       	brge	.+82     	; 0x5eb4 <storeUserInEEPROM+0x246>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5e62:	6b 85       	ldd	r22, Y+11	; 0x0b
    5e64:	7c 85       	ldd	r23, Y+12	; 0x0c
    5e66:	8d 85       	ldd	r24, Y+13	; 0x0d
    5e68:	9e 85       	ldd	r25, Y+14	; 0x0e
    5e6a:	20 e0       	ldi	r18, 0x00	; 0
    5e6c:	30 e0       	ldi	r19, 0x00	; 0
    5e6e:	40 e2       	ldi	r20, 0x20	; 32
    5e70:	51 e4       	ldi	r21, 0x41	; 65
    5e72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5e76:	dc 01       	movw	r26, r24
    5e78:	cb 01       	movw	r24, r22
    5e7a:	bc 01       	movw	r22, r24
    5e7c:	cd 01       	movw	r24, r26
    5e7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5e82:	dc 01       	movw	r26, r24
    5e84:	cb 01       	movw	r24, r22
    5e86:	9e 83       	std	Y+6, r25	; 0x06
    5e88:	8d 83       	std	Y+5, r24	; 0x05
    5e8a:	0f c0       	rjmp	.+30     	; 0x5eaa <storeUserInEEPROM+0x23c>
    5e8c:	88 ec       	ldi	r24, 0xC8	; 200
    5e8e:	90 e0       	ldi	r25, 0x00	; 0
    5e90:	9c 83       	std	Y+4, r25	; 0x04
    5e92:	8b 83       	std	Y+3, r24	; 0x03
    5e94:	8b 81       	ldd	r24, Y+3	; 0x03
    5e96:	9c 81       	ldd	r25, Y+4	; 0x04
    5e98:	01 97       	sbiw	r24, 0x01	; 1
    5e9a:	f1 f7       	brne	.-4      	; 0x5e98 <storeUserInEEPROM+0x22a>
    5e9c:	9c 83       	std	Y+4, r25	; 0x04
    5e9e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5ea0:	8d 81       	ldd	r24, Y+5	; 0x05
    5ea2:	9e 81       	ldd	r25, Y+6	; 0x06
    5ea4:	01 97       	sbiw	r24, 0x01	; 1
    5ea6:	9e 83       	std	Y+6, r25	; 0x06
    5ea8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5eaa:	8d 81       	ldd	r24, Y+5	; 0x05
    5eac:	9e 81       	ldd	r25, Y+6	; 0x06
    5eae:	00 97       	sbiw	r24, 0x00	; 0
    5eb0:	69 f7       	brne	.-38     	; 0x5e8c <storeUserInEEPROM+0x21e>
    5eb2:	14 c0       	rjmp	.+40     	; 0x5edc <storeUserInEEPROM+0x26e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5eb4:	6f 81       	ldd	r22, Y+7	; 0x07
    5eb6:	78 85       	ldd	r23, Y+8	; 0x08
    5eb8:	89 85       	ldd	r24, Y+9	; 0x09
    5eba:	9a 85       	ldd	r25, Y+10	; 0x0a
    5ebc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5ec0:	dc 01       	movw	r26, r24
    5ec2:	cb 01       	movw	r24, r22
    5ec4:	9e 83       	std	Y+6, r25	; 0x06
    5ec6:	8d 83       	std	Y+5, r24	; 0x05
    5ec8:	8d 81       	ldd	r24, Y+5	; 0x05
    5eca:	9e 81       	ldd	r25, Y+6	; 0x06
    5ecc:	9a 83       	std	Y+2, r25	; 0x02
    5ece:	89 83       	std	Y+1, r24	; 0x01
    5ed0:	89 81       	ldd	r24, Y+1	; 0x01
    5ed2:	9a 81       	ldd	r25, Y+2	; 0x02
    5ed4:	01 97       	sbiw	r24, 0x01	; 1
    5ed6:	f1 f7       	brne	.-4      	; 0x5ed4 <storeUserInEEPROM+0x266>
    5ed8:	9a 83       	std	Y+2, r25	; 0x02
    5eda:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(10);
    }
    address += USERNAME_SIZE; // after store username address is change

    // Store password in EEPROM
    for(u8 i = 0; i < PASSWORD_SIZE; i++)
    5edc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5ede:	8f 5f       	subi	r24, 0xFF	; 255
    5ee0:	8d 8f       	std	Y+29, r24	; 0x1d
    5ee2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5ee4:	88 30       	cpi	r24, 0x08	; 8
    5ee6:	08 f4       	brcc	.+2      	; 0x5eea <storeUserInEEPROM+0x27c>
    5ee8:	71 cf       	rjmp	.-286    	; 0x5dcc <storeUserInEEPROM+0x15e>
    {
        EEPROM_enuWriteData(address + i, user->password[i]);
        _delay_ms(10);
    }
}
    5eea:	a3 96       	adiw	r28, 0x23	; 35
    5eec:	0f b6       	in	r0, 0x3f	; 63
    5eee:	f8 94       	cli
    5ef0:	de bf       	out	0x3e, r29	; 62
    5ef2:	0f be       	out	0x3f, r0	; 63
    5ef4:	cd bf       	out	0x3d, r28	; 61
    5ef6:	cf 91       	pop	r28
    5ef8:	df 91       	pop	r29
    5efa:	08 95       	ret

00005efc <APP_enuStart>:


ES_t APP_enuStart(void)
{
    5efc:	df 93       	push	r29
    5efe:	cf 93       	push	r28
    5f00:	0f 92       	push	r0
    5f02:	cd b7       	in	r28, 0x3d	; 61
    5f04:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
    5f06:	19 82       	std	Y+1, r1	; 0x01
	LCD_enuClearLcd();
    5f08:	0e 94 17 29 	call	0x522e	; 0x522e <LCD_enuClearLcd>
	LCD_enuGoToPosition (1,1);
    5f0c:	81 e0       	ldi	r24, 0x01	; 1
    5f0e:	61 e0       	ldi	r22, 0x01	; 1
    5f10:	0e 94 13 25 	call	0x4a26	; 0x4a26 <LCD_enuGoToPosition>
	LCD_enuDisplayString("Welcome Home");
    5f14:	80 e6       	ldi	r24, 0x60	; 96
    5f16:	90 e0       	ldi	r25, 0x00	; 0
    5f18:	0e 94 d4 24 	call	0x49a8	; 0x49a8 <LCD_enuDisplayString>
	HC_05_enuSendString("\r\n****Welcome To Your Smart Home****\r\n");
    5f1c:	8d e6       	ldi	r24, 0x6D	; 109
    5f1e:	90 e0       	ldi	r25, 0x00	; 0
    5f20:	0e 94 59 29 	call	0x52b2	; 0x52b2 <HC_05_enuSendString>

	APP_enuCheckUserPassword();
    5f24:	0e 94 99 2f 	call	0x5f32	; 0x5f32 <APP_enuCheckUserPassword>



	return Local_enuErrorState;
    5f28:	89 81       	ldd	r24, Y+1	; 0x01
}
    5f2a:	0f 90       	pop	r0
    5f2c:	cf 91       	pop	r28
    5f2e:	df 91       	pop	r29
    5f30:	08 95       	ret

00005f32 <APP_enuCheckUserPassword>:

/******************************************************************
 * Function to check user password and make actions according to it
 ******************************************************************/
ES_t APP_enuCheckUserPassword(void)
{
    5f32:	df 93       	push	r29
    5f34:	cf 93       	push	r28
    5f36:	cd b7       	in	r28, 0x3d	; 61
    5f38:	de b7       	in	r29, 0x3e	; 62
    5f3a:	e1 97       	sbiw	r28, 0x31	; 49
    5f3c:	0f b6       	in	r0, 0x3f	; 63
    5f3e:	f8 94       	cli
    5f40:	de bf       	out	0x3e, r29	; 62
    5f42:	0f be       	out	0x3f, r0	; 63
    5f44:	cd bf       	out	0x3d, r28	; 61

	ES_t Local_enuErrorState=ES_OK;
    5f46:	81 e0       	ldi	r24, 0x01	; 1
    5f48:	89 8b       	std	Y+17, r24	; 0x11
	User_t InputUser, check;
	u8 check_find=0 , attempts=0;
    5f4a:	18 8a       	std	Y+16, r1	; 0x10
    5f4c:	1f 86       	std	Y+15, r1	; 0x0f

	LED_enuTurnOFF(&LED_AstrLedConfig[0]);
    5f4e:	83 e7       	ldi	r24, 0x73	; 115
    5f50:	96 e0       	ldi	r25, 0x06	; 6
    5f52:	0e 94 6d 21 	call	0x42da	; 0x42da <LED_enuTurnOFF>
    LED_enuTurnOFF(&LED_AstrLedConfig[1]);
    5f56:	87 e7       	ldi	r24, 0x77	; 119
    5f58:	96 e0       	ldi	r25, 0x06	; 6
    5f5a:	0e 94 6d 21 	call	0x42da	; 0x42da <LED_enuTurnOFF>
    GREENLED_State=0;
    5f5e:	10 92 97 07 	sts	0x0797, r1
    REDLED_State=0;
    5f62:	10 92 98 07 	sts	0x0798, r1


	Local_enuErrorState =HC_05_enuSendString("\r\nUser name: ");
    5f66:	84 e9       	ldi	r24, 0x94	; 148
    5f68:	90 e0       	ldi	r25, 0x00	; 0
    5f6a:	0e 94 59 29 	call	0x52b2	; 0x52b2 <HC_05_enuSendString>
    5f6e:	89 8b       	std	Y+17, r24	; 0x11
	Local_enuErrorState= HC_05_enuRecieveString(InputUser.username);
    5f70:	ce 01       	movw	r24, r28
    5f72:	42 96       	adiw	r24, 0x12	; 18
    5f74:	0e 94 44 29 	call	0x5288	; 0x5288 <HC_05_enuRecieveString>
    5f78:	89 8b       	std	Y+17, r24	; 0x11
	Local_enuErrorState =HC_05_enuSendString(InputUser.username);
    5f7a:	ce 01       	movw	r24, r28
    5f7c:	42 96       	adiw	r24, 0x12	; 18
    5f7e:	0e 94 59 29 	call	0x52b2	; 0x52b2 <HC_05_enuSendString>
    5f82:	89 8b       	std	Y+17, r24	; 0x11
    5f84:	4c c0       	rjmp	.+152    	; 0x601e <APP_enuCheckUserPassword+0xec>
	while(attempts != 3){
		Local_enuErrorState =HC_05_enuSendString("\r\nPassword : ");
    5f86:	82 ea       	ldi	r24, 0xA2	; 162
    5f88:	90 e0       	ldi	r25, 0x00	; 0
    5f8a:	0e 94 59 29 	call	0x52b2	; 0x52b2 <HC_05_enuSendString>
    5f8e:	89 8b       	std	Y+17, r24	; 0x11
		Local_enuErrorState =HC_05_enuRecieveString(InputUser.password);
    5f90:	ce 01       	movw	r24, r28
    5f92:	42 96       	adiw	r24, 0x12	; 18
    5f94:	08 96       	adiw	r24, 0x08	; 8
    5f96:	0e 94 44 29 	call	0x5288	; 0x5288 <HC_05_enuRecieveString>
    5f9a:	89 8b       	std	Y+17, r24	; 0x11
		Local_enuErrorState =HC_05_enuSendString(InputUser.password);
    5f9c:	ce 01       	movw	r24, r28
    5f9e:	42 96       	adiw	r24, 0x12	; 18
    5fa0:	08 96       	adiw	r24, 0x08	; 8
    5fa2:	0e 94 59 29 	call	0x52b2	; 0x52b2 <HC_05_enuSendString>
    5fa6:	89 8b       	std	Y+17, r24	; 0x11
		Local_enuErrorState =HC_05_enuSendString("\r\n");
    5fa8:	80 eb       	ldi	r24, 0xB0	; 176
    5faa:	90 e0       	ldi	r25, 0x00	; 0
    5fac:	0e 94 59 29 	call	0x52b2	; 0x52b2 <HC_05_enuSendString>
    5fb0:	89 8b       	std	Y+17, r24	; 0x11
		check_find=APP_FindUser(&InputUser);
    5fb2:	ce 01       	movw	r24, r28
    5fb4:	42 96       	adiw	r24, 0x12	; 18
    5fb6:	0e 94 59 35 	call	0x6ab2	; 0x6ab2 <APP_FindUser>
    5fba:	88 8b       	std	Y+16, r24	; 0x10

		if(check_find==LOG_PASS_INCORRECT){
    5fbc:	88 89       	ldd	r24, Y+16	; 0x10
    5fbe:	82 30       	cpi	r24, 0x02	; 2
    5fc0:	91 f5       	brne	.+100    	; 0x6026 <APP_enuCheckUserPassword+0xf4>
	   	    LED_enuTurnON(&LED_AstrLedConfig[1]);
    5fc2:	87 e7       	ldi	r24, 0x77	; 119
    5fc4:	96 e0       	ldi	r25, 0x06	; 6
    5fc6:	0e 94 32 21 	call	0x4264	; 0x4264 <LED_enuTurnON>
	   	    LED_enuTurnOFF(&LED_AstrLedConfig[0]);
    5fca:	83 e7       	ldi	r24, 0x73	; 115
    5fcc:	96 e0       	ldi	r25, 0x06	; 6
    5fce:	0e 94 6d 21 	call	0x42da	; 0x42da <LED_enuTurnOFF>
		    GREENLED_State=0;
    5fd2:	10 92 97 07 	sts	0x0797, r1
		    REDLED_State=1;
    5fd6:	81 e0       	ldi	r24, 0x01	; 1
    5fd8:	80 93 98 07 	sts	0x0798, r24
	    	LCD_enuGoToPosition(1,1);
    5fdc:	81 e0       	ldi	r24, 0x01	; 1
    5fde:	61 e0       	ldi	r22, 0x01	; 1
    5fe0:	0e 94 13 25 	call	0x4a26	; 0x4a26 <LCD_enuGoToPosition>
	    	/*Display LED red ON On LCD*/
	    	LCD_enuDisplayString("LED1:OFF,LED2:ON");
    5fe4:	83 eb       	ldi	r24, 0xB3	; 179
    5fe6:	90 e0       	ldi	r25, 0x00	; 0
    5fe8:	0e 94 d4 24 	call	0x49a8	; 0x49a8 <LCD_enuDisplayString>
	    	Local_enuErrorState= SERVO_enuSetAngle(-90);
    5fec:	86 ea       	ldi	r24, 0xA6	; 166
    5fee:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <SERVO_enuSetAngle>
    5ff2:	89 8b       	std	Y+17, r24	; 0x11
	    	Local_enuErrorState =LCD_enuGoToPosition(2,1);
    5ff4:	82 e0       	ldi	r24, 0x02	; 2
    5ff6:	61 e0       	ldi	r22, 0x01	; 1
    5ff8:	0e 94 13 25 	call	0x4a26	; 0x4a26 <LCD_enuGoToPosition>
    5ffc:	89 8b       	std	Y+17, r24	; 0x11
	    	Local_enuErrorState =LCD_enuDisplayString("Door Closed");
    5ffe:	84 ec       	ldi	r24, 0xC4	; 196
    6000:	90 e0       	ldi	r25, 0x00	; 0
    6002:	0e 94 d4 24 	call	0x49a8	; 0x49a8 <LCD_enuDisplayString>
    6006:	89 8b       	std	Y+17, r24	; 0x11

			if(attempts != 2){
    6008:	8f 85       	ldd	r24, Y+15	; 0x0f
    600a:	82 30       	cpi	r24, 0x02	; 2
    600c:	29 f0       	breq	.+10     	; 0x6018 <APP_enuCheckUserPassword+0xe6>
				Local_enuErrorState =HC_05_enuSendString("\r\nTry Again !");
    600e:	80 ed       	ldi	r24, 0xD0	; 208
    6010:	90 e0       	ldi	r25, 0x00	; 0
    6012:	0e 94 59 29 	call	0x52b2	; 0x52b2 <HC_05_enuSendString>
    6016:	89 8b       	std	Y+17, r24	; 0x11
			}
			attempts++;
    6018:	8f 85       	ldd	r24, Y+15	; 0x0f
    601a:	8f 5f       	subi	r24, 0xFF	; 255
    601c:	8f 87       	std	Y+15, r24	; 0x0f


	Local_enuErrorState =HC_05_enuSendString("\r\nUser name: ");
	Local_enuErrorState= HC_05_enuRecieveString(InputUser.username);
	Local_enuErrorState =HC_05_enuSendString(InputUser.username);
	while(attempts != 3){
    601e:	8f 85       	ldd	r24, Y+15	; 0x0f
    6020:	83 30       	cpi	r24, 0x03	; 3
    6022:	09 f0       	breq	.+2      	; 0x6026 <APP_enuCheckUserPassword+0xf4>
    6024:	b0 cf       	rjmp	.-160    	; 0x5f86 <APP_enuCheckUserPassword+0x54>
		else{
			break;
		}

	}
	if(attempts == 3){
    6026:	8f 85       	ldd	r24, Y+15	; 0x0f
    6028:	83 30       	cpi	r24, 0x03	; 3
    602a:	09 f0       	breq	.+2      	; 0x602e <APP_enuCheckUserPassword+0xfc>
    602c:	78 c0       	rjmp	.+240    	; 0x611e <APP_enuCheckUserPassword+0x1ec>

BUZZER_enuTurnON(BUZZER_1);
    602e:	80 e0       	ldi	r24, 0x00	; 0
    6030:	0e 94 60 2d 	call	0x5ac0	; 0x5ac0 <BUZZER_enuTurnON>
    6034:	80 e0       	ldi	r24, 0x00	; 0
    6036:	90 e0       	ldi	r25, 0x00	; 0
    6038:	aa ef       	ldi	r26, 0xFA	; 250
    603a:	b4 e4       	ldi	r27, 0x44	; 68
    603c:	8b 87       	std	Y+11, r24	; 0x0b
    603e:	9c 87       	std	Y+12, r25	; 0x0c
    6040:	ad 87       	std	Y+13, r26	; 0x0d
    6042:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6044:	6b 85       	ldd	r22, Y+11	; 0x0b
    6046:	7c 85       	ldd	r23, Y+12	; 0x0c
    6048:	8d 85       	ldd	r24, Y+13	; 0x0d
    604a:	9e 85       	ldd	r25, Y+14	; 0x0e
    604c:	20 e0       	ldi	r18, 0x00	; 0
    604e:	30 e0       	ldi	r19, 0x00	; 0
    6050:	4a ef       	ldi	r20, 0xFA	; 250
    6052:	54 e4       	ldi	r21, 0x44	; 68
    6054:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6058:	dc 01       	movw	r26, r24
    605a:	cb 01       	movw	r24, r22
    605c:	8f 83       	std	Y+7, r24	; 0x07
    605e:	98 87       	std	Y+8, r25	; 0x08
    6060:	a9 87       	std	Y+9, r26	; 0x09
    6062:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6064:	6f 81       	ldd	r22, Y+7	; 0x07
    6066:	78 85       	ldd	r23, Y+8	; 0x08
    6068:	89 85       	ldd	r24, Y+9	; 0x09
    606a:	9a 85       	ldd	r25, Y+10	; 0x0a
    606c:	20 e0       	ldi	r18, 0x00	; 0
    606e:	30 e0       	ldi	r19, 0x00	; 0
    6070:	40 e8       	ldi	r20, 0x80	; 128
    6072:	5f e3       	ldi	r21, 0x3F	; 63
    6074:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    6078:	88 23       	and	r24, r24
    607a:	2c f4       	brge	.+10     	; 0x6086 <APP_enuCheckUserPassword+0x154>
		__ticks = 1;
    607c:	81 e0       	ldi	r24, 0x01	; 1
    607e:	90 e0       	ldi	r25, 0x00	; 0
    6080:	9e 83       	std	Y+6, r25	; 0x06
    6082:	8d 83       	std	Y+5, r24	; 0x05
    6084:	3f c0       	rjmp	.+126    	; 0x6104 <APP_enuCheckUserPassword+0x1d2>
	else if (__tmp > 65535)
    6086:	6f 81       	ldd	r22, Y+7	; 0x07
    6088:	78 85       	ldd	r23, Y+8	; 0x08
    608a:	89 85       	ldd	r24, Y+9	; 0x09
    608c:	9a 85       	ldd	r25, Y+10	; 0x0a
    608e:	20 e0       	ldi	r18, 0x00	; 0
    6090:	3f ef       	ldi	r19, 0xFF	; 255
    6092:	4f e7       	ldi	r20, 0x7F	; 127
    6094:	57 e4       	ldi	r21, 0x47	; 71
    6096:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    609a:	18 16       	cp	r1, r24
    609c:	4c f5       	brge	.+82     	; 0x60f0 <APP_enuCheckUserPassword+0x1be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    609e:	6b 85       	ldd	r22, Y+11	; 0x0b
    60a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    60a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    60a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    60a6:	20 e0       	ldi	r18, 0x00	; 0
    60a8:	30 e0       	ldi	r19, 0x00	; 0
    60aa:	40 e2       	ldi	r20, 0x20	; 32
    60ac:	51 e4       	ldi	r21, 0x41	; 65
    60ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    60b2:	dc 01       	movw	r26, r24
    60b4:	cb 01       	movw	r24, r22
    60b6:	bc 01       	movw	r22, r24
    60b8:	cd 01       	movw	r24, r26
    60ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    60be:	dc 01       	movw	r26, r24
    60c0:	cb 01       	movw	r24, r22
    60c2:	9e 83       	std	Y+6, r25	; 0x06
    60c4:	8d 83       	std	Y+5, r24	; 0x05
    60c6:	0f c0       	rjmp	.+30     	; 0x60e6 <APP_enuCheckUserPassword+0x1b4>
    60c8:	88 ec       	ldi	r24, 0xC8	; 200
    60ca:	90 e0       	ldi	r25, 0x00	; 0
    60cc:	9c 83       	std	Y+4, r25	; 0x04
    60ce:	8b 83       	std	Y+3, r24	; 0x03
    60d0:	8b 81       	ldd	r24, Y+3	; 0x03
    60d2:	9c 81       	ldd	r25, Y+4	; 0x04
    60d4:	01 97       	sbiw	r24, 0x01	; 1
    60d6:	f1 f7       	brne	.-4      	; 0x60d4 <APP_enuCheckUserPassword+0x1a2>
    60d8:	9c 83       	std	Y+4, r25	; 0x04
    60da:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    60dc:	8d 81       	ldd	r24, Y+5	; 0x05
    60de:	9e 81       	ldd	r25, Y+6	; 0x06
    60e0:	01 97       	sbiw	r24, 0x01	; 1
    60e2:	9e 83       	std	Y+6, r25	; 0x06
    60e4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    60e6:	8d 81       	ldd	r24, Y+5	; 0x05
    60e8:	9e 81       	ldd	r25, Y+6	; 0x06
    60ea:	00 97       	sbiw	r24, 0x00	; 0
    60ec:	69 f7       	brne	.-38     	; 0x60c8 <APP_enuCheckUserPassword+0x196>
    60ee:	14 c0       	rjmp	.+40     	; 0x6118 <APP_enuCheckUserPassword+0x1e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    60f0:	6f 81       	ldd	r22, Y+7	; 0x07
    60f2:	78 85       	ldd	r23, Y+8	; 0x08
    60f4:	89 85       	ldd	r24, Y+9	; 0x09
    60f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    60f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    60fc:	dc 01       	movw	r26, r24
    60fe:	cb 01       	movw	r24, r22
    6100:	9e 83       	std	Y+6, r25	; 0x06
    6102:	8d 83       	std	Y+5, r24	; 0x05
    6104:	8d 81       	ldd	r24, Y+5	; 0x05
    6106:	9e 81       	ldd	r25, Y+6	; 0x06
    6108:	9a 83       	std	Y+2, r25	; 0x02
    610a:	89 83       	std	Y+1, r24	; 0x01
    610c:	89 81       	ldd	r24, Y+1	; 0x01
    610e:	9a 81       	ldd	r25, Y+2	; 0x02
    6110:	01 97       	sbiw	r24, 0x01	; 1
    6112:	f1 f7       	brne	.-4      	; 0x6110 <APP_enuCheckUserPassword+0x1de>
    6114:	9a 83       	std	Y+2, r25	; 0x02
    6116:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2000);
BUZZER_enuTurnOFF(BUZZER_1);
    6118:	80 e0       	ldi	r24, 0x00	; 0
    611a:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <BUZZER_enuTurnOFF>
	//Local_enuErrorState =HC_05_enuSendString(check.password);




	if(check_find==LOG_MASTER)
    611e:	88 89       	ldd	r24, Y+16	; 0x10
    6120:	88 23       	and	r24, r24
    6122:	f9 f4       	brne	.+62     	; 0x6162 <APP_enuCheckUserPassword+0x230>
    {
		Local_enuErrorState =HC_05_enuSendString("\r\nCorrect\r\n");
    6124:	8e ed       	ldi	r24, 0xDE	; 222
    6126:	90 e0       	ldi	r25, 0x00	; 0
    6128:	0e 94 59 29 	call	0x52b2	; 0x52b2 <HC_05_enuSendString>
    612c:	89 8b       	std	Y+17, r24	; 0x11

		/*Turn On green Led */
	   LED_enuTurnON(&LED_AstrLedConfig[0]);
    612e:	83 e7       	ldi	r24, 0x73	; 115
    6130:	96 e0       	ldi	r25, 0x06	; 6
    6132:	0e 94 32 21 	call	0x4264	; 0x4264 <LED_enuTurnON>
	   LED_enuTurnOFF(&LED_AstrLedConfig[1]);
    6136:	87 e7       	ldi	r24, 0x77	; 119
    6138:	96 e0       	ldi	r25, 0x06	; 6
    613a:	0e 94 6d 21 	call	0x42da	; 0x42da <LED_enuTurnOFF>
	    GREENLED_State=1;
    613e:	81 e0       	ldi	r24, 0x01	; 1
    6140:	80 93 97 07 	sts	0x0797, r24
	    REDLED_State=0;
    6144:	10 92 98 07 	sts	0x0798, r1
		LCD_enuGoToPosition(1,1);
    6148:	81 e0       	ldi	r24, 0x01	; 1
    614a:	61 e0       	ldi	r22, 0x01	; 1
    614c:	0e 94 13 25 	call	0x4a26	; 0x4a26 <LCD_enuGoToPosition>
		/*Display LED Green ON On LCD*/
		LCD_enuDisplayString("LED1:ON,LED2:OFF");
    6150:	8a ee       	ldi	r24, 0xEA	; 234
    6152:	90 e0       	ldi	r25, 0x00	; 0
    6154:	0e 94 d4 24 	call	0x49a8	; 0x49a8 <LCD_enuDisplayString>
		Master_Mode();
    6158:	0e 94 36 31 	call	0x626c	; 0x626c <Master_Mode>
		/*Open the Door
		Local_enuErrorState= SERVO_enuSetAngle(90);
		Display Door Open On LCD
		Local_enuErrorState =LCD_enuGoToPosition(1,1);
		Local_enuErrorState =LCD_enuDisplayString("Door Open");*/
		Local_enuErrorState = ES_OK;
    615c:	81 e0       	ldi	r24, 0x01	; 1
    615e:	89 8b       	std	Y+17, r24	; 0x11
    6160:	7b c0       	rjmp	.+246    	; 0x6258 <APP_enuCheckUserPassword+0x326>
	}

	else if(check_find==LOG_SUCCESS)
    6162:	88 89       	ldd	r24, Y+16	; 0x10
    6164:	81 30       	cpi	r24, 0x01	; 1
    6166:	f9 f4       	brne	.+62     	; 0x61a6 <APP_enuCheckUserPassword+0x274>
    {
	   Local_enuErrorState =HC_05_enuSendString("\r\nCorrect\r\n");
    6168:	8e ed       	ldi	r24, 0xDE	; 222
    616a:	90 e0       	ldi	r25, 0x00	; 0
    616c:	0e 94 59 29 	call	0x52b2	; 0x52b2 <HC_05_enuSendString>
    6170:	89 8b       	std	Y+17, r24	; 0x11
	    /*Turn On green Led */


  	   LED_enuTurnON(&LED_AstrLedConfig[0]);
    6172:	83 e7       	ldi	r24, 0x73	; 115
    6174:	96 e0       	ldi	r25, 0x06	; 6
    6176:	0e 94 32 21 	call	0x4264	; 0x4264 <LED_enuTurnON>
  	   LED_enuTurnOFF(&LED_AstrLedConfig[1]);
    617a:	87 e7       	ldi	r24, 0x77	; 119
    617c:	96 e0       	ldi	r25, 0x06	; 6
    617e:	0e 94 6d 21 	call	0x42da	; 0x42da <LED_enuTurnOFF>
 	   GREENLED_State=1;
    6182:	81 e0       	ldi	r24, 0x01	; 1
    6184:	80 93 97 07 	sts	0x0797, r24
 	   REDLED_State=0;
    6188:	10 92 98 07 	sts	0x0798, r1
	   LCD_enuGoToPosition(1,1);
    618c:	81 e0       	ldi	r24, 0x01	; 1
    618e:	61 e0       	ldi	r22, 0x01	; 1
    6190:	0e 94 13 25 	call	0x4a26	; 0x4a26 <LCD_enuGoToPosition>
	   /*Display LED Green ON On LCD*/
	   LCD_enuDisplayString("LED1:ON,LED2:OFF");
    6194:	8a ee       	ldi	r24, 0xEA	; 234
    6196:	90 e0       	ldi	r25, 0x00	; 0
    6198:	0e 94 d4 24 	call	0x49a8	; 0x49a8 <LCD_enuDisplayString>

	   USER_Mode();
    619c:	0e 94 bb 32 	call	0x6576	; 0x6576 <USER_Mode>
    	Local_enuErrorState =LCD_enuGoToPosition(1,1);
    	Local_enuErrorState =LCD_enuDisplayString("Door Open");
    	LCD_enuGoToPosition(2,1);
    	Display LED Green ON On LCD
    	LCD_enuDisplayString("LED1:ON,LED2:OFF");*/
    	Local_enuErrorState = ES_OK;
    61a0:	81 e0       	ldi	r24, 0x01	; 1
    61a2:	89 8b       	std	Y+17, r24	; 0x11
    61a4:	59 c0       	rjmp	.+178    	; 0x6258 <APP_enuCheckUserPassword+0x326>
	}
	else if(check_find==LOG_PASS_INCORRECT)
    61a6:	88 89       	ldd	r24, Y+16	; 0x10
    61a8:	82 30       	cpi	r24, 0x02	; 2
    61aa:	51 f5       	brne	.+84     	; 0x6200 <APP_enuCheckUserPassword+0x2ce>
	{
		/*Turn On red Led */

    	Local_enuErrorState =HC_05_enuSendString("\r\nWrong password\r\n");
    61ac:	8b ef       	ldi	r24, 0xFB	; 251
    61ae:	90 e0       	ldi	r25, 0x00	; 0
    61b0:	0e 94 59 29 	call	0x52b2	; 0x52b2 <HC_05_enuSendString>
    61b4:	89 8b       	std	Y+17, r24	; 0x11
   	    LED_enuTurnON(&LED_AstrLedConfig[1]);
    61b6:	87 e7       	ldi	r24, 0x77	; 119
    61b8:	96 e0       	ldi	r25, 0x06	; 6
    61ba:	0e 94 32 21 	call	0x4264	; 0x4264 <LED_enuTurnON>
   	    LED_enuTurnOFF(&LED_AstrLedConfig[0]);
    61be:	83 e7       	ldi	r24, 0x73	; 115
    61c0:	96 e0       	ldi	r25, 0x06	; 6
    61c2:	0e 94 6d 21 	call	0x42da	; 0x42da <LED_enuTurnOFF>
	    GREENLED_State=0;
    61c6:	10 92 97 07 	sts	0x0797, r1
	    REDLED_State=1;
    61ca:	81 e0       	ldi	r24, 0x01	; 1
    61cc:	80 93 98 07 	sts	0x0798, r24
    	LCD_enuGoToPosition(1,1);
    61d0:	81 e0       	ldi	r24, 0x01	; 1
    61d2:	61 e0       	ldi	r22, 0x01	; 1
    61d4:	0e 94 13 25 	call	0x4a26	; 0x4a26 <LCD_enuGoToPosition>
    	/*Display LED red ON On LCD*/
    	LCD_enuDisplayString("LED1:OFF,LED2:ON");
    61d8:	83 eb       	ldi	r24, 0xB3	; 179
    61da:	90 e0       	ldi	r25, 0x00	; 0
    61dc:	0e 94 d4 24 	call	0x49a8	; 0x49a8 <LCD_enuDisplayString>
    	Local_enuErrorState= SERVO_enuSetAngle(-90);
    61e0:	86 ea       	ldi	r24, 0xA6	; 166
    61e2:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <SERVO_enuSetAngle>
    61e6:	89 8b       	std	Y+17, r24	; 0x11
    	Local_enuErrorState =LCD_enuGoToPosition(2,1);
    61e8:	82 e0       	ldi	r24, 0x02	; 2
    61ea:	61 e0       	ldi	r22, 0x01	; 1
    61ec:	0e 94 13 25 	call	0x4a26	; 0x4a26 <LCD_enuGoToPosition>
    61f0:	89 8b       	std	Y+17, r24	; 0x11
    	Local_enuErrorState =LCD_enuDisplayString("Door Closed");
    61f2:	84 ec       	ldi	r24, 0xC4	; 196
    61f4:	90 e0       	ldi	r25, 0x00	; 0
    61f6:	0e 94 d4 24 	call	0x49a8	; 0x49a8 <LCD_enuDisplayString>
    61fa:	89 8b       	std	Y+17, r24	; 0x11

        Local_enuErrorState = ES_NOK;
    61fc:	19 8a       	std	Y+17, r1	; 0x11
    61fe:	2c c0       	rjmp	.+88     	; 0x6258 <APP_enuCheckUserPassword+0x326>
	}
	else if(check_find==LOG_USER_NOTFOUND)
    6200:	88 89       	ldd	r24, Y+16	; 0x10
    6202:	83 30       	cpi	r24, 0x03	; 3
    6204:	49 f5       	brne	.+82     	; 0x6258 <APP_enuCheckUserPassword+0x326>
	{

	    	Local_enuErrorState =HC_05_enuSendString("\r\nWrong User\r\n");
    6206:	8e e0       	ldi	r24, 0x0E	; 14
    6208:	91 e0       	ldi	r25, 0x01	; 1
    620a:	0e 94 59 29 	call	0x52b2	; 0x52b2 <HC_05_enuSendString>
    620e:	89 8b       	std	Y+17, r24	; 0x11
			/*Turn On red Led */
	   	    LED_enuTurnON(&LED_AstrLedConfig[1]);
    6210:	87 e7       	ldi	r24, 0x77	; 119
    6212:	96 e0       	ldi	r25, 0x06	; 6
    6214:	0e 94 32 21 	call	0x4264	; 0x4264 <LED_enuTurnON>
	   	    LED_enuTurnOFF(&LED_AstrLedConfig[0]);
    6218:	83 e7       	ldi	r24, 0x73	; 115
    621a:	96 e0       	ldi	r25, 0x06	; 6
    621c:	0e 94 6d 21 	call	0x42da	; 0x42da <LED_enuTurnOFF>
	   	    GREENLED_State=0;
    6220:	10 92 97 07 	sts	0x0797, r1
	   	 	REDLED_State=1;
    6224:	81 e0       	ldi	r24, 0x01	; 1
    6226:	80 93 98 07 	sts	0x0798, r24
	    	LCD_enuGoToPosition(1,1);
    622a:	81 e0       	ldi	r24, 0x01	; 1
    622c:	61 e0       	ldi	r22, 0x01	; 1
    622e:	0e 94 13 25 	call	0x4a26	; 0x4a26 <LCD_enuGoToPosition>
	    	/*Display LED red ON On LCD*/
	    	LCD_enuDisplayString("LED1:OFF,LED2:ON");
    6232:	83 eb       	ldi	r24, 0xB3	; 179
    6234:	90 e0       	ldi	r25, 0x00	; 0
    6236:	0e 94 d4 24 	call	0x49a8	; 0x49a8 <LCD_enuDisplayString>
	    	Local_enuErrorState= SERVO_enuSetAngle(-90);
    623a:	86 ea       	ldi	r24, 0xA6	; 166
    623c:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <SERVO_enuSetAngle>
    6240:	89 8b       	std	Y+17, r24	; 0x11
	    	Local_enuErrorState =LCD_enuGoToPosition(2,1);
    6242:	82 e0       	ldi	r24, 0x02	; 2
    6244:	61 e0       	ldi	r22, 0x01	; 1
    6246:	0e 94 13 25 	call	0x4a26	; 0x4a26 <LCD_enuGoToPosition>
    624a:	89 8b       	std	Y+17, r24	; 0x11
	    	Local_enuErrorState =LCD_enuDisplayString("Door Closed");
    624c:	84 ec       	ldi	r24, 0xC4	; 196
    624e:	90 e0       	ldi	r25, 0x00	; 0
    6250:	0e 94 d4 24 	call	0x49a8	; 0x49a8 <LCD_enuDisplayString>
    6254:	89 8b       	std	Y+17, r24	; 0x11

	       Local_enuErrorState = ES_NOK;
    6256:	19 8a       	std	Y+17, r1	; 0x11
		}

   return Local_enuErrorState;
    6258:	89 89       	ldd	r24, Y+17	; 0x11

}
    625a:	e1 96       	adiw	r28, 0x31	; 49
    625c:	0f b6       	in	r0, 0x3f	; 63
    625e:	f8 94       	cli
    6260:	de bf       	out	0x3e, r29	; 62
    6262:	0f be       	out	0x3f, r0	; 63
    6264:	cd bf       	out	0x3d, r28	; 61
    6266:	cf 91       	pop	r28
    6268:	df 91       	pop	r29
    626a:	08 95       	ret

0000626c <Master_Mode>:


void Master_Mode(void)
{
    626c:	df 93       	push	r29
    626e:	cf 93       	push	r28
    6270:	00 d0       	rcall	.+0      	; 0x6272 <Master_Mode+0x6>
    6272:	0f 92       	push	r0
    6274:	cd b7       	in	r28, 0x3d	; 61
    6276:	de b7       	in	r29, 0x3e	; 62
	u8 Option;
	HC_05_enuSendString("\r\n*******Welcome to MASTER MODE*******\r\n");
    6278:	8d e1       	ldi	r24, 0x1D	; 29
    627a:	91 e0       	ldi	r25, 0x01	; 1
    627c:	0e 94 59 29 	call	0x52b2	; 0x52b2 <HC_05_enuSendString>

	while(1)
	{
		HC_05_enuSendString("1-ADD USER\r\n2-Delete USER\r\n3-CHANGE PASSWORD\r\n4-SHOW USERS\r\n5-SHOW HOME STATUES\r\n6-Control Room\r\n7-RETURN HOME PAGE\r\nYOUR OPTION NUMBER: ");
    6280:	86 e4       	ldi	r24, 0x46	; 70
    6282:	91 e0       	ldi	r25, 0x01	; 1
    6284:	0e 94 59 29 	call	0x52b2	; 0x52b2 <HC_05_enuSendString>
		HC_05_enuRecieveChar(&Option);
    6288:	ce 01       	movw	r24, r28
    628a:	01 96       	adiw	r24, 0x01	; 1
    628c:	0e 94 7f 29 	call	0x52fe	; 0x52fe <HC_05_enuRecieveChar>
		HC_05_enuSendChar(Option);
    6290:	89 81       	ldd	r24, Y+1	; 0x01
    6292:	0e 94 6e 29 	call	0x52dc	; 0x52dc <HC_05_enuSendChar>
		switch(Option)
    6296:	89 81       	ldd	r24, Y+1	; 0x01
    6298:	28 2f       	mov	r18, r24
    629a:	30 e0       	ldi	r19, 0x00	; 0
    629c:	3b 83       	std	Y+3, r19	; 0x03
    629e:	2a 83       	std	Y+2, r18	; 0x02
    62a0:	8a 81       	ldd	r24, Y+2	; 0x02
    62a2:	9b 81       	ldd	r25, Y+3	; 0x03
    62a4:	84 33       	cpi	r24, 0x34	; 52
    62a6:	91 05       	cpc	r25, r1
    62a8:	71 f1       	breq	.+92     	; 0x6306 <Master_Mode+0x9a>
    62aa:	2a 81       	ldd	r18, Y+2	; 0x02
    62ac:	3b 81       	ldd	r19, Y+3	; 0x03
    62ae:	25 33       	cpi	r18, 0x35	; 53
    62b0:	31 05       	cpc	r19, r1
    62b2:	84 f4       	brge	.+32     	; 0x62d4 <Master_Mode+0x68>
    62b4:	8a 81       	ldd	r24, Y+2	; 0x02
    62b6:	9b 81       	ldd	r25, Y+3	; 0x03
    62b8:	82 33       	cpi	r24, 0x32	; 50
    62ba:	91 05       	cpc	r25, r1
    62bc:	f1 f0       	breq	.+60     	; 0x62fa <Master_Mode+0x8e>
    62be:	2a 81       	ldd	r18, Y+2	; 0x02
    62c0:	3b 81       	ldd	r19, Y+3	; 0x03
    62c2:	23 33       	cpi	r18, 0x33	; 51
    62c4:	31 05       	cpc	r19, r1
    62c6:	e4 f4       	brge	.+56     	; 0x6300 <Master_Mode+0x94>
    62c8:	8a 81       	ldd	r24, Y+2	; 0x02
    62ca:	9b 81       	ldd	r25, Y+3	; 0x03
    62cc:	81 33       	cpi	r24, 0x31	; 49
    62ce:	91 05       	cpc	r25, r1
    62d0:	89 f0       	breq	.+34     	; 0x62f4 <Master_Mode+0x88>
    62d2:	d6 cf       	rjmp	.-84     	; 0x6280 <Master_Mode+0x14>
    62d4:	2a 81       	ldd	r18, Y+2	; 0x02
    62d6:	3b 81       	ldd	r19, Y+3	; 0x03
    62d8:	26 33       	cpi	r18, 0x36	; 54
    62da:	31 05       	cpc	r19, r1
    62dc:	d1 f0       	breq	.+52     	; 0x6312 <Master_Mode+0xa6>
    62de:	8a 81       	ldd	r24, Y+2	; 0x02
    62e0:	9b 81       	ldd	r25, Y+3	; 0x03
    62e2:	86 33       	cpi	r24, 0x36	; 54
    62e4:	91 05       	cpc	r25, r1
    62e6:	94 f0       	brlt	.+36     	; 0x630c <Master_Mode+0xa0>
    62e8:	2a 81       	ldd	r18, Y+2	; 0x02
    62ea:	3b 81       	ldd	r19, Y+3	; 0x03
    62ec:	27 33       	cpi	r18, 0x37	; 55
    62ee:	31 05       	cpc	r19, r1
    62f0:	99 f0       	breq	.+38     	; 0x6318 <Master_Mode+0xac>
    62f2:	c6 cf       	rjmp	.-116    	; 0x6280 <Master_Mode+0x14>
		{
		case '1':
			Add_User();
    62f4:	0e 94 92 31 	call	0x6324	; 0x6324 <Add_User>
    62f8:	c3 cf       	rjmp	.-122    	; 0x6280 <Master_Mode+0x14>
			break;
		case '2':
			DELETE_User();
    62fa:	0e 94 f3 31 	call	0x63e6	; 0x63e6 <DELETE_User>
    62fe:	c0 cf       	rjmp	.-128    	; 0x6280 <Master_Mode+0x14>
			break;
		case '3':
			Change_Password();
    6300:	0e 94 2e 33 	call	0x665c	; 0x665c <Change_Password>
    6304:	09 c0       	rjmp	.+18     	; 0x6318 <Master_Mode+0xac>
			return;
			break;
		case '4':
			Show_Users();
    6306:	0e 94 87 32 	call	0x650e	; 0x650e <Show_Users>
    630a:	ba cf       	rjmp	.-140    	; 0x6280 <Master_Mode+0x14>
			break;
		case '5':
			Show_Home_State();
    630c:	0e 94 f6 33 	call	0x67ec	; 0x67ec <Show_Home_State>
    6310:	b7 cf       	rjmp	.-146    	; 0x6280 <Master_Mode+0x14>
			break;
		case '6':
			Control_Room();
    6312:	0e 94 2e 35 	call	0x6a5c	; 0x6a5c <Control_Room>
    6316:	b4 cf       	rjmp	.-152    	; 0x6280 <Master_Mode+0x14>
		default:
			//HC_05_enuSendString("WRONG CHOICE OPTION\r\n\r\n");
			break;
		}
	}
}
    6318:	0f 90       	pop	r0
    631a:	0f 90       	pop	r0
    631c:	0f 90       	pop	r0
    631e:	cf 91       	pop	r28
    6320:	df 91       	pop	r29
    6322:	08 95       	ret

00006324 <Add_User>:

/****************************************
 *  Function to Add New user in EEPROM
 * ***************************************/
void Add_User(void)
 {
    6324:	df 93       	push	r29
    6326:	cf 93       	push	r28
    6328:	cd b7       	in	r28, 0x3d	; 61
    632a:	de b7       	in	r29, 0x3e	; 62
    632c:	61 97       	sbiw	r28, 0x11	; 17
    632e:	0f b6       	in	r0, 0x3f	; 63
    6330:	f8 94       	cli
    6332:	de bf       	out	0x3e, r29	; 62
    6334:	0f be       	out	0x3f, r0	; 63
    6336:	cd bf       	out	0x3d, r28	; 61

	u8 Index=0;
    6338:	19 82       	std	Y+1, r1	; 0x01
	User_t InputUser;
	Show_Users();
    633a:	0e 94 87 32 	call	0x650e	; 0x650e <Show_Users>

	HC_05_enuSendString("\r\nEnter INDEX of FREE Space:");
    633e:	80 ed       	ldi	r24, 0xD0	; 208
    6340:	91 e0       	ldi	r25, 0x01	; 1
    6342:	0e 94 59 29 	call	0x52b2	; 0x52b2 <HC_05_enuSendString>
	HC_05_enuRecieveChar(&Index);
    6346:	ce 01       	movw	r24, r28
    6348:	01 96       	adiw	r24, 0x01	; 1
    634a:	0e 94 7f 29 	call	0x52fe	; 0x52fe <HC_05_enuRecieveChar>
	HC_05_enuSendChar(Index);
    634e:	89 81       	ldd	r24, Y+1	; 0x01
    6350:	0e 94 6e 29 	call	0x52dc	; 0x52dc <HC_05_enuSendChar>
	readUserFromEEPROM(&InputUser,(Index-'0'));
    6354:	89 81       	ldd	r24, Y+1	; 0x01
    6356:	28 2f       	mov	r18, r24
    6358:	20 53       	subi	r18, 0x30	; 48
    635a:	ce 01       	movw	r24, r28
    635c:	02 96       	adiw	r24, 0x02	; 2
    635e:	62 2f       	mov	r22, r18
    6360:	0e 94 2c 34 	call	0x6858	; 0x6858 <readUserFromEEPROM>
	if(strcmp(InputUser.username, "FREE") != 0)
    6364:	ce 01       	movw	r24, r28
    6366:	02 96       	adiw	r24, 0x02	; 2
    6368:	2d ee       	ldi	r18, 0xED	; 237
    636a:	31 e0       	ldi	r19, 0x01	; 1
    636c:	b9 01       	movw	r22, r18
    636e:	0e 94 51 36 	call	0x6ca2	; 0x6ca2 <strcmp>
    6372:	00 97       	sbiw	r24, 0x00	; 0
    6374:	29 f0       	breq	.+10     	; 0x6380 <Add_User+0x5c>
	{
		HC_05_enuSendString("\r\nWRONG User Index. Choose FREE Space");
    6376:	82 ef       	ldi	r24, 0xF2	; 242
    6378:	91 e0       	ldi	r25, 0x01	; 1
    637a:	0e 94 59 29 	call	0x52b2	; 0x52b2 <HC_05_enuSendString>
    637e:	2a c0       	rjmp	.+84     	; 0x63d4 <Add_User+0xb0>
		return;
	}
	HC_05_enuSendString("\r\n");
    6380:	80 eb       	ldi	r24, 0xB0	; 176
    6382:	90 e0       	ldi	r25, 0x00	; 0
    6384:	0e 94 59 29 	call	0x52b2	; 0x52b2 <HC_05_enuSendString>



	// Get username from the user
	 HC_05_enuSendString("\r\nEnter Username: ");
    6388:	88 e1       	ldi	r24, 0x18	; 24
    638a:	92 e0       	ldi	r25, 0x02	; 2
    638c:	0e 94 59 29 	call	0x52b2	; 0x52b2 <HC_05_enuSendString>
	 HC_05_enuRecieveString(InputUser.username);
    6390:	ce 01       	movw	r24, r28
    6392:	02 96       	adiw	r24, 0x02	; 2
    6394:	0e 94 44 29 	call	0x5288	; 0x5288 <HC_05_enuRecieveString>
	 HC_05_enuSendString(InputUser.username);
    6398:	ce 01       	movw	r24, r28
    639a:	02 96       	adiw	r24, 0x02	; 2
    639c:	0e 94 59 29 	call	0x52b2	; 0x52b2 <HC_05_enuSendString>
	// HC_05_enuSendString("\r\t");


	 // Get password from the user
	 HC_05_enuSendString("\r\nEnter Password: ");
    63a0:	8b e2       	ldi	r24, 0x2B	; 43
    63a2:	92 e0       	ldi	r25, 0x02	; 2
    63a4:	0e 94 59 29 	call	0x52b2	; 0x52b2 <HC_05_enuSendString>
	 HC_05_enuRecieveString(InputUser.password);
    63a8:	ce 01       	movw	r24, r28
    63aa:	02 96       	adiw	r24, 0x02	; 2
    63ac:	08 96       	adiw	r24, 0x08	; 8
    63ae:	0e 94 44 29 	call	0x5288	; 0x5288 <HC_05_enuRecieveString>
	 HC_05_enuSendString(InputUser.password);
    63b2:	ce 01       	movw	r24, r28
    63b4:	02 96       	adiw	r24, 0x02	; 2
    63b6:	08 96       	adiw	r24, 0x08	; 8
    63b8:	0e 94 59 29 	call	0x52b2	; 0x52b2 <HC_05_enuSendString>
	// HC_05_enuSendString("\r\t");

	 // Store the new user in EEPROM
	 storeUserInEEPROM(&InputUser, (Index-'0'));
    63bc:	89 81       	ldd	r24, Y+1	; 0x01
    63be:	28 2f       	mov	r18, r24
    63c0:	20 53       	subi	r18, 0x30	; 48
    63c2:	ce 01       	movw	r24, r28
    63c4:	02 96       	adiw	r24, 0x02	; 2
    63c6:	62 2f       	mov	r22, r18
    63c8:	0e 94 37 2e 	call	0x5c6e	; 0x5c6e <storeUserInEEPROM>

	 HC_05_enuSendString("User added successfully!");
    63cc:	8e e3       	ldi	r24, 0x3E	; 62
    63ce:	92 e0       	ldi	r25, 0x02	; 2
    63d0:	0e 94 59 29 	call	0x52b2	; 0x52b2 <HC_05_enuSendString>


}
    63d4:	61 96       	adiw	r28, 0x11	; 17
    63d6:	0f b6       	in	r0, 0x3f	; 63
    63d8:	f8 94       	cli
    63da:	de bf       	out	0x3e, r29	; 62
    63dc:	0f be       	out	0x3f, r0	; 63
    63de:	cd bf       	out	0x3d, r28	; 61
    63e0:	cf 91       	pop	r28
    63e2:	df 91       	pop	r29
    63e4:	08 95       	ret

000063e6 <DELETE_User>:

void DELETE_User(void)
{
    63e6:	df 93       	push	r29
    63e8:	cf 93       	push	r28
    63ea:	cd b7       	in	r28, 0x3d	; 61
    63ec:	de b7       	in	r29, 0x3e	; 62
    63ee:	6b 97       	sbiw	r28, 0x1b	; 27
    63f0:	0f b6       	in	r0, 0x3f	; 63
    63f2:	f8 94       	cli
    63f4:	de bf       	out	0x3e, r29	; 62
    63f6:	0f be       	out	0x3f, r0	; 63
    63f8:	cd bf       	out	0x3d, r28	; 61
	u8 Index=0;
    63fa:	19 82       	std	Y+1, r1	; 0x01
	Show_Users();
    63fc:	0e 94 87 32 	call	0x650e	; 0x650e <Show_Users>

	HC_05_enuSendString("Enter Number of user you want Delete:");
    6400:	87 e5       	ldi	r24, 0x57	; 87
    6402:	92 e0       	ldi	r25, 0x02	; 2
    6404:	0e 94 59 29 	call	0x52b2	; 0x52b2 <HC_05_enuSendString>
	HC_05_enuRecieveChar(&Index);
    6408:	ce 01       	movw	r24, r28
    640a:	01 96       	adiw	r24, 0x01	; 1
    640c:	0e 94 7f 29 	call	0x52fe	; 0x52fe <HC_05_enuRecieveChar>
	HC_05_enuSendChar(Index);
    6410:	89 81       	ldd	r24, Y+1	; 0x01
    6412:	0e 94 6e 29 	call	0x52dc	; 0x52dc <HC_05_enuSendChar>
	if(Index >30 && Index<40)
    6416:	89 81       	ldd	r24, Y+1	; 0x01
    6418:	8f 31       	cpi	r24, 0x1F	; 31
    641a:	40 f0       	brcs	.+16     	; 0x642c <DELETE_User+0x46>
    641c:	89 81       	ldd	r24, Y+1	; 0x01
    641e:	88 32       	cpi	r24, 0x28	; 40
    6420:	28 f4       	brcc	.+10     	; 0x642c <DELETE_User+0x46>
	{
		HC_05_enuSendString("WRONG User Index");
    6422:	8d e7       	ldi	r24, 0x7D	; 125
    6424:	92 e0       	ldi	r25, 0x02	; 2
    6426:	0e 94 59 29 	call	0x52b2	; 0x52b2 <HC_05_enuSendString>
    642a:	68 c0       	rjmp	.+208    	; 0x64fc <DELETE_User+0x116>
		return;
	}
	HC_05_enuSendString("\r\n");
    642c:	80 eb       	ldi	r24, 0xB0	; 176
    642e:	90 e0       	ldi	r25, 0x00	; 0
    6430:	0e 94 59 29 	call	0x52b2	; 0x52b2 <HC_05_enuSendString>

	User_t FREE[1]={{"FREE","FREE"}};
    6434:	80 e1       	ldi	r24, 0x10	; 16
    6436:	fe 01       	movw	r30, r28
    6438:	32 96       	adiw	r30, 0x02	; 2
    643a:	df 01       	movw	r26, r30
    643c:	98 2f       	mov	r25, r24
    643e:	1d 92       	st	X+, r1
    6440:	9a 95       	dec	r25
    6442:	e9 f7       	brne	.-6      	; 0x643e <DELETE_User+0x58>
    6444:	de 01       	movw	r26, r28
    6446:	12 96       	adiw	r26, 0x02	; 2
    6448:	bb 8b       	std	Y+19, r27	; 0x13
    644a:	aa 8b       	std	Y+18, r26	; 0x12
    644c:	ed ee       	ldi	r30, 0xED	; 237
    644e:	f1 e0       	ldi	r31, 0x01	; 1
    6450:	fd 8b       	std	Y+21, r31	; 0x15
    6452:	ec 8b       	std	Y+20, r30	; 0x14
    6454:	f5 e0       	ldi	r31, 0x05	; 5
    6456:	fe 8b       	std	Y+22, r31	; 0x16
    6458:	ac 89       	ldd	r26, Y+20	; 0x14
    645a:	bd 89       	ldd	r27, Y+21	; 0x15
    645c:	0c 90       	ld	r0, X
    645e:	ec 89       	ldd	r30, Y+20	; 0x14
    6460:	fd 89       	ldd	r31, Y+21	; 0x15
    6462:	31 96       	adiw	r30, 0x01	; 1
    6464:	fd 8b       	std	Y+21, r31	; 0x15
    6466:	ec 8b       	std	Y+20, r30	; 0x14
    6468:	aa 89       	ldd	r26, Y+18	; 0x12
    646a:	bb 89       	ldd	r27, Y+19	; 0x13
    646c:	0c 92       	st	X, r0
    646e:	ea 89       	ldd	r30, Y+18	; 0x12
    6470:	fb 89       	ldd	r31, Y+19	; 0x13
    6472:	31 96       	adiw	r30, 0x01	; 1
    6474:	fb 8b       	std	Y+19, r31	; 0x13
    6476:	ea 8b       	std	Y+18, r30	; 0x12
    6478:	fe 89       	ldd	r31, Y+22	; 0x16
    647a:	f1 50       	subi	r31, 0x01	; 1
    647c:	fe 8b       	std	Y+22, r31	; 0x16
    647e:	8e 89       	ldd	r24, Y+22	; 0x16
    6480:	88 23       	and	r24, r24
    6482:	51 f7       	brne	.-44     	; 0x6458 <DELETE_User+0x72>
    6484:	83 e0       	ldi	r24, 0x03	; 3
    6486:	fe 01       	movw	r30, r28
    6488:	37 96       	adiw	r30, 0x07	; 7
    648a:	df 01       	movw	r26, r30
    648c:	98 2f       	mov	r25, r24
    648e:	1d 92       	st	X+, r1
    6490:	9a 95       	dec	r25
    6492:	e9 f7       	brne	.-6      	; 0x648e <DELETE_User+0xa8>
    6494:	de 01       	movw	r26, r28
    6496:	1a 96       	adiw	r26, 0x0a	; 10
    6498:	b8 8f       	std	Y+24, r27	; 0x18
    649a:	af 8b       	std	Y+23, r26	; 0x17
    649c:	ed ee       	ldi	r30, 0xED	; 237
    649e:	f1 e0       	ldi	r31, 0x01	; 1
    64a0:	fa 8f       	std	Y+26, r31	; 0x1a
    64a2:	e9 8f       	std	Y+25, r30	; 0x19
    64a4:	f5 e0       	ldi	r31, 0x05	; 5
    64a6:	fb 8f       	std	Y+27, r31	; 0x1b
    64a8:	a9 8d       	ldd	r26, Y+25	; 0x19
    64aa:	ba 8d       	ldd	r27, Y+26	; 0x1a
    64ac:	0c 90       	ld	r0, X
    64ae:	e9 8d       	ldd	r30, Y+25	; 0x19
    64b0:	fa 8d       	ldd	r31, Y+26	; 0x1a
    64b2:	31 96       	adiw	r30, 0x01	; 1
    64b4:	fa 8f       	std	Y+26, r31	; 0x1a
    64b6:	e9 8f       	std	Y+25, r30	; 0x19
    64b8:	af 89       	ldd	r26, Y+23	; 0x17
    64ba:	b8 8d       	ldd	r27, Y+24	; 0x18
    64bc:	0c 92       	st	X, r0
    64be:	ef 89       	ldd	r30, Y+23	; 0x17
    64c0:	f8 8d       	ldd	r31, Y+24	; 0x18
    64c2:	31 96       	adiw	r30, 0x01	; 1
    64c4:	f8 8f       	std	Y+24, r31	; 0x18
    64c6:	ef 8b       	std	Y+23, r30	; 0x17
    64c8:	fb 8d       	ldd	r31, Y+27	; 0x1b
    64ca:	f1 50       	subi	r31, 0x01	; 1
    64cc:	fb 8f       	std	Y+27, r31	; 0x1b
    64ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    64d0:	88 23       	and	r24, r24
    64d2:	51 f7       	brne	.-44     	; 0x64a8 <DELETE_User+0xc2>
    64d4:	83 e0       	ldi	r24, 0x03	; 3
    64d6:	fe 01       	movw	r30, r28
    64d8:	3f 96       	adiw	r30, 0x0f	; 15
    64da:	df 01       	movw	r26, r30
    64dc:	98 2f       	mov	r25, r24
    64de:	1d 92       	st	X+, r1
    64e0:	9a 95       	dec	r25
    64e2:	e9 f7       	brne	.-6      	; 0x64de <DELETE_User+0xf8>

	storeUserInEEPROM(&FREE[0],(Index-'0'));
    64e4:	89 81       	ldd	r24, Y+1	; 0x01
    64e6:	28 2f       	mov	r18, r24
    64e8:	20 53       	subi	r18, 0x30	; 48
    64ea:	ce 01       	movw	r24, r28
    64ec:	02 96       	adiw	r24, 0x02	; 2
    64ee:	62 2f       	mov	r22, r18
    64f0:	0e 94 37 2e 	call	0x5c6e	; 0x5c6e <storeUserInEEPROM>

	HC_05_enuSendString("User Deleted successfully!");
    64f4:	8e e8       	ldi	r24, 0x8E	; 142
    64f6:	92 e0       	ldi	r25, 0x02	; 2
    64f8:	0e 94 59 29 	call	0x52b2	; 0x52b2 <HC_05_enuSendString>

}
    64fc:	6b 96       	adiw	r28, 0x1b	; 27
    64fe:	0f b6       	in	r0, 0x3f	; 63
    6500:	f8 94       	cli
    6502:	de bf       	out	0x3e, r29	; 62
    6504:	0f be       	out	0x3f, r0	; 63
    6506:	cd bf       	out	0x3d, r28	; 61
    6508:	cf 91       	pop	r28
    650a:	df 91       	pop	r29
    650c:	08 95       	ret

0000650e <Show_Users>:

void Show_Users(void)
{
    650e:	df 93       	push	r29
    6510:	cf 93       	push	r28
    6512:	cd b7       	in	r28, 0x3d	; 61
    6514:	de b7       	in	r29, 0x3e	; 62
    6516:	61 97       	sbiw	r28, 0x11	; 17
    6518:	0f b6       	in	r0, 0x3f	; 63
    651a:	f8 94       	cli
    651c:	de bf       	out	0x3e, r29	; 62
    651e:	0f be       	out	0x3f, r0	; 63
    6520:	cd bf       	out	0x3d, r28	; 61
	User_t storedUser;
	HC_05_enuSendString("\r\n***********USERS***********\r\n");
    6522:	89 ea       	ldi	r24, 0xA9	; 169
    6524:	92 e0       	ldi	r25, 0x02	; 2
    6526:	0e 94 59 29 	call	0x52b2	; 0x52b2 <HC_05_enuSendString>
	for(u8 i = 1; i < MAX_USERS; i++) //i is index of user
    652a:	81 e0       	ldi	r24, 0x01	; 1
    652c:	89 83       	std	Y+1, r24	; 0x01
    652e:	17 c0       	rjmp	.+46     	; 0x655e <Show_Users+0x50>
	{
		readUserFromEEPROM(&storedUser, i);
    6530:	ce 01       	movw	r24, r28
    6532:	02 96       	adiw	r24, 0x02	; 2
    6534:	69 81       	ldd	r22, Y+1	; 0x01
    6536:	0e 94 2c 34 	call	0x6858	; 0x6858 <readUserFromEEPROM>
		HC_05_enuSendChar(i+'0');
    653a:	89 81       	ldd	r24, Y+1	; 0x01
    653c:	80 5d       	subi	r24, 0xD0	; 208
    653e:	0e 94 6e 29 	call	0x52dc	; 0x52dc <HC_05_enuSendChar>
		HC_05_enuSendChar(')');
    6542:	89 e2       	ldi	r24, 0x29	; 41
    6544:	0e 94 6e 29 	call	0x52dc	; 0x52dc <HC_05_enuSendChar>
		HC_05_enuSendString(storedUser.username);
    6548:	ce 01       	movw	r24, r28
    654a:	02 96       	adiw	r24, 0x02	; 2
    654c:	0e 94 59 29 	call	0x52b2	; 0x52b2 <HC_05_enuSendString>
		HC_05_enuSendString("\r\n");
    6550:	80 eb       	ldi	r24, 0xB0	; 176
    6552:	90 e0       	ldi	r25, 0x00	; 0
    6554:	0e 94 59 29 	call	0x52b2	; 0x52b2 <HC_05_enuSendString>

void Show_Users(void)
{
	User_t storedUser;
	HC_05_enuSendString("\r\n***********USERS***********\r\n");
	for(u8 i = 1; i < MAX_USERS; i++) //i is index of user
    6558:	89 81       	ldd	r24, Y+1	; 0x01
    655a:	8f 5f       	subi	r24, 0xFF	; 255
    655c:	89 83       	std	Y+1, r24	; 0x01
    655e:	89 81       	ldd	r24, Y+1	; 0x01
    6560:	8a 30       	cpi	r24, 0x0A	; 10
    6562:	30 f3       	brcs	.-52     	; 0x6530 <Show_Users+0x22>
		HC_05_enuSendString(storedUser.username);
		HC_05_enuSendString("\r\n");

	}
	//HC_05_enuSendString("\r\n*********************************************\r\n");
}
    6564:	61 96       	adiw	r28, 0x11	; 17
    6566:	0f b6       	in	r0, 0x3f	; 63
    6568:	f8 94       	cli
    656a:	de bf       	out	0x3e, r29	; 62
    656c:	0f be       	out	0x3f, r0	; 63
    656e:	cd bf       	out	0x3d, r28	; 61
    6570:	cf 91       	pop	r28
    6572:	df 91       	pop	r29
    6574:	08 95       	ret

00006576 <USER_Mode>:


void USER_Mode(void)
{
    6576:	df 93       	push	r29
    6578:	cf 93       	push	r28
    657a:	00 d0       	rcall	.+0      	; 0x657c <USER_Mode+0x6>
    657c:	0f 92       	push	r0
    657e:	cd b7       	in	r28, 0x3d	; 61
    6580:	de b7       	in	r29, 0x3e	; 62
	u8 Option;
	HC_05_enuSendString("\r\n*******Welcome to USER MODE*******\r\n");
    6582:	89 ec       	ldi	r24, 0xC9	; 201
    6584:	92 e0       	ldi	r25, 0x02	; 2
    6586:	0e 94 59 29 	call	0x52b2	; 0x52b2 <HC_05_enuSendString>

	while(1)
	{
		HC_05_enuSendString("1-OPEN DOOR\r\n2-CLOSE DOOR\r\n3-CHANGE LEDs STATUES\r\n4-CHANGE PASSWORD\r\n5-SHOW HOME STATUES\r\n6-RETURN HOME PAGE\r\n");
    658a:	80 ef       	ldi	r24, 0xF0	; 240
    658c:	92 e0       	ldi	r25, 0x02	; 2
    658e:	0e 94 59 29 	call	0x52b2	; 0x52b2 <HC_05_enuSendString>
		HC_05_enuSendString("YOUR OPTION NUMBER:\r\n");
    6592:	8f e5       	ldi	r24, 0x5F	; 95
    6594:	93 e0       	ldi	r25, 0x03	; 3
    6596:	0e 94 59 29 	call	0x52b2	; 0x52b2 <HC_05_enuSendString>
		HC_05_enuRecieveChar(&Option);
    659a:	ce 01       	movw	r24, r28
    659c:	01 96       	adiw	r24, 0x01	; 1
    659e:	0e 94 7f 29 	call	0x52fe	; 0x52fe <HC_05_enuRecieveChar>
		HC_05_enuSendChar(Option);
    65a2:	89 81       	ldd	r24, Y+1	; 0x01
    65a4:	0e 94 6e 29 	call	0x52dc	; 0x52dc <HC_05_enuSendChar>
		HC_05_enuSendString("\n");
    65a8:	85 e7       	ldi	r24, 0x75	; 117
    65aa:	93 e0       	ldi	r25, 0x03	; 3
    65ac:	0e 94 59 29 	call	0x52b2	; 0x52b2 <HC_05_enuSendString>
		switch(Option)
    65b0:	89 81       	ldd	r24, Y+1	; 0x01
    65b2:	28 2f       	mov	r18, r24
    65b4:	30 e0       	ldi	r19, 0x00	; 0
    65b6:	3b 83       	std	Y+3, r19	; 0x03
    65b8:	2a 83       	std	Y+2, r18	; 0x02
    65ba:	8a 81       	ldd	r24, Y+2	; 0x02
    65bc:	9b 81       	ldd	r25, Y+3	; 0x03
    65be:	83 33       	cpi	r24, 0x33	; 51
    65c0:	91 05       	cpc	r25, r1
    65c2:	e9 f1       	breq	.+122    	; 0x663e <USER_Mode+0xc8>
    65c4:	2a 81       	ldd	r18, Y+2	; 0x02
    65c6:	3b 81       	ldd	r19, Y+3	; 0x03
    65c8:	24 33       	cpi	r18, 0x34	; 52
    65ca:	31 05       	cpc	r19, r1
    65cc:	5c f4       	brge	.+22     	; 0x65e4 <USER_Mode+0x6e>
    65ce:	8a 81       	ldd	r24, Y+2	; 0x02
    65d0:	9b 81       	ldd	r25, Y+3	; 0x03
    65d2:	81 33       	cpi	r24, 0x31	; 49
    65d4:	91 05       	cpc	r25, r1
    65d6:	b1 f0       	breq	.+44     	; 0x6604 <USER_Mode+0x8e>
    65d8:	2a 81       	ldd	r18, Y+2	; 0x02
    65da:	3b 81       	ldd	r19, Y+3	; 0x03
    65dc:	22 33       	cpi	r18, 0x32	; 50
    65de:	31 05       	cpc	r19, r1
    65e0:	01 f1       	breq	.+64     	; 0x6622 <USER_Mode+0xac>
    65e2:	d3 cf       	rjmp	.-90     	; 0x658a <USER_Mode+0x14>
    65e4:	8a 81       	ldd	r24, Y+2	; 0x02
    65e6:	9b 81       	ldd	r25, Y+3	; 0x03
    65e8:	85 33       	cpi	r24, 0x35	; 53
    65ea:	91 05       	cpc	r25, r1
    65ec:	71 f1       	breq	.+92     	; 0x664a <USER_Mode+0xd4>
    65ee:	2a 81       	ldd	r18, Y+2	; 0x02
    65f0:	3b 81       	ldd	r19, Y+3	; 0x03
    65f2:	25 33       	cpi	r18, 0x35	; 53
    65f4:	31 05       	cpc	r19, r1
    65f6:	34 f1       	brlt	.+76     	; 0x6644 <USER_Mode+0xce>
    65f8:	8a 81       	ldd	r24, Y+2	; 0x02
    65fa:	9b 81       	ldd	r25, Y+3	; 0x03
    65fc:	86 33       	cpi	r24, 0x36	; 54
    65fe:	91 05       	cpc	r25, r1
    6600:	39 f1       	breq	.+78     	; 0x6650 <USER_Mode+0xda>
    6602:	c3 cf       	rjmp	.-122    	; 0x658a <USER_Mode+0x14>
		{
		case '1':
			SERVO_enuSetAngle(90);
    6604:	8a e5       	ldi	r24, 0x5A	; 90
    6606:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <SERVO_enuSetAngle>
			/*Display Door Open On LCD*/
			LCD_enuGoToPosition(2,1);
    660a:	82 e0       	ldi	r24, 0x02	; 2
    660c:	61 e0       	ldi	r22, 0x01	; 1
    660e:	0e 94 13 25 	call	0x4a26	; 0x4a26 <LCD_enuGoToPosition>
			LCD_enuDisplayString("Door Open ");
    6612:	87 e7       	ldi	r24, 0x77	; 119
    6614:	93 e0       	ldi	r25, 0x03	; 3
    6616:	0e 94 d4 24 	call	0x49a8	; 0x49a8 <LCD_enuDisplayString>
			DOOR_State=1;
    661a:	81 e0       	ldi	r24, 0x01	; 1
    661c:	80 93 96 07 	sts	0x0796, r24
    6620:	b4 cf       	rjmp	.-152    	; 0x658a <USER_Mode+0x14>
			break;
		case '2':
			SERVO_enuSetAngle(-90);
    6622:	86 ea       	ldi	r24, 0xA6	; 166
    6624:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <SERVO_enuSetAngle>
			/*Display Door Close On LCD*/
			LCD_enuGoToPosition(2,1);
    6628:	82 e0       	ldi	r24, 0x02	; 2
    662a:	61 e0       	ldi	r22, 0x01	; 1
    662c:	0e 94 13 25 	call	0x4a26	; 0x4a26 <LCD_enuGoToPosition>
			LCD_enuDisplayString("Door Closed");
    6630:	84 ec       	ldi	r24, 0xC4	; 196
    6632:	90 e0       	ldi	r25, 0x00	; 0
    6634:	0e 94 d4 24 	call	0x49a8	; 0x49a8 <LCD_enuDisplayString>
			DOOR_State=0;
    6638:	10 92 96 07 	sts	0x0796, r1
    663c:	a6 cf       	rjmp	.-180    	; 0x658a <USER_Mode+0x14>
			break;
		case '3':
			Change_LED_State();
    663e:	0e 94 8b 34 	call	0x6916	; 0x6916 <Change_LED_State>
    6642:	a3 cf       	rjmp	.-186    	; 0x658a <USER_Mode+0x14>
			break;
		case '4':
			Change_Password();
    6644:	0e 94 2e 33 	call	0x665c	; 0x665c <Change_Password>
    6648:	03 c0       	rjmp	.+6      	; 0x6650 <USER_Mode+0xda>
			return;
			break;
		case '5':
			Show_Home_State();
    664a:	0e 94 f6 33 	call	0x67ec	; 0x67ec <Show_Home_State>
    664e:	9d cf       	rjmp	.-198    	; 0x658a <USER_Mode+0x14>
		default:
			//HC_05_enuSendString("WRONG CHOICE OPTION");
			break;
		}
	}
}
    6650:	0f 90       	pop	r0
    6652:	0f 90       	pop	r0
    6654:	0f 90       	pop	r0
    6656:	cf 91       	pop	r28
    6658:	df 91       	pop	r29
    665a:	08 95       	ret

0000665c <Change_Password>:



void Change_Password(void)
{
    665c:	df 93       	push	r29
    665e:	cf 93       	push	r28
    6660:	cd b7       	in	r28, 0x3d	; 61
    6662:	de b7       	in	r29, 0x3e	; 62
    6664:	69 97       	sbiw	r28, 0x19	; 25
    6666:	0f b6       	in	r0, 0x3f	; 63
    6668:	f8 94       	cli
    666a:	de bf       	out	0x3e, r29	; 62
    666c:	0f be       	out	0x3f, r0	; 63
    666e:	cd bf       	out	0x3d, r28	; 61

	u8 InputPASS[PASSWORD_SIZE]={0};
    6670:	88 e0       	ldi	r24, 0x08	; 8
    6672:	fe 01       	movw	r30, r28
    6674:	72 96       	adiw	r30, 0x12	; 18
    6676:	df 01       	movw	r26, r30
    6678:	98 2f       	mov	r25, r24
    667a:	1d 92       	st	X+, r1
    667c:	9a 95       	dec	r25
    667e:	e9 f7       	brne	.-6      	; 0x667a <Change_Password+0x1e>

	HC_05_enuSendString("\r\nEnter new Password:");
    6680:	82 e8       	ldi	r24, 0x82	; 130
    6682:	93 e0       	ldi	r25, 0x03	; 3
    6684:	0e 94 59 29 	call	0x52b2	; 0x52b2 <HC_05_enuSendString>
	HC_05_enuRecieveString(InputPASS);
    6688:	ce 01       	movw	r24, r28
    668a:	42 96       	adiw	r24, 0x12	; 18
    668c:	0e 94 44 29 	call	0x5288	; 0x5288 <HC_05_enuRecieveString>
	HC_05_enuSendString(InputPASS);
    6690:	ce 01       	movw	r24, r28
    6692:	42 96       	adiw	r24, 0x12	; 18
    6694:	0e 94 59 29 	call	0x52b2	; 0x52b2 <HC_05_enuSendString>
	//HC_05_enuSendString("\r\n");


	u16 address = EEPROM_START_ADDRESS + Current_Index * (USERNAME_SIZE + PASSWORD_SIZE);
    6698:	80 91 99 07 	lds	r24, 0x0799
    669c:	88 2f       	mov	r24, r24
    669e:	90 e0       	ldi	r25, 0x00	; 0
    66a0:	82 95       	swap	r24
    66a2:	92 95       	swap	r25
    66a4:	90 7f       	andi	r25, 0xF0	; 240
    66a6:	98 27       	eor	r25, r24
    66a8:	80 7f       	andi	r24, 0xF0	; 240
    66aa:	98 27       	eor	r25, r24
    66ac:	99 8b       	std	Y+17, r25	; 0x11
    66ae:	88 8b       	std	Y+16, r24	; 0x10

	address += USERNAME_SIZE; // after store username address is change
    66b0:	88 89       	ldd	r24, Y+16	; 0x10
    66b2:	99 89       	ldd	r25, Y+17	; 0x11
    66b4:	08 96       	adiw	r24, 0x08	; 8
    66b6:	99 8b       	std	Y+17, r25	; 0x11
    66b8:	88 8b       	std	Y+16, r24	; 0x10

	// Store password in EEPROM
	for(u8 i = 0; i < PASSWORD_SIZE; i++)
    66ba:	1f 86       	std	Y+15, r1	; 0x0f
    66bc:	8a c0       	rjmp	.+276    	; 0x67d2 <Change_Password+0x176>
	{
		EEPROM_enuWriteData(address + i,InputPASS[i]);
    66be:	8f 85       	ldd	r24, Y+15	; 0x0f
    66c0:	28 2f       	mov	r18, r24
    66c2:	30 e0       	ldi	r19, 0x00	; 0
    66c4:	88 89       	ldd	r24, Y+16	; 0x10
    66c6:	99 89       	ldd	r25, Y+17	; 0x11
    66c8:	a9 01       	movw	r20, r18
    66ca:	48 0f       	add	r20, r24
    66cc:	59 1f       	adc	r21, r25
    66ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    66d0:	28 2f       	mov	r18, r24
    66d2:	30 e0       	ldi	r19, 0x00	; 0
    66d4:	ce 01       	movw	r24, r28
    66d6:	42 96       	adiw	r24, 0x12	; 18
    66d8:	fc 01       	movw	r30, r24
    66da:	e2 0f       	add	r30, r18
    66dc:	f3 1f       	adc	r31, r19
    66de:	20 81       	ld	r18, Z
    66e0:	ca 01       	movw	r24, r20
    66e2:	62 2f       	mov	r22, r18
    66e4:	0e 94 a2 29 	call	0x5344	; 0x5344 <EEPROM_enuWriteData>
    66e8:	80 e0       	ldi	r24, 0x00	; 0
    66ea:	90 e0       	ldi	r25, 0x00	; 0
    66ec:	a0 e2       	ldi	r26, 0x20	; 32
    66ee:	b1 e4       	ldi	r27, 0x41	; 65
    66f0:	8b 87       	std	Y+11, r24	; 0x0b
    66f2:	9c 87       	std	Y+12, r25	; 0x0c
    66f4:	ad 87       	std	Y+13, r26	; 0x0d
    66f6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    66f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    66fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    66fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    66fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    6700:	20 e0       	ldi	r18, 0x00	; 0
    6702:	30 e0       	ldi	r19, 0x00	; 0
    6704:	4a ef       	ldi	r20, 0xFA	; 250
    6706:	54 e4       	ldi	r21, 0x44	; 68
    6708:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    670c:	dc 01       	movw	r26, r24
    670e:	cb 01       	movw	r24, r22
    6710:	8f 83       	std	Y+7, r24	; 0x07
    6712:	98 87       	std	Y+8, r25	; 0x08
    6714:	a9 87       	std	Y+9, r26	; 0x09
    6716:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6718:	6f 81       	ldd	r22, Y+7	; 0x07
    671a:	78 85       	ldd	r23, Y+8	; 0x08
    671c:	89 85       	ldd	r24, Y+9	; 0x09
    671e:	9a 85       	ldd	r25, Y+10	; 0x0a
    6720:	20 e0       	ldi	r18, 0x00	; 0
    6722:	30 e0       	ldi	r19, 0x00	; 0
    6724:	40 e8       	ldi	r20, 0x80	; 128
    6726:	5f e3       	ldi	r21, 0x3F	; 63
    6728:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    672c:	88 23       	and	r24, r24
    672e:	2c f4       	brge	.+10     	; 0x673a <Change_Password+0xde>
		__ticks = 1;
    6730:	81 e0       	ldi	r24, 0x01	; 1
    6732:	90 e0       	ldi	r25, 0x00	; 0
    6734:	9e 83       	std	Y+6, r25	; 0x06
    6736:	8d 83       	std	Y+5, r24	; 0x05
    6738:	3f c0       	rjmp	.+126    	; 0x67b8 <Change_Password+0x15c>
	else if (__tmp > 65535)
    673a:	6f 81       	ldd	r22, Y+7	; 0x07
    673c:	78 85       	ldd	r23, Y+8	; 0x08
    673e:	89 85       	ldd	r24, Y+9	; 0x09
    6740:	9a 85       	ldd	r25, Y+10	; 0x0a
    6742:	20 e0       	ldi	r18, 0x00	; 0
    6744:	3f ef       	ldi	r19, 0xFF	; 255
    6746:	4f e7       	ldi	r20, 0x7F	; 127
    6748:	57 e4       	ldi	r21, 0x47	; 71
    674a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    674e:	18 16       	cp	r1, r24
    6750:	4c f5       	brge	.+82     	; 0x67a4 <Change_Password+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6752:	6b 85       	ldd	r22, Y+11	; 0x0b
    6754:	7c 85       	ldd	r23, Y+12	; 0x0c
    6756:	8d 85       	ldd	r24, Y+13	; 0x0d
    6758:	9e 85       	ldd	r25, Y+14	; 0x0e
    675a:	20 e0       	ldi	r18, 0x00	; 0
    675c:	30 e0       	ldi	r19, 0x00	; 0
    675e:	40 e2       	ldi	r20, 0x20	; 32
    6760:	51 e4       	ldi	r21, 0x41	; 65
    6762:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6766:	dc 01       	movw	r26, r24
    6768:	cb 01       	movw	r24, r22
    676a:	bc 01       	movw	r22, r24
    676c:	cd 01       	movw	r24, r26
    676e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6772:	dc 01       	movw	r26, r24
    6774:	cb 01       	movw	r24, r22
    6776:	9e 83       	std	Y+6, r25	; 0x06
    6778:	8d 83       	std	Y+5, r24	; 0x05
    677a:	0f c0       	rjmp	.+30     	; 0x679a <Change_Password+0x13e>
    677c:	88 ec       	ldi	r24, 0xC8	; 200
    677e:	90 e0       	ldi	r25, 0x00	; 0
    6780:	9c 83       	std	Y+4, r25	; 0x04
    6782:	8b 83       	std	Y+3, r24	; 0x03
    6784:	8b 81       	ldd	r24, Y+3	; 0x03
    6786:	9c 81       	ldd	r25, Y+4	; 0x04
    6788:	01 97       	sbiw	r24, 0x01	; 1
    678a:	f1 f7       	brne	.-4      	; 0x6788 <Change_Password+0x12c>
    678c:	9c 83       	std	Y+4, r25	; 0x04
    678e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6790:	8d 81       	ldd	r24, Y+5	; 0x05
    6792:	9e 81       	ldd	r25, Y+6	; 0x06
    6794:	01 97       	sbiw	r24, 0x01	; 1
    6796:	9e 83       	std	Y+6, r25	; 0x06
    6798:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    679a:	8d 81       	ldd	r24, Y+5	; 0x05
    679c:	9e 81       	ldd	r25, Y+6	; 0x06
    679e:	00 97       	sbiw	r24, 0x00	; 0
    67a0:	69 f7       	brne	.-38     	; 0x677c <Change_Password+0x120>
    67a2:	14 c0       	rjmp	.+40     	; 0x67cc <Change_Password+0x170>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    67a4:	6f 81       	ldd	r22, Y+7	; 0x07
    67a6:	78 85       	ldd	r23, Y+8	; 0x08
    67a8:	89 85       	ldd	r24, Y+9	; 0x09
    67aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    67ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    67b0:	dc 01       	movw	r26, r24
    67b2:	cb 01       	movw	r24, r22
    67b4:	9e 83       	std	Y+6, r25	; 0x06
    67b6:	8d 83       	std	Y+5, r24	; 0x05
    67b8:	8d 81       	ldd	r24, Y+5	; 0x05
    67ba:	9e 81       	ldd	r25, Y+6	; 0x06
    67bc:	9a 83       	std	Y+2, r25	; 0x02
    67be:	89 83       	std	Y+1, r24	; 0x01
    67c0:	89 81       	ldd	r24, Y+1	; 0x01
    67c2:	9a 81       	ldd	r25, Y+2	; 0x02
    67c4:	01 97       	sbiw	r24, 0x01	; 1
    67c6:	f1 f7       	brne	.-4      	; 0x67c4 <Change_Password+0x168>
    67c8:	9a 83       	std	Y+2, r25	; 0x02
    67ca:	89 83       	std	Y+1, r24	; 0x01
	u16 address = EEPROM_START_ADDRESS + Current_Index * (USERNAME_SIZE + PASSWORD_SIZE);

	address += USERNAME_SIZE; // after store username address is change

	// Store password in EEPROM
	for(u8 i = 0; i < PASSWORD_SIZE; i++)
    67cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    67ce:	8f 5f       	subi	r24, 0xFF	; 255
    67d0:	8f 87       	std	Y+15, r24	; 0x0f
    67d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    67d4:	88 30       	cpi	r24, 0x08	; 8
    67d6:	08 f4       	brcc	.+2      	; 0x67da <Change_Password+0x17e>
    67d8:	72 cf       	rjmp	.-284    	; 0x66be <Change_Password+0x62>
	{
		EEPROM_enuWriteData(address + i,InputPASS[i]);
		_delay_ms(10);
	}

}
    67da:	69 96       	adiw	r28, 0x19	; 25
    67dc:	0f b6       	in	r0, 0x3f	; 63
    67de:	f8 94       	cli
    67e0:	de bf       	out	0x3e, r29	; 62
    67e2:	0f be       	out	0x3f, r0	; 63
    67e4:	cd bf       	out	0x3d, r28	; 61
    67e6:	cf 91       	pop	r28
    67e8:	df 91       	pop	r29
    67ea:	08 95       	ret

000067ec <Show_Home_State>:


void Show_Home_State(void)
{
    67ec:	df 93       	push	r29
    67ee:	cf 93       	push	r28
    67f0:	cd b7       	in	r28, 0x3d	; 61
    67f2:	de b7       	in	r29, 0x3e	; 62
	HC_05_enuSendString("\r\n*****STATEUS*****\r\n");
    67f4:	88 e9       	ldi	r24, 0x98	; 152
    67f6:	93 e0       	ldi	r25, 0x03	; 3
    67f8:	0e 94 59 29 	call	0x52b2	; 0x52b2 <HC_05_enuSendString>
	if(DOOR_State)
    67fc:	80 91 96 07 	lds	r24, 0x0796
    6800:	88 23       	and	r24, r24
    6802:	29 f0       	breq	.+10     	; 0x680e <Show_Home_State+0x22>
	{
		HC_05_enuSendString("DOOR OPEN \r\n");
    6804:	8e ea       	ldi	r24, 0xAE	; 174
    6806:	93 e0       	ldi	r25, 0x03	; 3
    6808:	0e 94 59 29 	call	0x52b2	; 0x52b2 <HC_05_enuSendString>
    680c:	04 c0       	rjmp	.+8      	; 0x6816 <Show_Home_State+0x2a>
	}
	else
	{
		HC_05_enuSendString("DOOR Close\r\n");
    680e:	8b eb       	ldi	r24, 0xBB	; 187
    6810:	93 e0       	ldi	r25, 0x03	; 3
    6812:	0e 94 59 29 	call	0x52b2	; 0x52b2 <HC_05_enuSendString>
	}
	if(GREENLED_State)
    6816:	80 91 97 07 	lds	r24, 0x0797
    681a:	88 23       	and	r24, r24
    681c:	29 f0       	breq	.+10     	; 0x6828 <Show_Home_State+0x3c>
	{
		HC_05_enuSendString("GREEN LED ON\r\n");
    681e:	88 ec       	ldi	r24, 0xC8	; 200
    6820:	93 e0       	ldi	r25, 0x03	; 3
    6822:	0e 94 59 29 	call	0x52b2	; 0x52b2 <HC_05_enuSendString>
    6826:	04 c0       	rjmp	.+8      	; 0x6830 <Show_Home_State+0x44>
	}
	else
	{
		HC_05_enuSendString("GREEN LED OFF\r\n");
    6828:	87 ed       	ldi	r24, 0xD7	; 215
    682a:	93 e0       	ldi	r25, 0x03	; 3
    682c:	0e 94 59 29 	call	0x52b2	; 0x52b2 <HC_05_enuSendString>
	}
	if(REDLED_State)
    6830:	80 91 98 07 	lds	r24, 0x0798
    6834:	88 23       	and	r24, r24
    6836:	29 f0       	breq	.+10     	; 0x6842 <Show_Home_State+0x56>
	{
		HC_05_enuSendString("RED LED ON\r\n");
    6838:	87 ee       	ldi	r24, 0xE7	; 231
    683a:	93 e0       	ldi	r25, 0x03	; 3
    683c:	0e 94 59 29 	call	0x52b2	; 0x52b2 <HC_05_enuSendString>
    6840:	04 c0       	rjmp	.+8      	; 0x684a <Show_Home_State+0x5e>
	}
	else
	{
		HC_05_enuSendString("RED LED OFF\r\n");
    6842:	84 ef       	ldi	r24, 0xF4	; 244
    6844:	93 e0       	ldi	r25, 0x03	; 3
    6846:	0e 94 59 29 	call	0x52b2	; 0x52b2 <HC_05_enuSendString>
	}
	HC_05_enuSendString("\r\n*******************************\r\n");
    684a:	82 e0       	ldi	r24, 0x02	; 2
    684c:	94 e0       	ldi	r25, 0x04	; 4
    684e:	0e 94 59 29 	call	0x52b2	; 0x52b2 <HC_05_enuSendString>
}
    6852:	cf 91       	pop	r28
    6854:	df 91       	pop	r29
    6856:	08 95       	ret

00006858 <readUserFromEEPROM>:

/******************************************
 * Function to read user data from EEPROM
 * *****************************************/
void readUserFromEEPROM(User_t *user, u8 userIndex)
{
    6858:	df 93       	push	r29
    685a:	cf 93       	push	r28
    685c:	cd b7       	in	r28, 0x3d	; 61
    685e:	de b7       	in	r29, 0x3e	; 62
    6860:	27 97       	sbiw	r28, 0x07	; 7
    6862:	0f b6       	in	r0, 0x3f	; 63
    6864:	f8 94       	cli
    6866:	de bf       	out	0x3e, r29	; 62
    6868:	0f be       	out	0x3f, r0	; 63
    686a:	cd bf       	out	0x3d, r28	; 61
    686c:	9e 83       	std	Y+6, r25	; 0x06
    686e:	8d 83       	std	Y+5, r24	; 0x05
    6870:	6f 83       	std	Y+7, r22	; 0x07
    u16 address = EEPROM_START_ADDRESS + userIndex * (USERNAME_SIZE + PASSWORD_SIZE);
    6872:	8f 81       	ldd	r24, Y+7	; 0x07
    6874:	88 2f       	mov	r24, r24
    6876:	90 e0       	ldi	r25, 0x00	; 0
    6878:	82 95       	swap	r24
    687a:	92 95       	swap	r25
    687c:	90 7f       	andi	r25, 0xF0	; 240
    687e:	98 27       	eor	r25, r24
    6880:	80 7f       	andi	r24, 0xF0	; 240
    6882:	98 27       	eor	r25, r24
    6884:	9c 83       	std	Y+4, r25	; 0x04
    6886:	8b 83       	std	Y+3, r24	; 0x03

    // Read username from EEPROM
    for(u8 i = 0; i < USERNAME_SIZE; i++)
    6888:	1a 82       	std	Y+2, r1	; 0x02
    688a:	16 c0       	rjmp	.+44     	; 0x68b8 <readUserFromEEPROM+0x60>
    {
        EEPROM_enuReadData(address + i, &(user->username[i]));
    688c:	8a 81       	ldd	r24, Y+2	; 0x02
    688e:	28 2f       	mov	r18, r24
    6890:	30 e0       	ldi	r19, 0x00	; 0
    6892:	8b 81       	ldd	r24, Y+3	; 0x03
    6894:	9c 81       	ldd	r25, Y+4	; 0x04
    6896:	a9 01       	movw	r20, r18
    6898:	48 0f       	add	r20, r24
    689a:	59 1f       	adc	r21, r25
    689c:	2d 81       	ldd	r18, Y+5	; 0x05
    689e:	3e 81       	ldd	r19, Y+6	; 0x06
    68a0:	8a 81       	ldd	r24, Y+2	; 0x02
    68a2:	88 2f       	mov	r24, r24
    68a4:	90 e0       	ldi	r25, 0x00	; 0
    68a6:	28 0f       	add	r18, r24
    68a8:	39 1f       	adc	r19, r25
    68aa:	ca 01       	movw	r24, r20
    68ac:	b9 01       	movw	r22, r18
    68ae:	0e 94 db 29 	call	0x53b6	; 0x53b6 <EEPROM_enuReadData>
void readUserFromEEPROM(User_t *user, u8 userIndex)
{
    u16 address = EEPROM_START_ADDRESS + userIndex * (USERNAME_SIZE + PASSWORD_SIZE);

    // Read username from EEPROM
    for(u8 i = 0; i < USERNAME_SIZE; i++)
    68b2:	8a 81       	ldd	r24, Y+2	; 0x02
    68b4:	8f 5f       	subi	r24, 0xFF	; 255
    68b6:	8a 83       	std	Y+2, r24	; 0x02
    68b8:	8a 81       	ldd	r24, Y+2	; 0x02
    68ba:	88 30       	cpi	r24, 0x08	; 8
    68bc:	38 f3       	brcs	.-50     	; 0x688c <readUserFromEEPROM+0x34>
    {
        EEPROM_enuReadData(address + i, &(user->username[i]));
      //  HC_05_enuSendChar(user->username[i]);

    }
    address += USERNAME_SIZE;
    68be:	8b 81       	ldd	r24, Y+3	; 0x03
    68c0:	9c 81       	ldd	r25, Y+4	; 0x04
    68c2:	08 96       	adiw	r24, 0x08	; 8
    68c4:	9c 83       	std	Y+4, r25	; 0x04
    68c6:	8b 83       	std	Y+3, r24	; 0x03
   // HC_05_enuSendString("GG\r\t");

    // Read password from EEPROM
    for(u8 i = 0; i < PASSWORD_SIZE; i++)
    68c8:	19 82       	std	Y+1, r1	; 0x01
    68ca:	19 c0       	rjmp	.+50     	; 0x68fe <readUserFromEEPROM+0xa6>
    {
        EEPROM_enuReadData(address + i, &(user->password[i]));
    68cc:	89 81       	ldd	r24, Y+1	; 0x01
    68ce:	28 2f       	mov	r18, r24
    68d0:	30 e0       	ldi	r19, 0x00	; 0
    68d2:	8b 81       	ldd	r24, Y+3	; 0x03
    68d4:	9c 81       	ldd	r25, Y+4	; 0x04
    68d6:	a9 01       	movw	r20, r18
    68d8:	48 0f       	add	r20, r24
    68da:	59 1f       	adc	r21, r25
    68dc:	8d 81       	ldd	r24, Y+5	; 0x05
    68de:	9e 81       	ldd	r25, Y+6	; 0x06
    68e0:	9c 01       	movw	r18, r24
    68e2:	28 5f       	subi	r18, 0xF8	; 248
    68e4:	3f 4f       	sbci	r19, 0xFF	; 255
    68e6:	89 81       	ldd	r24, Y+1	; 0x01
    68e8:	88 2f       	mov	r24, r24
    68ea:	90 e0       	ldi	r25, 0x00	; 0
    68ec:	28 0f       	add	r18, r24
    68ee:	39 1f       	adc	r19, r25
    68f0:	ca 01       	movw	r24, r20
    68f2:	b9 01       	movw	r22, r18
    68f4:	0e 94 db 29 	call	0x53b6	; 0x53b6 <EEPROM_enuReadData>
    }
    address += USERNAME_SIZE;
   // HC_05_enuSendString("GG\r\t");

    // Read password from EEPROM
    for(u8 i = 0; i < PASSWORD_SIZE; i++)
    68f8:	89 81       	ldd	r24, Y+1	; 0x01
    68fa:	8f 5f       	subi	r24, 0xFF	; 255
    68fc:	89 83       	std	Y+1, r24	; 0x01
    68fe:	89 81       	ldd	r24, Y+1	; 0x01
    6900:	88 30       	cpi	r24, 0x08	; 8
    6902:	20 f3       	brcs	.-56     	; 0x68cc <readUserFromEEPROM+0x74>
        EEPROM_enuReadData(address + i, &(user->password[i]));
       // HC_05_enuSendChar(user->password[i]);

    }
   // HC_05_enuSendString("GG\r\t");
}
    6904:	27 96       	adiw	r28, 0x07	; 7
    6906:	0f b6       	in	r0, 0x3f	; 63
    6908:	f8 94       	cli
    690a:	de bf       	out	0x3e, r29	; 62
    690c:	0f be       	out	0x3f, r0	; 63
    690e:	cd bf       	out	0x3d, r28	; 61
    6910:	cf 91       	pop	r28
    6912:	df 91       	pop	r29
    6914:	08 95       	ret

00006916 <Change_LED_State>:
/************************************
 * Function To change LED Status
 ***********************************/
void Change_LED_State(void){
    6916:	df 93       	push	r29
    6918:	cf 93       	push	r28
    691a:	00 d0       	rcall	.+0      	; 0x691c <Change_LED_State+0x6>
    691c:	00 d0       	rcall	.+0      	; 0x691e <Change_LED_State+0x8>
    691e:	cd b7       	in	r28, 0x3d	; 61
    6920:	de b7       	in	r29, 0x3e	; 62
	 u8 Option ;
	 ES_t Local_enuErrorState =ES_NOK;
    6922:	19 82       	std	Y+1, r1	; 0x01
	 HC_05_enuSendString("\r\n1-Turn ON Green LED\r\n2-Turn OFF Green LED\r\n3-Turn ON red LED\r\n4-Turn OFF red LED\r\n");
    6924:	86 e2       	ldi	r24, 0x26	; 38
    6926:	94 e0       	ldi	r25, 0x04	; 4
    6928:	0e 94 59 29 	call	0x52b2	; 0x52b2 <HC_05_enuSendString>
	 HC_05_enuRecieveChar(&Option);
    692c:	ce 01       	movw	r24, r28
    692e:	02 96       	adiw	r24, 0x02	; 2
    6930:	0e 94 7f 29 	call	0x52fe	; 0x52fe <HC_05_enuRecieveChar>
	 HC_05_enuSendChar(Option);
    6934:	8a 81       	ldd	r24, Y+2	; 0x02
    6936:	0e 94 6e 29 	call	0x52dc	; 0x52dc <HC_05_enuSendChar>
	 HC_05_enuSendString("\r\n");
    693a:	80 eb       	ldi	r24, 0xB0	; 176
    693c:	90 e0       	ldi	r25, 0x00	; 0
    693e:	0e 94 59 29 	call	0x52b2	; 0x52b2 <HC_05_enuSendString>
	 switch(Option)
    6942:	8a 81       	ldd	r24, Y+2	; 0x02
    6944:	28 2f       	mov	r18, r24
    6946:	30 e0       	ldi	r19, 0x00	; 0
    6948:	3c 83       	std	Y+4, r19	; 0x04
    694a:	2b 83       	std	Y+3, r18	; 0x03
    694c:	8b 81       	ldd	r24, Y+3	; 0x03
    694e:	9c 81       	ldd	r25, Y+4	; 0x04
    6950:	82 33       	cpi	r24, 0x32	; 50
    6952:	91 05       	cpc	r25, r1
    6954:	89 f1       	breq	.+98     	; 0x69b8 <Change_LED_State+0xa2>
    6956:	2b 81       	ldd	r18, Y+3	; 0x03
    6958:	3c 81       	ldd	r19, Y+4	; 0x04
    695a:	23 33       	cpi	r18, 0x33	; 51
    695c:	31 05       	cpc	r19, r1
    695e:	34 f4       	brge	.+12     	; 0x696c <Change_LED_State+0x56>
    6960:	8b 81       	ldd	r24, Y+3	; 0x03
    6962:	9c 81       	ldd	r25, Y+4	; 0x04
    6964:	81 33       	cpi	r24, 0x31	; 49
    6966:	91 05       	cpc	r25, r1
    6968:	69 f0       	breq	.+26     	; 0x6984 <Change_LED_State+0x6e>
    696a:	71 c0       	rjmp	.+226    	; 0x6a4e <Change_LED_State+0x138>
    696c:	2b 81       	ldd	r18, Y+3	; 0x03
    696e:	3c 81       	ldd	r19, Y+4	; 0x04
    6970:	23 33       	cpi	r18, 0x33	; 51
    6972:	31 05       	cpc	r19, r1
    6974:	d1 f1       	breq	.+116    	; 0x69ea <Change_LED_State+0xd4>
    6976:	8b 81       	ldd	r24, Y+3	; 0x03
    6978:	9c 81       	ldd	r25, Y+4	; 0x04
    697a:	84 33       	cpi	r24, 0x34	; 52
    697c:	91 05       	cpc	r25, r1
    697e:	09 f4       	brne	.+2      	; 0x6982 <Change_LED_State+0x6c>
    6980:	4e c0       	rjmp	.+156    	; 0x6a1e <Change_LED_State+0x108>
    6982:	65 c0       	rjmp	.+202    	; 0x6a4e <Change_LED_State+0x138>
	 {
	 case '1':
		  LED_enuTurnON(&LED_AstrLedConfig[0]);
    6984:	83 e7       	ldi	r24, 0x73	; 115
    6986:	96 e0       	ldi	r25, 0x06	; 6
    6988:	0e 94 32 21 	call	0x4264	; 0x4264 <LED_enuTurnON>
		  Local_enuErrorState =LCD_enuGoToPosition(1,1);
    698c:	81 e0       	ldi	r24, 0x01	; 1
    698e:	61 e0       	ldi	r22, 0x01	; 1
    6990:	0e 94 13 25 	call	0x4a26	; 0x4a26 <LCD_enuGoToPosition>
    6994:	89 83       	std	Y+1, r24	; 0x01
		  GREENLED_State=1;
    6996:	81 e0       	ldi	r24, 0x01	; 1
    6998:	80 93 97 07 	sts	0x0797, r24
		  if(REDLED_State == 1){
    699c:	80 91 98 07 	lds	r24, 0x0798
    69a0:	81 30       	cpi	r24, 0x01	; 1
    69a2:	29 f4       	brne	.+10     	; 0x69ae <Change_LED_State+0x98>
			  LCD_enuDisplayString("LED1 ON,LED2 ON");
    69a4:	8b e7       	ldi	r24, 0x7B	; 123
    69a6:	94 e0       	ldi	r25, 0x04	; 4
    69a8:	0e 94 d4 24 	call	0x49a8	; 0x49a8 <LCD_enuDisplayString>
    69ac:	50 c0       	rjmp	.+160    	; 0x6a4e <Change_LED_State+0x138>
		  }
		  else{
			  LCD_enuDisplayString("LED1 ON,LED2 OFF");
    69ae:	8b e8       	ldi	r24, 0x8B	; 139
    69b0:	94 e0       	ldi	r25, 0x04	; 4
    69b2:	0e 94 d4 24 	call	0x49a8	; 0x49a8 <LCD_enuDisplayString>
    69b6:	4b c0       	rjmp	.+150    	; 0x6a4e <Change_LED_State+0x138>
		  }

	  break;
	 case '2':
		  LED_enuTurnOFF(&LED_AstrLedConfig[0]);
    69b8:	83 e7       	ldi	r24, 0x73	; 115
    69ba:	96 e0       	ldi	r25, 0x06	; 6
    69bc:	0e 94 6d 21 	call	0x42da	; 0x42da <LED_enuTurnOFF>
		  Local_enuErrorState =LCD_enuGoToPosition(1,1);
    69c0:	81 e0       	ldi	r24, 0x01	; 1
    69c2:	61 e0       	ldi	r22, 0x01	; 1
    69c4:	0e 94 13 25 	call	0x4a26	; 0x4a26 <LCD_enuGoToPosition>
    69c8:	89 83       	std	Y+1, r24	; 0x01
		  GREENLED_State=0;
    69ca:	10 92 97 07 	sts	0x0797, r1
		  if(REDLED_State == 1){
    69ce:	80 91 98 07 	lds	r24, 0x0798
    69d2:	81 30       	cpi	r24, 0x01	; 1
    69d4:	29 f4       	brne	.+10     	; 0x69e0 <Change_LED_State+0xca>
			  LCD_enuDisplayString("LED1 OFF,LED2 ON");
    69d6:	8c e9       	ldi	r24, 0x9C	; 156
    69d8:	94 e0       	ldi	r25, 0x04	; 4
    69da:	0e 94 d4 24 	call	0x49a8	; 0x49a8 <LCD_enuDisplayString>
    69de:	37 c0       	rjmp	.+110    	; 0x6a4e <Change_LED_State+0x138>
		  }
		  else{
			  LCD_enuDisplayString("LED1 OFF,LED2 OFF");
    69e0:	8d ea       	ldi	r24, 0xAD	; 173
    69e2:	94 e0       	ldi	r25, 0x04	; 4
    69e4:	0e 94 d4 24 	call	0x49a8	; 0x49a8 <LCD_enuDisplayString>
    69e8:	32 c0       	rjmp	.+100    	; 0x6a4e <Change_LED_State+0x138>
		  }

	  break;
	 case '3':
		  LED_enuTurnON(&LED_AstrLedConfig[1]);
    69ea:	87 e7       	ldi	r24, 0x77	; 119
    69ec:	96 e0       	ldi	r25, 0x06	; 6
    69ee:	0e 94 32 21 	call	0x4264	; 0x4264 <LED_enuTurnON>
		  Local_enuErrorState =LCD_enuGoToPosition(1,1);
    69f2:	81 e0       	ldi	r24, 0x01	; 1
    69f4:	61 e0       	ldi	r22, 0x01	; 1
    69f6:	0e 94 13 25 	call	0x4a26	; 0x4a26 <LCD_enuGoToPosition>
    69fa:	89 83       	std	Y+1, r24	; 0x01
		  REDLED_State=1;
    69fc:	81 e0       	ldi	r24, 0x01	; 1
    69fe:	80 93 98 07 	sts	0x0798, r24
		  if(GREENLED_State == 1){
    6a02:	80 91 97 07 	lds	r24, 0x0797
    6a06:	81 30       	cpi	r24, 0x01	; 1
    6a08:	29 f4       	brne	.+10     	; 0x6a14 <Change_LED_State+0xfe>
			  LCD_enuDisplayString("LED1 ON,LED2 ON ");
    6a0a:	8f eb       	ldi	r24, 0xBF	; 191
    6a0c:	94 e0       	ldi	r25, 0x04	; 4
    6a0e:	0e 94 d4 24 	call	0x49a8	; 0x49a8 <LCD_enuDisplayString>
    6a12:	1d c0       	rjmp	.+58     	; 0x6a4e <Change_LED_State+0x138>
		  }
		  else{
			  LCD_enuDisplayString("LED1 OFF,LED2 ON ");
    6a14:	80 ed       	ldi	r24, 0xD0	; 208
    6a16:	94 e0       	ldi	r25, 0x04	; 4
    6a18:	0e 94 d4 24 	call	0x49a8	; 0x49a8 <LCD_enuDisplayString>
    6a1c:	18 c0       	rjmp	.+48     	; 0x6a4e <Change_LED_State+0x138>
		  }
	  break;
	 case '4':
		  LED_enuTurnOFF(&LED_AstrLedConfig[1]);
    6a1e:	87 e7       	ldi	r24, 0x77	; 119
    6a20:	96 e0       	ldi	r25, 0x06	; 6
    6a22:	0e 94 6d 21 	call	0x42da	; 0x42da <LED_enuTurnOFF>
		  Local_enuErrorState =LCD_enuGoToPosition(1,1);
    6a26:	81 e0       	ldi	r24, 0x01	; 1
    6a28:	61 e0       	ldi	r22, 0x01	; 1
    6a2a:	0e 94 13 25 	call	0x4a26	; 0x4a26 <LCD_enuGoToPosition>
    6a2e:	89 83       	std	Y+1, r24	; 0x01
		  REDLED_State=0;
    6a30:	10 92 98 07 	sts	0x0798, r1
		  if(GREENLED_State == 1){
    6a34:	80 91 97 07 	lds	r24, 0x0797
    6a38:	81 30       	cpi	r24, 0x01	; 1
    6a3a:	29 f4       	brne	.+10     	; 0x6a46 <Change_LED_State+0x130>
			  LCD_enuDisplayString("LED1 ON,LED2 OFF");
    6a3c:	8b e8       	ldi	r24, 0x8B	; 139
    6a3e:	94 e0       	ldi	r25, 0x04	; 4
    6a40:	0e 94 d4 24 	call	0x49a8	; 0x49a8 <LCD_enuDisplayString>
    6a44:	04 c0       	rjmp	.+8      	; 0x6a4e <Change_LED_State+0x138>
		  }
		  else{
			  LCD_enuDisplayString("LED1 OFF,LED2 OFF");
    6a46:	8d ea       	ldi	r24, 0xAD	; 173
    6a48:	94 e0       	ldi	r25, 0x04	; 4
    6a4a:	0e 94 d4 24 	call	0x49a8	; 0x49a8 <LCD_enuDisplayString>

	 default:
	     // HC_05_enuSendString("WRONG CHOICE OPTION\r\n\r\n");
	  break;
	 }
}
    6a4e:	0f 90       	pop	r0
    6a50:	0f 90       	pop	r0
    6a52:	0f 90       	pop	r0
    6a54:	0f 90       	pop	r0
    6a56:	cf 91       	pop	r28
    6a58:	df 91       	pop	r29
    6a5a:	08 95       	ret

00006a5c <Control_Room>:
/**************************************************
 * Function to control Room
 **************************************************/
void Control_Room(void){
    6a5c:	df 93       	push	r29
    6a5e:	cf 93       	push	r28
    6a60:	00 d0       	rcall	.+0      	; 0x6a62 <Control_Room+0x6>
    6a62:	0f 92       	push	r0
    6a64:	cd b7       	in	r28, 0x3d	; 61
    6a66:	de b7       	in	r29, 0x3e	; 62
	 u8 Option ,Copy_u8Data ;
	 ES_t Local_enuErrorState =ES_NOK;
    6a68:	19 82       	std	Y+1, r1	; 0x01
	 HC_05_enuSendString("\r\n1-Open the Door\r\n2-Close The Door\r\n3-Turn ON red LED\r\n4-Turn OFF red LED\r\n5-Turn ON Green LED\r\n6-Turn OFF Green LED\r\n");
    6a6a:	82 ee       	ldi	r24, 0xE2	; 226
    6a6c:	94 e0       	ldi	r25, 0x04	; 4
    6a6e:	0e 94 59 29 	call	0x52b2	; 0x52b2 <HC_05_enuSendString>
	 HC_05_enuRecieveChar(&Option);
    6a72:	ce 01       	movw	r24, r28
    6a74:	03 96       	adiw	r24, 0x03	; 3
    6a76:	0e 94 7f 29 	call	0x52fe	; 0x52fe <HC_05_enuRecieveChar>

	 HC_05_enuSendString("\r\n");
    6a7a:	80 eb       	ldi	r24, 0xB0	; 176
    6a7c:	90 e0       	ldi	r25, 0x00	; 0
    6a7e:	0e 94 59 29 	call	0x52b2	; 0x52b2 <HC_05_enuSendString>


		if(ES_OK==IIC_enuStartCondition())
    6a82:	0e 94 aa 12 	call	0x2554	; 0x2554 <IIC_enuStartCondition>
    6a86:	81 30       	cpi	r24, 0x01	; 1
    6a88:	71 f4       	brne	.+28     	; 0x6aa6 <Control_Room+0x4a>
		{

			if(ES_OK==IIC_enuWriteSlaveAddress(0x16,0))
    6a8a:	86 e1       	ldi	r24, 0x16	; 22
    6a8c:	60 e0       	ldi	r22, 0x00	; 0
    6a8e:	0e 94 2c 13 	call	0x2658	; 0x2658 <IIC_enuWriteSlaveAddress>
    6a92:	81 30       	cpi	r24, 0x01	; 1
    6a94:	41 f4       	brne	.+16     	; 0x6aa6 <Control_Room+0x4a>
			{


					if(ES_OK==IIC_enuWriteData(Option))
    6a96:	8b 81       	ldd	r24, Y+3	; 0x03
    6a98:	0e 94 81 13 	call	0x2702	; 0x2702 <IIC_enuWriteData>
    6a9c:	81 30       	cpi	r24, 0x01	; 1
    6a9e:	19 f4       	brne	.+6      	; 0x6aa6 <Control_Room+0x4a>
					{

						Local_enuErrorState=IIC_enuStopCondition();
    6aa0:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <IIC_enuStopCondition>
    6aa4:	89 83       	std	Y+1, r24	; 0x01

				}
			}
		}

}
    6aa6:	0f 90       	pop	r0
    6aa8:	0f 90       	pop	r0
    6aaa:	0f 90       	pop	r0
    6aac:	cf 91       	pop	r28
    6aae:	df 91       	pop	r29
    6ab0:	08 95       	ret

00006ab2 <APP_FindUser>:

/*******************************************************************************
Function to find user by username in EEPROM  this is use in main to find username
**********************************************************************************/
LOG_t APP_FindUser(User_t *inputUser)
{
    6ab2:	df 93       	push	r29
    6ab4:	cf 93       	push	r28
    6ab6:	cd b7       	in	r28, 0x3d	; 61
    6ab8:	de b7       	in	r29, 0x3e	; 62
    6aba:	69 97       	sbiw	r28, 0x19	; 25
    6abc:	0f b6       	in	r0, 0x3f	; 63
    6abe:	f8 94       	cli
    6ac0:	de bf       	out	0x3e, r29	; 62
    6ac2:	0f be       	out	0x3f, r0	; 63
    6ac4:	cd bf       	out	0x3d, r28	; 61
    6ac6:	9b 8b       	std	Y+19, r25	; 0x13
    6ac8:	8a 8b       	std	Y+18, r24	; 0x12
    User_t storedUser;
    for(u8 i = 0; i < MAX_USERS; i++) //i is index of user
    6aca:	19 82       	std	Y+1, r1	; 0x01
    6acc:	59 c0       	rjmp	.+178    	; 0x6b80 <APP_FindUser+0xce>
    {
        readUserFromEEPROM(&storedUser, i);
    6ace:	ce 01       	movw	r24, r28
    6ad0:	02 96       	adiw	r24, 0x02	; 2
    6ad2:	69 81       	ldd	r22, Y+1	; 0x01
    6ad4:	0e 94 2c 34 	call	0x6858	; 0x6858 <readUserFromEEPROM>
        /*HC_05_enuSendString(storedUser.username);
        HC_05_enuSendString("\r\t");
        HC_05_enuSendString(storedUser.password);*/
        if(strcmp(inputUser->username, storedUser.username) == 0)
    6ad8:	8a 89       	ldd	r24, Y+18	; 0x12
    6ada:	9b 89       	ldd	r25, Y+19	; 0x13
    6adc:	9e 01       	movw	r18, r28
    6ade:	2e 5f       	subi	r18, 0xFE	; 254
    6ae0:	3f 4f       	sbci	r19, 0xFF	; 255
    6ae2:	b9 01       	movw	r22, r18
    6ae4:	0e 94 51 36 	call	0x6ca2	; 0x6ca2 <strcmp>
    6ae8:	00 97       	sbiw	r24, 0x00	; 0
    6aea:	09 f0       	breq	.+2      	; 0x6aee <APP_FindUser+0x3c>
    6aec:	46 c0       	rjmp	.+140    	; 0x6b7a <APP_FindUser+0xc8>
        {
            if(strcmp(inputUser->password, storedUser.password) == 0)
    6aee:	8a 89       	ldd	r24, Y+18	; 0x12
    6af0:	9b 89       	ldd	r25, Y+19	; 0x13
    6af2:	ac 01       	movw	r20, r24
    6af4:	48 5f       	subi	r20, 0xF8	; 248
    6af6:	5f 4f       	sbci	r21, 0xFF	; 255
    6af8:	ce 01       	movw	r24, r28
    6afa:	02 96       	adiw	r24, 0x02	; 2
    6afc:	9c 01       	movw	r18, r24
    6afe:	28 5f       	subi	r18, 0xF8	; 248
    6b00:	3f 4f       	sbci	r19, 0xFF	; 255
    6b02:	ca 01       	movw	r24, r20
    6b04:	b9 01       	movw	r22, r18
    6b06:	0e 94 51 36 	call	0x6ca2	; 0x6ca2 <strcmp>
    6b0a:	00 97       	sbiw	r24, 0x00	; 0
    6b0c:	99 f5       	brne	.+102    	; 0x6b74 <APP_FindUser+0xc2>
            {
            	Current_User=*inputUser;
    6b0e:	8a 89       	ldd	r24, Y+18	; 0x12
    6b10:	9b 89       	ldd	r25, Y+19	; 0x13
    6b12:	2b e9       	ldi	r18, 0x9B	; 155
    6b14:	37 e0       	ldi	r19, 0x07	; 7
    6b16:	3e 8b       	std	Y+22, r19	; 0x16
    6b18:	2d 8b       	std	Y+21, r18	; 0x15
    6b1a:	98 8f       	std	Y+24, r25	; 0x18
    6b1c:	8f 8b       	std	Y+23, r24	; 0x17
    6b1e:	30 e1       	ldi	r19, 0x10	; 16
    6b20:	39 8f       	std	Y+25, r19	; 0x19
    6b22:	ef 89       	ldd	r30, Y+23	; 0x17
    6b24:	f8 8d       	ldd	r31, Y+24	; 0x18
    6b26:	00 80       	ld	r0, Z
    6b28:	2f 89       	ldd	r18, Y+23	; 0x17
    6b2a:	38 8d       	ldd	r19, Y+24	; 0x18
    6b2c:	2f 5f       	subi	r18, 0xFF	; 255
    6b2e:	3f 4f       	sbci	r19, 0xFF	; 255
    6b30:	38 8f       	std	Y+24, r19	; 0x18
    6b32:	2f 8b       	std	Y+23, r18	; 0x17
    6b34:	ed 89       	ldd	r30, Y+21	; 0x15
    6b36:	fe 89       	ldd	r31, Y+22	; 0x16
    6b38:	00 82       	st	Z, r0
    6b3a:	2d 89       	ldd	r18, Y+21	; 0x15
    6b3c:	3e 89       	ldd	r19, Y+22	; 0x16
    6b3e:	2f 5f       	subi	r18, 0xFF	; 255
    6b40:	3f 4f       	sbci	r19, 0xFF	; 255
    6b42:	3e 8b       	std	Y+22, r19	; 0x16
    6b44:	2d 8b       	std	Y+21, r18	; 0x15
    6b46:	39 8d       	ldd	r19, Y+25	; 0x19
    6b48:	31 50       	subi	r19, 0x01	; 1
    6b4a:	39 8f       	std	Y+25, r19	; 0x19
    6b4c:	89 8d       	ldd	r24, Y+25	; 0x19
    6b4e:	88 23       	and	r24, r24
    6b50:	41 f7       	brne	.-48     	; 0x6b22 <APP_FindUser+0x70>
            	Current_Index=i;
    6b52:	89 81       	ldd	r24, Y+1	; 0x01
    6b54:	80 93 99 07 	sts	0x0799, r24
            	if(strcmp(inputUser->username, "MASTER") == 0)
    6b58:	8a 89       	ldd	r24, Y+18	; 0x12
    6b5a:	9b 89       	ldd	r25, Y+19	; 0x13
    6b5c:	2a e5       	ldi	r18, 0x5A	; 90
    6b5e:	35 e0       	ldi	r19, 0x05	; 5
    6b60:	b9 01       	movw	r22, r18
    6b62:	0e 94 51 36 	call	0x6ca2	; 0x6ca2 <strcmp>
    6b66:	00 97       	sbiw	r24, 0x00	; 0
    6b68:	11 f4       	brne	.+4      	; 0x6b6e <APP_FindUser+0xbc>
            	{
            		return LOG_MASTER;
    6b6a:	1c 8a       	std	Y+20, r1	; 0x14
    6b6c:	0f c0       	rjmp	.+30     	; 0x6b8c <APP_FindUser+0xda>
            	}
            	else
            	{
					return LOG_SUCCESS;  // Authentication successful, return user index
    6b6e:	91 e0       	ldi	r25, 0x01	; 1
    6b70:	9c 8b       	std	Y+20, r25	; 0x14
    6b72:	0c c0       	rjmp	.+24     	; 0x6b8c <APP_FindUser+0xda>
            	}
            }
            else
            {
                return LOG_PASS_INCORRECT;  // User found, but password incorrect
    6b74:	e2 e0       	ldi	r30, 0x02	; 2
    6b76:	ec 8b       	std	Y+20, r30	; 0x14
    6b78:	09 c0       	rjmp	.+18     	; 0x6b8c <APP_FindUser+0xda>
Function to find user by username in EEPROM  this is use in main to find username
**********************************************************************************/
LOG_t APP_FindUser(User_t *inputUser)
{
    User_t storedUser;
    for(u8 i = 0; i < MAX_USERS; i++) //i is index of user
    6b7a:	89 81       	ldd	r24, Y+1	; 0x01
    6b7c:	8f 5f       	subi	r24, 0xFF	; 255
    6b7e:	89 83       	std	Y+1, r24	; 0x01
    6b80:	89 81       	ldd	r24, Y+1	; 0x01
    6b82:	8a 30       	cpi	r24, 0x0A	; 10
    6b84:	08 f4       	brcc	.+2      	; 0x6b88 <APP_FindUser+0xd6>
    6b86:	a3 cf       	rjmp	.-186    	; 0x6ace <APP_FindUser+0x1c>
            {
                return LOG_PASS_INCORRECT;  // User found, but password incorrect
            }
        }
    }
    return LOG_USER_NOTFOUND;  // User not found
    6b88:	f3 e0       	ldi	r31, 0x03	; 3
    6b8a:	fc 8b       	std	Y+20, r31	; 0x14
    6b8c:	8c 89       	ldd	r24, Y+20	; 0x14
}
    6b8e:	69 96       	adiw	r28, 0x19	; 25
    6b90:	0f b6       	in	r0, 0x3f	; 63
    6b92:	f8 94       	cli
    6b94:	de bf       	out	0x3e, r29	; 62
    6b96:	0f be       	out	0x3f, r0	; 63
    6b98:	cd bf       	out	0x3d, r28	; 61
    6b9a:	cf 91       	pop	r28
    6b9c:	df 91       	pop	r29
    6b9e:	08 95       	ret

00006ba0 <main>:
ES_t ret ,ret2 ;
volatile u8 check=0;


int main()
{
    6ba0:	df 93       	push	r29
    6ba2:	cf 93       	push	r28
    6ba4:	cd b7       	in	r28, 0x3d	; 61
    6ba6:	de b7       	in	r29, 0x3e	; 62

	APP_enuInit();
    6ba8:	0e 94 fc 2d 	call	0x5bf8	; 0x5bf8 <APP_enuInit>


	while(1)
	{
		APP_enuStart();
    6bac:	0e 94 7e 2f 	call	0x5efc	; 0x5efc <APP_enuStart>
    6bb0:	fd cf       	rjmp	.-6      	; 0x6bac <main+0xc>

00006bb2 <__mulsi3>:
    6bb2:	62 9f       	mul	r22, r18
    6bb4:	d0 01       	movw	r26, r0
    6bb6:	73 9f       	mul	r23, r19
    6bb8:	f0 01       	movw	r30, r0
    6bba:	82 9f       	mul	r24, r18
    6bbc:	e0 0d       	add	r30, r0
    6bbe:	f1 1d       	adc	r31, r1
    6bc0:	64 9f       	mul	r22, r20
    6bc2:	e0 0d       	add	r30, r0
    6bc4:	f1 1d       	adc	r31, r1
    6bc6:	92 9f       	mul	r25, r18
    6bc8:	f0 0d       	add	r31, r0
    6bca:	83 9f       	mul	r24, r19
    6bcc:	f0 0d       	add	r31, r0
    6bce:	74 9f       	mul	r23, r20
    6bd0:	f0 0d       	add	r31, r0
    6bd2:	65 9f       	mul	r22, r21
    6bd4:	f0 0d       	add	r31, r0
    6bd6:	99 27       	eor	r25, r25
    6bd8:	72 9f       	mul	r23, r18
    6bda:	b0 0d       	add	r27, r0
    6bdc:	e1 1d       	adc	r30, r1
    6bde:	f9 1f       	adc	r31, r25
    6be0:	63 9f       	mul	r22, r19
    6be2:	b0 0d       	add	r27, r0
    6be4:	e1 1d       	adc	r30, r1
    6be6:	f9 1f       	adc	r31, r25
    6be8:	bd 01       	movw	r22, r26
    6bea:	cf 01       	movw	r24, r30
    6bec:	11 24       	eor	r1, r1
    6bee:	08 95       	ret

00006bf0 <__udivmodsi4>:
    6bf0:	a1 e2       	ldi	r26, 0x21	; 33
    6bf2:	1a 2e       	mov	r1, r26
    6bf4:	aa 1b       	sub	r26, r26
    6bf6:	bb 1b       	sub	r27, r27
    6bf8:	fd 01       	movw	r30, r26
    6bfa:	0d c0       	rjmp	.+26     	; 0x6c16 <__udivmodsi4_ep>

00006bfc <__udivmodsi4_loop>:
    6bfc:	aa 1f       	adc	r26, r26
    6bfe:	bb 1f       	adc	r27, r27
    6c00:	ee 1f       	adc	r30, r30
    6c02:	ff 1f       	adc	r31, r31
    6c04:	a2 17       	cp	r26, r18
    6c06:	b3 07       	cpc	r27, r19
    6c08:	e4 07       	cpc	r30, r20
    6c0a:	f5 07       	cpc	r31, r21
    6c0c:	20 f0       	brcs	.+8      	; 0x6c16 <__udivmodsi4_ep>
    6c0e:	a2 1b       	sub	r26, r18
    6c10:	b3 0b       	sbc	r27, r19
    6c12:	e4 0b       	sbc	r30, r20
    6c14:	f5 0b       	sbc	r31, r21

00006c16 <__udivmodsi4_ep>:
    6c16:	66 1f       	adc	r22, r22
    6c18:	77 1f       	adc	r23, r23
    6c1a:	88 1f       	adc	r24, r24
    6c1c:	99 1f       	adc	r25, r25
    6c1e:	1a 94       	dec	r1
    6c20:	69 f7       	brne	.-38     	; 0x6bfc <__udivmodsi4_loop>
    6c22:	60 95       	com	r22
    6c24:	70 95       	com	r23
    6c26:	80 95       	com	r24
    6c28:	90 95       	com	r25
    6c2a:	9b 01       	movw	r18, r22
    6c2c:	ac 01       	movw	r20, r24
    6c2e:	bd 01       	movw	r22, r26
    6c30:	cf 01       	movw	r24, r30
    6c32:	08 95       	ret

00006c34 <__prologue_saves__>:
    6c34:	2f 92       	push	r2
    6c36:	3f 92       	push	r3
    6c38:	4f 92       	push	r4
    6c3a:	5f 92       	push	r5
    6c3c:	6f 92       	push	r6
    6c3e:	7f 92       	push	r7
    6c40:	8f 92       	push	r8
    6c42:	9f 92       	push	r9
    6c44:	af 92       	push	r10
    6c46:	bf 92       	push	r11
    6c48:	cf 92       	push	r12
    6c4a:	df 92       	push	r13
    6c4c:	ef 92       	push	r14
    6c4e:	ff 92       	push	r15
    6c50:	0f 93       	push	r16
    6c52:	1f 93       	push	r17
    6c54:	cf 93       	push	r28
    6c56:	df 93       	push	r29
    6c58:	cd b7       	in	r28, 0x3d	; 61
    6c5a:	de b7       	in	r29, 0x3e	; 62
    6c5c:	ca 1b       	sub	r28, r26
    6c5e:	db 0b       	sbc	r29, r27
    6c60:	0f b6       	in	r0, 0x3f	; 63
    6c62:	f8 94       	cli
    6c64:	de bf       	out	0x3e, r29	; 62
    6c66:	0f be       	out	0x3f, r0	; 63
    6c68:	cd bf       	out	0x3d, r28	; 61
    6c6a:	09 94       	ijmp

00006c6c <__epilogue_restores__>:
    6c6c:	2a 88       	ldd	r2, Y+18	; 0x12
    6c6e:	39 88       	ldd	r3, Y+17	; 0x11
    6c70:	48 88       	ldd	r4, Y+16	; 0x10
    6c72:	5f 84       	ldd	r5, Y+15	; 0x0f
    6c74:	6e 84       	ldd	r6, Y+14	; 0x0e
    6c76:	7d 84       	ldd	r7, Y+13	; 0x0d
    6c78:	8c 84       	ldd	r8, Y+12	; 0x0c
    6c7a:	9b 84       	ldd	r9, Y+11	; 0x0b
    6c7c:	aa 84       	ldd	r10, Y+10	; 0x0a
    6c7e:	b9 84       	ldd	r11, Y+9	; 0x09
    6c80:	c8 84       	ldd	r12, Y+8	; 0x08
    6c82:	df 80       	ldd	r13, Y+7	; 0x07
    6c84:	ee 80       	ldd	r14, Y+6	; 0x06
    6c86:	fd 80       	ldd	r15, Y+5	; 0x05
    6c88:	0c 81       	ldd	r16, Y+4	; 0x04
    6c8a:	1b 81       	ldd	r17, Y+3	; 0x03
    6c8c:	aa 81       	ldd	r26, Y+2	; 0x02
    6c8e:	b9 81       	ldd	r27, Y+1	; 0x01
    6c90:	ce 0f       	add	r28, r30
    6c92:	d1 1d       	adc	r29, r1
    6c94:	0f b6       	in	r0, 0x3f	; 63
    6c96:	f8 94       	cli
    6c98:	de bf       	out	0x3e, r29	; 62
    6c9a:	0f be       	out	0x3f, r0	; 63
    6c9c:	cd bf       	out	0x3d, r28	; 61
    6c9e:	ed 01       	movw	r28, r26
    6ca0:	08 95       	ret

00006ca2 <strcmp>:
    6ca2:	fb 01       	movw	r30, r22
    6ca4:	dc 01       	movw	r26, r24
    6ca6:	8d 91       	ld	r24, X+
    6ca8:	01 90       	ld	r0, Z+
    6caa:	80 19       	sub	r24, r0
    6cac:	01 10       	cpse	r0, r1
    6cae:	d9 f3       	breq	.-10     	; 0x6ca6 <strcmp+0x4>
    6cb0:	99 0b       	sbc	r25, r25
    6cb2:	08 95       	ret

00006cb4 <_exit>:
    6cb4:	f8 94       	cli

00006cb6 <__stop_program>:
    6cb6:	ff cf       	rjmp	.-2      	; 0x6cb6 <__stop_program>
