
Room.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005b54  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000242  00800060  00005b54  00005be8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000006f  008002a2  008002a2  00005e2a  2**0
                  ALLOC
  3 .stab         000085e0  00000000  00000000  00005e2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002f4b  00000000  00000000  0000e40c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00011357  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000210  00000000  00000000  00011517  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000268a  00000000  00000000  00011727  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014e0  00000000  00000000  00013db1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000012a9  00000000  00000000  00015291  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0001653c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002fe  00000000  00000000  0001671c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009aa  00000000  00000000  00016a1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000173c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 52 17 	jmp	0x2ea4	; 0x2ea4 <__vector_1>
       8:	0c 94 89 17 	jmp	0x2f12	; 0x2f12 <__vector_2>
       c:	0c 94 c0 17 	jmp	0x2f80	; 0x2f80 <__vector_3>
      10:	0c 94 32 0b 	jmp	0x1664	; 0x1664 <__vector_4>
      14:	0c 94 fb 0a 	jmp	0x15f6	; 0x15f6 <__vector_5>
      18:	0c 94 3b 12 	jmp	0x2476	; 0x2476 <__vector_6>
      1c:	0c 94 ab 0c 	jmp	0x1956	; 0x1956 <__vector_7>
      20:	0c 94 e2 0c 	jmp	0x19c4	; 0x19c4 <__vector_8>
      24:	0c 94 19 0d 	jmp	0x1a32	; 0x1a32 <__vector_9>
      28:	0c 94 5b 11 	jmp	0x22b6	; 0x22b6 <__vector_10>
      2c:	0c 94 80 10 	jmp	0x2100	; 0x2100 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 09 1f 	jmp	0x3e12	; 0x3e12 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e5       	ldi	r30, 0x54	; 84
      68:	fb e5       	ldi	r31, 0x5B	; 91
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3a       	cpi	r26, 0xA2	; 162
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	a2 ea       	ldi	r26, 0xA2	; 162
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 31       	cpi	r26, 0x11	; 17
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 27 2d 	call	0x5a4e	; 0x5a4e <main>
      8a:	0c 94 a8 2d 	jmp	0x5b50	; 0x5b50 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 71 2d 	jmp	0x5ae2	; 0x5ae2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a9 ec       	ldi	r26, 0xC9	; 201
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 8d 2d 	jmp	0x5b1a	; 0x5b1a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 7d 2d 	jmp	0x5afa	; 0x5afa <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 99 2d 	jmp	0x5b32	; 0x5b32 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 7d 2d 	jmp	0x5afa	; 0x5afa <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 99 2d 	jmp	0x5b32	; 0x5b32 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 71 2d 	jmp	0x5ae2	; 0x5ae2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	89 ec       	ldi	r24, 0xC9	; 201
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 8d 2d 	jmp	0x5b1a	; 0x5b1a <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 79 2d 	jmp	0x5af2	; 0x5af2 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	69 ec       	ldi	r22, 0xC9	; 201
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 95 2d 	jmp	0x5b2a	; 0x5b2a <__epilogue_restores__+0x10>

0000078a <__nesf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 7d 2d 	jmp	0x5afa	; 0x5afa <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__nesf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__nesf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__nesf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 99 2d 	jmp	0x5b32	; 0x5b32 <__epilogue_restores__+0x18>

000007ea <__gtsf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 7d 2d 	jmp	0x5afa	; 0x5afa <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gtsf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gtsf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gtsf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 99 2d 	jmp	0x5b32	; 0x5b32 <__epilogue_restores__+0x18>

0000084a <__gesf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 7d 2d 	jmp	0x5afa	; 0x5afa <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 99 2d 	jmp	0x5b32	; 0x5b32 <__epilogue_restores__+0x18>

000008aa <__ltsf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 7d 2d 	jmp	0x5afa	; 0x5afa <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__ltsf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__ltsf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__ltsf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 99 2d 	jmp	0x5b32	; 0x5b32 <__epilogue_restores__+0x18>

0000090a <__fixsfsi>:
     90a:	ac e0       	ldi	r26, 0x0C	; 12
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 81 2d 	jmp	0x5b02	; 0x5b02 <__prologue_saves__+0x20>
     916:	69 83       	std	Y+1, r22	; 0x01
     918:	7a 83       	std	Y+2, r23	; 0x02
     91a:	8b 83       	std	Y+3, r24	; 0x03
     91c:	9c 83       	std	Y+4, r25	; 0x04
     91e:	ce 01       	movw	r24, r28
     920:	01 96       	adiw	r24, 0x01	; 1
     922:	be 01       	movw	r22, r28
     924:	6b 5f       	subi	r22, 0xFB	; 251
     926:	7f 4f       	sbci	r23, 0xFF	; 255
     928:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     92c:	8d 81       	ldd	r24, Y+5	; 0x05
     92e:	82 30       	cpi	r24, 0x02	; 2
     930:	61 f1       	breq	.+88     	; 0x98a <__fixsfsi+0x80>
     932:	82 30       	cpi	r24, 0x02	; 2
     934:	50 f1       	brcs	.+84     	; 0x98a <__fixsfsi+0x80>
     936:	84 30       	cpi	r24, 0x04	; 4
     938:	21 f4       	brne	.+8      	; 0x942 <__fixsfsi+0x38>
     93a:	8e 81       	ldd	r24, Y+6	; 0x06
     93c:	88 23       	and	r24, r24
     93e:	51 f1       	breq	.+84     	; 0x994 <__fixsfsi+0x8a>
     940:	2e c0       	rjmp	.+92     	; 0x99e <__fixsfsi+0x94>
     942:	2f 81       	ldd	r18, Y+7	; 0x07
     944:	38 85       	ldd	r19, Y+8	; 0x08
     946:	37 fd       	sbrc	r19, 7
     948:	20 c0       	rjmp	.+64     	; 0x98a <__fixsfsi+0x80>
     94a:	6e 81       	ldd	r22, Y+6	; 0x06
     94c:	2f 31       	cpi	r18, 0x1F	; 31
     94e:	31 05       	cpc	r19, r1
     950:	1c f0       	brlt	.+6      	; 0x958 <__fixsfsi+0x4e>
     952:	66 23       	and	r22, r22
     954:	f9 f0       	breq	.+62     	; 0x994 <__fixsfsi+0x8a>
     956:	23 c0       	rjmp	.+70     	; 0x99e <__fixsfsi+0x94>
     958:	8e e1       	ldi	r24, 0x1E	; 30
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	82 1b       	sub	r24, r18
     95e:	93 0b       	sbc	r25, r19
     960:	29 85       	ldd	r18, Y+9	; 0x09
     962:	3a 85       	ldd	r19, Y+10	; 0x0a
     964:	4b 85       	ldd	r20, Y+11	; 0x0b
     966:	5c 85       	ldd	r21, Y+12	; 0x0c
     968:	04 c0       	rjmp	.+8      	; 0x972 <__fixsfsi+0x68>
     96a:	56 95       	lsr	r21
     96c:	47 95       	ror	r20
     96e:	37 95       	ror	r19
     970:	27 95       	ror	r18
     972:	8a 95       	dec	r24
     974:	d2 f7       	brpl	.-12     	; 0x96a <__fixsfsi+0x60>
     976:	66 23       	and	r22, r22
     978:	b1 f0       	breq	.+44     	; 0x9a6 <__fixsfsi+0x9c>
     97a:	50 95       	com	r21
     97c:	40 95       	com	r20
     97e:	30 95       	com	r19
     980:	21 95       	neg	r18
     982:	3f 4f       	sbci	r19, 0xFF	; 255
     984:	4f 4f       	sbci	r20, 0xFF	; 255
     986:	5f 4f       	sbci	r21, 0xFF	; 255
     988:	0e c0       	rjmp	.+28     	; 0x9a6 <__fixsfsi+0x9c>
     98a:	20 e0       	ldi	r18, 0x00	; 0
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	40 e0       	ldi	r20, 0x00	; 0
     990:	50 e0       	ldi	r21, 0x00	; 0
     992:	09 c0       	rjmp	.+18     	; 0x9a6 <__fixsfsi+0x9c>
     994:	2f ef       	ldi	r18, 0xFF	; 255
     996:	3f ef       	ldi	r19, 0xFF	; 255
     998:	4f ef       	ldi	r20, 0xFF	; 255
     99a:	5f e7       	ldi	r21, 0x7F	; 127
     99c:	04 c0       	rjmp	.+8      	; 0x9a6 <__fixsfsi+0x9c>
     99e:	20 e0       	ldi	r18, 0x00	; 0
     9a0:	30 e0       	ldi	r19, 0x00	; 0
     9a2:	40 e0       	ldi	r20, 0x00	; 0
     9a4:	50 e8       	ldi	r21, 0x80	; 128
     9a6:	b9 01       	movw	r22, r18
     9a8:	ca 01       	movw	r24, r20
     9aa:	2c 96       	adiw	r28, 0x0c	; 12
     9ac:	e2 e0       	ldi	r30, 0x02	; 2
     9ae:	0c 94 9d 2d 	jmp	0x5b3a	; 0x5b3a <__epilogue_restores__+0x20>

000009b2 <__floatunsisf>:
     9b2:	a8 e0       	ldi	r26, 0x08	; 8
     9b4:	b0 e0       	ldi	r27, 0x00	; 0
     9b6:	ef ed       	ldi	r30, 0xDF	; 223
     9b8:	f4 e0       	ldi	r31, 0x04	; 4
     9ba:	0c 94 79 2d 	jmp	0x5af2	; 0x5af2 <__prologue_saves__+0x10>
     9be:	7b 01       	movw	r14, r22
     9c0:	8c 01       	movw	r16, r24
     9c2:	61 15       	cp	r22, r1
     9c4:	71 05       	cpc	r23, r1
     9c6:	81 05       	cpc	r24, r1
     9c8:	91 05       	cpc	r25, r1
     9ca:	19 f4       	brne	.+6      	; 0x9d2 <__floatunsisf+0x20>
     9cc:	82 e0       	ldi	r24, 0x02	; 2
     9ce:	89 83       	std	Y+1, r24	; 0x01
     9d0:	60 c0       	rjmp	.+192    	; 0xa92 <__floatunsisf+0xe0>
     9d2:	83 e0       	ldi	r24, 0x03	; 3
     9d4:	89 83       	std	Y+1, r24	; 0x01
     9d6:	8e e1       	ldi	r24, 0x1E	; 30
     9d8:	c8 2e       	mov	r12, r24
     9da:	d1 2c       	mov	r13, r1
     9dc:	dc 82       	std	Y+4, r13	; 0x04
     9de:	cb 82       	std	Y+3, r12	; 0x03
     9e0:	ed 82       	std	Y+5, r14	; 0x05
     9e2:	fe 82       	std	Y+6, r15	; 0x06
     9e4:	0f 83       	std	Y+7, r16	; 0x07
     9e6:	18 87       	std	Y+8, r17	; 0x08
     9e8:	c8 01       	movw	r24, r16
     9ea:	b7 01       	movw	r22, r14
     9ec:	0e 94 52 05 	call	0xaa4	; 0xaa4 <__clzsi2>
     9f0:	fc 01       	movw	r30, r24
     9f2:	31 97       	sbiw	r30, 0x01	; 1
     9f4:	f7 ff       	sbrs	r31, 7
     9f6:	3b c0       	rjmp	.+118    	; 0xa6e <__floatunsisf+0xbc>
     9f8:	22 27       	eor	r18, r18
     9fa:	33 27       	eor	r19, r19
     9fc:	2e 1b       	sub	r18, r30
     9fe:	3f 0b       	sbc	r19, r31
     a00:	57 01       	movw	r10, r14
     a02:	68 01       	movw	r12, r16
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__floatunsisf+0x5e>
     a08:	d6 94       	lsr	r13
     a0a:	c7 94       	ror	r12
     a0c:	b7 94       	ror	r11
     a0e:	a7 94       	ror	r10
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__floatunsisf+0x56>
     a14:	40 e0       	ldi	r20, 0x00	; 0
     a16:	50 e0       	ldi	r21, 0x00	; 0
     a18:	60 e0       	ldi	r22, 0x00	; 0
     a1a:	70 e0       	ldi	r23, 0x00	; 0
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	a0 e0       	ldi	r26, 0x00	; 0
     a22:	b0 e0       	ldi	r27, 0x00	; 0
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__floatunsisf+0x7c>
     a26:	88 0f       	add	r24, r24
     a28:	99 1f       	adc	r25, r25
     a2a:	aa 1f       	adc	r26, r26
     a2c:	bb 1f       	adc	r27, r27
     a2e:	2a 95       	dec	r18
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <__floatunsisf+0x74>
     a32:	01 97       	sbiw	r24, 0x01	; 1
     a34:	a1 09       	sbc	r26, r1
     a36:	b1 09       	sbc	r27, r1
     a38:	8e 21       	and	r24, r14
     a3a:	9f 21       	and	r25, r15
     a3c:	a0 23       	and	r26, r16
     a3e:	b1 23       	and	r27, r17
     a40:	00 97       	sbiw	r24, 0x00	; 0
     a42:	a1 05       	cpc	r26, r1
     a44:	b1 05       	cpc	r27, r1
     a46:	21 f0       	breq	.+8      	; 0xa50 <__floatunsisf+0x9e>
     a48:	41 e0       	ldi	r20, 0x01	; 1
     a4a:	50 e0       	ldi	r21, 0x00	; 0
     a4c:	60 e0       	ldi	r22, 0x00	; 0
     a4e:	70 e0       	ldi	r23, 0x00	; 0
     a50:	4a 29       	or	r20, r10
     a52:	5b 29       	or	r21, r11
     a54:	6c 29       	or	r22, r12
     a56:	7d 29       	or	r23, r13
     a58:	4d 83       	std	Y+5, r20	; 0x05
     a5a:	5e 83       	std	Y+6, r21	; 0x06
     a5c:	6f 83       	std	Y+7, r22	; 0x07
     a5e:	78 87       	std	Y+8, r23	; 0x08
     a60:	8e e1       	ldi	r24, 0x1E	; 30
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	8e 1b       	sub	r24, r30
     a66:	9f 0b       	sbc	r25, r31
     a68:	9c 83       	std	Y+4, r25	; 0x04
     a6a:	8b 83       	std	Y+3, r24	; 0x03
     a6c:	12 c0       	rjmp	.+36     	; 0xa92 <__floatunsisf+0xe0>
     a6e:	30 97       	sbiw	r30, 0x00	; 0
     a70:	81 f0       	breq	.+32     	; 0xa92 <__floatunsisf+0xe0>
     a72:	0e 2e       	mov	r0, r30
     a74:	04 c0       	rjmp	.+8      	; 0xa7e <__floatunsisf+0xcc>
     a76:	ee 0c       	add	r14, r14
     a78:	ff 1c       	adc	r15, r15
     a7a:	00 1f       	adc	r16, r16
     a7c:	11 1f       	adc	r17, r17
     a7e:	0a 94       	dec	r0
     a80:	d2 f7       	brpl	.-12     	; 0xa76 <__floatunsisf+0xc4>
     a82:	ed 82       	std	Y+5, r14	; 0x05
     a84:	fe 82       	std	Y+6, r15	; 0x06
     a86:	0f 83       	std	Y+7, r16	; 0x07
     a88:	18 87       	std	Y+8, r17	; 0x08
     a8a:	ce 1a       	sub	r12, r30
     a8c:	df 0a       	sbc	r13, r31
     a8e:	dc 82       	std	Y+4, r13	; 0x04
     a90:	cb 82       	std	Y+3, r12	; 0x03
     a92:	1a 82       	std	Y+2, r1	; 0x02
     a94:	ce 01       	movw	r24, r28
     a96:	01 96       	adiw	r24, 0x01	; 1
     a98:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     a9c:	28 96       	adiw	r28, 0x08	; 8
     a9e:	ea e0       	ldi	r30, 0x0A	; 10
     aa0:	0c 94 95 2d 	jmp	0x5b2a	; 0x5b2a <__epilogue_restores__+0x10>

00000aa4 <__clzsi2>:
     aa4:	ef 92       	push	r14
     aa6:	ff 92       	push	r15
     aa8:	0f 93       	push	r16
     aaa:	1f 93       	push	r17
     aac:	7b 01       	movw	r14, r22
     aae:	8c 01       	movw	r16, r24
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	e8 16       	cp	r14, r24
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	f8 06       	cpc	r15, r24
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	08 07       	cpc	r16, r24
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	18 07       	cpc	r17, r24
     ac0:	88 f4       	brcc	.+34     	; 0xae4 <__clzsi2+0x40>
     ac2:	8f ef       	ldi	r24, 0xFF	; 255
     ac4:	e8 16       	cp	r14, r24
     ac6:	f1 04       	cpc	r15, r1
     ac8:	01 05       	cpc	r16, r1
     aca:	11 05       	cpc	r17, r1
     acc:	31 f0       	breq	.+12     	; 0xada <__clzsi2+0x36>
     ace:	28 f0       	brcs	.+10     	; 0xada <__clzsi2+0x36>
     ad0:	88 e0       	ldi	r24, 0x08	; 8
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	a0 e0       	ldi	r26, 0x00	; 0
     ad6:	b0 e0       	ldi	r27, 0x00	; 0
     ad8:	17 c0       	rjmp	.+46     	; 0xb08 <__clzsi2+0x64>
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	a0 e0       	ldi	r26, 0x00	; 0
     ae0:	b0 e0       	ldi	r27, 0x00	; 0
     ae2:	12 c0       	rjmp	.+36     	; 0xb08 <__clzsi2+0x64>
     ae4:	80 e0       	ldi	r24, 0x00	; 0
     ae6:	e8 16       	cp	r14, r24
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	f8 06       	cpc	r15, r24
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	08 07       	cpc	r16, r24
     af0:	81 e0       	ldi	r24, 0x01	; 1
     af2:	18 07       	cpc	r17, r24
     af4:	28 f0       	brcs	.+10     	; 0xb00 <__clzsi2+0x5c>
     af6:	88 e1       	ldi	r24, 0x18	; 24
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	a0 e0       	ldi	r26, 0x00	; 0
     afc:	b0 e0       	ldi	r27, 0x00	; 0
     afe:	04 c0       	rjmp	.+8      	; 0xb08 <__clzsi2+0x64>
     b00:	80 e1       	ldi	r24, 0x10	; 16
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	a0 e0       	ldi	r26, 0x00	; 0
     b06:	b0 e0       	ldi	r27, 0x00	; 0
     b08:	20 e2       	ldi	r18, 0x20	; 32
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	40 e0       	ldi	r20, 0x00	; 0
     b0e:	50 e0       	ldi	r21, 0x00	; 0
     b10:	28 1b       	sub	r18, r24
     b12:	39 0b       	sbc	r19, r25
     b14:	4a 0b       	sbc	r20, r26
     b16:	5b 0b       	sbc	r21, r27
     b18:	04 c0       	rjmp	.+8      	; 0xb22 <__clzsi2+0x7e>
     b1a:	16 95       	lsr	r17
     b1c:	07 95       	ror	r16
     b1e:	f7 94       	ror	r15
     b20:	e7 94       	ror	r14
     b22:	8a 95       	dec	r24
     b24:	d2 f7       	brpl	.-12     	; 0xb1a <__clzsi2+0x76>
     b26:	f7 01       	movw	r30, r14
     b28:	ef 52       	subi	r30, 0x2F	; 47
     b2a:	ff 4f       	sbci	r31, 0xFF	; 255
     b2c:	80 81       	ld	r24, Z
     b2e:	28 1b       	sub	r18, r24
     b30:	31 09       	sbc	r19, r1
     b32:	41 09       	sbc	r20, r1
     b34:	51 09       	sbc	r21, r1
     b36:	c9 01       	movw	r24, r18
     b38:	1f 91       	pop	r17
     b3a:	0f 91       	pop	r16
     b3c:	ff 90       	pop	r15
     b3e:	ef 90       	pop	r14
     b40:	08 95       	ret

00000b42 <__pack_f>:
     b42:	df 92       	push	r13
     b44:	ef 92       	push	r14
     b46:	ff 92       	push	r15
     b48:	0f 93       	push	r16
     b4a:	1f 93       	push	r17
     b4c:	fc 01       	movw	r30, r24
     b4e:	e4 80       	ldd	r14, Z+4	; 0x04
     b50:	f5 80       	ldd	r15, Z+5	; 0x05
     b52:	06 81       	ldd	r16, Z+6	; 0x06
     b54:	17 81       	ldd	r17, Z+7	; 0x07
     b56:	d1 80       	ldd	r13, Z+1	; 0x01
     b58:	80 81       	ld	r24, Z
     b5a:	82 30       	cpi	r24, 0x02	; 2
     b5c:	48 f4       	brcc	.+18     	; 0xb70 <__pack_f+0x2e>
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	a0 e1       	ldi	r26, 0x10	; 16
     b64:	b0 e0       	ldi	r27, 0x00	; 0
     b66:	e8 2a       	or	r14, r24
     b68:	f9 2a       	or	r15, r25
     b6a:	0a 2b       	or	r16, r26
     b6c:	1b 2b       	or	r17, r27
     b6e:	a5 c0       	rjmp	.+330    	; 0xcba <__pack_f+0x178>
     b70:	84 30       	cpi	r24, 0x04	; 4
     b72:	09 f4       	brne	.+2      	; 0xb76 <__pack_f+0x34>
     b74:	9f c0       	rjmp	.+318    	; 0xcb4 <__pack_f+0x172>
     b76:	82 30       	cpi	r24, 0x02	; 2
     b78:	21 f4       	brne	.+8      	; 0xb82 <__pack_f+0x40>
     b7a:	ee 24       	eor	r14, r14
     b7c:	ff 24       	eor	r15, r15
     b7e:	87 01       	movw	r16, r14
     b80:	05 c0       	rjmp	.+10     	; 0xb8c <__pack_f+0x4a>
     b82:	e1 14       	cp	r14, r1
     b84:	f1 04       	cpc	r15, r1
     b86:	01 05       	cpc	r16, r1
     b88:	11 05       	cpc	r17, r1
     b8a:	19 f4       	brne	.+6      	; 0xb92 <__pack_f+0x50>
     b8c:	e0 e0       	ldi	r30, 0x00	; 0
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	96 c0       	rjmp	.+300    	; 0xcbe <__pack_f+0x17c>
     b92:	62 81       	ldd	r22, Z+2	; 0x02
     b94:	73 81       	ldd	r23, Z+3	; 0x03
     b96:	9f ef       	ldi	r25, 0xFF	; 255
     b98:	62 38       	cpi	r22, 0x82	; 130
     b9a:	79 07       	cpc	r23, r25
     b9c:	0c f0       	brlt	.+2      	; 0xba0 <__pack_f+0x5e>
     b9e:	5b c0       	rjmp	.+182    	; 0xc56 <__pack_f+0x114>
     ba0:	22 e8       	ldi	r18, 0x82	; 130
     ba2:	3f ef       	ldi	r19, 0xFF	; 255
     ba4:	26 1b       	sub	r18, r22
     ba6:	37 0b       	sbc	r19, r23
     ba8:	2a 31       	cpi	r18, 0x1A	; 26
     baa:	31 05       	cpc	r19, r1
     bac:	2c f0       	brlt	.+10     	; 0xbb8 <__pack_f+0x76>
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	40 e0       	ldi	r20, 0x00	; 0
     bb4:	50 e0       	ldi	r21, 0x00	; 0
     bb6:	2a c0       	rjmp	.+84     	; 0xc0c <__pack_f+0xca>
     bb8:	b8 01       	movw	r22, r16
     bba:	a7 01       	movw	r20, r14
     bbc:	02 2e       	mov	r0, r18
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0x86>
     bc0:	76 95       	lsr	r23
     bc2:	67 95       	ror	r22
     bc4:	57 95       	ror	r21
     bc6:	47 95       	ror	r20
     bc8:	0a 94       	dec	r0
     bca:	d2 f7       	brpl	.-12     	; 0xbc0 <__pack_f+0x7e>
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	a0 e0       	ldi	r26, 0x00	; 0
     bd2:	b0 e0       	ldi	r27, 0x00	; 0
     bd4:	04 c0       	rjmp	.+8      	; 0xbde <__pack_f+0x9c>
     bd6:	88 0f       	add	r24, r24
     bd8:	99 1f       	adc	r25, r25
     bda:	aa 1f       	adc	r26, r26
     bdc:	bb 1f       	adc	r27, r27
     bde:	2a 95       	dec	r18
     be0:	d2 f7       	brpl	.-12     	; 0xbd6 <__pack_f+0x94>
     be2:	01 97       	sbiw	r24, 0x01	; 1
     be4:	a1 09       	sbc	r26, r1
     be6:	b1 09       	sbc	r27, r1
     be8:	8e 21       	and	r24, r14
     bea:	9f 21       	and	r25, r15
     bec:	a0 23       	and	r26, r16
     bee:	b1 23       	and	r27, r17
     bf0:	00 97       	sbiw	r24, 0x00	; 0
     bf2:	a1 05       	cpc	r26, r1
     bf4:	b1 05       	cpc	r27, r1
     bf6:	21 f0       	breq	.+8      	; 0xc00 <__pack_f+0xbe>
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	a0 e0       	ldi	r26, 0x00	; 0
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	9a 01       	movw	r18, r20
     c02:	ab 01       	movw	r20, r22
     c04:	28 2b       	or	r18, r24
     c06:	39 2b       	or	r19, r25
     c08:	4a 2b       	or	r20, r26
     c0a:	5b 2b       	or	r21, r27
     c0c:	da 01       	movw	r26, r20
     c0e:	c9 01       	movw	r24, r18
     c10:	8f 77       	andi	r24, 0x7F	; 127
     c12:	90 70       	andi	r25, 0x00	; 0
     c14:	a0 70       	andi	r26, 0x00	; 0
     c16:	b0 70       	andi	r27, 0x00	; 0
     c18:	80 34       	cpi	r24, 0x40	; 64
     c1a:	91 05       	cpc	r25, r1
     c1c:	a1 05       	cpc	r26, r1
     c1e:	b1 05       	cpc	r27, r1
     c20:	39 f4       	brne	.+14     	; 0xc30 <__pack_f+0xee>
     c22:	27 ff       	sbrs	r18, 7
     c24:	09 c0       	rjmp	.+18     	; 0xc38 <__pack_f+0xf6>
     c26:	20 5c       	subi	r18, 0xC0	; 192
     c28:	3f 4f       	sbci	r19, 0xFF	; 255
     c2a:	4f 4f       	sbci	r20, 0xFF	; 255
     c2c:	5f 4f       	sbci	r21, 0xFF	; 255
     c2e:	04 c0       	rjmp	.+8      	; 0xc38 <__pack_f+0xf6>
     c30:	21 5c       	subi	r18, 0xC1	; 193
     c32:	3f 4f       	sbci	r19, 0xFF	; 255
     c34:	4f 4f       	sbci	r20, 0xFF	; 255
     c36:	5f 4f       	sbci	r21, 0xFF	; 255
     c38:	e0 e0       	ldi	r30, 0x00	; 0
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	20 30       	cpi	r18, 0x00	; 0
     c3e:	a0 e0       	ldi	r26, 0x00	; 0
     c40:	3a 07       	cpc	r19, r26
     c42:	a0 e0       	ldi	r26, 0x00	; 0
     c44:	4a 07       	cpc	r20, r26
     c46:	a0 e4       	ldi	r26, 0x40	; 64
     c48:	5a 07       	cpc	r21, r26
     c4a:	10 f0       	brcs	.+4      	; 0xc50 <__pack_f+0x10e>
     c4c:	e1 e0       	ldi	r30, 0x01	; 1
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	79 01       	movw	r14, r18
     c52:	8a 01       	movw	r16, r20
     c54:	27 c0       	rjmp	.+78     	; 0xca4 <__pack_f+0x162>
     c56:	60 38       	cpi	r22, 0x80	; 128
     c58:	71 05       	cpc	r23, r1
     c5a:	64 f5       	brge	.+88     	; 0xcb4 <__pack_f+0x172>
     c5c:	fb 01       	movw	r30, r22
     c5e:	e1 58       	subi	r30, 0x81	; 129
     c60:	ff 4f       	sbci	r31, 0xFF	; 255
     c62:	d8 01       	movw	r26, r16
     c64:	c7 01       	movw	r24, r14
     c66:	8f 77       	andi	r24, 0x7F	; 127
     c68:	90 70       	andi	r25, 0x00	; 0
     c6a:	a0 70       	andi	r26, 0x00	; 0
     c6c:	b0 70       	andi	r27, 0x00	; 0
     c6e:	80 34       	cpi	r24, 0x40	; 64
     c70:	91 05       	cpc	r25, r1
     c72:	a1 05       	cpc	r26, r1
     c74:	b1 05       	cpc	r27, r1
     c76:	39 f4       	brne	.+14     	; 0xc86 <__pack_f+0x144>
     c78:	e7 fe       	sbrs	r14, 7
     c7a:	0d c0       	rjmp	.+26     	; 0xc96 <__pack_f+0x154>
     c7c:	80 e4       	ldi	r24, 0x40	; 64
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	a0 e0       	ldi	r26, 0x00	; 0
     c82:	b0 e0       	ldi	r27, 0x00	; 0
     c84:	04 c0       	rjmp	.+8      	; 0xc8e <__pack_f+0x14c>
     c86:	8f e3       	ldi	r24, 0x3F	; 63
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	a0 e0       	ldi	r26, 0x00	; 0
     c8c:	b0 e0       	ldi	r27, 0x00	; 0
     c8e:	e8 0e       	add	r14, r24
     c90:	f9 1e       	adc	r15, r25
     c92:	0a 1f       	adc	r16, r26
     c94:	1b 1f       	adc	r17, r27
     c96:	17 ff       	sbrs	r17, 7
     c98:	05 c0       	rjmp	.+10     	; 0xca4 <__pack_f+0x162>
     c9a:	16 95       	lsr	r17
     c9c:	07 95       	ror	r16
     c9e:	f7 94       	ror	r15
     ca0:	e7 94       	ror	r14
     ca2:	31 96       	adiw	r30, 0x01	; 1
     ca4:	87 e0       	ldi	r24, 0x07	; 7
     ca6:	16 95       	lsr	r17
     ca8:	07 95       	ror	r16
     caa:	f7 94       	ror	r15
     cac:	e7 94       	ror	r14
     cae:	8a 95       	dec	r24
     cb0:	d1 f7       	brne	.-12     	; 0xca6 <__pack_f+0x164>
     cb2:	05 c0       	rjmp	.+10     	; 0xcbe <__pack_f+0x17c>
     cb4:	ee 24       	eor	r14, r14
     cb6:	ff 24       	eor	r15, r15
     cb8:	87 01       	movw	r16, r14
     cba:	ef ef       	ldi	r30, 0xFF	; 255
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	6e 2f       	mov	r22, r30
     cc0:	67 95       	ror	r22
     cc2:	66 27       	eor	r22, r22
     cc4:	67 95       	ror	r22
     cc6:	90 2f       	mov	r25, r16
     cc8:	9f 77       	andi	r25, 0x7F	; 127
     cca:	d7 94       	ror	r13
     ccc:	dd 24       	eor	r13, r13
     cce:	d7 94       	ror	r13
     cd0:	8e 2f       	mov	r24, r30
     cd2:	86 95       	lsr	r24
     cd4:	49 2f       	mov	r20, r25
     cd6:	46 2b       	or	r20, r22
     cd8:	58 2f       	mov	r21, r24
     cda:	5d 29       	or	r21, r13
     cdc:	b7 01       	movw	r22, r14
     cde:	ca 01       	movw	r24, r20
     ce0:	1f 91       	pop	r17
     ce2:	0f 91       	pop	r16
     ce4:	ff 90       	pop	r15
     ce6:	ef 90       	pop	r14
     ce8:	df 90       	pop	r13
     cea:	08 95       	ret

00000cec <__unpack_f>:
     cec:	fc 01       	movw	r30, r24
     cee:	db 01       	movw	r26, r22
     cf0:	40 81       	ld	r20, Z
     cf2:	51 81       	ldd	r21, Z+1	; 0x01
     cf4:	22 81       	ldd	r18, Z+2	; 0x02
     cf6:	62 2f       	mov	r22, r18
     cf8:	6f 77       	andi	r22, 0x7F	; 127
     cfa:	70 e0       	ldi	r23, 0x00	; 0
     cfc:	22 1f       	adc	r18, r18
     cfe:	22 27       	eor	r18, r18
     d00:	22 1f       	adc	r18, r18
     d02:	93 81       	ldd	r25, Z+3	; 0x03
     d04:	89 2f       	mov	r24, r25
     d06:	88 0f       	add	r24, r24
     d08:	82 2b       	or	r24, r18
     d0a:	28 2f       	mov	r18, r24
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	99 1f       	adc	r25, r25
     d10:	99 27       	eor	r25, r25
     d12:	99 1f       	adc	r25, r25
     d14:	11 96       	adiw	r26, 0x01	; 1
     d16:	9c 93       	st	X, r25
     d18:	11 97       	sbiw	r26, 0x01	; 1
     d1a:	21 15       	cp	r18, r1
     d1c:	31 05       	cpc	r19, r1
     d1e:	a9 f5       	brne	.+106    	; 0xd8a <__unpack_f+0x9e>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	11 f4       	brne	.+4      	; 0xd2e <__unpack_f+0x42>
     d2a:	82 e0       	ldi	r24, 0x02	; 2
     d2c:	37 c0       	rjmp	.+110    	; 0xd9c <__unpack_f+0xb0>
     d2e:	82 e8       	ldi	r24, 0x82	; 130
     d30:	9f ef       	ldi	r25, 0xFF	; 255
     d32:	13 96       	adiw	r26, 0x03	; 3
     d34:	9c 93       	st	X, r25
     d36:	8e 93       	st	-X, r24
     d38:	12 97       	sbiw	r26, 0x02	; 2
     d3a:	9a 01       	movw	r18, r20
     d3c:	ab 01       	movw	r20, r22
     d3e:	67 e0       	ldi	r22, 0x07	; 7
     d40:	22 0f       	add	r18, r18
     d42:	33 1f       	adc	r19, r19
     d44:	44 1f       	adc	r20, r20
     d46:	55 1f       	adc	r21, r21
     d48:	6a 95       	dec	r22
     d4a:	d1 f7       	brne	.-12     	; 0xd40 <__unpack_f+0x54>
     d4c:	83 e0       	ldi	r24, 0x03	; 3
     d4e:	8c 93       	st	X, r24
     d50:	0d c0       	rjmp	.+26     	; 0xd6c <__unpack_f+0x80>
     d52:	22 0f       	add	r18, r18
     d54:	33 1f       	adc	r19, r19
     d56:	44 1f       	adc	r20, r20
     d58:	55 1f       	adc	r21, r21
     d5a:	12 96       	adiw	r26, 0x02	; 2
     d5c:	8d 91       	ld	r24, X+
     d5e:	9c 91       	ld	r25, X
     d60:	13 97       	sbiw	r26, 0x03	; 3
     d62:	01 97       	sbiw	r24, 0x01	; 1
     d64:	13 96       	adiw	r26, 0x03	; 3
     d66:	9c 93       	st	X, r25
     d68:	8e 93       	st	-X, r24
     d6a:	12 97       	sbiw	r26, 0x02	; 2
     d6c:	20 30       	cpi	r18, 0x00	; 0
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	38 07       	cpc	r19, r24
     d72:	80 e0       	ldi	r24, 0x00	; 0
     d74:	48 07       	cpc	r20, r24
     d76:	80 e4       	ldi	r24, 0x40	; 64
     d78:	58 07       	cpc	r21, r24
     d7a:	58 f3       	brcs	.-42     	; 0xd52 <__unpack_f+0x66>
     d7c:	14 96       	adiw	r26, 0x04	; 4
     d7e:	2d 93       	st	X+, r18
     d80:	3d 93       	st	X+, r19
     d82:	4d 93       	st	X+, r20
     d84:	5c 93       	st	X, r21
     d86:	17 97       	sbiw	r26, 0x07	; 7
     d88:	08 95       	ret
     d8a:	2f 3f       	cpi	r18, 0xFF	; 255
     d8c:	31 05       	cpc	r19, r1
     d8e:	79 f4       	brne	.+30     	; 0xdae <__unpack_f+0xc2>
     d90:	41 15       	cp	r20, r1
     d92:	51 05       	cpc	r21, r1
     d94:	61 05       	cpc	r22, r1
     d96:	71 05       	cpc	r23, r1
     d98:	19 f4       	brne	.+6      	; 0xda0 <__unpack_f+0xb4>
     d9a:	84 e0       	ldi	r24, 0x04	; 4
     d9c:	8c 93       	st	X, r24
     d9e:	08 95       	ret
     da0:	64 ff       	sbrs	r22, 4
     da2:	03 c0       	rjmp	.+6      	; 0xdaa <__unpack_f+0xbe>
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	8c 93       	st	X, r24
     da8:	12 c0       	rjmp	.+36     	; 0xdce <__unpack_f+0xe2>
     daa:	1c 92       	st	X, r1
     dac:	10 c0       	rjmp	.+32     	; 0xdce <__unpack_f+0xe2>
     dae:	2f 57       	subi	r18, 0x7F	; 127
     db0:	30 40       	sbci	r19, 0x00	; 0
     db2:	13 96       	adiw	r26, 0x03	; 3
     db4:	3c 93       	st	X, r19
     db6:	2e 93       	st	-X, r18
     db8:	12 97       	sbiw	r26, 0x02	; 2
     dba:	83 e0       	ldi	r24, 0x03	; 3
     dbc:	8c 93       	st	X, r24
     dbe:	87 e0       	ldi	r24, 0x07	; 7
     dc0:	44 0f       	add	r20, r20
     dc2:	55 1f       	adc	r21, r21
     dc4:	66 1f       	adc	r22, r22
     dc6:	77 1f       	adc	r23, r23
     dc8:	8a 95       	dec	r24
     dca:	d1 f7       	brne	.-12     	; 0xdc0 <__unpack_f+0xd4>
     dcc:	70 64       	ori	r23, 0x40	; 64
     dce:	14 96       	adiw	r26, 0x04	; 4
     dd0:	4d 93       	st	X+, r20
     dd2:	5d 93       	st	X+, r21
     dd4:	6d 93       	st	X+, r22
     dd6:	7c 93       	st	X, r23
     dd8:	17 97       	sbiw	r26, 0x07	; 7
     dda:	08 95       	ret

00000ddc <__fpcmp_parts_f>:
     ddc:	1f 93       	push	r17
     dde:	dc 01       	movw	r26, r24
     de0:	fb 01       	movw	r30, r22
     de2:	9c 91       	ld	r25, X
     de4:	92 30       	cpi	r25, 0x02	; 2
     de6:	08 f4       	brcc	.+2      	; 0xdea <__fpcmp_parts_f+0xe>
     de8:	47 c0       	rjmp	.+142    	; 0xe78 <__fpcmp_parts_f+0x9c>
     dea:	80 81       	ld	r24, Z
     dec:	82 30       	cpi	r24, 0x02	; 2
     dee:	08 f4       	brcc	.+2      	; 0xdf2 <__fpcmp_parts_f+0x16>
     df0:	43 c0       	rjmp	.+134    	; 0xe78 <__fpcmp_parts_f+0x9c>
     df2:	94 30       	cpi	r25, 0x04	; 4
     df4:	51 f4       	brne	.+20     	; 0xe0a <__fpcmp_parts_f+0x2e>
     df6:	11 96       	adiw	r26, 0x01	; 1
     df8:	1c 91       	ld	r17, X
     dfa:	84 30       	cpi	r24, 0x04	; 4
     dfc:	99 f5       	brne	.+102    	; 0xe64 <__fpcmp_parts_f+0x88>
     dfe:	81 81       	ldd	r24, Z+1	; 0x01
     e00:	68 2f       	mov	r22, r24
     e02:	70 e0       	ldi	r23, 0x00	; 0
     e04:	61 1b       	sub	r22, r17
     e06:	71 09       	sbc	r23, r1
     e08:	3f c0       	rjmp	.+126    	; 0xe88 <__fpcmp_parts_f+0xac>
     e0a:	84 30       	cpi	r24, 0x04	; 4
     e0c:	21 f0       	breq	.+8      	; 0xe16 <__fpcmp_parts_f+0x3a>
     e0e:	92 30       	cpi	r25, 0x02	; 2
     e10:	31 f4       	brne	.+12     	; 0xe1e <__fpcmp_parts_f+0x42>
     e12:	82 30       	cpi	r24, 0x02	; 2
     e14:	b9 f1       	breq	.+110    	; 0xe84 <__fpcmp_parts_f+0xa8>
     e16:	81 81       	ldd	r24, Z+1	; 0x01
     e18:	88 23       	and	r24, r24
     e1a:	89 f1       	breq	.+98     	; 0xe7e <__fpcmp_parts_f+0xa2>
     e1c:	2d c0       	rjmp	.+90     	; 0xe78 <__fpcmp_parts_f+0x9c>
     e1e:	11 96       	adiw	r26, 0x01	; 1
     e20:	1c 91       	ld	r17, X
     e22:	11 97       	sbiw	r26, 0x01	; 1
     e24:	82 30       	cpi	r24, 0x02	; 2
     e26:	f1 f0       	breq	.+60     	; 0xe64 <__fpcmp_parts_f+0x88>
     e28:	81 81       	ldd	r24, Z+1	; 0x01
     e2a:	18 17       	cp	r17, r24
     e2c:	d9 f4       	brne	.+54     	; 0xe64 <__fpcmp_parts_f+0x88>
     e2e:	12 96       	adiw	r26, 0x02	; 2
     e30:	2d 91       	ld	r18, X+
     e32:	3c 91       	ld	r19, X
     e34:	13 97       	sbiw	r26, 0x03	; 3
     e36:	82 81       	ldd	r24, Z+2	; 0x02
     e38:	93 81       	ldd	r25, Z+3	; 0x03
     e3a:	82 17       	cp	r24, r18
     e3c:	93 07       	cpc	r25, r19
     e3e:	94 f0       	brlt	.+36     	; 0xe64 <__fpcmp_parts_f+0x88>
     e40:	28 17       	cp	r18, r24
     e42:	39 07       	cpc	r19, r25
     e44:	bc f0       	brlt	.+46     	; 0xe74 <__fpcmp_parts_f+0x98>
     e46:	14 96       	adiw	r26, 0x04	; 4
     e48:	8d 91       	ld	r24, X+
     e4a:	9d 91       	ld	r25, X+
     e4c:	0d 90       	ld	r0, X+
     e4e:	bc 91       	ld	r27, X
     e50:	a0 2d       	mov	r26, r0
     e52:	24 81       	ldd	r18, Z+4	; 0x04
     e54:	35 81       	ldd	r19, Z+5	; 0x05
     e56:	46 81       	ldd	r20, Z+6	; 0x06
     e58:	57 81       	ldd	r21, Z+7	; 0x07
     e5a:	28 17       	cp	r18, r24
     e5c:	39 07       	cpc	r19, r25
     e5e:	4a 07       	cpc	r20, r26
     e60:	5b 07       	cpc	r21, r27
     e62:	18 f4       	brcc	.+6      	; 0xe6a <__fpcmp_parts_f+0x8e>
     e64:	11 23       	and	r17, r17
     e66:	41 f0       	breq	.+16     	; 0xe78 <__fpcmp_parts_f+0x9c>
     e68:	0a c0       	rjmp	.+20     	; 0xe7e <__fpcmp_parts_f+0xa2>
     e6a:	82 17       	cp	r24, r18
     e6c:	93 07       	cpc	r25, r19
     e6e:	a4 07       	cpc	r26, r20
     e70:	b5 07       	cpc	r27, r21
     e72:	40 f4       	brcc	.+16     	; 0xe84 <__fpcmp_parts_f+0xa8>
     e74:	11 23       	and	r17, r17
     e76:	19 f0       	breq	.+6      	; 0xe7e <__fpcmp_parts_f+0xa2>
     e78:	61 e0       	ldi	r22, 0x01	; 1
     e7a:	70 e0       	ldi	r23, 0x00	; 0
     e7c:	05 c0       	rjmp	.+10     	; 0xe88 <__fpcmp_parts_f+0xac>
     e7e:	6f ef       	ldi	r22, 0xFF	; 255
     e80:	7f ef       	ldi	r23, 0xFF	; 255
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <__fpcmp_parts_f+0xac>
     e84:	60 e0       	ldi	r22, 0x00	; 0
     e86:	70 e0       	ldi	r23, 0x00	; 0
     e88:	cb 01       	movw	r24, r22
     e8a:	1f 91       	pop	r17
     e8c:	08 95       	ret

00000e8e <USART_enuInit>:
#include "USART_config.h"
#include "USART_priv.h"


ES_t USART_enuInit()//u16 Copy_u16baud
{
     e8e:	df 93       	push	r29
     e90:	cf 93       	push	r28
     e92:	00 d0       	rcall	.+0      	; 0xe94 <USART_enuInit+0x6>
     e94:	00 d0       	rcall	.+0      	; 0xe96 <USART_enuInit+0x8>
     e96:	cd b7       	in	r28, 0x3d	; 61
     e98:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
     e9a:	1c 82       	std	Y+4, r1	; 0x04

#if SPEED_MODE==NORMAL_SPEED
	UCSRA &=~(1<<UCSRA_U2X);
     e9c:	ab e2       	ldi	r26, 0x2B	; 43
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	eb e2       	ldi	r30, 0x2B	; 43
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	80 81       	ld	r24, Z
     ea6:	8d 7f       	andi	r24, 0xFD	; 253
     ea8:	8c 93       	st	X, r24
	Local_enuErrorState=ES_OK;
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	8c 83       	std	Y+4, r24	; 0x04

#error "SPEED mode selection is wrong"
#endif

#if USART_MODE==TRANSCIEVER
	UCSRB |=(3<<UCSRB_TXEN);
     eae:	aa e2       	ldi	r26, 0x2A	; 42
     eb0:	b0 e0       	ldi	r27, 0x00	; 0
     eb2:	ea e2       	ldi	r30, 0x2A	; 42
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	80 81       	ld	r24, Z
     eb8:	88 61       	ori	r24, 0x18	; 24
     eba:	8c 93       	st	X, r24
	Local_enuErrorState=ES_OK;
     ebc:	81 e0       	ldi	r24, 0x01	; 1
     ebe:	8c 83       	std	Y+4, r24	; 0x04

#error "UART mode selection is wrong"
#endif


	u8 Local_u8UCSRC=0;
     ec0:	1b 82       	std	Y+3, r1	; 0x03
	Local_u8UCSRC |=(3<<UCSRC_UCSZ0);
	UCSRB |=(1<<UCSRB_UCSZ2);
	Local_enuErrorState=ES_OK;

#elif DATA_LEN==EIGHT_BIT
	Local_u8UCSRC |=(3<<UCSRC_UCSZ0);
     ec2:	8b 81       	ldd	r24, Y+3	; 0x03
     ec4:	86 60       	ori	r24, 0x06	; 6
     ec6:	8b 83       	std	Y+3, r24	; 0x03
	UCSRB &=~(1<<UCSRB_UCSZ2);
     ec8:	aa e2       	ldi	r26, 0x2A	; 42
     eca:	b0 e0       	ldi	r27, 0x00	; 0
     ecc:	ea e2       	ldi	r30, 0x2A	; 42
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	80 81       	ld	r24, Z
     ed2:	8b 7f       	andi	r24, 0xFB	; 251
     ed4:	8c 93       	st	X, r24
	Local_enuErrorState=ES_OK;
     ed6:	81 e0       	ldi	r24, 0x01	; 1
     ed8:	8c 83       	std	Y+4, r24	; 0x04
#error "UART DATA Length  selection is wrong"
#endif


#if PARITY_STATE==NO_PARITY
	Local_u8UCSRC &=~(3<<UCSRC_UPM0);
     eda:	8b 81       	ldd	r24, Y+3	; 0x03
     edc:	8f 7c       	andi	r24, 0xCF	; 207
     ede:	8b 83       	std	Y+3, r24	; 0x03
	Local_enuErrorState=ES_OK;
     ee0:	81 e0       	ldi	r24, 0x01	; 1
     ee2:	8c 83       	std	Y+4, r24	; 0x04
#error "UART PARITY State  selection is wrong"
#endif


#if STOP_STATE==ONE_STOP_BIT
	Local_u8UCSRC &=~(1<<UCSRC_USBS);
     ee4:	8b 81       	ldd	r24, Y+3	; 0x03
     ee6:	87 7f       	andi	r24, 0xF7	; 247
     ee8:	8b 83       	std	Y+3, r24	; 0x03
	Local_enuErrorState=ES_OK;
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	8c 83       	std	Y+4, r24	; 0x04
#error "UART STOP State  selection is wrong"
#endif


#if CLOCK_MODE==ASYNCH
	Local_u8UCSRC &=~(1<<UCSRC_UMSEL);
     eee:	8b 81       	ldd	r24, Y+3	; 0x03
     ef0:	8f 7b       	andi	r24, 0xBF	; 191
     ef2:	8b 83       	std	Y+3, r24	; 0x03
	Local_enuErrorState=ES_OK;
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	8c 83       	std	Y+4, r24	; 0x04

#error "UART CLOCK MODE  selection is wrong"
#endif


	Local_u8UCSRC |=(1<<UCSRC_URSEL);
     ef8:	8b 81       	ldd	r24, Y+3	; 0x03
     efa:	80 68       	ori	r24, 0x80	; 128
     efc:	8b 83       	std	Y+3, r24	; 0x03
	UCSRC = Local_u8UCSRC;
     efe:	e0 e4       	ldi	r30, 0x40	; 64
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	8b 81       	ldd	r24, Y+3	; 0x03
     f04:	80 83       	st	Z, r24

	u16 Local_u16UBRR = BUAD(BAUDRATE);
     f06:	83 e3       	ldi	r24, 0x33	; 51
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	9a 83       	std	Y+2, r25	; 0x02
     f0c:	89 83       	std	Y+1, r24	; 0x01

	Local_u16UBRR &=~(1<<15); //URSEL=0 to select UBRRH
     f0e:	89 81       	ldd	r24, Y+1	; 0x01
     f10:	9a 81       	ldd	r25, Y+2	; 0x02
     f12:	9f 77       	andi	r25, 0x7F	; 127
     f14:	9a 83       	std	Y+2, r25	; 0x02
     f16:	89 83       	std	Y+1, r24	; 0x01

	UBRRL =(u8)Local_u16UBRR; // I think there are error here
     f18:	e9 e2       	ldi	r30, 0x29	; 41
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	89 81       	ldd	r24, Y+1	; 0x01
     f1e:	80 83       	st	Z, r24
	UBRRH =(Local_u16UBRR>>8);
     f20:	e0 e4       	ldi	r30, 0x40	; 64
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	89 81       	ldd	r24, Y+1	; 0x01
     f26:	9a 81       	ldd	r25, Y+2	; 0x02
     f28:	89 2f       	mov	r24, r25
     f2a:	99 27       	eor	r25, r25
     f2c:	80 83       	st	Z, r24
	Local_enuErrorState=ES_OK;
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	8c 83       	std	Y+4, r24	; 0x04


	return Local_enuErrorState;
     f32:	8c 81       	ldd	r24, Y+4	; 0x04
}
     f34:	0f 90       	pop	r0
     f36:	0f 90       	pop	r0
     f38:	0f 90       	pop	r0
     f3a:	0f 90       	pop	r0
     f3c:	cf 91       	pop	r28
     f3e:	df 91       	pop	r29
     f40:	08 95       	ret

00000f42 <USART_enuSendChar>:


ES_t USART_enuSendChar(u8 Copy_u8data)
{
     f42:	df 93       	push	r29
     f44:	cf 93       	push	r28
     f46:	00 d0       	rcall	.+0      	; 0xf48 <USART_enuSendChar+0x6>
     f48:	cd b7       	in	r28, 0x3d	; 61
     f4a:	de b7       	in	r29, 0x3e	; 62
     f4c:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
     f4e:	19 82       	std	Y+1, r1	; 0x01

	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UCSRA_UDRE)));
     f50:	eb e2       	ldi	r30, 0x2B	; 43
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	80 81       	ld	r24, Z
     f56:	88 2f       	mov	r24, r24
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	80 72       	andi	r24, 0x20	; 32
     f5c:	90 70       	andi	r25, 0x00	; 0
     f5e:	00 97       	sbiw	r24, 0x00	; 0
     f60:	b9 f3       	breq	.-18     	; 0xf50 <USART_enuSendChar+0xe>

	UDR = Copy_u8data;
     f62:	ec e2       	ldi	r30, 0x2C	; 44
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	8a 81       	ldd	r24, Y+2	; 0x02
     f68:	80 83       	st	Z, r24

	Local_enuErrorState=ES_OK;
     f6a:	81 e0       	ldi	r24, 0x01	; 1
     f6c:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
     f6e:	89 81       	ldd	r24, Y+1	; 0x01
}
     f70:	0f 90       	pop	r0
     f72:	0f 90       	pop	r0
     f74:	cf 91       	pop	r28
     f76:	df 91       	pop	r29
     f78:	08 95       	ret

00000f7a <USART_enuRecieveChar>:

ES_t USART_enuRecieveChar(u8 *Copy_pu8data)
{
     f7a:	df 93       	push	r29
     f7c:	cf 93       	push	r28
     f7e:	00 d0       	rcall	.+0      	; 0xf80 <USART_enuRecieveChar+0x6>
     f80:	0f 92       	push	r0
     f82:	cd b7       	in	r28, 0x3d	; 61
     f84:	de b7       	in	r29, 0x3e	; 62
     f86:	9b 83       	std	Y+3, r25	; 0x03
     f88:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
     f8a:	19 82       	std	Y+1, r1	; 0x01


	if (Copy_pu8data!=NULL)
     f8c:	8a 81       	ldd	r24, Y+2	; 0x02
     f8e:	9b 81       	ldd	r25, Y+3	; 0x03
     f90:	00 97       	sbiw	r24, 0x00	; 0
     f92:	71 f0       	breq	.+28     	; 0xfb0 <USART_enuRecieveChar+0x36>
	{
		/* Wait for data to be received */
		while ( !(UCSRA & (1<<UCSRA_RXC)) );
     f94:	eb e2       	ldi	r30, 0x2B	; 43
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	80 81       	ld	r24, Z
     f9a:	88 23       	and	r24, r24
     f9c:	dc f7       	brge	.-10     	; 0xf94 <USART_enuRecieveChar+0x1a>

		*Copy_pu8data = UDR;
     f9e:	ec e2       	ldi	r30, 0x2C	; 44
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	80 81       	ld	r24, Z
     fa4:	ea 81       	ldd	r30, Y+2	; 0x02
     fa6:	fb 81       	ldd	r31, Y+3	; 0x03
     fa8:	80 83       	st	Z, r24

		Local_enuErrorState=ES_OK;
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	89 83       	std	Y+1, r24	; 0x01
     fae:	02 c0       	rjmp	.+4      	; 0xfb4 <USART_enuRecieveChar+0x3a>
	}
	else
	{
		Local_enuErrorState=ES_NULL_POINTER;
     fb0:	82 e0       	ldi	r24, 0x02	; 2
     fb2:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
     fb4:	89 81       	ldd	r24, Y+1	; 0x01
}
     fb6:	0f 90       	pop	r0
     fb8:	0f 90       	pop	r0
     fba:	0f 90       	pop	r0
     fbc:	cf 91       	pop	r28
     fbe:	df 91       	pop	r29
     fc0:	08 95       	ret

00000fc2 <USART_enuSendString>:

ES_t USART_enuSendString(const char *Copy_pcData)
{
     fc2:	df 93       	push	r29
     fc4:	cf 93       	push	r28
     fc6:	00 d0       	rcall	.+0      	; 0xfc8 <USART_enuSendString+0x6>
     fc8:	0f 92       	push	r0
     fca:	cd b7       	in	r28, 0x3d	; 61
     fcc:	de b7       	in	r29, 0x3e	; 62
     fce:	9b 83       	std	Y+3, r25	; 0x03
     fd0:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
     fd2:	19 82       	std	Y+1, r1	; 0x01
     fd4:	14 c0       	rjmp	.+40     	; 0xffe <USART_enuSendString+0x3c>

	while(*Copy_pcData != '\0')
	{
		/* Wait for empty transmit buffer */
		while ( !( UCSRA & (1<<UCSRA_UDRE)));
     fd6:	eb e2       	ldi	r30, 0x2B	; 43
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	88 2f       	mov	r24, r24
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	80 72       	andi	r24, 0x20	; 32
     fe2:	90 70       	andi	r25, 0x00	; 0
     fe4:	00 97       	sbiw	r24, 0x00	; 0
     fe6:	b9 f3       	breq	.-18     	; 0xfd6 <USART_enuSendString+0x14>

		UDR = *Copy_pcData;
     fe8:	ac e2       	ldi	r26, 0x2C	; 44
     fea:	b0 e0       	ldi	r27, 0x00	; 0
     fec:	ea 81       	ldd	r30, Y+2	; 0x02
     fee:	fb 81       	ldd	r31, Y+3	; 0x03
     ff0:	80 81       	ld	r24, Z
     ff2:	8c 93       	st	X, r24
		Copy_pcData++;
     ff4:	8a 81       	ldd	r24, Y+2	; 0x02
     ff6:	9b 81       	ldd	r25, Y+3	; 0x03
     ff8:	01 96       	adiw	r24, 0x01	; 1
     ffa:	9b 83       	std	Y+3, r25	; 0x03
     ffc:	8a 83       	std	Y+2, r24	; 0x02

ES_t USART_enuSendString(const char *Copy_pcData)
{
	ES_t Local_enuErrorState=ES_NOK;

	while(*Copy_pcData != '\0')
     ffe:	ea 81       	ldd	r30, Y+2	; 0x02
    1000:	fb 81       	ldd	r31, Y+3	; 0x03
    1002:	80 81       	ld	r24, Z
    1004:	88 23       	and	r24, r24
    1006:	39 f7       	brne	.-50     	; 0xfd6 <USART_enuSendString+0x14>

		UDR = *Copy_pcData;
		Copy_pcData++;
	}

	Local_enuErrorState=ES_OK;
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    100c:	89 81       	ldd	r24, Y+1	; 0x01
}
    100e:	0f 90       	pop	r0
    1010:	0f 90       	pop	r0
    1012:	0f 90       	pop	r0
    1014:	cf 91       	pop	r28
    1016:	df 91       	pop	r29
    1018:	08 95       	ret

0000101a <USART_enuRecieveString>:

/* Enter  >> \r=13  , \n */

ES_t USART_enuRecieveString(char *Copy_pcData)
{
    101a:	df 93       	push	r29
    101c:	cf 93       	push	r28
    101e:	00 d0       	rcall	.+0      	; 0x1020 <USART_enuRecieveString+0x6>
    1020:	00 d0       	rcall	.+0      	; 0x1022 <USART_enuRecieveString+0x8>
    1022:	00 d0       	rcall	.+0      	; 0x1024 <USART_enuRecieveString+0xa>
    1024:	cd b7       	in	r28, 0x3d	; 61
    1026:	de b7       	in	r29, 0x3e	; 62
    1028:	9e 83       	std	Y+6, r25	; 0x06
    102a:	8d 83       	std	Y+5, r24	; 0x05
	ES_t Local_enuErrorState=ES_NOK;
    102c:	1c 82       	std	Y+4, r1	; 0x04

	u8 Local_u8Data=0,Local_u8Index=0;
    102e:	1b 82       	std	Y+3, r1	; 0x03
    1030:	1a 82       	std	Y+2, r1	; 0x02


	// Receive using first char user send

	/* Wait for data to be received */
	while ( !(UCSRA & (1<<UCSRA_RXC)) );
    1032:	eb e2       	ldi	r30, 0x2B	; 43
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	80 81       	ld	r24, Z
    1038:	88 23       	and	r24, r24
    103a:	dc f7       	brge	.-10     	; 0x1032 <USART_enuRecieveString+0x18>

	u8 Local_u8Exit=UDR;
    103c:	ec e2       	ldi	r30, 0x2C	; 44
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	80 81       	ld	r24, Z
    1042:	89 83       	std	Y+1, r24	; 0x01

	while(1)
	{
		/* Wait for data to be received */
		while ( !(UCSRA & (1<<UCSRA_RXC)) );
    1044:	eb e2       	ldi	r30, 0x2B	; 43
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z
    104a:	88 23       	and	r24, r24
    104c:	dc f7       	brge	.-10     	; 0x1044 <USART_enuRecieveString+0x2a>

		Local_u8Data = UDR;
    104e:	ec e2       	ldi	r30, 0x2C	; 44
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	8b 83       	std	Y+3, r24	; 0x03

		if(Local_u8Data ==Local_u8Exit)
    1056:	9b 81       	ldd	r25, Y+3	; 0x03
    1058:	89 81       	ldd	r24, Y+1	; 0x01
    105a:	98 17       	cp	r25, r24
    105c:	a9 f4       	brne	.+42     	; 0x1088 <USART_enuRecieveString+0x6e>
		{
			Copy_pcData[Local_u8Index]='\0';
    105e:	8a 81       	ldd	r24, Y+2	; 0x02
    1060:	28 2f       	mov	r18, r24
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	8d 81       	ldd	r24, Y+5	; 0x05
    1066:	9e 81       	ldd	r25, Y+6	; 0x06
    1068:	fc 01       	movw	r30, r24
    106a:	e2 0f       	add	r30, r18
    106c:	f3 1f       	adc	r31, r19
    106e:	10 82       	st	Z, r1
			Copy_pcData[Local_u8Index]=Local_u8Data;
			Local_u8Index++;
		}
	}

	Local_enuErrorState=ES_OK;
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	8c 83       	std	Y+4, r24	; 0x04

	return Local_enuErrorState;
    1074:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1076:	26 96       	adiw	r28, 0x06	; 6
    1078:	0f b6       	in	r0, 0x3f	; 63
    107a:	f8 94       	cli
    107c:	de bf       	out	0x3e, r29	; 62
    107e:	0f be       	out	0x3f, r0	; 63
    1080:	cd bf       	out	0x3d, r28	; 61
    1082:	cf 91       	pop	r28
    1084:	df 91       	pop	r29
    1086:	08 95       	ret
			Copy_pcData[Local_u8Index]='\0';
			break;
		}
		else
		{
			Copy_pcData[Local_u8Index]=Local_u8Data;
    1088:	8a 81       	ldd	r24, Y+2	; 0x02
    108a:	28 2f       	mov	r18, r24
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	8d 81       	ldd	r24, Y+5	; 0x05
    1090:	9e 81       	ldd	r25, Y+6	; 0x06
    1092:	fc 01       	movw	r30, r24
    1094:	e2 0f       	add	r30, r18
    1096:	f3 1f       	adc	r31, r19
    1098:	8b 81       	ldd	r24, Y+3	; 0x03
    109a:	80 83       	st	Z, r24
			Local_u8Index++;
    109c:	8a 81       	ldd	r24, Y+2	; 0x02
    109e:	8f 5f       	subi	r24, 0xFF	; 255
    10a0:	8a 83       	std	Y+2, r24	; 0x02
    10a2:	d0 cf       	rjmp	.-96     	; 0x1044 <USART_enuRecieveString+0x2a>

000010a4 <USART_enuTransmit>:
	return Local_enuErrorState;
}


ES_t USART_enuTransmit(u16 Copy_u16data)
{
    10a4:	df 93       	push	r29
    10a6:	cf 93       	push	r28
    10a8:	00 d0       	rcall	.+0      	; 0x10aa <USART_enuTransmit+0x6>
    10aa:	0f 92       	push	r0
    10ac:	cd b7       	in	r28, 0x3d	; 61
    10ae:	de b7       	in	r29, 0x3e	; 62
    10b0:	9b 83       	std	Y+3, r25	; 0x03
    10b2:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    10b4:	19 82       	std	Y+1, r1	; 0x01
	/* Put data into buffer, sends the data *
	UDR = Copy_data;
*/

	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UCSRA_UDRE)));
    10b6:	eb e2       	ldi	r30, 0x2B	; 43
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	80 81       	ld	r24, Z
    10bc:	88 2f       	mov	r24, r24
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	80 72       	andi	r24, 0x20	; 32
    10c2:	90 70       	andi	r25, 0x00	; 0
    10c4:	00 97       	sbiw	r24, 0x00	; 0
    10c6:	b9 f3       	breq	.-18     	; 0x10b6 <USART_enuTransmit+0x12>

	/* Copy 9th bit to TXB8 */
	UCSRB &= ~(1<<UCSRB_TXB8);
    10c8:	aa e2       	ldi	r26, 0x2A	; 42
    10ca:	b0 e0       	ldi	r27, 0x00	; 0
    10cc:	ea e2       	ldi	r30, 0x2A	; 42
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	80 81       	ld	r24, Z
    10d2:	8e 7f       	andi	r24, 0xFE	; 254
    10d4:	8c 93       	st	X, r24
	if ( Copy_u16data & 0x0100 )
    10d6:	8a 81       	ldd	r24, Y+2	; 0x02
    10d8:	9b 81       	ldd	r25, Y+3	; 0x03
    10da:	80 70       	andi	r24, 0x00	; 0
    10dc:	91 70       	andi	r25, 0x01	; 1
    10de:	00 97       	sbiw	r24, 0x00	; 0
    10e0:	39 f0       	breq	.+14     	; 0x10f0 <USART_enuTransmit+0x4c>
	{
		UCSRB |= (1<<UCSRB_TXB8);
    10e2:	aa e2       	ldi	r26, 0x2A	; 42
    10e4:	b0 e0       	ldi	r27, 0x00	; 0
    10e6:	ea e2       	ldi	r30, 0x2A	; 42
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	80 81       	ld	r24, Z
    10ec:	81 60       	ori	r24, 0x01	; 1
    10ee:	8c 93       	st	X, r24
	}
	/* Put data into buffer, sends the data */
	UDR = Copy_u16data;
    10f0:	ec e2       	ldi	r30, 0x2C	; 44
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	8a 81       	ldd	r24, Y+2	; 0x02
    10f6:	80 83       	st	Z, r24

	Local_enuErrorState=ES_OK;
    10f8:	81 e0       	ldi	r24, 0x01	; 1
    10fa:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    10fc:	89 81       	ldd	r24, Y+1	; 0x01
}
    10fe:	0f 90       	pop	r0
    1100:	0f 90       	pop	r0
    1102:	0f 90       	pop	r0
    1104:	cf 91       	pop	r28
    1106:	df 91       	pop	r29
    1108:	08 95       	ret

0000110a <USART_enuRecieve>:

ES_t USART_enuRecieve(u16 *Copy_pu16data)
{
    110a:	df 93       	push	r29
    110c:	cf 93       	push	r28
    110e:	00 d0       	rcall	.+0      	; 0x1110 <USART_enuRecieve+0x6>
    1110:	0f 92       	push	r0
    1112:	cd b7       	in	r28, 0x3d	; 61
    1114:	de b7       	in	r29, 0x3e	; 62
    1116:	9b 83       	std	Y+3, r25	; 0x03
    1118:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    111a:	19 82       	std	Y+1, r1	; 0x01

	/* Wait for data to be received */
	while ( !(UCSRA & (1<<UCSRA_RXC)) );
    111c:	eb e2       	ldi	r30, 0x2B	; 43
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	80 81       	ld	r24, Z
    1122:	88 23       	and	r24, r24
    1124:	dc f7       	brge	.-10     	; 0x111c <USART_enuRecieve+0x12>
	/*  9th bit, then data */

	*Copy_pu16data = (UCSRB &(1<<UCSRB_RXB8));
    1126:	ea e2       	ldi	r30, 0x2A	; 42
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	88 2f       	mov	r24, r24
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	82 70       	andi	r24, 0x02	; 2
    1132:	90 70       	andi	r25, 0x00	; 0
    1134:	ea 81       	ldd	r30, Y+2	; 0x02
    1136:	fb 81       	ldd	r31, Y+3	; 0x03
    1138:	91 83       	std	Z+1, r25	; 0x01
    113a:	80 83       	st	Z, r24
	*Copy_pu16data= (*Copy_pu16data<<8) |UDR ;
    113c:	ea 81       	ldd	r30, Y+2	; 0x02
    113e:	fb 81       	ldd	r31, Y+3	; 0x03
    1140:	80 81       	ld	r24, Z
    1142:	91 81       	ldd	r25, Z+1	; 0x01
    1144:	38 2f       	mov	r19, r24
    1146:	22 27       	eor	r18, r18
    1148:	ec e2       	ldi	r30, 0x2C	; 44
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	80 81       	ld	r24, Z
    114e:	88 2f       	mov	r24, r24
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	82 2b       	or	r24, r18
    1154:	93 2b       	or	r25, r19
    1156:	ea 81       	ldd	r30, Y+2	; 0x02
    1158:	fb 81       	ldd	r31, Y+3	; 0x03
    115a:	91 83       	std	Z+1, r25	; 0x01
    115c:	80 83       	st	Z, r24
	//*Copy_data= UDR;


	Local_enuErrorState=ES_OK;
    115e:	81 e0       	ldi	r24, 0x01	; 1
    1160:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    1162:	89 81       	ldd	r24, Y+1	; 0x01
}
    1164:	0f 90       	pop	r0
    1166:	0f 90       	pop	r0
    1168:	0f 90       	pop	r0
    116a:	cf 91       	pop	r28
    116c:	df 91       	pop	r29
    116e:	08 95       	ret

00001170 <USART_enuEnableTransmitter>:

ES_t USART_enuEnableTransmitter(void)
{
    1170:	df 93       	push	r29
    1172:	cf 93       	push	r28
    1174:	0f 92       	push	r0
    1176:	cd b7       	in	r28, 0x3d	; 61
    1178:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
    117a:	19 82       	std	Y+1, r1	; 0x01

	UCSRB |=(1<<UCSRB_TXEN);
    117c:	aa e2       	ldi	r26, 0x2A	; 42
    117e:	b0 e0       	ldi	r27, 0x00	; 0
    1180:	ea e2       	ldi	r30, 0x2A	; 42
    1182:	f0 e0       	ldi	r31, 0x00	; 0
    1184:	80 81       	ld	r24, Z
    1186:	88 60       	ori	r24, 0x08	; 8
    1188:	8c 93       	st	X, r24
	Local_enuErrorState=ES_OK;
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    118e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1190:	0f 90       	pop	r0
    1192:	cf 91       	pop	r28
    1194:	df 91       	pop	r29
    1196:	08 95       	ret

00001198 <USART_enuEnableReceiver>:



ES_t USART_enuEnableReceiver(void)
{
    1198:	df 93       	push	r29
    119a:	cf 93       	push	r28
    119c:	0f 92       	push	r0
    119e:	cd b7       	in	r28, 0x3d	; 61
    11a0:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
    11a2:	19 82       	std	Y+1, r1	; 0x01

	UCSRB |=(1<<UCSRB_RXEN);
    11a4:	aa e2       	ldi	r26, 0x2A	; 42
    11a6:	b0 e0       	ldi	r27, 0x00	; 0
    11a8:	ea e2       	ldi	r30, 0x2A	; 42
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	80 81       	ld	r24, Z
    11ae:	80 61       	ori	r24, 0x10	; 16
    11b0:	8c 93       	st	X, r24
	Local_enuErrorState=ES_OK;
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    11b6:	89 81       	ldd	r24, Y+1	; 0x01
}
    11b8:	0f 90       	pop	r0
    11ba:	cf 91       	pop	r28
    11bc:	df 91       	pop	r29
    11be:	08 95       	ret

000011c0 <WDT_enuSleep>:
#include "WDT_config.h"
#include "WDT_priv.h"


ES_t WDT_enuSleep(u8 Copy_u8SleepTime)
{
    11c0:	df 93       	push	r29
    11c2:	cf 93       	push	r28
    11c4:	00 d0       	rcall	.+0      	; 0x11c6 <WDT_enuSleep+0x6>
    11c6:	cd b7       	in	r28, 0x3d	; 61
    11c8:	de b7       	in	r29, 0x3e	; 62
    11ca:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    11cc:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8SleepTime<8)
    11ce:	8a 81       	ldd	r24, Y+2	; 0x02
    11d0:	88 30       	cpi	r24, 0x08	; 8
    11d2:	90 f4       	brcc	.+36     	; 0x11f8 <WDT_enuSleep+0x38>
	{

		WDTCR &= 0b11111000;//Clear prescaler bits
    11d4:	a1 e4       	ldi	r26, 0x41	; 65
    11d6:	b0 e0       	ldi	r27, 0x00	; 0
    11d8:	e1 e4       	ldi	r30, 0x41	; 65
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	80 81       	ld	r24, Z
    11de:	88 7f       	andi	r24, 0xF8	; 248
    11e0:	8c 93       	st	X, r24

		WDTCR |=Copy_u8SleepTime;//Set required prescaler
    11e2:	a1 e4       	ldi	r26, 0x41	; 65
    11e4:	b0 e0       	ldi	r27, 0x00	; 0
    11e6:	e1 e4       	ldi	r30, 0x41	; 65
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	90 81       	ld	r25, Z
    11ec:	8a 81       	ldd	r24, Y+2	; 0x02
    11ee:	89 2b       	or	r24, r25
    11f0:	8c 93       	st	X, r24

		Local_enuErrorState=ES_OK;
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	89 83       	std	Y+1, r24	; 0x01
    11f6:	02 c0       	rjmp	.+4      	; 0x11fc <WDT_enuSleep+0x3c>
	}
	else
	{
		Local_enuErrorState=ES_OUT_OF_RANGE;
    11f8:	83 e0       	ldi	r24, 0x03	; 3
    11fa:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    11fc:	89 81       	ldd	r24, Y+1	; 0x01
}
    11fe:	0f 90       	pop	r0
    1200:	0f 90       	pop	r0
    1202:	cf 91       	pop	r28
    1204:	df 91       	pop	r29
    1206:	08 95       	ret

00001208 <WDT_enuEnable>:

ES_t WDT_enuEnable(void)
{
    1208:	df 93       	push	r29
    120a:	cf 93       	push	r28
    120c:	0f 92       	push	r0
    120e:	cd b7       	in	r28, 0x3d	; 61
    1210:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
    1212:	19 82       	std	Y+1, r1	; 0x01

	WDTCR |=(1<<WDTCR_WDE);
    1214:	a1 e4       	ldi	r26, 0x41	; 65
    1216:	b0 e0       	ldi	r27, 0x00	; 0
    1218:	e1 e4       	ldi	r30, 0x41	; 65
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	80 81       	ld	r24, Z
    121e:	88 60       	ori	r24, 0x08	; 8
    1220:	8c 93       	st	X, r24
	Local_enuErrorState=ES_OK;
    1222:	81 e0       	ldi	r24, 0x01	; 1
    1224:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    1226:	89 81       	ldd	r24, Y+1	; 0x01
}
    1228:	0f 90       	pop	r0
    122a:	cf 91       	pop	r28
    122c:	df 91       	pop	r29
    122e:	08 95       	ret

00001230 <WDT_enuDisable>:

ES_t WDT_enuDisable(void)
{
    1230:	df 93       	push	r29
    1232:	cf 93       	push	r28
    1234:	0f 92       	push	r0
    1236:	cd b7       	in	r28, 0x3d	; 61
    1238:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
    123a:	19 82       	std	Y+1, r1	; 0x01

	WDTCR |=0b00011000;//In the same operation, write a logic one to WDTOE and WDE
    123c:	a1 e4       	ldi	r26, 0x41	; 65
    123e:	b0 e0       	ldi	r27, 0x00	; 0
    1240:	e1 e4       	ldi	r30, 0x41	; 65
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 81       	ld	r24, Z
    1246:	88 61       	ori	r24, 0x18	; 24
    1248:	8c 93       	st	X, r24

	WDTCR =0; //Within the next four clock cycles, write a logic 0 to WDE
    124a:	e1 e4       	ldi	r30, 0x41	; 65
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	10 82       	st	Z, r1
	Local_enuErrorState=ES_OK;
    1250:	81 e0       	ldi	r24, 0x01	; 1
    1252:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    1254:	89 81       	ldd	r24, Y+1	; 0x01
}
    1256:	0f 90       	pop	r0
    1258:	cf 91       	pop	r28
    125a:	df 91       	pop	r29
    125c:	08 95       	ret

0000125e <TIMER2_enuInit>:




ES_t TIMER2_enuInit(void)
{
    125e:	df 93       	push	r29
    1260:	cf 93       	push	r28
    1262:	0f 92       	push	r0
    1264:	cd b7       	in	r28, 0x3d	; 61
    1266:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
    1268:	19 82       	std	Y+1, r1	; 0x01
	TCCR2 &=~(1<<TCCR0_CS22);
	TCCR2 &=~(1<<TCCR0_CS21);
	TCCR2 |= (1<<TCCR0_CS20);
	Local_enuErrorState =ES_OK;
#elif TIMER2_PRESCALER == TIMER2_PRESCALER_8
	TCCR2 &=~(1<<TCCR2_CS22);
    126a:	a5 e4       	ldi	r26, 0x45	; 69
    126c:	b0 e0       	ldi	r27, 0x00	; 0
    126e:	e5 e4       	ldi	r30, 0x45	; 69
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	80 81       	ld	r24, Z
    1274:	8b 7f       	andi	r24, 0xFB	; 251
    1276:	8c 93       	st	X, r24
	TCCR2 |= (1<<TCCR2_CS21);
    1278:	a5 e4       	ldi	r26, 0x45	; 69
    127a:	b0 e0       	ldi	r27, 0x00	; 0
    127c:	e5 e4       	ldi	r30, 0x45	; 69
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	80 81       	ld	r24, Z
    1282:	82 60       	ori	r24, 0x02	; 2
    1284:	8c 93       	st	X, r24
	TCCR2 &=~(1<<TCCR2_CS20);
    1286:	a5 e4       	ldi	r26, 0x45	; 69
    1288:	b0 e0       	ldi	r27, 0x00	; 0
    128a:	e5 e4       	ldi	r30, 0x45	; 69
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 81       	ld	r24, Z
    1290:	8e 7f       	andi	r24, 0xFE	; 254
    1292:	8c 93       	st	X, r24
	Local_enuErrorState =ES_OK;
    1294:	81 e0       	ldi	r24, 0x01	; 1
    1296:	89 83       	std	Y+1, r24	; 0x01
	#else
	#error"Attention!!, you must disable OC2_PIN at overflow MODE...."
	#endif

#elif TIMER2_MODE == TIMER2_COMPARE_MATCH
		TCCR2 |= (1<<TCCR2_WGM21);
    1298:	a5 e4       	ldi	r26, 0x45	; 69
    129a:	b0 e0       	ldi	r27, 0x00	; 0
    129c:	e5 e4       	ldi	r30, 0x45	; 69
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	80 81       	ld	r24, Z
    12a2:	88 60       	ori	r24, 0x08	; 8
    12a4:	8c 93       	st	X, r24
		TCCR2 &=~(1<<TCCR2_WGM20);
    12a6:	a5 e4       	ldi	r26, 0x45	; 69
    12a8:	b0 e0       	ldi	r27, 0x00	; 0
    12aa:	e5 e4       	ldi	r30, 0x45	; 69
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	80 81       	ld	r24, Z
    12b0:	8f 7b       	andi	r24, 0xBF	; 191
    12b2:	8c 93       	st	X, r24
		#if TIMER2_OC2_PIN_STATE == TIMER2_CTC_DISCONNECT_OC2
			TCCR2 &=~(1<<TCCR2_COM20);
    12b4:	a5 e4       	ldi	r26, 0x45	; 69
    12b6:	b0 e0       	ldi	r27, 0x00	; 0
    12b8:	e5 e4       	ldi	r30, 0x45	; 69
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	80 81       	ld	r24, Z
    12be:	8f 7e       	andi	r24, 0xEF	; 239
    12c0:	8c 93       	st	X, r24
			TCCR2 &=~(1<<TCCR2_COM21);
    12c2:	a5 e4       	ldi	r26, 0x45	; 69
    12c4:	b0 e0       	ldi	r27, 0x00	; 0
    12c6:	e5 e4       	ldi	r30, 0x45	; 69
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	80 81       	ld	r24, Z
    12cc:	8f 7d       	andi	r24, 0xDF	; 223
    12ce:	8c 93       	st	X, r24
			Local_enuErrorState =ES_OK;
    12d0:	81 e0       	ldi	r24, 0x01	; 1
    12d2:	89 83       	std	Y+1, r24	; 0x01
#else
#error "Attention!!, your TIMER2_MODE Selection is Wrong...."
#endif


	return Local_enuErrorState;
    12d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    12d6:	0f 90       	pop	r0
    12d8:	cf 91       	pop	r28
    12da:	df 91       	pop	r29
    12dc:	08 95       	ret

000012de <TIMER2_enuCallBackOVF>:

ES_t TIMER2_enuCallBackOVF(void (*Copy_PfunCallBack)(void*) , void * Copy_PvidParameter)
{
    12de:	df 93       	push	r29
    12e0:	cf 93       	push	r28
    12e2:	00 d0       	rcall	.+0      	; 0x12e4 <TIMER2_enuCallBackOVF+0x6>
    12e4:	00 d0       	rcall	.+0      	; 0x12e6 <TIMER2_enuCallBackOVF+0x8>
    12e6:	0f 92       	push	r0
    12e8:	cd b7       	in	r28, 0x3d	; 61
    12ea:	de b7       	in	r29, 0x3e	; 62
    12ec:	9b 83       	std	Y+3, r25	; 0x03
    12ee:	8a 83       	std	Y+2, r24	; 0x02
    12f0:	7d 83       	std	Y+5, r23	; 0x05
    12f2:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState=ES_NOK;
    12f4:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_PfunCallBack!=NULL)
    12f6:	8a 81       	ldd	r24, Y+2	; 0x02
    12f8:	9b 81       	ldd	r25, Y+3	; 0x03
    12fa:	00 97       	sbiw	r24, 0x00	; 0
    12fc:	79 f0       	breq	.+30     	; 0x131c <TIMER2_enuCallBackOVF+0x3e>
	{
		TIMER2_APfunCallBack [TIMER2_OVF_CALLBACK] = Copy_PfunCallBack;
    12fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1300:	9b 81       	ldd	r25, Y+3	; 0x03
    1302:	90 93 a5 02 	sts	0x02A5, r25
    1306:	80 93 a4 02 	sts	0x02A4, r24
		TIMER2_APvidParameter[TIMER2_OVF_CALLBACK] = Copy_PvidParameter;
    130a:	8c 81       	ldd	r24, Y+4	; 0x04
    130c:	9d 81       	ldd	r25, Y+5	; 0x05
    130e:	90 93 ab 02 	sts	0x02AB, r25
    1312:	80 93 aa 02 	sts	0x02AA, r24
		Local_enuErrorState =ES_OK;
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	89 83       	std	Y+1, r24	; 0x01
    131a:	02 c0       	rjmp	.+4      	; 0x1320 <TIMER2_enuCallBackOVF+0x42>
	}
	else
	{
		Local_enuErrorState =ES_NULL_POINTER;
    131c:	82 e0       	ldi	r24, 0x02	; 2
    131e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1320:	89 81       	ldd	r24, Y+1	; 0x01
}
    1322:	0f 90       	pop	r0
    1324:	0f 90       	pop	r0
    1326:	0f 90       	pop	r0
    1328:	0f 90       	pop	r0
    132a:	0f 90       	pop	r0
    132c:	cf 91       	pop	r28
    132e:	df 91       	pop	r29
    1330:	08 95       	ret

00001332 <TIMER2_enuCallBackCTC>:

ES_t TIMER2_enuCallBackCTC(void (*Copy_PfunCallBack)(void*) , void * Copy_PvidParameter)
{
    1332:	df 93       	push	r29
    1334:	cf 93       	push	r28
    1336:	00 d0       	rcall	.+0      	; 0x1338 <TIMER2_enuCallBackCTC+0x6>
    1338:	00 d0       	rcall	.+0      	; 0x133a <TIMER2_enuCallBackCTC+0x8>
    133a:	0f 92       	push	r0
    133c:	cd b7       	in	r28, 0x3d	; 61
    133e:	de b7       	in	r29, 0x3e	; 62
    1340:	9b 83       	std	Y+3, r25	; 0x03
    1342:	8a 83       	std	Y+2, r24	; 0x02
    1344:	7d 83       	std	Y+5, r23	; 0x05
    1346:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState=ES_NOK;
    1348:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_PfunCallBack!=NULL)
    134a:	8a 81       	ldd	r24, Y+2	; 0x02
    134c:	9b 81       	ldd	r25, Y+3	; 0x03
    134e:	00 97       	sbiw	r24, 0x00	; 0
    1350:	79 f0       	breq	.+30     	; 0x1370 <TIMER2_enuCallBackCTC+0x3e>
	{

		TIMER2_APfunCallBack [TIMER2_CTC_CALLBACK] = Copy_PfunCallBack;
    1352:	8a 81       	ldd	r24, Y+2	; 0x02
    1354:	9b 81       	ldd	r25, Y+3	; 0x03
    1356:	90 93 a7 02 	sts	0x02A7, r25
    135a:	80 93 a6 02 	sts	0x02A6, r24
		TIMER2_APvidParameter[TIMER2_CTC_CALLBACK] = Copy_PvidParameter;
    135e:	8c 81       	ldd	r24, Y+4	; 0x04
    1360:	9d 81       	ldd	r25, Y+5	; 0x05
    1362:	90 93 ad 02 	sts	0x02AD, r25
    1366:	80 93 ac 02 	sts	0x02AC, r24
		Local_enuErrorState=ES_OK;
    136a:	81 e0       	ldi	r24, 0x01	; 1
    136c:	89 83       	std	Y+1, r24	; 0x01
    136e:	02 c0       	rjmp	.+4      	; 0x1374 <TIMER2_enuCallBackCTC+0x42>
	}
	else
	{
		Local_enuErrorState =ES_NULL_POINTER;
    1370:	82 e0       	ldi	r24, 0x02	; 2
    1372:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1374:	89 81       	ldd	r24, Y+1	; 0x01
}
    1376:	0f 90       	pop	r0
    1378:	0f 90       	pop	r0
    137a:	0f 90       	pop	r0
    137c:	0f 90       	pop	r0
    137e:	0f 90       	pop	r0
    1380:	cf 91       	pop	r28
    1382:	df 91       	pop	r29
    1384:	08 95       	ret

00001386 <TIMER2_enuSetPreload>:

ES_t TIMER2_enuSetPreload(u8 Copy_u8Preload)
{
    1386:	df 93       	push	r29
    1388:	cf 93       	push	r28
    138a:	00 d0       	rcall	.+0      	; 0x138c <TIMER2_enuSetPreload+0x6>
    138c:	cd b7       	in	r28, 0x3d	; 61
    138e:	de b7       	in	r29, 0x3e	; 62
    1390:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    1392:	19 82       	std	Y+1, r1	; 0x01

	TCNT2 =Copy_u8Preload;
    1394:	e4 e4       	ldi	r30, 0x44	; 68
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	8a 81       	ldd	r24, Y+2	; 0x02
    139a:	80 83       	st	Z, r24
	Local_enuErrorState=ES_OK;
    139c:	81 e0       	ldi	r24, 0x01	; 1
    139e:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    13a0:	89 81       	ldd	r24, Y+1	; 0x01
}
    13a2:	0f 90       	pop	r0
    13a4:	0f 90       	pop	r0
    13a6:	cf 91       	pop	r28
    13a8:	df 91       	pop	r29
    13aa:	08 95       	ret

000013ac <TIMER2_enuSetCTC>:

ES_t TIMER2_enuSetCTC(u8 Copy_u8OCR2Value)
{
    13ac:	df 93       	push	r29
    13ae:	cf 93       	push	r28
    13b0:	00 d0       	rcall	.+0      	; 0x13b2 <TIMER2_enuSetCTC+0x6>
    13b2:	cd b7       	in	r28, 0x3d	; 61
    13b4:	de b7       	in	r29, 0x3e	; 62
    13b6:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    13b8:	19 82       	std	Y+1, r1	; 0x01

	OCR2 =Copy_u8OCR2Value;
    13ba:	e3 e4       	ldi	r30, 0x43	; 67
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	8a 81       	ldd	r24, Y+2	; 0x02
    13c0:	80 83       	st	Z, r24
	Local_enuErrorState=ES_OK;
    13c2:	81 e0       	ldi	r24, 0x01	; 1
    13c4:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    13c6:	89 81       	ldd	r24, Y+1	; 0x01
}
    13c8:	0f 90       	pop	r0
    13ca:	0f 90       	pop	r0
    13cc:	cf 91       	pop	r28
    13ce:	df 91       	pop	r29
    13d0:	08 95       	ret

000013d2 <TIMER2_enuEnableOVFINTERRUPT>:

ES_t TIMER2_enuEnableOVFINTERRUPT(void)
{
    13d2:	df 93       	push	r29
    13d4:	cf 93       	push	r28
    13d6:	0f 92       	push	r0
    13d8:	cd b7       	in	r28, 0x3d	; 61
    13da:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
    13dc:	19 82       	std	Y+1, r1	; 0x01

	TIMSK |=(1<<TIMSK_TOIE2);
    13de:	a9 e5       	ldi	r26, 0x59	; 89
    13e0:	b0 e0       	ldi	r27, 0x00	; 0
    13e2:	e9 e5       	ldi	r30, 0x59	; 89
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	80 81       	ld	r24, Z
    13e8:	80 64       	ori	r24, 0x40	; 64
    13ea:	8c 93       	st	X, r24
	Local_enuErrorState=ES_OK;
    13ec:	81 e0       	ldi	r24, 0x01	; 1
    13ee:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    13f0:	89 81       	ldd	r24, Y+1	; 0x01
}
    13f2:	0f 90       	pop	r0
    13f4:	cf 91       	pop	r28
    13f6:	df 91       	pop	r29
    13f8:	08 95       	ret

000013fa <TIMER2_enuEnableCTCINTERRUPT>:

ES_t TIMER2_enuEnableCTCINTERRUPT(void)
{
    13fa:	df 93       	push	r29
    13fc:	cf 93       	push	r28
    13fe:	0f 92       	push	r0
    1400:	cd b7       	in	r28, 0x3d	; 61
    1402:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
    1404:	19 82       	std	Y+1, r1	; 0x01

	TIMSK |=(1<<TIMSK_OCIE2);
    1406:	a9 e5       	ldi	r26, 0x59	; 89
    1408:	b0 e0       	ldi	r27, 0x00	; 0
    140a:	e9 e5       	ldi	r30, 0x59	; 89
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	80 81       	ld	r24, Z
    1410:	80 68       	ori	r24, 0x80	; 128
    1412:	8c 93       	st	X, r24
	Local_enuErrorState=ES_OK;
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    1418:	89 81       	ldd	r24, Y+1	; 0x01
}
    141a:	0f 90       	pop	r0
    141c:	cf 91       	pop	r28
    141e:	df 91       	pop	r29
    1420:	08 95       	ret

00001422 <TIMER2_enuSetAsychDelay>:

ES_t TIMER2_enuSetAsychDelay(u32 Copy_u8Time ,void(*Copy_pfunApp)(void*),void* Parameter)
{
    1422:	df 93       	push	r29
    1424:	cf 93       	push	r28
    1426:	cd b7       	in	r28, 0x3d	; 61
    1428:	de b7       	in	r29, 0x3e	; 62
    142a:	66 97       	sbiw	r28, 0x16	; 22
    142c:	0f b6       	in	r0, 0x3f	; 63
    142e:	f8 94       	cli
    1430:	de bf       	out	0x3e, r29	; 62
    1432:	0f be       	out	0x3f, r0	; 63
    1434:	cd bf       	out	0x3d, r28	; 61
    1436:	6f 87       	std	Y+15, r22	; 0x0f
    1438:	78 8b       	std	Y+16, r23	; 0x10
    143a:	89 8b       	std	Y+17, r24	; 0x11
    143c:	9a 8b       	std	Y+18, r25	; 0x12
    143e:	5c 8b       	std	Y+20, r21	; 0x14
    1440:	4b 8b       	std	Y+19, r20	; 0x13
    1442:	3e 8b       	std	Y+22, r19	; 0x16
    1444:	2d 8b       	std	Y+21, r18	; 0x15
	ES_t Local_enuErrorState=ES_NOK;
    1446:	1e 86       	std	Y+14, r1	; 0x0e

	f32 Local_f32OVFTime=TIMER2_OVF_COUNTS *((f32)TIMER2_PRESCALER/TIMER2_F_CPU);
    1448:	8f e6       	ldi	r24, 0x6F	; 111
    144a:	92 e1       	ldi	r25, 0x12	; 18
    144c:	a3 e8       	ldi	r26, 0x83	; 131
    144e:	be e3       	ldi	r27, 0x3E	; 62
    1450:	8a 87       	std	Y+10, r24	; 0x0a
    1452:	9b 87       	std	Y+11, r25	; 0x0b
    1454:	ac 87       	std	Y+12, r26	; 0x0c
    1456:	bd 87       	std	Y+13, r27	; 0x0d

	f32 Local_f32NumOVF = (Copy_u8Time)/(Local_f32OVFTime);
    1458:	6f 85       	ldd	r22, Y+15	; 0x0f
    145a:	78 89       	ldd	r23, Y+16	; 0x10
    145c:	89 89       	ldd	r24, Y+17	; 0x11
    145e:	9a 89       	ldd	r25, Y+18	; 0x12
    1460:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    1464:	dc 01       	movw	r26, r24
    1466:	cb 01       	movw	r24, r22
    1468:	bc 01       	movw	r22, r24
    146a:	cd 01       	movw	r24, r26
    146c:	2a 85       	ldd	r18, Y+10	; 0x0a
    146e:	3b 85       	ldd	r19, Y+11	; 0x0b
    1470:	4c 85       	ldd	r20, Y+12	; 0x0c
    1472:	5d 85       	ldd	r21, Y+13	; 0x0d
    1474:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1478:	dc 01       	movw	r26, r24
    147a:	cb 01       	movw	r24, r22
    147c:	8e 83       	std	Y+6, r24	; 0x06
    147e:	9f 83       	std	Y+7, r25	; 0x07
    1480:	a8 87       	std	Y+8, r26	; 0x08
    1482:	b9 87       	std	Y+9, r27	; 0x09

	if((Local_f32NumOVF-(u32)Local_f32NumOVF) != 0.0)
    1484:	6e 81       	ldd	r22, Y+6	; 0x06
    1486:	7f 81       	ldd	r23, Y+7	; 0x07
    1488:	88 85       	ldd	r24, Y+8	; 0x08
    148a:	99 85       	ldd	r25, Y+9	; 0x09
    148c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1490:	dc 01       	movw	r26, r24
    1492:	cb 01       	movw	r24, r22
    1494:	bc 01       	movw	r22, r24
    1496:	cd 01       	movw	r24, r26
    1498:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    149c:	9b 01       	movw	r18, r22
    149e:	ac 01       	movw	r20, r24
    14a0:	6e 81       	ldd	r22, Y+6	; 0x06
    14a2:	7f 81       	ldd	r23, Y+7	; 0x07
    14a4:	88 85       	ldd	r24, Y+8	; 0x08
    14a6:	99 85       	ldd	r25, Y+9	; 0x09
    14a8:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    14ac:	dc 01       	movw	r26, r24
    14ae:	cb 01       	movw	r24, r22
    14b0:	bc 01       	movw	r22, r24
    14b2:	cd 01       	movw	r24, r26
    14b4:	20 e0       	ldi	r18, 0x00	; 0
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	40 e0       	ldi	r20, 0x00	; 0
    14ba:	50 e0       	ldi	r21, 0x00	; 0
    14bc:	0e 94 c5 03 	call	0x78a	; 0x78a <__nesf2>
    14c0:	88 23       	and	r24, r24
    14c2:	09 f4       	brne	.+2      	; 0x14c6 <TIMER2_enuSetAsychDelay+0xa4>
    14c4:	64 c0       	rjmp	.+200    	; 0x158e <TIMER2_enuSetAsychDelay+0x16c>
	{
		u32 Local_u32NumOVF =(u32)Local_f32NumOVF +1;
    14c6:	6e 81       	ldd	r22, Y+6	; 0x06
    14c8:	7f 81       	ldd	r23, Y+7	; 0x07
    14ca:	88 85       	ldd	r24, Y+8	; 0x08
    14cc:	99 85       	ldd	r25, Y+9	; 0x09
    14ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14d2:	dc 01       	movw	r26, r24
    14d4:	cb 01       	movw	r24, r22
    14d6:	01 96       	adiw	r24, 0x01	; 1
    14d8:	a1 1d       	adc	r26, r1
    14da:	b1 1d       	adc	r27, r1
    14dc:	8a 83       	std	Y+2, r24	; 0x02
    14de:	9b 83       	std	Y+3, r25	; 0x03
    14e0:	ac 83       	std	Y+4, r26	; 0x04
    14e2:	bd 83       	std	Y+5, r27	; 0x05
		Local_f32NumOVF = Local_f32NumOVF-(u32)Local_f32NumOVF;
    14e4:	6e 81       	ldd	r22, Y+6	; 0x06
    14e6:	7f 81       	ldd	r23, Y+7	; 0x07
    14e8:	88 85       	ldd	r24, Y+8	; 0x08
    14ea:	99 85       	ldd	r25, Y+9	; 0x09
    14ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14f0:	dc 01       	movw	r26, r24
    14f2:	cb 01       	movw	r24, r22
    14f4:	bc 01       	movw	r22, r24
    14f6:	cd 01       	movw	r24, r26
    14f8:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    14fc:	9b 01       	movw	r18, r22
    14fe:	ac 01       	movw	r20, r24
    1500:	6e 81       	ldd	r22, Y+6	; 0x06
    1502:	7f 81       	ldd	r23, Y+7	; 0x07
    1504:	88 85       	ldd	r24, Y+8	; 0x08
    1506:	99 85       	ldd	r25, Y+9	; 0x09
    1508:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    150c:	dc 01       	movw	r26, r24
    150e:	cb 01       	movw	r24, r22
    1510:	8e 83       	std	Y+6, r24	; 0x06
    1512:	9f 83       	std	Y+7, r25	; 0x07
    1514:	a8 87       	std	Y+8, r26	; 0x08
    1516:	b9 87       	std	Y+9, r27	; 0x09
		u8 Local_u8Preload =256 - (Local_f32NumOVF * 256);
    1518:	6e 81       	ldd	r22, Y+6	; 0x06
    151a:	7f 81       	ldd	r23, Y+7	; 0x07
    151c:	88 85       	ldd	r24, Y+8	; 0x08
    151e:	99 85       	ldd	r25, Y+9	; 0x09
    1520:	20 e0       	ldi	r18, 0x00	; 0
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	40 e8       	ldi	r20, 0x80	; 128
    1526:	53 ec       	ldi	r21, 0xC3	; 195
    1528:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    152c:	dc 01       	movw	r26, r24
    152e:	cb 01       	movw	r24, r22
    1530:	bc 01       	movw	r22, r24
    1532:	cd 01       	movw	r24, r26
    1534:	20 e0       	ldi	r18, 0x00	; 0
    1536:	30 e0       	ldi	r19, 0x00	; 0
    1538:	40 e8       	ldi	r20, 0x80	; 128
    153a:	53 e4       	ldi	r21, 0x43	; 67
    153c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1540:	dc 01       	movw	r26, r24
    1542:	cb 01       	movw	r24, r22
    1544:	bc 01       	movw	r22, r24
    1546:	cd 01       	movw	r24, r26
    1548:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    154c:	dc 01       	movw	r26, r24
    154e:	cb 01       	movw	r24, r22
    1550:	89 83       	std	Y+1, r24	; 0x01
		Timer2_NumOVF =Local_u32NumOVF;
    1552:	8a 81       	ldd	r24, Y+2	; 0x02
    1554:	9b 81       	ldd	r25, Y+3	; 0x03
    1556:	ac 81       	ldd	r26, Y+4	; 0x04
    1558:	bd 81       	ldd	r27, Y+5	; 0x05
    155a:	80 93 ae 02 	sts	0x02AE, r24
    155e:	90 93 af 02 	sts	0x02AF, r25
    1562:	a0 93 b0 02 	sts	0x02B0, r26
    1566:	b0 93 b1 02 	sts	0x02B1, r27
		Timer2_Preload =Local_u8Preload;
    156a:	89 81       	ldd	r24, Y+1	; 0x01
    156c:	88 2f       	mov	r24, r24
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	a0 e0       	ldi	r26, 0x00	; 0
    1572:	b0 e0       	ldi	r27, 0x00	; 0
    1574:	80 93 b2 02 	sts	0x02B2, r24
    1578:	90 93 b3 02 	sts	0x02B3, r25
    157c:	a0 93 b4 02 	sts	0x02B4, r26
    1580:	b0 93 b5 02 	sts	0x02B5, r27
		TCNT2 =Local_u8Preload;
    1584:	e4 e4       	ldi	r30, 0x44	; 68
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	89 81       	ldd	r24, Y+1	; 0x01
    158a:	80 83       	st	Z, r24
    158c:	10 c0       	rjmp	.+32     	; 0x15ae <TIMER2_enuSetAsychDelay+0x18c>
	}
	else
	{
		Timer2_NumOVF =(u32)Local_f32NumOVF;
    158e:	6e 81       	ldd	r22, Y+6	; 0x06
    1590:	7f 81       	ldd	r23, Y+7	; 0x07
    1592:	88 85       	ldd	r24, Y+8	; 0x08
    1594:	99 85       	ldd	r25, Y+9	; 0x09
    1596:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    159a:	dc 01       	movw	r26, r24
    159c:	cb 01       	movw	r24, r22
    159e:	80 93 ae 02 	sts	0x02AE, r24
    15a2:	90 93 af 02 	sts	0x02AF, r25
    15a6:	a0 93 b0 02 	sts	0x02B0, r26
    15aa:	b0 93 b1 02 	sts	0x02B1, r27
	}

	if(Copy_pfunApp!=NULL)
    15ae:	8b 89       	ldd	r24, Y+19	; 0x13
    15b0:	9c 89       	ldd	r25, Y+20	; 0x14
    15b2:	00 97       	sbiw	r24, 0x00	; 0
    15b4:	69 f0       	breq	.+26     	; 0x15d0 <TIMER2_enuSetAsychDelay+0x1ae>
	{
		TIMER2_APfunCallBack[TIMER2_OVF_CALLBACK]=Copy_pfunApp;
    15b6:	8b 89       	ldd	r24, Y+19	; 0x13
    15b8:	9c 89       	ldd	r25, Y+20	; 0x14
    15ba:	90 93 a5 02 	sts	0x02A5, r25
    15be:	80 93 a4 02 	sts	0x02A4, r24
		TIMER2_APvidParameter[TIMER2_OVF_CALLBACK]=Parameter;
    15c2:	8d 89       	ldd	r24, Y+21	; 0x15
    15c4:	9e 89       	ldd	r25, Y+22	; 0x16
    15c6:	90 93 ab 02 	sts	0x02AB, r25
    15ca:	80 93 aa 02 	sts	0x02AA, r24
    15ce:	02 c0       	rjmp	.+4      	; 0x15d4 <TIMER2_enuSetAsychDelay+0x1b2>
	}
	else
	{
		Local_enuErrorState=ES_NULL_POINTER;
    15d0:	82 e0       	ldi	r24, 0x02	; 2
    15d2:	8e 87       	std	Y+14, r24	; 0x0e
	}

	TIMSK |=(1<<TIMSK_TOIE2);
    15d4:	a9 e5       	ldi	r26, 0x59	; 89
    15d6:	b0 e0       	ldi	r27, 0x00	; 0
    15d8:	e9 e5       	ldi	r30, 0x59	; 89
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	80 81       	ld	r24, Z
    15de:	80 64       	ori	r24, 0x40	; 64
    15e0:	8c 93       	st	X, r24


	return Local_enuErrorState;
    15e2:	8e 85       	ldd	r24, Y+14	; 0x0e
}
    15e4:	66 96       	adiw	r28, 0x16	; 22
    15e6:	0f b6       	in	r0, 0x3f	; 63
    15e8:	f8 94       	cli
    15ea:	de bf       	out	0x3e, r29	; 62
    15ec:	0f be       	out	0x3f, r0	; 63
    15ee:	cd bf       	out	0x3d, r28	; 61
    15f0:	cf 91       	pop	r28
    15f2:	df 91       	pop	r29
    15f4:	08 95       	ret

000015f6 <__vector_5>:




ISR(VECT_TIMER2_OVF)
{
    15f6:	1f 92       	push	r1
    15f8:	0f 92       	push	r0
    15fa:	0f b6       	in	r0, 0x3f	; 63
    15fc:	0f 92       	push	r0
    15fe:	11 24       	eor	r1, r1
    1600:	2f 93       	push	r18
    1602:	3f 93       	push	r19
    1604:	4f 93       	push	r20
    1606:	5f 93       	push	r21
    1608:	6f 93       	push	r22
    160a:	7f 93       	push	r23
    160c:	8f 93       	push	r24
    160e:	9f 93       	push	r25
    1610:	af 93       	push	r26
    1612:	bf 93       	push	r27
    1614:	ef 93       	push	r30
    1616:	ff 93       	push	r31
    1618:	df 93       	push	r29
    161a:	cf 93       	push	r28
    161c:	cd b7       	in	r28, 0x3d	; 61
    161e:	de b7       	in	r29, 0x3e	; 62
	if (TIMER2_APfunCallBack[TIMER2_OVF_CALLBACK] != NULL)
    1620:	80 91 a4 02 	lds	r24, 0x02A4
    1624:	90 91 a5 02 	lds	r25, 0x02A5
    1628:	00 97       	sbiw	r24, 0x00	; 0
    162a:	49 f0       	breq	.+18     	; 0x163e <__vector_5+0x48>
	{
		TIMER2_APfunCallBack[TIMER2_OVF_CALLBACK](TIMER2_APvidParameter[TIMER2_OVF_CALLBACK]);
    162c:	e0 91 a4 02 	lds	r30, 0x02A4
    1630:	f0 91 a5 02 	lds	r31, 0x02A5
    1634:	80 91 aa 02 	lds	r24, 0x02AA
    1638:	90 91 ab 02 	lds	r25, 0x02AB
    163c:	09 95       	icall
	}

}
    163e:	cf 91       	pop	r28
    1640:	df 91       	pop	r29
    1642:	ff 91       	pop	r31
    1644:	ef 91       	pop	r30
    1646:	bf 91       	pop	r27
    1648:	af 91       	pop	r26
    164a:	9f 91       	pop	r25
    164c:	8f 91       	pop	r24
    164e:	7f 91       	pop	r23
    1650:	6f 91       	pop	r22
    1652:	5f 91       	pop	r21
    1654:	4f 91       	pop	r20
    1656:	3f 91       	pop	r19
    1658:	2f 91       	pop	r18
    165a:	0f 90       	pop	r0
    165c:	0f be       	out	0x3f, r0	; 63
    165e:	0f 90       	pop	r0
    1660:	1f 90       	pop	r1
    1662:	18 95       	reti

00001664 <__vector_4>:

ISR(VECT_TIMER2_CTC)
{
    1664:	1f 92       	push	r1
    1666:	0f 92       	push	r0
    1668:	0f b6       	in	r0, 0x3f	; 63
    166a:	0f 92       	push	r0
    166c:	11 24       	eor	r1, r1
    166e:	2f 93       	push	r18
    1670:	3f 93       	push	r19
    1672:	4f 93       	push	r20
    1674:	5f 93       	push	r21
    1676:	6f 93       	push	r22
    1678:	7f 93       	push	r23
    167a:	8f 93       	push	r24
    167c:	9f 93       	push	r25
    167e:	af 93       	push	r26
    1680:	bf 93       	push	r27
    1682:	ef 93       	push	r30
    1684:	ff 93       	push	r31
    1686:	df 93       	push	r29
    1688:	cf 93       	push	r28
    168a:	cd b7       	in	r28, 0x3d	; 61
    168c:	de b7       	in	r29, 0x3e	; 62

	if (TIMER2_APfunCallBack[TIMER2_CTC_CALLBACK] != NULL)
    168e:	80 91 a6 02 	lds	r24, 0x02A6
    1692:	90 91 a7 02 	lds	r25, 0x02A7
    1696:	00 97       	sbiw	r24, 0x00	; 0
    1698:	49 f0       	breq	.+18     	; 0x16ac <__vector_4+0x48>
	{
		TIMER2_APfunCallBack[TIMER2_CTC_CALLBACK](TIMER2_APvidParameter[TIMER2_CTC_CALLBACK]);
    169a:	e0 91 a6 02 	lds	r30, 0x02A6
    169e:	f0 91 a7 02 	lds	r31, 0x02A7
    16a2:	80 91 ac 02 	lds	r24, 0x02AC
    16a6:	90 91 ad 02 	lds	r25, 0x02AD
    16aa:	09 95       	icall
	}
}
    16ac:	cf 91       	pop	r28
    16ae:	df 91       	pop	r29
    16b0:	ff 91       	pop	r31
    16b2:	ef 91       	pop	r30
    16b4:	bf 91       	pop	r27
    16b6:	af 91       	pop	r26
    16b8:	9f 91       	pop	r25
    16ba:	8f 91       	pop	r24
    16bc:	7f 91       	pop	r23
    16be:	6f 91       	pop	r22
    16c0:	5f 91       	pop	r21
    16c2:	4f 91       	pop	r20
    16c4:	3f 91       	pop	r19
    16c6:	2f 91       	pop	r18
    16c8:	0f 90       	pop	r0
    16ca:	0f be       	out	0x3f, r0	; 63
    16cc:	0f 90       	pop	r0
    16ce:	1f 90       	pop	r1
    16d0:	18 95       	reti

000016d2 <TIMER1_enuInit>:
static void (*TIMER1_APfunCallBack [TIMER1_CALL_BACK])(void*)= {NULL,NULL,NULL};
static void  *TIMER1_APvidParameter[TIMER1_CALL_BACK]        = {NULL,NULL,NULL};


ES_t  TIMER1_enuInit(void)
{
    16d2:	df 93       	push	r29
    16d4:	cf 93       	push	r28
    16d6:	0f 92       	push	r0
    16d8:	cd b7       	in	r28, 0x3d	; 61
    16da:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
    16dc:	19 82       	std	Y+1, r1	; 0x01
		#else
		#error"Attention!!, OC1A_B_PIN state is wrong or the mode is not CTC...."
		#endif

#elif TIMER1_MODE == TIMER1_FAST_PWM_TOP_ICR1
	TCCR1A &=~(1<<TCCR1A_WGM10);
    16de:	af e4       	ldi	r26, 0x4F	; 79
    16e0:	b0 e0       	ldi	r27, 0x00	; 0
    16e2:	ef e4       	ldi	r30, 0x4F	; 79
    16e4:	f0 e0       	ldi	r31, 0x00	; 0
    16e6:	80 81       	ld	r24, Z
    16e8:	8e 7f       	andi	r24, 0xFE	; 254
    16ea:	8c 93       	st	X, r24
	TCCR1A |= (1<<TCCR1A_WGM11);
    16ec:	af e4       	ldi	r26, 0x4F	; 79
    16ee:	b0 e0       	ldi	r27, 0x00	; 0
    16f0:	ef e4       	ldi	r30, 0x4F	; 79
    16f2:	f0 e0       	ldi	r31, 0x00	; 0
    16f4:	80 81       	ld	r24, Z
    16f6:	82 60       	ori	r24, 0x02	; 2
    16f8:	8c 93       	st	X, r24
	TCCR1B |= (1<<TCCR1B_WGM12);
    16fa:	ae e4       	ldi	r26, 0x4E	; 78
    16fc:	b0 e0       	ldi	r27, 0x00	; 0
    16fe:	ee e4       	ldi	r30, 0x4E	; 78
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	80 81       	ld	r24, Z
    1704:	88 60       	ori	r24, 0x08	; 8
    1706:	8c 93       	st	X, r24
	TCCR1B |= (1<<TCCR1B_WGM13);
    1708:	ae e4       	ldi	r26, 0x4E	; 78
    170a:	b0 e0       	ldi	r27, 0x00	; 0
    170c:	ee e4       	ldi	r30, 0x4E	; 78
    170e:	f0 e0       	ldi	r31, 0x00	; 0
    1710:	80 81       	ld	r24, Z
    1712:	80 61       	ori	r24, 0x10	; 16
    1714:	8c 93       	st	X, r24
		#if TIMER1_OC1A_B_PIN_STATE == TIMER1_FAST_PWM_CLEAR_CTC_SET_BOTTOM
			TCCR1A &=~(1<<TCCR1A_COM1A0);
    1716:	af e4       	ldi	r26, 0x4F	; 79
    1718:	b0 e0       	ldi	r27, 0x00	; 0
    171a:	ef e4       	ldi	r30, 0x4F	; 79
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	80 81       	ld	r24, Z
    1720:	8f 7b       	andi	r24, 0xBF	; 191
    1722:	8c 93       	st	X, r24
			TCCR1A |= (1<<TCCR1A_COM1A1);
    1724:	af e4       	ldi	r26, 0x4F	; 79
    1726:	b0 e0       	ldi	r27, 0x00	; 0
    1728:	ef e4       	ldi	r30, 0x4F	; 79
    172a:	f0 e0       	ldi	r31, 0x00	; 0
    172c:	80 81       	ld	r24, Z
    172e:	80 68       	ori	r24, 0x80	; 128
    1730:	8c 93       	st	X, r24
			TCCR1A &=~(1<<TCCR1A_COM1B0);
    1732:	af e4       	ldi	r26, 0x4F	; 79
    1734:	b0 e0       	ldi	r27, 0x00	; 0
    1736:	ef e4       	ldi	r30, 0x4F	; 79
    1738:	f0 e0       	ldi	r31, 0x00	; 0
    173a:	80 81       	ld	r24, Z
    173c:	8f 7e       	andi	r24, 0xEF	; 239
    173e:	8c 93       	st	X, r24
			TCCR1A |= (1<<TCCR1A_COM1B1);
    1740:	af e4       	ldi	r26, 0x4F	; 79
    1742:	b0 e0       	ldi	r27, 0x00	; 0
    1744:	ef e4       	ldi	r30, 0x4F	; 79
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	80 81       	ld	r24, Z
    174a:	80 62       	ori	r24, 0x20	; 32
    174c:	8c 93       	st	X, r24
			Local_enuErrorState =ES_OK;
    174e:	81 e0       	ldi	r24, 0x01	; 1
    1750:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B &=~(1<<TCCR1B_CS12);
	TCCR1B &=~(1<<TCCR1B_CS11);
	TCCR1B |= (1<<TCCR1B_CS10);
	Local_enuErrorState =ES_OK;
#elif TIMER1_PRESCALER == TIMER1_PRESCALER_8
	TCCR1B &=~(1<<TCCR1B_CS12);
    1752:	ae e4       	ldi	r26, 0x4E	; 78
    1754:	b0 e0       	ldi	r27, 0x00	; 0
    1756:	ee e4       	ldi	r30, 0x4E	; 78
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	80 81       	ld	r24, Z
    175c:	8b 7f       	andi	r24, 0xFB	; 251
    175e:	8c 93       	st	X, r24
	TCCR1B |= (1<<TCCR1B_CS11);
    1760:	ae e4       	ldi	r26, 0x4E	; 78
    1762:	b0 e0       	ldi	r27, 0x00	; 0
    1764:	ee e4       	ldi	r30, 0x4E	; 78
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	80 81       	ld	r24, Z
    176a:	82 60       	ori	r24, 0x02	; 2
    176c:	8c 93       	st	X, r24
	TCCR1B &=~(1<<TCCR1B_CS10);
    176e:	ae e4       	ldi	r26, 0x4E	; 78
    1770:	b0 e0       	ldi	r27, 0x00	; 0
    1772:	ee e4       	ldi	r30, 0x4E	; 78
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	80 81       	ld	r24, Z
    1778:	8e 7f       	andi	r24, 0xFE	; 254
    177a:	8c 93       	st	X, r24
	Local_enuErrorState =ES_OK;
    177c:	81 e0       	ldi	r24, 0x01	; 1
    177e:	89 83       	std	Y+1, r24	; 0x01
#else
#error "Attention!!, your TIMER1_PRESCALER Selection is Wrong...."

#endif

	return Local_enuErrorState;
    1780:	89 81       	ldd	r24, Y+1	; 0x01
}
    1782:	0f 90       	pop	r0
    1784:	cf 91       	pop	r28
    1786:	df 91       	pop	r29
    1788:	08 95       	ret

0000178a <TIMER1_enuSetChannelACTC>:

ES_t  TIMER1_enuSetChannelACTC(u16 Copy_u16OCR1AValue)
{
    178a:	df 93       	push	r29
    178c:	cf 93       	push	r28
    178e:	00 d0       	rcall	.+0      	; 0x1790 <TIMER1_enuSetChannelACTC+0x6>
    1790:	0f 92       	push	r0
    1792:	cd b7       	in	r28, 0x3d	; 61
    1794:	de b7       	in	r29, 0x3e	; 62
    1796:	9b 83       	std	Y+3, r25	; 0x03
    1798:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    179a:	19 82       	std	Y+1, r1	; 0x01

	OCR1A=Copy_u16OCR1AValue;
    179c:	ea e4       	ldi	r30, 0x4A	; 74
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	8a 81       	ldd	r24, Y+2	; 0x02
    17a2:	9b 81       	ldd	r25, Y+3	; 0x03
    17a4:	91 83       	std	Z+1, r25	; 0x01
    17a6:	80 83       	st	Z, r24
	Local_enuErrorState=ES_OK;
    17a8:	81 e0       	ldi	r24, 0x01	; 1
    17aa:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    17ac:	89 81       	ldd	r24, Y+1	; 0x01
}
    17ae:	0f 90       	pop	r0
    17b0:	0f 90       	pop	r0
    17b2:	0f 90       	pop	r0
    17b4:	cf 91       	pop	r28
    17b6:	df 91       	pop	r29
    17b8:	08 95       	ret

000017ba <TIMER1_enuSetChannelBCTC>:
ES_t  TIMER1_enuSetChannelBCTC(u16 Copy_u16OCR1AValue)
{
    17ba:	df 93       	push	r29
    17bc:	cf 93       	push	r28
    17be:	00 d0       	rcall	.+0      	; 0x17c0 <TIMER1_enuSetChannelBCTC+0x6>
    17c0:	0f 92       	push	r0
    17c2:	cd b7       	in	r28, 0x3d	; 61
    17c4:	de b7       	in	r29, 0x3e	; 62
    17c6:	9b 83       	std	Y+3, r25	; 0x03
    17c8:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    17ca:	19 82       	std	Y+1, r1	; 0x01

	OCR1B=Copy_u16OCR1AValue;
    17cc:	e8 e4       	ldi	r30, 0x48	; 72
    17ce:	f0 e0       	ldi	r31, 0x00	; 0
    17d0:	8a 81       	ldd	r24, Y+2	; 0x02
    17d2:	9b 81       	ldd	r25, Y+3	; 0x03
    17d4:	91 83       	std	Z+1, r25	; 0x01
    17d6:	80 83       	st	Z, r24
	Local_enuErrorState=ES_OK;
    17d8:	81 e0       	ldi	r24, 0x01	; 1
    17da:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    17dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    17de:	0f 90       	pop	r0
    17e0:	0f 90       	pop	r0
    17e2:	0f 90       	pop	r0
    17e4:	cf 91       	pop	r28
    17e6:	df 91       	pop	r29
    17e8:	08 95       	ret

000017ea <TIMER1_enuSetICR>:

ES_t  TIMER1_enuSetICR(u16 Copy_u16ICR1Value)
{
    17ea:	df 93       	push	r29
    17ec:	cf 93       	push	r28
    17ee:	00 d0       	rcall	.+0      	; 0x17f0 <TIMER1_enuSetICR+0x6>
    17f0:	0f 92       	push	r0
    17f2:	cd b7       	in	r28, 0x3d	; 61
    17f4:	de b7       	in	r29, 0x3e	; 62
    17f6:	9b 83       	std	Y+3, r25	; 0x03
    17f8:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    17fa:	19 82       	std	Y+1, r1	; 0x01

	ICR1=Copy_u16ICR1Value;
    17fc:	e6 e4       	ldi	r30, 0x46	; 70
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	8a 81       	ldd	r24, Y+2	; 0x02
    1802:	9b 81       	ldd	r25, Y+3	; 0x03
    1804:	91 83       	std	Z+1, r25	; 0x01
    1806:	80 83       	st	Z, r24
	Local_enuErrorState=ES_OK;
    1808:	81 e0       	ldi	r24, 0x01	; 1
    180a:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    180c:	89 81       	ldd	r24, Y+1	; 0x01
}
    180e:	0f 90       	pop	r0
    1810:	0f 90       	pop	r0
    1812:	0f 90       	pop	r0
    1814:	cf 91       	pop	r28
    1816:	df 91       	pop	r29
    1818:	08 95       	ret

0000181a <TIMER1_enuSetTimerValue>:

ES_t TIMER1_enuSetTimerValue(u16 Copy_u16Value)
{
    181a:	df 93       	push	r29
    181c:	cf 93       	push	r28
    181e:	00 d0       	rcall	.+0      	; 0x1820 <TIMER1_enuSetTimerValue+0x6>
    1820:	0f 92       	push	r0
    1822:	cd b7       	in	r28, 0x3d	; 61
    1824:	de b7       	in	r29, 0x3e	; 62
    1826:	9b 83       	std	Y+3, r25	; 0x03
    1828:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    182a:	19 82       	std	Y+1, r1	; 0x01

	TCNT1=Copy_u16Value;
    182c:	ec e4       	ldi	r30, 0x4C	; 76
    182e:	f0 e0       	ldi	r31, 0x00	; 0
    1830:	8a 81       	ldd	r24, Y+2	; 0x02
    1832:	9b 81       	ldd	r25, Y+3	; 0x03
    1834:	91 83       	std	Z+1, r25	; 0x01
    1836:	80 83       	st	Z, r24
	Local_enuErrorState=ES_OK;
    1838:	81 e0       	ldi	r24, 0x01	; 1
    183a:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    183c:	89 81       	ldd	r24, Y+1	; 0x01
}
    183e:	0f 90       	pop	r0
    1840:	0f 90       	pop	r0
    1842:	0f 90       	pop	r0
    1844:	cf 91       	pop	r28
    1846:	df 91       	pop	r29
    1848:	08 95       	ret

0000184a <TIMER1_enuReadTimerValue>:

ES_t  TIMER1_enuReadTimerValue(u16 *Copy_pu16Value)
{
    184a:	df 93       	push	r29
    184c:	cf 93       	push	r28
    184e:	00 d0       	rcall	.+0      	; 0x1850 <TIMER1_enuReadTimerValue+0x6>
    1850:	0f 92       	push	r0
    1852:	cd b7       	in	r28, 0x3d	; 61
    1854:	de b7       	in	r29, 0x3e	; 62
    1856:	9b 83       	std	Y+3, r25	; 0x03
    1858:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    185a:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pu16Value!=NULL)
    185c:	8a 81       	ldd	r24, Y+2	; 0x02
    185e:	9b 81       	ldd	r25, Y+3	; 0x03
    1860:	00 97       	sbiw	r24, 0x00	; 0
    1862:	59 f0       	breq	.+22     	; 0x187a <TIMER1_enuReadTimerValue+0x30>
	{
		*Copy_pu16Value=TCNT1;
    1864:	ec e4       	ldi	r30, 0x4C	; 76
    1866:	f0 e0       	ldi	r31, 0x00	; 0
    1868:	80 81       	ld	r24, Z
    186a:	91 81       	ldd	r25, Z+1	; 0x01
    186c:	ea 81       	ldd	r30, Y+2	; 0x02
    186e:	fb 81       	ldd	r31, Y+3	; 0x03
    1870:	91 83       	std	Z+1, r25	; 0x01
    1872:	80 83       	st	Z, r24
		Local_enuErrorState=ES_OK;
    1874:	81 e0       	ldi	r24, 0x01	; 1
    1876:	89 83       	std	Y+1, r24	; 0x01
    1878:	02 c0       	rjmp	.+4      	; 0x187e <TIMER1_enuReadTimerValue+0x34>
	}
	else
	{
		Local_enuErrorState=ES_NULL_POINTER;
    187a:	82 e0       	ldi	r24, 0x02	; 2
    187c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    187e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1880:	0f 90       	pop	r0
    1882:	0f 90       	pop	r0
    1884:	0f 90       	pop	r0
    1886:	cf 91       	pop	r28
    1888:	df 91       	pop	r29
    188a:	08 95       	ret

0000188c <TIMER1_enuCallBack>:


ES_t TIMER1_enuCallBack(void (*Copy_PfunCallBack)(void*) , void * Copy_PvidParameter,u8 Copy_CallBackSource)
{
    188c:	df 93       	push	r29
    188e:	cf 93       	push	r28
    1890:	cd b7       	in	r28, 0x3d	; 61
    1892:	de b7       	in	r29, 0x3e	; 62
    1894:	28 97       	sbiw	r28, 0x08	; 8
    1896:	0f b6       	in	r0, 0x3f	; 63
    1898:	f8 94       	cli
    189a:	de bf       	out	0x3e, r29	; 62
    189c:	0f be       	out	0x3f, r0	; 63
    189e:	cd bf       	out	0x3d, r28	; 61
    18a0:	9b 83       	std	Y+3, r25	; 0x03
    18a2:	8a 83       	std	Y+2, r24	; 0x02
    18a4:	7d 83       	std	Y+5, r23	; 0x05
    18a6:	6c 83       	std	Y+4, r22	; 0x04
    18a8:	4e 83       	std	Y+6, r20	; 0x06
	ES_t Local_enuErrorState=ES_NOK;
    18aa:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_PfunCallBack!=NULL)
    18ac:	8a 81       	ldd	r24, Y+2	; 0x02
    18ae:	9b 81       	ldd	r25, Y+3	; 0x03
    18b0:	00 97       	sbiw	r24, 0x00	; 0
    18b2:	09 f4       	brne	.+2      	; 0x18b6 <TIMER1_enuCallBack+0x2a>
    18b4:	44 c0       	rjmp	.+136    	; 0x193e <TIMER1_enuCallBack+0xb2>
	{
		switch(Copy_CallBackSource)
    18b6:	8e 81       	ldd	r24, Y+6	; 0x06
    18b8:	28 2f       	mov	r18, r24
    18ba:	30 e0       	ldi	r19, 0x00	; 0
    18bc:	38 87       	std	Y+8, r19	; 0x08
    18be:	2f 83       	std	Y+7, r18	; 0x07
    18c0:	8f 81       	ldd	r24, Y+7	; 0x07
    18c2:	98 85       	ldd	r25, Y+8	; 0x08
    18c4:	81 30       	cpi	r24, 0x01	; 1
    18c6:	91 05       	cpc	r25, r1
    18c8:	41 f1       	breq	.+80     	; 0x191a <TIMER1_enuCallBack+0x8e>
    18ca:	2f 81       	ldd	r18, Y+7	; 0x07
    18cc:	38 85       	ldd	r19, Y+8	; 0x08
    18ce:	22 30       	cpi	r18, 0x02	; 2
    18d0:	31 05       	cpc	r19, r1
    18d2:	29 f0       	breq	.+10     	; 0x18de <TIMER1_enuCallBack+0x52>
    18d4:	8f 81       	ldd	r24, Y+7	; 0x07
    18d6:	98 85       	ldd	r25, Y+8	; 0x08
    18d8:	00 97       	sbiw	r24, 0x00	; 0
    18da:	81 f0       	breq	.+32     	; 0x18fc <TIMER1_enuCallBack+0x70>
    18dc:	2d c0       	rjmp	.+90     	; 0x1938 <TIMER1_enuCallBack+0xac>
		{
		case TIMER1_OVF_CALLBACK:
			TIMER1_APfunCallBack[TIMER1_OVF_CALLBACK]=Copy_PfunCallBack;
    18de:	8a 81       	ldd	r24, Y+2	; 0x02
    18e0:	9b 81       	ldd	r25, Y+3	; 0x03
    18e2:	90 93 bb 02 	sts	0x02BB, r25
    18e6:	80 93 ba 02 	sts	0x02BA, r24
			TIMER1_APvidParameter[TIMER1_OVF_CALLBACK]=Copy_PvidParameter;
    18ea:	8c 81       	ldd	r24, Y+4	; 0x04
    18ec:	9d 81       	ldd	r25, Y+5	; 0x05
    18ee:	90 93 c1 02 	sts	0x02C1, r25
    18f2:	80 93 c0 02 	sts	0x02C0, r24
			Local_enuErrorState=ES_OK;
    18f6:	81 e0       	ldi	r24, 0x01	; 1
    18f8:	89 83       	std	Y+1, r24	; 0x01
    18fa:	23 c0       	rjmp	.+70     	; 0x1942 <TIMER1_enuCallBack+0xb6>
			break;
		case TIMER1_COMA_CALLBACK:
			TIMER1_APfunCallBack[TIMER1_COMA_CALLBACK]=Copy_PfunCallBack;
    18fc:	8a 81       	ldd	r24, Y+2	; 0x02
    18fe:	9b 81       	ldd	r25, Y+3	; 0x03
    1900:	90 93 b7 02 	sts	0x02B7, r25
    1904:	80 93 b6 02 	sts	0x02B6, r24
			TIMER1_APvidParameter[TIMER1_COMA_CALLBACK]=Copy_PvidParameter;
    1908:	8c 81       	ldd	r24, Y+4	; 0x04
    190a:	9d 81       	ldd	r25, Y+5	; 0x05
    190c:	90 93 bd 02 	sts	0x02BD, r25
    1910:	80 93 bc 02 	sts	0x02BC, r24
			Local_enuErrorState=ES_OK;
    1914:	81 e0       	ldi	r24, 0x01	; 1
    1916:	89 83       	std	Y+1, r24	; 0x01
    1918:	14 c0       	rjmp	.+40     	; 0x1942 <TIMER1_enuCallBack+0xb6>
			break;
		case TIMER1_COMB_CALLBACK:
			TIMER1_APfunCallBack[TIMER1_COMB_CALLBACK]=Copy_PfunCallBack;
    191a:	8a 81       	ldd	r24, Y+2	; 0x02
    191c:	9b 81       	ldd	r25, Y+3	; 0x03
    191e:	90 93 b9 02 	sts	0x02B9, r25
    1922:	80 93 b8 02 	sts	0x02B8, r24
			TIMER1_APvidParameter[TIMER1_COMB_CALLBACK]=Copy_PvidParameter;
    1926:	8c 81       	ldd	r24, Y+4	; 0x04
    1928:	9d 81       	ldd	r25, Y+5	; 0x05
    192a:	90 93 bf 02 	sts	0x02BF, r25
    192e:	80 93 be 02 	sts	0x02BE, r24
			Local_enuErrorState=ES_OK;
    1932:	81 e0       	ldi	r24, 0x01	; 1
    1934:	89 83       	std	Y+1, r24	; 0x01
    1936:	05 c0       	rjmp	.+10     	; 0x1942 <TIMER1_enuCallBack+0xb6>
			break;
		default:
			Local_enuErrorState=ES_OUT_OF_RANGE;
    1938:	83 e0       	ldi	r24, 0x03	; 3
    193a:	89 83       	std	Y+1, r24	; 0x01
    193c:	02 c0       	rjmp	.+4      	; 0x1942 <TIMER1_enuCallBack+0xb6>
			break;
		}
	}
	else
	{
		Local_enuErrorState =ES_NULL_POINTER;
    193e:	82 e0       	ldi	r24, 0x02	; 2
    1940:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1942:	89 81       	ldd	r24, Y+1	; 0x01
}
    1944:	28 96       	adiw	r28, 0x08	; 8
    1946:	0f b6       	in	r0, 0x3f	; 63
    1948:	f8 94       	cli
    194a:	de bf       	out	0x3e, r29	; 62
    194c:	0f be       	out	0x3f, r0	; 63
    194e:	cd bf       	out	0x3d, r28	; 61
    1950:	cf 91       	pop	r28
    1952:	df 91       	pop	r29
    1954:	08 95       	ret

00001956 <__vector_7>:




ISR(VECT_TIMER1_COMA)
{
    1956:	1f 92       	push	r1
    1958:	0f 92       	push	r0
    195a:	0f b6       	in	r0, 0x3f	; 63
    195c:	0f 92       	push	r0
    195e:	11 24       	eor	r1, r1
    1960:	2f 93       	push	r18
    1962:	3f 93       	push	r19
    1964:	4f 93       	push	r20
    1966:	5f 93       	push	r21
    1968:	6f 93       	push	r22
    196a:	7f 93       	push	r23
    196c:	8f 93       	push	r24
    196e:	9f 93       	push	r25
    1970:	af 93       	push	r26
    1972:	bf 93       	push	r27
    1974:	ef 93       	push	r30
    1976:	ff 93       	push	r31
    1978:	df 93       	push	r29
    197a:	cf 93       	push	r28
    197c:	cd b7       	in	r28, 0x3d	; 61
    197e:	de b7       	in	r29, 0x3e	; 62
	if(TIMER1_APfunCallBack[TIMER1_COMA_CALLBACK]!=NULL)
    1980:	80 91 b6 02 	lds	r24, 0x02B6
    1984:	90 91 b7 02 	lds	r25, 0x02B7
    1988:	00 97       	sbiw	r24, 0x00	; 0
    198a:	49 f0       	breq	.+18     	; 0x199e <__vector_7+0x48>
	{
		TIMER1_APfunCallBack[TIMER1_COMA_CALLBACK](TIMER1_APvidParameter[TIMER1_COMA_CALLBACK]);
    198c:	e0 91 b6 02 	lds	r30, 0x02B6
    1990:	f0 91 b7 02 	lds	r31, 0x02B7
    1994:	80 91 bc 02 	lds	r24, 0x02BC
    1998:	90 91 bd 02 	lds	r25, 0x02BD
    199c:	09 95       	icall
	}
}
    199e:	cf 91       	pop	r28
    19a0:	df 91       	pop	r29
    19a2:	ff 91       	pop	r31
    19a4:	ef 91       	pop	r30
    19a6:	bf 91       	pop	r27
    19a8:	af 91       	pop	r26
    19aa:	9f 91       	pop	r25
    19ac:	8f 91       	pop	r24
    19ae:	7f 91       	pop	r23
    19b0:	6f 91       	pop	r22
    19b2:	5f 91       	pop	r21
    19b4:	4f 91       	pop	r20
    19b6:	3f 91       	pop	r19
    19b8:	2f 91       	pop	r18
    19ba:	0f 90       	pop	r0
    19bc:	0f be       	out	0x3f, r0	; 63
    19be:	0f 90       	pop	r0
    19c0:	1f 90       	pop	r1
    19c2:	18 95       	reti

000019c4 <__vector_8>:

ISR(VECT_TIMER1_COMB)
{
    19c4:	1f 92       	push	r1
    19c6:	0f 92       	push	r0
    19c8:	0f b6       	in	r0, 0x3f	; 63
    19ca:	0f 92       	push	r0
    19cc:	11 24       	eor	r1, r1
    19ce:	2f 93       	push	r18
    19d0:	3f 93       	push	r19
    19d2:	4f 93       	push	r20
    19d4:	5f 93       	push	r21
    19d6:	6f 93       	push	r22
    19d8:	7f 93       	push	r23
    19da:	8f 93       	push	r24
    19dc:	9f 93       	push	r25
    19de:	af 93       	push	r26
    19e0:	bf 93       	push	r27
    19e2:	ef 93       	push	r30
    19e4:	ff 93       	push	r31
    19e6:	df 93       	push	r29
    19e8:	cf 93       	push	r28
    19ea:	cd b7       	in	r28, 0x3d	; 61
    19ec:	de b7       	in	r29, 0x3e	; 62
	if(TIMER1_APfunCallBack[TIMER1_COMB_CALLBACK]!=NULL)
    19ee:	80 91 b8 02 	lds	r24, 0x02B8
    19f2:	90 91 b9 02 	lds	r25, 0x02B9
    19f6:	00 97       	sbiw	r24, 0x00	; 0
    19f8:	49 f0       	breq	.+18     	; 0x1a0c <__vector_8+0x48>
	{
		TIMER1_APfunCallBack[TIMER1_COMB_CALLBACK](TIMER1_APvidParameter[TIMER1_COMB_CALLBACK]);
    19fa:	e0 91 b8 02 	lds	r30, 0x02B8
    19fe:	f0 91 b9 02 	lds	r31, 0x02B9
    1a02:	80 91 be 02 	lds	r24, 0x02BE
    1a06:	90 91 bf 02 	lds	r25, 0x02BF
    1a0a:	09 95       	icall
	}
}
    1a0c:	cf 91       	pop	r28
    1a0e:	df 91       	pop	r29
    1a10:	ff 91       	pop	r31
    1a12:	ef 91       	pop	r30
    1a14:	bf 91       	pop	r27
    1a16:	af 91       	pop	r26
    1a18:	9f 91       	pop	r25
    1a1a:	8f 91       	pop	r24
    1a1c:	7f 91       	pop	r23
    1a1e:	6f 91       	pop	r22
    1a20:	5f 91       	pop	r21
    1a22:	4f 91       	pop	r20
    1a24:	3f 91       	pop	r19
    1a26:	2f 91       	pop	r18
    1a28:	0f 90       	pop	r0
    1a2a:	0f be       	out	0x3f, r0	; 63
    1a2c:	0f 90       	pop	r0
    1a2e:	1f 90       	pop	r1
    1a30:	18 95       	reti

00001a32 <__vector_9>:

ISR(VECT_TIMER1_OVF)
{
    1a32:	1f 92       	push	r1
    1a34:	0f 92       	push	r0
    1a36:	0f b6       	in	r0, 0x3f	; 63
    1a38:	0f 92       	push	r0
    1a3a:	11 24       	eor	r1, r1
    1a3c:	2f 93       	push	r18
    1a3e:	3f 93       	push	r19
    1a40:	4f 93       	push	r20
    1a42:	5f 93       	push	r21
    1a44:	6f 93       	push	r22
    1a46:	7f 93       	push	r23
    1a48:	8f 93       	push	r24
    1a4a:	9f 93       	push	r25
    1a4c:	af 93       	push	r26
    1a4e:	bf 93       	push	r27
    1a50:	ef 93       	push	r30
    1a52:	ff 93       	push	r31
    1a54:	df 93       	push	r29
    1a56:	cf 93       	push	r28
    1a58:	cd b7       	in	r28, 0x3d	; 61
    1a5a:	de b7       	in	r29, 0x3e	; 62
	if(TIMER1_APfunCallBack[TIMER1_OVF_CALLBACK]!=NULL)
    1a5c:	80 91 ba 02 	lds	r24, 0x02BA
    1a60:	90 91 bb 02 	lds	r25, 0x02BB
    1a64:	00 97       	sbiw	r24, 0x00	; 0
    1a66:	49 f0       	breq	.+18     	; 0x1a7a <__vector_9+0x48>
	{
		TIMER1_APfunCallBack[TIMER1_OVF_CALLBACK](TIMER1_APvidParameter[TIMER1_OVF_CALLBACK]);
    1a68:	e0 91 ba 02 	lds	r30, 0x02BA
    1a6c:	f0 91 bb 02 	lds	r31, 0x02BB
    1a70:	80 91 c0 02 	lds	r24, 0x02C0
    1a74:	90 91 c1 02 	lds	r25, 0x02C1
    1a78:	09 95       	icall
	}
}
    1a7a:	cf 91       	pop	r28
    1a7c:	df 91       	pop	r29
    1a7e:	ff 91       	pop	r31
    1a80:	ef 91       	pop	r30
    1a82:	bf 91       	pop	r27
    1a84:	af 91       	pop	r26
    1a86:	9f 91       	pop	r25
    1a88:	8f 91       	pop	r24
    1a8a:	7f 91       	pop	r23
    1a8c:	6f 91       	pop	r22
    1a8e:	5f 91       	pop	r21
    1a90:	4f 91       	pop	r20
    1a92:	3f 91       	pop	r19
    1a94:	2f 91       	pop	r18
    1a96:	0f 90       	pop	r0
    1a98:	0f be       	out	0x3f, r0	; 63
    1a9a:	0f 90       	pop	r0
    1a9c:	1f 90       	pop	r1
    1a9e:	18 95       	reti

00001aa0 <TIMER0_enuInit>:

static u32 Timer0_NumOVF=0;
static u32 Timer0_Preload=0;

ES_t TIMER0_enuInit(void)
{
    1aa0:	df 93       	push	r29
    1aa2:	cf 93       	push	r28
    1aa4:	0f 92       	push	r0
    1aa6:	cd b7       	in	r28, 0x3d	; 61
    1aa8:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
    1aaa:	19 82       	std	Y+1, r1	; 0x01
	TCCR0 &=~(1<<TCCR0_CS02);
	TCCR0 &=~(1<<TCCR0_CS01);
	TCCR0 |= (1<<TCCR0_CS00);
	Local_enuErrorState =ES_OK;
#elif TIMER0_PRESCALER == TIMER0_PRESCALER_8
	TCCR0 &=~(1<<TCCR0_CS02);
    1aac:	a3 e5       	ldi	r26, 0x53	; 83
    1aae:	b0 e0       	ldi	r27, 0x00	; 0
    1ab0:	e3 e5       	ldi	r30, 0x53	; 83
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	80 81       	ld	r24, Z
    1ab6:	8b 7f       	andi	r24, 0xFB	; 251
    1ab8:	8c 93       	st	X, r24
	TCCR0 |= (1<<TCCR0_CS01);
    1aba:	a3 e5       	ldi	r26, 0x53	; 83
    1abc:	b0 e0       	ldi	r27, 0x00	; 0
    1abe:	e3 e5       	ldi	r30, 0x53	; 83
    1ac0:	f0 e0       	ldi	r31, 0x00	; 0
    1ac2:	80 81       	ld	r24, Z
    1ac4:	82 60       	ori	r24, 0x02	; 2
    1ac6:	8c 93       	st	X, r24
	TCCR0 &=~(1<<TCCR0_CS00);
    1ac8:	a3 e5       	ldi	r26, 0x53	; 83
    1aca:	b0 e0       	ldi	r27, 0x00	; 0
    1acc:	e3 e5       	ldi	r30, 0x53	; 83
    1ace:	f0 e0       	ldi	r31, 0x00	; 0
    1ad0:	80 81       	ld	r24, Z
    1ad2:	8e 7f       	andi	r24, 0xFE	; 254
    1ad4:	8c 93       	st	X, r24
	Local_enuErrorState =ES_OK;
    1ad6:	81 e0       	ldi	r24, 0x01	; 1
    1ad8:	89 83       	std	Y+1, r24	; 0x01
		#else
		#error"Attention!!, OC0_PIN state is wrong or the mode is not Phase Correct PWM...."
		#endif

#elif TIMER0_MODE == TIMER0_FAST_PWM
		TCCR0 |=(1<<TCCR0_WGM01);
    1ada:	a3 e5       	ldi	r26, 0x53	; 83
    1adc:	b0 e0       	ldi	r27, 0x00	; 0
    1ade:	e3 e5       	ldi	r30, 0x53	; 83
    1ae0:	f0 e0       	ldi	r31, 0x00	; 0
    1ae2:	80 81       	ld	r24, Z
    1ae4:	88 60       	ori	r24, 0x08	; 8
    1ae6:	8c 93       	st	X, r24
		TCCR0 |=(1<<TCCR0_WGM00);
    1ae8:	a3 e5       	ldi	r26, 0x53	; 83
    1aea:	b0 e0       	ldi	r27, 0x00	; 0
    1aec:	e3 e5       	ldi	r30, 0x53	; 83
    1aee:	f0 e0       	ldi	r31, 0x00	; 0
    1af0:	80 81       	ld	r24, Z
    1af2:	80 64       	ori	r24, 0x40	; 64
    1af4:	8c 93       	st	X, r24
		#if TIMER0_OC0_PIN_STATE == TIMER0_FAST_PMW_CLEAR_CTC_SET_TOP
			TCCR0 &=~(1<<TCCR0_COM00);
    1af6:	a3 e5       	ldi	r26, 0x53	; 83
    1af8:	b0 e0       	ldi	r27, 0x00	; 0
    1afa:	e3 e5       	ldi	r30, 0x53	; 83
    1afc:	f0 e0       	ldi	r31, 0x00	; 0
    1afe:	80 81       	ld	r24, Z
    1b00:	8f 7e       	andi	r24, 0xEF	; 239
    1b02:	8c 93       	st	X, r24
			TCCR0 |=(1<<TCCR0_COM01);
    1b04:	a3 e5       	ldi	r26, 0x53	; 83
    1b06:	b0 e0       	ldi	r27, 0x00	; 0
    1b08:	e3 e5       	ldi	r30, 0x53	; 83
    1b0a:	f0 e0       	ldi	r31, 0x00	; 0
    1b0c:	80 81       	ld	r24, Z
    1b0e:	80 62       	ori	r24, 0x20	; 32
    1b10:	8c 93       	st	X, r24
			Local_enuErrorState =ES_OK;
    1b12:	81 e0       	ldi	r24, 0x01	; 1
    1b14:	89 83       	std	Y+1, r24	; 0x01
		#endif
#else
#error "Attention!!, your TIMER0_MODE Selection is Wrong...."
#endif

	return Local_enuErrorState;
    1b16:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b18:	0f 90       	pop	r0
    1b1a:	cf 91       	pop	r28
    1b1c:	df 91       	pop	r29
    1b1e:	08 95       	ret

00001b20 <TIMER0_enuSetCTC>:

ES_t  TIMER0_enuSetCTC(u8 Copy_u8OCR0Value)
{
    1b20:	df 93       	push	r29
    1b22:	cf 93       	push	r28
    1b24:	00 d0       	rcall	.+0      	; 0x1b26 <TIMER0_enuSetCTC+0x6>
    1b26:	cd b7       	in	r28, 0x3d	; 61
    1b28:	de b7       	in	r29, 0x3e	; 62
    1b2a:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    1b2c:	19 82       	std	Y+1, r1	; 0x01

	OCR0 =Copy_u8OCR0Value;
    1b2e:	ec e5       	ldi	r30, 0x5C	; 92
    1b30:	f0 e0       	ldi	r31, 0x00	; 0
    1b32:	8a 81       	ldd	r24, Y+2	; 0x02
    1b34:	80 83       	st	Z, r24
	Local_enuErrorState=ES_OK;
    1b36:	81 e0       	ldi	r24, 0x01	; 1
    1b38:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    1b3a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b3c:	0f 90       	pop	r0
    1b3e:	0f 90       	pop	r0
    1b40:	cf 91       	pop	r28
    1b42:	df 91       	pop	r29
    1b44:	08 95       	ret

00001b46 <TIMER0_enuSetPreload>:

ES_t  TIMER0_enuSetPreload(u8 Copy_u8Preload)
{
    1b46:	df 93       	push	r29
    1b48:	cf 93       	push	r28
    1b4a:	00 d0       	rcall	.+0      	; 0x1b4c <TIMER0_enuSetPreload+0x6>
    1b4c:	cd b7       	in	r28, 0x3d	; 61
    1b4e:	de b7       	in	r29, 0x3e	; 62
    1b50:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    1b52:	19 82       	std	Y+1, r1	; 0x01

	TCNT0 =Copy_u8Preload;
    1b54:	e2 e5       	ldi	r30, 0x52	; 82
    1b56:	f0 e0       	ldi	r31, 0x00	; 0
    1b58:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5a:	80 83       	st	Z, r24
	Local_enuErrorState=ES_OK;
    1b5c:	81 e0       	ldi	r24, 0x01	; 1
    1b5e:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    1b60:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b62:	0f 90       	pop	r0
    1b64:	0f 90       	pop	r0
    1b66:	cf 91       	pop	r28
    1b68:	df 91       	pop	r29
    1b6a:	08 95       	ret

00001b6c <TIMER0_enuDelayMilliSecond>:


ES_t TIMER0_enuDelayMilliSecond(void (*Copy_PfunCallBack)(void*) , void * Copy_PvidParameter , u32 Copy_u32StartDelay , u32 Copy_u32StopTime)
{
    1b6c:	ef 92       	push	r14
    1b6e:	ff 92       	push	r15
    1b70:	0f 93       	push	r16
    1b72:	1f 93       	push	r17
    1b74:	df 93       	push	r29
    1b76:	cf 93       	push	r28
    1b78:	cd b7       	in	r28, 0x3d	; 61
    1b7a:	de b7       	in	r29, 0x3e	; 62
    1b7c:	2d 97       	sbiw	r28, 0x0d	; 13
    1b7e:	0f b6       	in	r0, 0x3f	; 63
    1b80:	f8 94       	cli
    1b82:	de bf       	out	0x3e, r29	; 62
    1b84:	0f be       	out	0x3f, r0	; 63
    1b86:	cd bf       	out	0x3d, r28	; 61
    1b88:	9b 83       	std	Y+3, r25	; 0x03
    1b8a:	8a 83       	std	Y+2, r24	; 0x02
    1b8c:	7d 83       	std	Y+5, r23	; 0x05
    1b8e:	6c 83       	std	Y+4, r22	; 0x04
    1b90:	2e 83       	std	Y+6, r18	; 0x06
    1b92:	3f 83       	std	Y+7, r19	; 0x07
    1b94:	48 87       	std	Y+8, r20	; 0x08
    1b96:	59 87       	std	Y+9, r21	; 0x09
    1b98:	ea 86       	std	Y+10, r14	; 0x0a
    1b9a:	fb 86       	std	Y+11, r15	; 0x0b
    1b9c:	0c 87       	std	Y+12, r16	; 0x0c
    1b9e:	1d 87       	std	Y+13, r17	; 0x0d
	ES_t Local_enuErrorState=ES_NOK;
    1ba0:	19 82       	std	Y+1, r1	; 0x01
#else
#warning "Attention!!, Delay function has no effect at this mode or prescaler...."
#warning "To take high accuracy on Delay function, Choose OVF mode and one or eight prescaler OR CTC mode , 64 prescaler and OCR0 = 124"
#endif

	return Local_enuErrorState;
    1ba2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ba4:	2d 96       	adiw	r28, 0x0d	; 13
    1ba6:	0f b6       	in	r0, 0x3f	; 63
    1ba8:	f8 94       	cli
    1baa:	de bf       	out	0x3e, r29	; 62
    1bac:	0f be       	out	0x3f, r0	; 63
    1bae:	cd bf       	out	0x3d, r28	; 61
    1bb0:	cf 91       	pop	r28
    1bb2:	df 91       	pop	r29
    1bb4:	1f 91       	pop	r17
    1bb6:	0f 91       	pop	r16
    1bb8:	ff 90       	pop	r15
    1bba:	ef 90       	pop	r14
    1bbc:	08 95       	ret

00001bbe <TIMER0_enuGeneratePWM>:

ES_t TIMER0_enuGeneratePWM(u8 Copy_u8DutyCycle)
{
    1bbe:	df 93       	push	r29
    1bc0:	cf 93       	push	r28
    1bc2:	00 d0       	rcall	.+0      	; 0x1bc4 <TIMER0_enuGeneratePWM+0x6>
    1bc4:	0f 92       	push	r0
    1bc6:	cd b7       	in	r28, 0x3d	; 61
    1bc8:	de b7       	in	r29, 0x3e	; 62
    1bca:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState=ES_NOK;
    1bcc:	1a 82       	std	Y+2, r1	; 0x02
	#else
	#error"Attention!!, OC0_PIN state is wrong or the mode is not Phase Correct PWM...."
	#endif
#elif TIMER0_MODE == TIMER0_FAST_PWM
	#if   TIMER0_OC0_PIN_STATE == TIMER0_FAST_PMW_CLEAR_CTC_SET_TOP
		u8 Local_u8OCR_Value = ((f32)Copy_u8DutyCycle/TIMER0_PERCENTAGE_RATIO) * (f32)TIMER0_OVF_COUNTS;
    1bce:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd0:	88 2f       	mov	r24, r24
    1bd2:	90 e0       	ldi	r25, 0x00	; 0
    1bd4:	a0 e0       	ldi	r26, 0x00	; 0
    1bd6:	b0 e0       	ldi	r27, 0x00	; 0
    1bd8:	bc 01       	movw	r22, r24
    1bda:	cd 01       	movw	r24, r26
    1bdc:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    1be0:	dc 01       	movw	r26, r24
    1be2:	cb 01       	movw	r24, r22
    1be4:	bc 01       	movw	r22, r24
    1be6:	cd 01       	movw	r24, r26
    1be8:	20 e0       	ldi	r18, 0x00	; 0
    1bea:	30 e0       	ldi	r19, 0x00	; 0
    1bec:	48 ec       	ldi	r20, 0xC8	; 200
    1bee:	52 e4       	ldi	r21, 0x42	; 66
    1bf0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1bf4:	dc 01       	movw	r26, r24
    1bf6:	cb 01       	movw	r24, r22
    1bf8:	bc 01       	movw	r22, r24
    1bfa:	cd 01       	movw	r24, r26
    1bfc:	20 e0       	ldi	r18, 0x00	; 0
    1bfe:	30 e0       	ldi	r19, 0x00	; 0
    1c00:	40 e8       	ldi	r20, 0x80	; 128
    1c02:	53 e4       	ldi	r21, 0x43	; 67
    1c04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c08:	dc 01       	movw	r26, r24
    1c0a:	cb 01       	movw	r24, r22
    1c0c:	bc 01       	movw	r22, r24
    1c0e:	cd 01       	movw	r24, r26
    1c10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c14:	dc 01       	movw	r26, r24
    1c16:	cb 01       	movw	r24, r22
    1c18:	89 83       	std	Y+1, r24	; 0x01
		TIMER0_enuSetCTC(--Local_u8OCR_Value);
    1c1a:	89 81       	ldd	r24, Y+1	; 0x01
    1c1c:	81 50       	subi	r24, 0x01	; 1
    1c1e:	89 83       	std	Y+1, r24	; 0x01
    1c20:	89 81       	ldd	r24, Y+1	; 0x01
    1c22:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <TIMER0_enuSetCTC>
		Local_enuErrorState = ES_OK;
    1c26:	81 e0       	ldi	r24, 0x01	; 1
    1c28:	8a 83       	std	Y+2, r24	; 0x02
	#endif
#else
#warning "Attention!!, Generation of PWM doesn't work at this mode...."
#endif

	return Local_enuErrorState;
    1c2a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1c2c:	0f 90       	pop	r0
    1c2e:	0f 90       	pop	r0
    1c30:	0f 90       	pop	r0
    1c32:	cf 91       	pop	r28
    1c34:	df 91       	pop	r29
    1c36:	08 95       	ret

00001c38 <TIMER0_enuCallBackOVF>:

ES_t TIMER0_enuCallBackOVF(void (*Copy_PfunCallBack)(void*) , void * Copy_PvidParameter)
{
    1c38:	df 93       	push	r29
    1c3a:	cf 93       	push	r28
    1c3c:	00 d0       	rcall	.+0      	; 0x1c3e <TIMER0_enuCallBackOVF+0x6>
    1c3e:	00 d0       	rcall	.+0      	; 0x1c40 <TIMER0_enuCallBackOVF+0x8>
    1c40:	0f 92       	push	r0
    1c42:	cd b7       	in	r28, 0x3d	; 61
    1c44:	de b7       	in	r29, 0x3e	; 62
    1c46:	9b 83       	std	Y+3, r25	; 0x03
    1c48:	8a 83       	std	Y+2, r24	; 0x02
    1c4a:	7d 83       	std	Y+5, r23	; 0x05
    1c4c:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState=ES_NOK;
    1c4e:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_PfunCallBack!=NULL)
    1c50:	8a 81       	ldd	r24, Y+2	; 0x02
    1c52:	9b 81       	ldd	r25, Y+3	; 0x03
    1c54:	00 97       	sbiw	r24, 0x00	; 0
    1c56:	79 f0       	breq	.+30     	; 0x1c76 <TIMER0_enuCallBackOVF+0x3e>
	{
		TIMER0_APfunCallBack [TIMER0_OVF_CALLBACK] = Copy_PfunCallBack;
    1c58:	8a 81       	ldd	r24, Y+2	; 0x02
    1c5a:	9b 81       	ldd	r25, Y+3	; 0x03
    1c5c:	90 93 d3 02 	sts	0x02D3, r25
    1c60:	80 93 d2 02 	sts	0x02D2, r24
		TIMER0_APvidParameter[TIMER0_OVF_CALLBACK] = Copy_PvidParameter;
    1c64:	8c 81       	ldd	r24, Y+4	; 0x04
    1c66:	9d 81       	ldd	r25, Y+5	; 0x05
    1c68:	90 93 d9 02 	sts	0x02D9, r25
    1c6c:	80 93 d8 02 	sts	0x02D8, r24
		Local_enuErrorState =ES_OK;
    1c70:	81 e0       	ldi	r24, 0x01	; 1
    1c72:	89 83       	std	Y+1, r24	; 0x01
    1c74:	02 c0       	rjmp	.+4      	; 0x1c7a <TIMER0_enuCallBackOVF+0x42>
	}
	else
	{
		Local_enuErrorState =ES_NULL_POINTER;
    1c76:	82 e0       	ldi	r24, 0x02	; 2
    1c78:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1c7a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c7c:	0f 90       	pop	r0
    1c7e:	0f 90       	pop	r0
    1c80:	0f 90       	pop	r0
    1c82:	0f 90       	pop	r0
    1c84:	0f 90       	pop	r0
    1c86:	cf 91       	pop	r28
    1c88:	df 91       	pop	r29
    1c8a:	08 95       	ret

00001c8c <TIMER0_enuCallBackCTC>:

ES_t TIMER0_enuCallBackCTC(void (*Copy_PfunCallBack)(void*) , void * Copy_PvidParameter)
{
    1c8c:	df 93       	push	r29
    1c8e:	cf 93       	push	r28
    1c90:	00 d0       	rcall	.+0      	; 0x1c92 <TIMER0_enuCallBackCTC+0x6>
    1c92:	00 d0       	rcall	.+0      	; 0x1c94 <TIMER0_enuCallBackCTC+0x8>
    1c94:	0f 92       	push	r0
    1c96:	cd b7       	in	r28, 0x3d	; 61
    1c98:	de b7       	in	r29, 0x3e	; 62
    1c9a:	9b 83       	std	Y+3, r25	; 0x03
    1c9c:	8a 83       	std	Y+2, r24	; 0x02
    1c9e:	7d 83       	std	Y+5, r23	; 0x05
    1ca0:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState=ES_NOK;
    1ca2:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_PfunCallBack!=NULL)
    1ca4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ca8:	00 97       	sbiw	r24, 0x00	; 0
    1caa:	79 f0       	breq	.+30     	; 0x1cca <TIMER0_enuCallBackCTC+0x3e>
	{

		TIMER0_APfunCallBack [TIMER0_CTC_CALLBACK] = Copy_PfunCallBack;
    1cac:	8a 81       	ldd	r24, Y+2	; 0x02
    1cae:	9b 81       	ldd	r25, Y+3	; 0x03
    1cb0:	90 93 d5 02 	sts	0x02D5, r25
    1cb4:	80 93 d4 02 	sts	0x02D4, r24
		TIMER0_APvidParameter[TIMER0_CTC_CALLBACK] = Copy_PvidParameter;
    1cb8:	8c 81       	ldd	r24, Y+4	; 0x04
    1cba:	9d 81       	ldd	r25, Y+5	; 0x05
    1cbc:	90 93 db 02 	sts	0x02DB, r25
    1cc0:	80 93 da 02 	sts	0x02DA, r24
		Local_enuErrorState=ES_OK;
    1cc4:	81 e0       	ldi	r24, 0x01	; 1
    1cc6:	89 83       	std	Y+1, r24	; 0x01
    1cc8:	02 c0       	rjmp	.+4      	; 0x1cce <TIMER0_enuCallBackCTC+0x42>
	}
	else
	{
		Local_enuErrorState =ES_NULL_POINTER;
    1cca:	82 e0       	ldi	r24, 0x02	; 2
    1ccc:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1cce:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cd0:	0f 90       	pop	r0
    1cd2:	0f 90       	pop	r0
    1cd4:	0f 90       	pop	r0
    1cd6:	0f 90       	pop	r0
    1cd8:	0f 90       	pop	r0
    1cda:	cf 91       	pop	r28
    1cdc:	df 91       	pop	r29
    1cde:	08 95       	ret

00001ce0 <TIMER0_enuEnableOVFINTERRUPT>:




ES_t TIMER0_enuEnableOVFINTERRUPT(void)
{
    1ce0:	df 93       	push	r29
    1ce2:	cf 93       	push	r28
    1ce4:	0f 92       	push	r0
    1ce6:	cd b7       	in	r28, 0x3d	; 61
    1ce8:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
    1cea:	19 82       	std	Y+1, r1	; 0x01

	TIMSK |=(1<<TIMSK_TOIE0);
    1cec:	a9 e5       	ldi	r26, 0x59	; 89
    1cee:	b0 e0       	ldi	r27, 0x00	; 0
    1cf0:	e9 e5       	ldi	r30, 0x59	; 89
    1cf2:	f0 e0       	ldi	r31, 0x00	; 0
    1cf4:	80 81       	ld	r24, Z
    1cf6:	81 60       	ori	r24, 0x01	; 1
    1cf8:	8c 93       	st	X, r24
	Local_enuErrorState=ES_OK;
    1cfa:	81 e0       	ldi	r24, 0x01	; 1
    1cfc:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    1cfe:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d00:	0f 90       	pop	r0
    1d02:	cf 91       	pop	r28
    1d04:	df 91       	pop	r29
    1d06:	08 95       	ret

00001d08 <TIMER0_enuEnableCTCINTERRUPT>:

ES_t TIMER0_enuEnableCTCINTERRUPT(void)
{
    1d08:	df 93       	push	r29
    1d0a:	cf 93       	push	r28
    1d0c:	0f 92       	push	r0
    1d0e:	cd b7       	in	r28, 0x3d	; 61
    1d10:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
    1d12:	19 82       	std	Y+1, r1	; 0x01

	TIMSK |=(1<<TIMSK_OCIE0);
    1d14:	a9 e5       	ldi	r26, 0x59	; 89
    1d16:	b0 e0       	ldi	r27, 0x00	; 0
    1d18:	e9 e5       	ldi	r30, 0x59	; 89
    1d1a:	f0 e0       	ldi	r31, 0x00	; 0
    1d1c:	80 81       	ld	r24, Z
    1d1e:	82 60       	ori	r24, 0x02	; 2
    1d20:	8c 93       	st	X, r24
	Local_enuErrorState=ES_OK;
    1d22:	81 e0       	ldi	r24, 0x01	; 1
    1d24:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    1d26:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d28:	0f 90       	pop	r0
    1d2a:	cf 91       	pop	r28
    1d2c:	df 91       	pop	r29
    1d2e:	08 95       	ret

00001d30 <TIMER0_enuSetAsychDelay>:


ES_t TIMER0_enuSetAsychDelay(u32 Copy_u8Time ,void(*Copy_pfunApp)(void*),void* Parameter)
{
    1d30:	df 93       	push	r29
    1d32:	cf 93       	push	r28
    1d34:	cd b7       	in	r28, 0x3d	; 61
    1d36:	de b7       	in	r29, 0x3e	; 62
    1d38:	66 97       	sbiw	r28, 0x16	; 22
    1d3a:	0f b6       	in	r0, 0x3f	; 63
    1d3c:	f8 94       	cli
    1d3e:	de bf       	out	0x3e, r29	; 62
    1d40:	0f be       	out	0x3f, r0	; 63
    1d42:	cd bf       	out	0x3d, r28	; 61
    1d44:	6f 87       	std	Y+15, r22	; 0x0f
    1d46:	78 8b       	std	Y+16, r23	; 0x10
    1d48:	89 8b       	std	Y+17, r24	; 0x11
    1d4a:	9a 8b       	std	Y+18, r25	; 0x12
    1d4c:	5c 8b       	std	Y+20, r21	; 0x14
    1d4e:	4b 8b       	std	Y+19, r20	; 0x13
    1d50:	3e 8b       	std	Y+22, r19	; 0x16
    1d52:	2d 8b       	std	Y+21, r18	; 0x15
	ES_t Local_enuErrorState=ES_NOK;
    1d54:	1e 86       	std	Y+14, r1	; 0x0e

	f32 Local_f32OVFTime=256 *((f32)TIMER0_PRESCALER/TIMER0_F_CPU);
    1d56:	8f e6       	ldi	r24, 0x6F	; 111
    1d58:	92 e1       	ldi	r25, 0x12	; 18
    1d5a:	a3 e8       	ldi	r26, 0x83	; 131
    1d5c:	be e3       	ldi	r27, 0x3E	; 62
    1d5e:	8a 87       	std	Y+10, r24	; 0x0a
    1d60:	9b 87       	std	Y+11, r25	; 0x0b
    1d62:	ac 87       	std	Y+12, r26	; 0x0c
    1d64:	bd 87       	std	Y+13, r27	; 0x0d

	f32 Local_f32NumOVF = (Copy_u8Time)/(Local_f32OVFTime);
    1d66:	6f 85       	ldd	r22, Y+15	; 0x0f
    1d68:	78 89       	ldd	r23, Y+16	; 0x10
    1d6a:	89 89       	ldd	r24, Y+17	; 0x11
    1d6c:	9a 89       	ldd	r25, Y+18	; 0x12
    1d6e:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    1d72:	dc 01       	movw	r26, r24
    1d74:	cb 01       	movw	r24, r22
    1d76:	bc 01       	movw	r22, r24
    1d78:	cd 01       	movw	r24, r26
    1d7a:	2a 85       	ldd	r18, Y+10	; 0x0a
    1d7c:	3b 85       	ldd	r19, Y+11	; 0x0b
    1d7e:	4c 85       	ldd	r20, Y+12	; 0x0c
    1d80:	5d 85       	ldd	r21, Y+13	; 0x0d
    1d82:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1d86:	dc 01       	movw	r26, r24
    1d88:	cb 01       	movw	r24, r22
    1d8a:	8e 83       	std	Y+6, r24	; 0x06
    1d8c:	9f 83       	std	Y+7, r25	; 0x07
    1d8e:	a8 87       	std	Y+8, r26	; 0x08
    1d90:	b9 87       	std	Y+9, r27	; 0x09

	if((Local_f32NumOVF-(u32)Local_f32NumOVF) != 0.0)
    1d92:	6e 81       	ldd	r22, Y+6	; 0x06
    1d94:	7f 81       	ldd	r23, Y+7	; 0x07
    1d96:	88 85       	ldd	r24, Y+8	; 0x08
    1d98:	99 85       	ldd	r25, Y+9	; 0x09
    1d9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d9e:	dc 01       	movw	r26, r24
    1da0:	cb 01       	movw	r24, r22
    1da2:	bc 01       	movw	r22, r24
    1da4:	cd 01       	movw	r24, r26
    1da6:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    1daa:	9b 01       	movw	r18, r22
    1dac:	ac 01       	movw	r20, r24
    1dae:	6e 81       	ldd	r22, Y+6	; 0x06
    1db0:	7f 81       	ldd	r23, Y+7	; 0x07
    1db2:	88 85       	ldd	r24, Y+8	; 0x08
    1db4:	99 85       	ldd	r25, Y+9	; 0x09
    1db6:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1dba:	dc 01       	movw	r26, r24
    1dbc:	cb 01       	movw	r24, r22
    1dbe:	bc 01       	movw	r22, r24
    1dc0:	cd 01       	movw	r24, r26
    1dc2:	20 e0       	ldi	r18, 0x00	; 0
    1dc4:	30 e0       	ldi	r19, 0x00	; 0
    1dc6:	40 e0       	ldi	r20, 0x00	; 0
    1dc8:	50 e0       	ldi	r21, 0x00	; 0
    1dca:	0e 94 c5 03 	call	0x78a	; 0x78a <__nesf2>
    1dce:	88 23       	and	r24, r24
    1dd0:	09 f4       	brne	.+2      	; 0x1dd4 <TIMER0_enuSetAsychDelay+0xa4>
    1dd2:	64 c0       	rjmp	.+200    	; 0x1e9c <TIMER0_enuSetAsychDelay+0x16c>
	{
		u32 Local_u32NumOVF =(u32)Local_f32NumOVF +1;
    1dd4:	6e 81       	ldd	r22, Y+6	; 0x06
    1dd6:	7f 81       	ldd	r23, Y+7	; 0x07
    1dd8:	88 85       	ldd	r24, Y+8	; 0x08
    1dda:	99 85       	ldd	r25, Y+9	; 0x09
    1ddc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1de0:	dc 01       	movw	r26, r24
    1de2:	cb 01       	movw	r24, r22
    1de4:	01 96       	adiw	r24, 0x01	; 1
    1de6:	a1 1d       	adc	r26, r1
    1de8:	b1 1d       	adc	r27, r1
    1dea:	8a 83       	std	Y+2, r24	; 0x02
    1dec:	9b 83       	std	Y+3, r25	; 0x03
    1dee:	ac 83       	std	Y+4, r26	; 0x04
    1df0:	bd 83       	std	Y+5, r27	; 0x05
		Local_f32NumOVF = Local_f32NumOVF-(u32)Local_f32NumOVF;
    1df2:	6e 81       	ldd	r22, Y+6	; 0x06
    1df4:	7f 81       	ldd	r23, Y+7	; 0x07
    1df6:	88 85       	ldd	r24, Y+8	; 0x08
    1df8:	99 85       	ldd	r25, Y+9	; 0x09
    1dfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dfe:	dc 01       	movw	r26, r24
    1e00:	cb 01       	movw	r24, r22
    1e02:	bc 01       	movw	r22, r24
    1e04:	cd 01       	movw	r24, r26
    1e06:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    1e0a:	9b 01       	movw	r18, r22
    1e0c:	ac 01       	movw	r20, r24
    1e0e:	6e 81       	ldd	r22, Y+6	; 0x06
    1e10:	7f 81       	ldd	r23, Y+7	; 0x07
    1e12:	88 85       	ldd	r24, Y+8	; 0x08
    1e14:	99 85       	ldd	r25, Y+9	; 0x09
    1e16:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1e1a:	dc 01       	movw	r26, r24
    1e1c:	cb 01       	movw	r24, r22
    1e1e:	8e 83       	std	Y+6, r24	; 0x06
    1e20:	9f 83       	std	Y+7, r25	; 0x07
    1e22:	a8 87       	std	Y+8, r26	; 0x08
    1e24:	b9 87       	std	Y+9, r27	; 0x09
		u8 Local_u8Preload =256 - (Local_f32NumOVF * 256);
    1e26:	6e 81       	ldd	r22, Y+6	; 0x06
    1e28:	7f 81       	ldd	r23, Y+7	; 0x07
    1e2a:	88 85       	ldd	r24, Y+8	; 0x08
    1e2c:	99 85       	ldd	r25, Y+9	; 0x09
    1e2e:	20 e0       	ldi	r18, 0x00	; 0
    1e30:	30 e0       	ldi	r19, 0x00	; 0
    1e32:	40 e8       	ldi	r20, 0x80	; 128
    1e34:	53 ec       	ldi	r21, 0xC3	; 195
    1e36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e3a:	dc 01       	movw	r26, r24
    1e3c:	cb 01       	movw	r24, r22
    1e3e:	bc 01       	movw	r22, r24
    1e40:	cd 01       	movw	r24, r26
    1e42:	20 e0       	ldi	r18, 0x00	; 0
    1e44:	30 e0       	ldi	r19, 0x00	; 0
    1e46:	40 e8       	ldi	r20, 0x80	; 128
    1e48:	53 e4       	ldi	r21, 0x43	; 67
    1e4a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1e4e:	dc 01       	movw	r26, r24
    1e50:	cb 01       	movw	r24, r22
    1e52:	bc 01       	movw	r22, r24
    1e54:	cd 01       	movw	r24, r26
    1e56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e5a:	dc 01       	movw	r26, r24
    1e5c:	cb 01       	movw	r24, r22
    1e5e:	89 83       	std	Y+1, r24	; 0x01
		Timer0_NumOVF =Local_u32NumOVF;
    1e60:	8a 81       	ldd	r24, Y+2	; 0x02
    1e62:	9b 81       	ldd	r25, Y+3	; 0x03
    1e64:	ac 81       	ldd	r26, Y+4	; 0x04
    1e66:	bd 81       	ldd	r27, Y+5	; 0x05
    1e68:	80 93 dc 02 	sts	0x02DC, r24
    1e6c:	90 93 dd 02 	sts	0x02DD, r25
    1e70:	a0 93 de 02 	sts	0x02DE, r26
    1e74:	b0 93 df 02 	sts	0x02DF, r27
		Timer0_Preload =Local_u8Preload;
    1e78:	89 81       	ldd	r24, Y+1	; 0x01
    1e7a:	88 2f       	mov	r24, r24
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	a0 e0       	ldi	r26, 0x00	; 0
    1e80:	b0 e0       	ldi	r27, 0x00	; 0
    1e82:	80 93 e0 02 	sts	0x02E0, r24
    1e86:	90 93 e1 02 	sts	0x02E1, r25
    1e8a:	a0 93 e2 02 	sts	0x02E2, r26
    1e8e:	b0 93 e3 02 	sts	0x02E3, r27
		TCNT0 =Local_u8Preload;
    1e92:	e2 e5       	ldi	r30, 0x52	; 82
    1e94:	f0 e0       	ldi	r31, 0x00	; 0
    1e96:	89 81       	ldd	r24, Y+1	; 0x01
    1e98:	80 83       	st	Z, r24
    1e9a:	10 c0       	rjmp	.+32     	; 0x1ebc <TIMER0_enuSetAsychDelay+0x18c>
	}
	else
	{
		Timer0_NumOVF =(u32)Local_f32NumOVF;
    1e9c:	6e 81       	ldd	r22, Y+6	; 0x06
    1e9e:	7f 81       	ldd	r23, Y+7	; 0x07
    1ea0:	88 85       	ldd	r24, Y+8	; 0x08
    1ea2:	99 85       	ldd	r25, Y+9	; 0x09
    1ea4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ea8:	dc 01       	movw	r26, r24
    1eaa:	cb 01       	movw	r24, r22
    1eac:	80 93 dc 02 	sts	0x02DC, r24
    1eb0:	90 93 dd 02 	sts	0x02DD, r25
    1eb4:	a0 93 de 02 	sts	0x02DE, r26
    1eb8:	b0 93 df 02 	sts	0x02DF, r27
	}

	if(Copy_pfunApp!=NULL)
    1ebc:	8b 89       	ldd	r24, Y+19	; 0x13
    1ebe:	9c 89       	ldd	r25, Y+20	; 0x14
    1ec0:	00 97       	sbiw	r24, 0x00	; 0
    1ec2:	69 f0       	breq	.+26     	; 0x1ede <TIMER0_enuSetAsychDelay+0x1ae>
	{
		TIMER0_APfunCallBack[TIMER0_OVF_CALLBACK]=Copy_pfunApp;
    1ec4:	8b 89       	ldd	r24, Y+19	; 0x13
    1ec6:	9c 89       	ldd	r25, Y+20	; 0x14
    1ec8:	90 93 d3 02 	sts	0x02D3, r25
    1ecc:	80 93 d2 02 	sts	0x02D2, r24
		TIMER0_APvidParameter[TIMER0_OVF_CALLBACK]=Parameter;
    1ed0:	8d 89       	ldd	r24, Y+21	; 0x15
    1ed2:	9e 89       	ldd	r25, Y+22	; 0x16
    1ed4:	90 93 d9 02 	sts	0x02D9, r25
    1ed8:	80 93 d8 02 	sts	0x02D8, r24
    1edc:	02 c0       	rjmp	.+4      	; 0x1ee2 <TIMER0_enuSetAsychDelay+0x1b2>
	}
	else
	{
		Local_enuErrorState=ES_NULL_POINTER;
    1ede:	82 e0       	ldi	r24, 0x02	; 2
    1ee0:	8e 87       	std	Y+14, r24	; 0x0e
	}

	TIMSK |=(1<<0);
    1ee2:	a9 e5       	ldi	r26, 0x59	; 89
    1ee4:	b0 e0       	ldi	r27, 0x00	; 0
    1ee6:	e9 e5       	ldi	r30, 0x59	; 89
    1ee8:	f0 e0       	ldi	r31, 0x00	; 0
    1eea:	80 81       	ld	r24, Z
    1eec:	81 60       	ori	r24, 0x01	; 1
    1eee:	8c 93       	st	X, r24


	return Local_enuErrorState;
    1ef0:	8e 85       	ldd	r24, Y+14	; 0x0e
}
    1ef2:	66 96       	adiw	r28, 0x16	; 22
    1ef4:	0f b6       	in	r0, 0x3f	; 63
    1ef6:	f8 94       	cli
    1ef8:	de bf       	out	0x3e, r29	; 62
    1efa:	0f be       	out	0x3f, r0	; 63
    1efc:	cd bf       	out	0x3d, r28	; 61
    1efe:	cf 91       	pop	r28
    1f00:	df 91       	pop	r29
    1f02:	08 95       	ret

00001f04 <TIMER0_enuSetSychDelay>:

ES_t TIMER0_enuSetSychDelay(u32 Copy_u8Time)
{
    1f04:	df 93       	push	r29
    1f06:	cf 93       	push	r28
    1f08:	cd b7       	in	r28, 0x3d	; 61
    1f0a:	de b7       	in	r29, 0x3e	; 62
    1f0c:	66 97       	sbiw	r28, 0x16	; 22
    1f0e:	0f b6       	in	r0, 0x3f	; 63
    1f10:	f8 94       	cli
    1f12:	de bf       	out	0x3e, r29	; 62
    1f14:	0f be       	out	0x3f, r0	; 63
    1f16:	cd bf       	out	0x3d, r28	; 61
    1f18:	6b 8b       	std	Y+19, r22	; 0x13
    1f1a:	7c 8b       	std	Y+20, r23	; 0x14
    1f1c:	8d 8b       	std	Y+21, r24	; 0x15
    1f1e:	9e 8b       	std	Y+22, r25	; 0x16
	ES_t Local_enuErrorState=ES_NOK;
    1f20:	1a 8a       	std	Y+18, r1	; 0x12

	TIMSK &=~(1<<0);
    1f22:	a9 e5       	ldi	r26, 0x59	; 89
    1f24:	b0 e0       	ldi	r27, 0x00	; 0
    1f26:	e9 e5       	ldi	r30, 0x59	; 89
    1f28:	f0 e0       	ldi	r31, 0x00	; 0
    1f2a:	80 81       	ld	r24, Z
    1f2c:	8e 7f       	andi	r24, 0xFE	; 254
    1f2e:	8c 93       	st	X, r24
	f32 Local_f32OVFTime=256.0 *((f32)TIMER0_PRESCALER/TIMER0_F_CPU);
    1f30:	8f e6       	ldi	r24, 0x6F	; 111
    1f32:	92 e1       	ldi	r25, 0x12	; 18
    1f34:	a3 e8       	ldi	r26, 0x83	; 131
    1f36:	be e3       	ldi	r27, 0x3E	; 62
    1f38:	8e 87       	std	Y+14, r24	; 0x0e
    1f3a:	9f 87       	std	Y+15, r25	; 0x0f
    1f3c:	a8 8b       	std	Y+16, r26	; 0x10
    1f3e:	b9 8b       	std	Y+17, r27	; 0x11

	f32 Local_f32NumOVF = (Copy_u8Time)/(Local_f32OVFTime);
    1f40:	6b 89       	ldd	r22, Y+19	; 0x13
    1f42:	7c 89       	ldd	r23, Y+20	; 0x14
    1f44:	8d 89       	ldd	r24, Y+21	; 0x15
    1f46:	9e 89       	ldd	r25, Y+22	; 0x16
    1f48:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    1f4c:	dc 01       	movw	r26, r24
    1f4e:	cb 01       	movw	r24, r22
    1f50:	bc 01       	movw	r22, r24
    1f52:	cd 01       	movw	r24, r26
    1f54:	2e 85       	ldd	r18, Y+14	; 0x0e
    1f56:	3f 85       	ldd	r19, Y+15	; 0x0f
    1f58:	48 89       	ldd	r20, Y+16	; 0x10
    1f5a:	59 89       	ldd	r21, Y+17	; 0x11
    1f5c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1f60:	dc 01       	movw	r26, r24
    1f62:	cb 01       	movw	r24, r22
    1f64:	8a 87       	std	Y+10, r24	; 0x0a
    1f66:	9b 87       	std	Y+11, r25	; 0x0b
    1f68:	ac 87       	std	Y+12, r26	; 0x0c
    1f6a:	bd 87       	std	Y+13, r27	; 0x0d

	if((Local_f32NumOVF-(u32)Local_f32NumOVF) != 0.0)
    1f6c:	6a 85       	ldd	r22, Y+10	; 0x0a
    1f6e:	7b 85       	ldd	r23, Y+11	; 0x0b
    1f70:	8c 85       	ldd	r24, Y+12	; 0x0c
    1f72:	9d 85       	ldd	r25, Y+13	; 0x0d
    1f74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f78:	dc 01       	movw	r26, r24
    1f7a:	cb 01       	movw	r24, r22
    1f7c:	bc 01       	movw	r22, r24
    1f7e:	cd 01       	movw	r24, r26
    1f80:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    1f84:	9b 01       	movw	r18, r22
    1f86:	ac 01       	movw	r20, r24
    1f88:	6a 85       	ldd	r22, Y+10	; 0x0a
    1f8a:	7b 85       	ldd	r23, Y+11	; 0x0b
    1f8c:	8c 85       	ldd	r24, Y+12	; 0x0c
    1f8e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1f90:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1f94:	dc 01       	movw	r26, r24
    1f96:	cb 01       	movw	r24, r22
    1f98:	bc 01       	movw	r22, r24
    1f9a:	cd 01       	movw	r24, r26
    1f9c:	20 e0       	ldi	r18, 0x00	; 0
    1f9e:	30 e0       	ldi	r19, 0x00	; 0
    1fa0:	40 e0       	ldi	r20, 0x00	; 0
    1fa2:	50 e0       	ldi	r21, 0x00	; 0
    1fa4:	0e 94 c5 03 	call	0x78a	; 0x78a <__nesf2>
    1fa8:	88 23       	and	r24, r24
    1faa:	09 f4       	brne	.+2      	; 0x1fae <TIMER0_enuSetSychDelay+0xaa>
    1fac:	6f c0       	rjmp	.+222    	; 0x208c <TIMER0_enuSetSychDelay+0x188>
	{
		u32 Local_u32NumOVF =(u32)Local_f32NumOVF +1;
    1fae:	6a 85       	ldd	r22, Y+10	; 0x0a
    1fb0:	7b 85       	ldd	r23, Y+11	; 0x0b
    1fb2:	8c 85       	ldd	r24, Y+12	; 0x0c
    1fb4:	9d 85       	ldd	r25, Y+13	; 0x0d
    1fb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fba:	dc 01       	movw	r26, r24
    1fbc:	cb 01       	movw	r24, r22
    1fbe:	01 96       	adiw	r24, 0x01	; 1
    1fc0:	a1 1d       	adc	r26, r1
    1fc2:	b1 1d       	adc	r27, r1
    1fc4:	8e 83       	std	Y+6, r24	; 0x06
    1fc6:	9f 83       	std	Y+7, r25	; 0x07
    1fc8:	a8 87       	std	Y+8, r26	; 0x08
    1fca:	b9 87       	std	Y+9, r27	; 0x09
		Local_f32NumOVF = Local_f32NumOVF-(u32)Local_f32NumOVF;
    1fcc:	6a 85       	ldd	r22, Y+10	; 0x0a
    1fce:	7b 85       	ldd	r23, Y+11	; 0x0b
    1fd0:	8c 85       	ldd	r24, Y+12	; 0x0c
    1fd2:	9d 85       	ldd	r25, Y+13	; 0x0d
    1fd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fd8:	dc 01       	movw	r26, r24
    1fda:	cb 01       	movw	r24, r22
    1fdc:	bc 01       	movw	r22, r24
    1fde:	cd 01       	movw	r24, r26
    1fe0:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    1fe4:	9b 01       	movw	r18, r22
    1fe6:	ac 01       	movw	r20, r24
    1fe8:	6a 85       	ldd	r22, Y+10	; 0x0a
    1fea:	7b 85       	ldd	r23, Y+11	; 0x0b
    1fec:	8c 85       	ldd	r24, Y+12	; 0x0c
    1fee:	9d 85       	ldd	r25, Y+13	; 0x0d
    1ff0:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1ff4:	dc 01       	movw	r26, r24
    1ff6:	cb 01       	movw	r24, r22
    1ff8:	8a 87       	std	Y+10, r24	; 0x0a
    1ffa:	9b 87       	std	Y+11, r25	; 0x0b
    1ffc:	ac 87       	std	Y+12, r26	; 0x0c
    1ffe:	bd 87       	std	Y+13, r27	; 0x0d
		u8 Local_u8Preload =256 - (Local_f32NumOVF * 256);
    2000:	6a 85       	ldd	r22, Y+10	; 0x0a
    2002:	7b 85       	ldd	r23, Y+11	; 0x0b
    2004:	8c 85       	ldd	r24, Y+12	; 0x0c
    2006:	9d 85       	ldd	r25, Y+13	; 0x0d
    2008:	20 e0       	ldi	r18, 0x00	; 0
    200a:	30 e0       	ldi	r19, 0x00	; 0
    200c:	40 e8       	ldi	r20, 0x80	; 128
    200e:	53 ec       	ldi	r21, 0xC3	; 195
    2010:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2014:	dc 01       	movw	r26, r24
    2016:	cb 01       	movw	r24, r22
    2018:	bc 01       	movw	r22, r24
    201a:	cd 01       	movw	r24, r26
    201c:	20 e0       	ldi	r18, 0x00	; 0
    201e:	30 e0       	ldi	r19, 0x00	; 0
    2020:	40 e8       	ldi	r20, 0x80	; 128
    2022:	53 e4       	ldi	r21, 0x43	; 67
    2024:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2028:	dc 01       	movw	r26, r24
    202a:	cb 01       	movw	r24, r22
    202c:	bc 01       	movw	r22, r24
    202e:	cd 01       	movw	r24, r26
    2030:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2034:	dc 01       	movw	r26, r24
    2036:	cb 01       	movw	r24, r22
    2038:	8d 83       	std	Y+5, r24	; 0x05
		TCNT0=Local_u8Preload;
    203a:	e2 e5       	ldi	r30, 0x52	; 82
    203c:	f0 e0       	ldi	r31, 0x00	; 0
    203e:	8d 81       	ldd	r24, Y+5	; 0x05
    2040:	80 83       	st	Z, r24
    2042:	1b c0       	rjmp	.+54     	; 0x207a <TIMER0_enuSetSychDelay+0x176>
		while(Local_u32NumOVF>0)
		{
			while(((TIFR>>TIFR_TOV0)&1)==0);//wait flag
    2044:	e8 e5       	ldi	r30, 0x58	; 88
    2046:	f0 e0       	ldi	r31, 0x00	; 0
    2048:	80 81       	ld	r24, Z
    204a:	88 2f       	mov	r24, r24
    204c:	90 e0       	ldi	r25, 0x00	; 0
    204e:	81 70       	andi	r24, 0x01	; 1
    2050:	90 70       	andi	r25, 0x00	; 0
    2052:	00 97       	sbiw	r24, 0x00	; 0
    2054:	b9 f3       	breq	.-18     	; 0x2044 <TIMER0_enuSetSychDelay+0x140>
			TIFR |=(1<<0); // clear it by write one
    2056:	a8 e5       	ldi	r26, 0x58	; 88
    2058:	b0 e0       	ldi	r27, 0x00	; 0
    205a:	e8 e5       	ldi	r30, 0x58	; 88
    205c:	f0 e0       	ldi	r31, 0x00	; 0
    205e:	80 81       	ld	r24, Z
    2060:	81 60       	ori	r24, 0x01	; 1
    2062:	8c 93       	st	X, r24
			Local_u32NumOVF--;
    2064:	8e 81       	ldd	r24, Y+6	; 0x06
    2066:	9f 81       	ldd	r25, Y+7	; 0x07
    2068:	a8 85       	ldd	r26, Y+8	; 0x08
    206a:	b9 85       	ldd	r27, Y+9	; 0x09
    206c:	01 97       	sbiw	r24, 0x01	; 1
    206e:	a1 09       	sbc	r26, r1
    2070:	b1 09       	sbc	r27, r1
    2072:	8e 83       	std	Y+6, r24	; 0x06
    2074:	9f 83       	std	Y+7, r25	; 0x07
    2076:	a8 87       	std	Y+8, r26	; 0x08
    2078:	b9 87       	std	Y+9, r27	; 0x09
	{
		u32 Local_u32NumOVF =(u32)Local_f32NumOVF +1;
		Local_f32NumOVF = Local_f32NumOVF-(u32)Local_f32NumOVF;
		u8 Local_u8Preload =256 - (Local_f32NumOVF * 256);
		TCNT0=Local_u8Preload;
		while(Local_u32NumOVF>0)
    207a:	8e 81       	ldd	r24, Y+6	; 0x06
    207c:	9f 81       	ldd	r25, Y+7	; 0x07
    207e:	a8 85       	ldd	r26, Y+8	; 0x08
    2080:	b9 85       	ldd	r27, Y+9	; 0x09
    2082:	00 97       	sbiw	r24, 0x00	; 0
    2084:	a1 05       	cpc	r26, r1
    2086:	b1 05       	cpc	r27, r1
    2088:	e9 f6       	brne	.-70     	; 0x2044 <TIMER0_enuSetSychDelay+0x140>
    208a:	30 c0       	rjmp	.+96     	; 0x20ec <TIMER0_enuSetSychDelay+0x1e8>

		}
	}
	else
	{
		u32 Local_u32NumOVF =(u32)Local_f32NumOVF;
    208c:	6a 85       	ldd	r22, Y+10	; 0x0a
    208e:	7b 85       	ldd	r23, Y+11	; 0x0b
    2090:	8c 85       	ldd	r24, Y+12	; 0x0c
    2092:	9d 85       	ldd	r25, Y+13	; 0x0d
    2094:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2098:	dc 01       	movw	r26, r24
    209a:	cb 01       	movw	r24, r22
    209c:	89 83       	std	Y+1, r24	; 0x01
    209e:	9a 83       	std	Y+2, r25	; 0x02
    20a0:	ab 83       	std	Y+3, r26	; 0x03
    20a2:	bc 83       	std	Y+4, r27	; 0x04
    20a4:	1b c0       	rjmp	.+54     	; 0x20dc <TIMER0_enuSetSychDelay+0x1d8>
		while(Local_u32NumOVF>0)
		{
			while(((TIFR>>TIFR_TOV0)&1)==0);
    20a6:	e8 e5       	ldi	r30, 0x58	; 88
    20a8:	f0 e0       	ldi	r31, 0x00	; 0
    20aa:	80 81       	ld	r24, Z
    20ac:	88 2f       	mov	r24, r24
    20ae:	90 e0       	ldi	r25, 0x00	; 0
    20b0:	81 70       	andi	r24, 0x01	; 1
    20b2:	90 70       	andi	r25, 0x00	; 0
    20b4:	00 97       	sbiw	r24, 0x00	; 0
    20b6:	b9 f3       	breq	.-18     	; 0x20a6 <TIMER0_enuSetSychDelay+0x1a2>
			TIFR |=(1<<0);
    20b8:	a8 e5       	ldi	r26, 0x58	; 88
    20ba:	b0 e0       	ldi	r27, 0x00	; 0
    20bc:	e8 e5       	ldi	r30, 0x58	; 88
    20be:	f0 e0       	ldi	r31, 0x00	; 0
    20c0:	80 81       	ld	r24, Z
    20c2:	81 60       	ori	r24, 0x01	; 1
    20c4:	8c 93       	st	X, r24
			Local_u32NumOVF--;
    20c6:	89 81       	ldd	r24, Y+1	; 0x01
    20c8:	9a 81       	ldd	r25, Y+2	; 0x02
    20ca:	ab 81       	ldd	r26, Y+3	; 0x03
    20cc:	bc 81       	ldd	r27, Y+4	; 0x04
    20ce:	01 97       	sbiw	r24, 0x01	; 1
    20d0:	a1 09       	sbc	r26, r1
    20d2:	b1 09       	sbc	r27, r1
    20d4:	89 83       	std	Y+1, r24	; 0x01
    20d6:	9a 83       	std	Y+2, r25	; 0x02
    20d8:	ab 83       	std	Y+3, r26	; 0x03
    20da:	bc 83       	std	Y+4, r27	; 0x04
		}
	}
	else
	{
		u32 Local_u32NumOVF =(u32)Local_f32NumOVF;
		while(Local_u32NumOVF>0)
    20dc:	89 81       	ldd	r24, Y+1	; 0x01
    20de:	9a 81       	ldd	r25, Y+2	; 0x02
    20e0:	ab 81       	ldd	r26, Y+3	; 0x03
    20e2:	bc 81       	ldd	r27, Y+4	; 0x04
    20e4:	00 97       	sbiw	r24, 0x00	; 0
    20e6:	a1 05       	cpc	r26, r1
    20e8:	b1 05       	cpc	r27, r1
    20ea:	e9 f6       	brne	.-70     	; 0x20a6 <TIMER0_enuSetSychDelay+0x1a2>

		}
	}


	return Local_enuErrorState;
    20ec:	8a 89       	ldd	r24, Y+18	; 0x12
}
    20ee:	66 96       	adiw	r28, 0x16	; 22
    20f0:	0f b6       	in	r0, 0x3f	; 63
    20f2:	f8 94       	cli
    20f4:	de bf       	out	0x3e, r29	; 62
    20f6:	0f be       	out	0x3f, r0	; 63
    20f8:	cd bf       	out	0x3d, r28	; 61
    20fa:	cf 91       	pop	r28
    20fc:	df 91       	pop	r29
    20fe:	08 95       	ret

00002100 <__vector_11>:



ISR(VECT_TIMER0_OVF)
{
    2100:	1f 92       	push	r1
    2102:	0f 92       	push	r0
    2104:	0f b6       	in	r0, 0x3f	; 63
    2106:	0f 92       	push	r0
    2108:	11 24       	eor	r1, r1
    210a:	2f 93       	push	r18
    210c:	3f 93       	push	r19
    210e:	4f 93       	push	r20
    2110:	5f 93       	push	r21
    2112:	6f 93       	push	r22
    2114:	7f 93       	push	r23
    2116:	8f 93       	push	r24
    2118:	9f 93       	push	r25
    211a:	af 93       	push	r26
    211c:	bf 93       	push	r27
    211e:	ef 93       	push	r30
    2120:	ff 93       	push	r31
    2122:	df 93       	push	r29
    2124:	cf 93       	push	r28
    2126:	cd b7       	in	r28, 0x3d	; 61
    2128:	de b7       	in	r29, 0x3e	; 62
	if (TIMER0_APfunCallBack[TIMER0_DELAY_CALLBACK] != NULL && (ISR_u32Counter == (TIMER0_u8NumberOfOverflow * TIMER0_u32StartDelay)) && (ISR_u32ActionCounter * TIMER0_u32StartDelay) <= TIMER0_u32StopTime)
    212a:	80 91 d0 02 	lds	r24, 0x02D0
    212e:	90 91 d1 02 	lds	r25, 0x02D1
    2132:	00 97       	sbiw	r24, 0x00	; 0
    2134:	09 f4       	brne	.+2      	; 0x2138 <__vector_11+0x38>
    2136:	6a c0       	rjmp	.+212    	; 0x220c <__vector_11+0x10c>
    2138:	80 91 c2 02 	lds	r24, 0x02C2
    213c:	88 2f       	mov	r24, r24
    213e:	90 e0       	ldi	r25, 0x00	; 0
    2140:	a0 e0       	ldi	r26, 0x00	; 0
    2142:	b0 e0       	ldi	r27, 0x00	; 0
    2144:	20 91 c4 02 	lds	r18, 0x02C4
    2148:	30 91 c5 02 	lds	r19, 0x02C5
    214c:	40 91 c6 02 	lds	r20, 0x02C6
    2150:	50 91 c7 02 	lds	r21, 0x02C7
    2154:	bc 01       	movw	r22, r24
    2156:	cd 01       	movw	r24, r26
    2158:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <__mulsi3>
    215c:	9b 01       	movw	r18, r22
    215e:	ac 01       	movw	r20, r24
    2160:	80 91 cc 02 	lds	r24, 0x02CC
    2164:	90 91 cd 02 	lds	r25, 0x02CD
    2168:	a0 91 ce 02 	lds	r26, 0x02CE
    216c:	b0 91 cf 02 	lds	r27, 0x02CF
    2170:	28 17       	cp	r18, r24
    2172:	39 07       	cpc	r19, r25
    2174:	4a 07       	cpc	r20, r26
    2176:	5b 07       	cpc	r21, r27
    2178:	09 f0       	breq	.+2      	; 0x217c <__vector_11+0x7c>
    217a:	48 c0       	rjmp	.+144    	; 0x220c <__vector_11+0x10c>
    217c:	80 91 d1 01 	lds	r24, 0x01D1
    2180:	90 91 d2 01 	lds	r25, 0x01D2
    2184:	a0 91 d3 01 	lds	r26, 0x01D3
    2188:	b0 91 d4 01 	lds	r27, 0x01D4
    218c:	20 91 c4 02 	lds	r18, 0x02C4
    2190:	30 91 c5 02 	lds	r19, 0x02C5
    2194:	40 91 c6 02 	lds	r20, 0x02C6
    2198:	50 91 c7 02 	lds	r21, 0x02C7
    219c:	bc 01       	movw	r22, r24
    219e:	cd 01       	movw	r24, r26
    21a0:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <__mulsi3>
    21a4:	9b 01       	movw	r18, r22
    21a6:	ac 01       	movw	r20, r24
    21a8:	80 91 c8 02 	lds	r24, 0x02C8
    21ac:	90 91 c9 02 	lds	r25, 0x02C9
    21b0:	a0 91 ca 02 	lds	r26, 0x02CA
    21b4:	b0 91 cb 02 	lds	r27, 0x02CB
    21b8:	82 17       	cp	r24, r18
    21ba:	93 07       	cpc	r25, r19
    21bc:	a4 07       	cpc	r26, r20
    21be:	b5 07       	cpc	r27, r21
    21c0:	28 f1       	brcs	.+74     	; 0x220c <__vector_11+0x10c>
	{
		ISR_u32ActionCounter++;
    21c2:	80 91 d1 01 	lds	r24, 0x01D1
    21c6:	90 91 d2 01 	lds	r25, 0x01D2
    21ca:	a0 91 d3 01 	lds	r26, 0x01D3
    21ce:	b0 91 d4 01 	lds	r27, 0x01D4
    21d2:	01 96       	adiw	r24, 0x01	; 1
    21d4:	a1 1d       	adc	r26, r1
    21d6:	b1 1d       	adc	r27, r1
    21d8:	80 93 d1 01 	sts	0x01D1, r24
    21dc:	90 93 d2 01 	sts	0x01D2, r25
    21e0:	a0 93 d3 01 	sts	0x01D3, r26
    21e4:	b0 93 d4 01 	sts	0x01D4, r27
		TIMER0_APfunCallBack[TIMER0_DELAY_CALLBACK](TIMER0_APvidParameter[TIMER0_DELAY_CALLBACK]);
    21e8:	e0 91 d0 02 	lds	r30, 0x02D0
    21ec:	f0 91 d1 02 	lds	r31, 0x02D1
    21f0:	80 91 d6 02 	lds	r24, 0x02D6
    21f4:	90 91 d7 02 	lds	r25, 0x02D7
    21f8:	09 95       	icall
		ISR_u32Counter=0;
    21fa:	10 92 cc 02 	sts	0x02CC, r1
    21fe:	10 92 cd 02 	sts	0x02CD, r1
    2202:	10 92 ce 02 	sts	0x02CE, r1
    2206:	10 92 cf 02 	sts	0x02CF, r1
    220a:	33 c0       	rjmp	.+102    	; 0x2272 <__vector_11+0x172>
	}
	else
	{
		ISR_u32Counter++;
    220c:	80 91 cc 02 	lds	r24, 0x02CC
    2210:	90 91 cd 02 	lds	r25, 0x02CD
    2214:	a0 91 ce 02 	lds	r26, 0x02CE
    2218:	b0 91 cf 02 	lds	r27, 0x02CF
    221c:	01 96       	adiw	r24, 0x01	; 1
    221e:	a1 1d       	adc	r26, r1
    2220:	b1 1d       	adc	r27, r1
    2222:	80 93 cc 02 	sts	0x02CC, r24
    2226:	90 93 cd 02 	sts	0x02CD, r25
    222a:	a0 93 ce 02 	sts	0x02CE, r26
    222e:	b0 93 cf 02 	sts	0x02CF, r27
		if ( ((ISR_u32Counter % TIMER0_u8NumberOfOverflow) ==0 ) && TIMER0_u8Preload !=0 )
    2232:	80 91 cc 02 	lds	r24, 0x02CC
    2236:	90 91 cd 02 	lds	r25, 0x02CD
    223a:	a0 91 ce 02 	lds	r26, 0x02CE
    223e:	b0 91 cf 02 	lds	r27, 0x02CF
    2242:	20 91 c2 02 	lds	r18, 0x02C2
    2246:	22 2f       	mov	r18, r18
    2248:	30 e0       	ldi	r19, 0x00	; 0
    224a:	40 e0       	ldi	r20, 0x00	; 0
    224c:	50 e0       	ldi	r21, 0x00	; 0
    224e:	bc 01       	movw	r22, r24
    2250:	cd 01       	movw	r24, r26
    2252:	0e 94 4f 2d 	call	0x5a9e	; 0x5a9e <__udivmodsi4>
    2256:	dc 01       	movw	r26, r24
    2258:	cb 01       	movw	r24, r22
    225a:	00 97       	sbiw	r24, 0x00	; 0
    225c:	a1 05       	cpc	r26, r1
    225e:	b1 05       	cpc	r27, r1
    2260:	41 f4       	brne	.+16     	; 0x2272 <__vector_11+0x172>
    2262:	80 91 c3 02 	lds	r24, 0x02C3
    2266:	88 23       	and	r24, r24
    2268:	21 f0       	breq	.+8      	; 0x2272 <__vector_11+0x172>
		{
			TIMER0_enuSetPreload(TIMER0_u8Preload);
    226a:	80 91 c3 02 	lds	r24, 0x02C3
    226e:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <TIMER0_enuSetPreload>
		}
	}

	if (TIMER0_APfunCallBack[TIMER0_OVF_CALLBACK] != NULL)
    2272:	80 91 d2 02 	lds	r24, 0x02D2
    2276:	90 91 d3 02 	lds	r25, 0x02D3
    227a:	00 97       	sbiw	r24, 0x00	; 0
    227c:	49 f0       	breq	.+18     	; 0x2290 <__vector_11+0x190>
	{
		TIMER0_APfunCallBack[TIMER0_OVF_CALLBACK](TIMER0_APvidParameter[TIMER0_OVF_CALLBACK]);
    227e:	e0 91 d2 02 	lds	r30, 0x02D2
    2282:	f0 91 d3 02 	lds	r31, 0x02D3
    2286:	80 91 d8 02 	lds	r24, 0x02D8
    228a:	90 91 d9 02 	lds	r25, 0x02D9
    228e:	09 95       	icall
	}

}
    2290:	cf 91       	pop	r28
    2292:	df 91       	pop	r29
    2294:	ff 91       	pop	r31
    2296:	ef 91       	pop	r30
    2298:	bf 91       	pop	r27
    229a:	af 91       	pop	r26
    229c:	9f 91       	pop	r25
    229e:	8f 91       	pop	r24
    22a0:	7f 91       	pop	r23
    22a2:	6f 91       	pop	r22
    22a4:	5f 91       	pop	r21
    22a6:	4f 91       	pop	r20
    22a8:	3f 91       	pop	r19
    22aa:	2f 91       	pop	r18
    22ac:	0f 90       	pop	r0
    22ae:	0f be       	out	0x3f, r0	; 63
    22b0:	0f 90       	pop	r0
    22b2:	1f 90       	pop	r1
    22b4:	18 95       	reti

000022b6 <__vector_10>:

ISR(VECT_TIMER0_CTC)
{
    22b6:	1f 92       	push	r1
    22b8:	0f 92       	push	r0
    22ba:	0f b6       	in	r0, 0x3f	; 63
    22bc:	0f 92       	push	r0
    22be:	11 24       	eor	r1, r1
    22c0:	2f 93       	push	r18
    22c2:	3f 93       	push	r19
    22c4:	4f 93       	push	r20
    22c6:	5f 93       	push	r21
    22c8:	6f 93       	push	r22
    22ca:	7f 93       	push	r23
    22cc:	8f 93       	push	r24
    22ce:	9f 93       	push	r25
    22d0:	af 93       	push	r26
    22d2:	bf 93       	push	r27
    22d4:	ef 93       	push	r30
    22d6:	ff 93       	push	r31
    22d8:	df 93       	push	r29
    22da:	cf 93       	push	r28
    22dc:	cd b7       	in	r28, 0x3d	; 61
    22de:	de b7       	in	r29, 0x3e	; 62
			TIMER0_enuSetPreload(TIMER0_u8Preload);
		}
	}
	*/

	if (TIMER0_APfunCallBack[TIMER0_CTC_CALLBACK] != NULL)
    22e0:	80 91 d4 02 	lds	r24, 0x02D4
    22e4:	90 91 d5 02 	lds	r25, 0x02D5
    22e8:	00 97       	sbiw	r24, 0x00	; 0
    22ea:	49 f0       	breq	.+18     	; 0x22fe <__vector_10+0x48>
	{
		TIMER0_APfunCallBack[TIMER0_CTC_CALLBACK](TIMER0_APvidParameter[TIMER0_CTC_CALLBACK]);
    22ec:	e0 91 d4 02 	lds	r30, 0x02D4
    22f0:	f0 91 d5 02 	lds	r31, 0x02D5
    22f4:	80 91 da 02 	lds	r24, 0x02DA
    22f8:	90 91 db 02 	lds	r25, 0x02DB
    22fc:	09 95       	icall
	}
}
    22fe:	cf 91       	pop	r28
    2300:	df 91       	pop	r29
    2302:	ff 91       	pop	r31
    2304:	ef 91       	pop	r30
    2306:	bf 91       	pop	r27
    2308:	af 91       	pop	r26
    230a:	9f 91       	pop	r25
    230c:	8f 91       	pop	r24
    230e:	7f 91       	pop	r23
    2310:	6f 91       	pop	r22
    2312:	5f 91       	pop	r21
    2314:	4f 91       	pop	r20
    2316:	3f 91       	pop	r19
    2318:	2f 91       	pop	r18
    231a:	0f 90       	pop	r0
    231c:	0f be       	out	0x3f, r0	; 63
    231e:	0f 90       	pop	r0
    2320:	1f 90       	pop	r1
    2322:	18 95       	reti

00002324 <ICU_enuInit>:

static void (*ICU_PvCallBackFunc) (void*)=NULL;
static void *ICU_PvCallBackParameter=NULL;

ES_t ICU_enuInit(void)
{
    2324:	df 93       	push	r29
    2326:	cf 93       	push	r28
    2328:	0f 92       	push	r0
    232a:	cd b7       	in	r28, 0x3d	; 61
    232c:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
    232e:	19 82       	std	Y+1, r1	; 0x01

#if ICU_TRIGGER_SOURCE==ICU_RISING_EDGE
	TCCR1B |= (1<<TCCR1B_ICES1);
    2330:	ae e4       	ldi	r26, 0x4E	; 78
    2332:	b0 e0       	ldi	r27, 0x00	; 0
    2334:	ee e4       	ldi	r30, 0x4E	; 78
    2336:	f0 e0       	ldi	r31, 0x00	; 0
    2338:	80 81       	ld	r24, Z
    233a:	80 64       	ori	r24, 0x40	; 64
    233c:	8c 93       	st	X, r24
	Local_enuErrorState=ES_OK;
    233e:	81 e0       	ldi	r24, 0x01	; 1
    2340:	89 83       	std	Y+1, r24	; 0x01
#error "Attention!!, your ICU_TRIGGER_SOURCE Selection is Wrong...."

#endif


	return Local_enuErrorState;
    2342:	89 81       	ldd	r24, Y+1	; 0x01
}
    2344:	0f 90       	pop	r0
    2346:	cf 91       	pop	r28
    2348:	df 91       	pop	r29
    234a:	08 95       	ret

0000234c <ICU_enuEnableINTERRUPT>:

ES_t ICU_enuEnableINTERRUPT(void)
{
    234c:	df 93       	push	r29
    234e:	cf 93       	push	r28
    2350:	0f 92       	push	r0
    2352:	cd b7       	in	r28, 0x3d	; 61
    2354:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
    2356:	19 82       	std	Y+1, r1	; 0x01

	TIMSK |=(1<<TIMSK_TICIE1);
    2358:	a9 e5       	ldi	r26, 0x59	; 89
    235a:	b0 e0       	ldi	r27, 0x00	; 0
    235c:	e9 e5       	ldi	r30, 0x59	; 89
    235e:	f0 e0       	ldi	r31, 0x00	; 0
    2360:	80 81       	ld	r24, Z
    2362:	80 62       	ori	r24, 0x20	; 32
    2364:	8c 93       	st	X, r24
	Local_enuErrorState=ES_OK;
    2366:	81 e0       	ldi	r24, 0x01	; 1
    2368:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    236a:	89 81       	ldd	r24, Y+1	; 0x01
}
    236c:	0f 90       	pop	r0
    236e:	cf 91       	pop	r28
    2370:	df 91       	pop	r29
    2372:	08 95       	ret

00002374 <ICU_enuDisableINTERRUPT>:

ES_t ICU_enuDisableINTERRUPT(void)
{
    2374:	df 93       	push	r29
    2376:	cf 93       	push	r28
    2378:	0f 92       	push	r0
    237a:	cd b7       	in	r28, 0x3d	; 61
    237c:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
    237e:	19 82       	std	Y+1, r1	; 0x01

	TIMSK &=~(1<<TIMSK_TICIE1);
    2380:	a9 e5       	ldi	r26, 0x59	; 89
    2382:	b0 e0       	ldi	r27, 0x00	; 0
    2384:	e9 e5       	ldi	r30, 0x59	; 89
    2386:	f0 e0       	ldi	r31, 0x00	; 0
    2388:	80 81       	ld	r24, Z
    238a:	8f 7d       	andi	r24, 0xDF	; 223
    238c:	8c 93       	st	X, r24
	Local_enuErrorState=ES_OK;
    238e:	81 e0       	ldi	r24, 0x01	; 1
    2390:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    2392:	89 81       	ldd	r24, Y+1	; 0x01
}
    2394:	0f 90       	pop	r0
    2396:	cf 91       	pop	r28
    2398:	df 91       	pop	r29
    239a:	08 95       	ret

0000239c <ICU_enuSetTriggerEdge>:

ES_t ICU_enuSetTriggerEdge(u8 Copy_u8Edge)
{
    239c:	df 93       	push	r29
    239e:	cf 93       	push	r28
    23a0:	00 d0       	rcall	.+0      	; 0x23a2 <ICU_enuSetTriggerEdge+0x6>
    23a2:	cd b7       	in	r28, 0x3d	; 61
    23a4:	de b7       	in	r29, 0x3e	; 62
    23a6:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    23a8:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Edge==ICU_RISING_EDGE)
    23aa:	8a 81       	ldd	r24, Y+2	; 0x02
    23ac:	81 30       	cpi	r24, 0x01	; 1
    23ae:	51 f4       	brne	.+20     	; 0x23c4 <ICU_enuSetTriggerEdge+0x28>
	{
		TCCR1B |= (1<<TCCR1B_ICES1);
    23b0:	ae e4       	ldi	r26, 0x4E	; 78
    23b2:	b0 e0       	ldi	r27, 0x00	; 0
    23b4:	ee e4       	ldi	r30, 0x4E	; 78
    23b6:	f0 e0       	ldi	r31, 0x00	; 0
    23b8:	80 81       	ld	r24, Z
    23ba:	80 64       	ori	r24, 0x40	; 64
    23bc:	8c 93       	st	X, r24
		Local_enuErrorState=ES_OK;
    23be:	81 e0       	ldi	r24, 0x01	; 1
    23c0:	89 83       	std	Y+1, r24	; 0x01
    23c2:	0f c0       	rjmp	.+30     	; 0x23e2 <ICU_enuSetTriggerEdge+0x46>
	}
	else if(Copy_u8Edge==ICU_FALLING_EDGE)
    23c4:	8a 81       	ldd	r24, Y+2	; 0x02
    23c6:	82 30       	cpi	r24, 0x02	; 2
    23c8:	51 f4       	brne	.+20     	; 0x23de <ICU_enuSetTriggerEdge+0x42>
	{
		TCCR1B &=~(1<<TCCR1B_ICES1);
    23ca:	ae e4       	ldi	r26, 0x4E	; 78
    23cc:	b0 e0       	ldi	r27, 0x00	; 0
    23ce:	ee e4       	ldi	r30, 0x4E	; 78
    23d0:	f0 e0       	ldi	r31, 0x00	; 0
    23d2:	80 81       	ld	r24, Z
    23d4:	8f 7b       	andi	r24, 0xBF	; 191
    23d6:	8c 93       	st	X, r24
		Local_enuErrorState=ES_OK;
    23d8:	81 e0       	ldi	r24, 0x01	; 1
    23da:	89 83       	std	Y+1, r24	; 0x01
    23dc:	02 c0       	rjmp	.+4      	; 0x23e2 <ICU_enuSetTriggerEdge+0x46>
	}
	else
	{
		Local_enuErrorState=ES_OUT_OF_RANGE;
    23de:	83 e0       	ldi	r24, 0x03	; 3
    23e0:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    23e2:	89 81       	ldd	r24, Y+1	; 0x01
}
    23e4:	0f 90       	pop	r0
    23e6:	0f 90       	pop	r0
    23e8:	cf 91       	pop	r28
    23ea:	df 91       	pop	r29
    23ec:	08 95       	ret

000023ee <ICU_enuReadInputCapture>:

ES_t ICU_enuReadInputCapture(u16 *Copy_pu16Value)
{
    23ee:	df 93       	push	r29
    23f0:	cf 93       	push	r28
    23f2:	00 d0       	rcall	.+0      	; 0x23f4 <ICU_enuReadInputCapture+0x6>
    23f4:	0f 92       	push	r0
    23f6:	cd b7       	in	r28, 0x3d	; 61
    23f8:	de b7       	in	r29, 0x3e	; 62
    23fa:	9b 83       	std	Y+3, r25	; 0x03
    23fc:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    23fe:	19 82       	std	Y+1, r1	; 0x01

	*Copy_pu16Value=ICR1;
    2400:	e6 e4       	ldi	r30, 0x46	; 70
    2402:	f0 e0       	ldi	r31, 0x00	; 0
    2404:	80 81       	ld	r24, Z
    2406:	91 81       	ldd	r25, Z+1	; 0x01
    2408:	ea 81       	ldd	r30, Y+2	; 0x02
    240a:	fb 81       	ldd	r31, Y+3	; 0x03
    240c:	91 83       	std	Z+1, r25	; 0x01
    240e:	80 83       	st	Z, r24
	Local_enuErrorState=ES_OK;
    2410:	81 e0       	ldi	r24, 0x01	; 1
    2412:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    2414:	89 81       	ldd	r24, Y+1	; 0x01
}
    2416:	0f 90       	pop	r0
    2418:	0f 90       	pop	r0
    241a:	0f 90       	pop	r0
    241c:	cf 91       	pop	r28
    241e:	df 91       	pop	r29
    2420:	08 95       	ret

00002422 <ICU_enuCallBack>:


ES_t ICU_enuCallBack(void (*Copy_PfunCallBack)(void*) , void * Copy_PvidParameter)
{
    2422:	df 93       	push	r29
    2424:	cf 93       	push	r28
    2426:	00 d0       	rcall	.+0      	; 0x2428 <ICU_enuCallBack+0x6>
    2428:	00 d0       	rcall	.+0      	; 0x242a <ICU_enuCallBack+0x8>
    242a:	0f 92       	push	r0
    242c:	cd b7       	in	r28, 0x3d	; 61
    242e:	de b7       	in	r29, 0x3e	; 62
    2430:	9b 83       	std	Y+3, r25	; 0x03
    2432:	8a 83       	std	Y+2, r24	; 0x02
    2434:	7d 83       	std	Y+5, r23	; 0x05
    2436:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState=ES_NOK;
    2438:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_PfunCallBack!=NULL)
    243a:	8a 81       	ldd	r24, Y+2	; 0x02
    243c:	9b 81       	ldd	r25, Y+3	; 0x03
    243e:	00 97       	sbiw	r24, 0x00	; 0
    2440:	79 f0       	breq	.+30     	; 0x2460 <ICU_enuCallBack+0x3e>
	{

		ICU_PvCallBackFunc  = Copy_PfunCallBack;
    2442:	8a 81       	ldd	r24, Y+2	; 0x02
    2444:	9b 81       	ldd	r25, Y+3	; 0x03
    2446:	90 93 e5 02 	sts	0x02E5, r25
    244a:	80 93 e4 02 	sts	0x02E4, r24
		ICU_PvCallBackParameter = Copy_PvidParameter;
    244e:	8c 81       	ldd	r24, Y+4	; 0x04
    2450:	9d 81       	ldd	r25, Y+5	; 0x05
    2452:	90 93 e7 02 	sts	0x02E7, r25
    2456:	80 93 e6 02 	sts	0x02E6, r24
		Local_enuErrorState=ES_OK;
    245a:	81 e0       	ldi	r24, 0x01	; 1
    245c:	89 83       	std	Y+1, r24	; 0x01
    245e:	02 c0       	rjmp	.+4      	; 0x2464 <ICU_enuCallBack+0x42>
	}
	else
	{
		Local_enuErrorState =ES_NULL_POINTER;
    2460:	82 e0       	ldi	r24, 0x02	; 2
    2462:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    2464:	89 81       	ldd	r24, Y+1	; 0x01
}
    2466:	0f 90       	pop	r0
    2468:	0f 90       	pop	r0
    246a:	0f 90       	pop	r0
    246c:	0f 90       	pop	r0
    246e:	0f 90       	pop	r0
    2470:	cf 91       	pop	r28
    2472:	df 91       	pop	r29
    2474:	08 95       	ret

00002476 <__vector_6>:


ISR(VECT_TIMER1_ICU)
{
    2476:	1f 92       	push	r1
    2478:	0f 92       	push	r0
    247a:	0f b6       	in	r0, 0x3f	; 63
    247c:	0f 92       	push	r0
    247e:	11 24       	eor	r1, r1
    2480:	2f 93       	push	r18
    2482:	3f 93       	push	r19
    2484:	4f 93       	push	r20
    2486:	5f 93       	push	r21
    2488:	6f 93       	push	r22
    248a:	7f 93       	push	r23
    248c:	8f 93       	push	r24
    248e:	9f 93       	push	r25
    2490:	af 93       	push	r26
    2492:	bf 93       	push	r27
    2494:	ef 93       	push	r30
    2496:	ff 93       	push	r31
    2498:	df 93       	push	r29
    249a:	cf 93       	push	r28
    249c:	cd b7       	in	r28, 0x3d	; 61
    249e:	de b7       	in	r29, 0x3e	; 62
	if (ICU_PvCallBackFunc != NULL)
    24a0:	80 91 e4 02 	lds	r24, 0x02E4
    24a4:	90 91 e5 02 	lds	r25, 0x02E5
    24a8:	00 97       	sbiw	r24, 0x00	; 0
    24aa:	49 f0       	breq	.+18     	; 0x24be <__vector_6+0x48>
	{
		ICU_PvCallBackFunc(ICU_PvCallBackParameter);
    24ac:	e0 91 e4 02 	lds	r30, 0x02E4
    24b0:	f0 91 e5 02 	lds	r31, 0x02E5
    24b4:	80 91 e6 02 	lds	r24, 0x02E6
    24b8:	90 91 e7 02 	lds	r25, 0x02E7
    24bc:	09 95       	icall
	}
}
    24be:	cf 91       	pop	r28
    24c0:	df 91       	pop	r29
    24c2:	ff 91       	pop	r31
    24c4:	ef 91       	pop	r30
    24c6:	bf 91       	pop	r27
    24c8:	af 91       	pop	r26
    24ca:	9f 91       	pop	r25
    24cc:	8f 91       	pop	r24
    24ce:	7f 91       	pop	r23
    24d0:	6f 91       	pop	r22
    24d2:	5f 91       	pop	r21
    24d4:	4f 91       	pop	r20
    24d6:	3f 91       	pop	r19
    24d8:	2f 91       	pop	r18
    24da:	0f 90       	pop	r0
    24dc:	0f be       	out	0x3f, r0	; 63
    24de:	0f 90       	pop	r0
    24e0:	1f 90       	pop	r1
    24e2:	18 95       	reti

000024e4 <IIC_enuInit>:
#include "TWI_priv.h"
#include "TWI_config.h"


ES_t IIC_enuInit(void)
{
    24e4:	df 93       	push	r29
    24e6:	cf 93       	push	r28
    24e8:	0f 92       	push	r0
    24ea:	cd b7       	in	r28, 0x3d	; 61
    24ec:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
    24ee:	19 82       	std	Y+1, r1	; 0x01


#elif IIC_MODE==IIC_SLAVE

	// SET slave address
	TWAR &=~(1<<0);
    24f0:	a2 e2       	ldi	r26, 0x22	; 34
    24f2:	b0 e0       	ldi	r27, 0x00	; 0
    24f4:	e2 e2       	ldi	r30, 0x22	; 34
    24f6:	f0 e0       	ldi	r31, 0x00	; 0
    24f8:	80 81       	ld	r24, Z
    24fa:	8e 7f       	andi	r24, 0xFE	; 254
    24fc:	8c 93       	st	X, r24
	TWAR = (IIC_NODE_ADDRESS<<1) | IIC_GENERAL_CALL;
    24fe:	e2 e2       	ldi	r30, 0x22	; 34
    2500:	f0 e0       	ldi	r31, 0x00	; 0
    2502:	8c e2       	ldi	r24, 0x2C	; 44
    2504:	80 83       	st	Z, r24

	//Clear flag
	TWCR |= (1<<TWCR_TWINT);
    2506:	a6 e5       	ldi	r26, 0x56	; 86
    2508:	b0 e0       	ldi	r27, 0x00	; 0
    250a:	e6 e5       	ldi	r30, 0x56	; 86
    250c:	f0 e0       	ldi	r31, 0x00	; 0
    250e:	80 81       	ld	r24, Z
    2510:	80 68       	ori	r24, 0x80	; 128
    2512:	8c 93       	st	X, r24

	// Enable IIC
	TWCR |= (1<<TWCR_TWEN);
    2514:	a6 e5       	ldi	r26, 0x56	; 86
    2516:	b0 e0       	ldi	r27, 0x00	; 0
    2518:	e6 e5       	ldi	r30, 0x56	; 86
    251a:	f0 e0       	ldi	r31, 0x00	; 0
    251c:	80 81       	ld	r24, Z
    251e:	84 60       	ori	r24, 0x04	; 4
    2520:	8c 93       	st	X, r24

	Local_enuErrorState=ES_OK;
    2522:	81 e0       	ldi	r24, 0x01	; 1
    2524:	89 83       	std	Y+1, r24	; 0x01

#error "IIC mode selection is wrong"
#endif


	return Local_enuErrorState;
    2526:	89 81       	ldd	r24, Y+1	; 0x01
}
    2528:	0f 90       	pop	r0
    252a:	cf 91       	pop	r28
    252c:	df 91       	pop	r29
    252e:	08 95       	ret

00002530 <IIC_enuStartCondition>:

ES_t IIC_enuStartCondition(void)
{
    2530:	df 93       	push	r29
    2532:	cf 93       	push	r28
    2534:	0f 92       	push	r0
    2536:	cd b7       	in	r28, 0x3d	; 61
    2538:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
    253a:	19 82       	std	Y+1, r1	; 0x01

	// Transmit start condition
	TWCR = (1 << TWCR_TWSTA) | (1 << TWCR_TWEN) | (1 << TWCR_TWINT);
    253c:	e6 e5       	ldi	r30, 0x56	; 86
    253e:	f0 e0       	ldi	r31, 0x00	; 0
    2540:	84 ea       	ldi	r24, 0xA4	; 164
    2542:	80 83       	st	Z, r24

	// Wait for start condition to be executed
	while (!(TWCR & (1 << TWCR_TWINT)));
    2544:	e6 e5       	ldi	r30, 0x56	; 86
    2546:	f0 e0       	ldi	r31, 0x00	; 0
    2548:	80 81       	ld	r24, Z
    254a:	88 23       	and	r24, r24
    254c:	dc f7       	brge	.-10     	; 0x2544 <IIC_enuStartCondition+0x14>

	// Check the status of the TWI operation
	if ((TWSR & 0xF8) == 0x08)
    254e:	e1 e2       	ldi	r30, 0x21	; 33
    2550:	f0 e0       	ldi	r31, 0x00	; 0
    2552:	80 81       	ld	r24, Z
    2554:	88 2f       	mov	r24, r24
    2556:	90 e0       	ldi	r25, 0x00	; 0
    2558:	88 7f       	andi	r24, 0xF8	; 248
    255a:	90 70       	andi	r25, 0x00	; 0
    255c:	88 30       	cpi	r24, 0x08	; 8
    255e:	91 05       	cpc	r25, r1
    2560:	11 f4       	brne	.+4      	; 0x2566 <IIC_enuStartCondition+0x36>
	{
		// Start condition transmitted successfully
		Local_enuErrorState = ES_OK;
    2562:	81 e0       	ldi	r24, 0x01	; 1
    2564:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorState;
    2566:	89 81       	ldd	r24, Y+1	; 0x01
}
    2568:	0f 90       	pop	r0
    256a:	cf 91       	pop	r28
    256c:	df 91       	pop	r29
    256e:	08 95       	ret

00002570 <IIC_enuRepeatedStartCondition>:

ES_t IIC_enuRepeatedStartCondition(void)
{
    2570:	df 93       	push	r29
    2572:	cf 93       	push	r28
    2574:	0f 92       	push	r0
    2576:	cd b7       	in	r28, 0x3d	; 61
    2578:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
    257a:	19 82       	std	Y+1, r1	; 0x01

	TWCR |=(1<<TWCR_TWSTA);
    257c:	a6 e5       	ldi	r26, 0x56	; 86
    257e:	b0 e0       	ldi	r27, 0x00	; 0
    2580:	e6 e5       	ldi	r30, 0x56	; 86
    2582:	f0 e0       	ldi	r31, 0x00	; 0
    2584:	80 81       	ld	r24, Z
    2586:	80 62       	ori	r24, 0x20	; 32
    2588:	8c 93       	st	X, r24
	//Clear flag
	TWCR |= (1<<TWCR_TWINT);
    258a:	a6 e5       	ldi	r26, 0x56	; 86
    258c:	b0 e0       	ldi	r27, 0x00	; 0
    258e:	e6 e5       	ldi	r30, 0x56	; 86
    2590:	f0 e0       	ldi	r31, 0x00	; 0
    2592:	80 81       	ld	r24, Z
    2594:	80 68       	ori	r24, 0x80	; 128
    2596:	8c 93       	st	X, r24
	//wait on flag
	while(!((TWCR>>TWCR_TWINT)&1));
    2598:	e6 e5       	ldi	r30, 0x56	; 86
    259a:	f0 e0       	ldi	r31, 0x00	; 0
    259c:	80 81       	ld	r24, Z
    259e:	88 23       	and	r24, r24
    25a0:	dc f7       	brge	.-10     	; 0x2598 <IIC_enuRepeatedStartCondition+0x28>

	//check  repeated start condition state
	if((TWSR & 0xF8)==0x10)  //Master transmit
    25a2:	e1 e2       	ldi	r30, 0x21	; 33
    25a4:	f0 e0       	ldi	r31, 0x00	; 0
    25a6:	80 81       	ld	r24, Z
    25a8:	88 2f       	mov	r24, r24
    25aa:	90 e0       	ldi	r25, 0x00	; 0
    25ac:	88 7f       	andi	r24, 0xF8	; 248
    25ae:	90 70       	andi	r25, 0x00	; 0
    25b0:	80 31       	cpi	r24, 0x10	; 16
    25b2:	91 05       	cpc	r25, r1
    25b4:	11 f4       	brne	.+4      	; 0x25ba <IIC_enuRepeatedStartCondition+0x4a>
	{

		Local_enuErrorState=ES_OK;
    25b6:	81 e0       	ldi	r24, 0x01	; 1
    25b8:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    25ba:	89 81       	ldd	r24, Y+1	; 0x01
}
    25bc:	0f 90       	pop	r0
    25be:	cf 91       	pop	r28
    25c0:	df 91       	pop	r29
    25c2:	08 95       	ret

000025c4 <IIC_enuStopCondition>:

ES_t IIC_enuStopCondition(void)
{
    25c4:	df 93       	push	r29
    25c6:	cf 93       	push	r28
    25c8:	0f 92       	push	r0
    25ca:	cd b7       	in	r28, 0x3d	; 61
    25cc:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
    25ce:	19 82       	std	Y+1, r1	; 0x01

	// Transmit stop condition
	TWCR = (1 << TWCR_TWSTO) | (1 << TWCR_TWEN) | (1 << TWCR_TWINT);
    25d0:	e6 e5       	ldi	r30, 0x56	; 86
    25d2:	f0 e0       	ldi	r31, 0x00	; 0
    25d4:	84 e9       	ldi	r24, 0x94	; 148
    25d6:	80 83       	st	Z, r24

	// Wait for stop condition to be executed
	while (TWCR & (1 << TWCR_TWSTO));
    25d8:	e6 e5       	ldi	r30, 0x56	; 86
    25da:	f0 e0       	ldi	r31, 0x00	; 0
    25dc:	80 81       	ld	r24, Z
    25de:	88 2f       	mov	r24, r24
    25e0:	90 e0       	ldi	r25, 0x00	; 0
    25e2:	80 71       	andi	r24, 0x10	; 16
    25e4:	90 70       	andi	r25, 0x00	; 0
    25e6:	00 97       	sbiw	r24, 0x00	; 0
    25e8:	b9 f7       	brne	.-18     	; 0x25d8 <IIC_enuStopCondition+0x14>
	// TWSR == 0x50 --> Data byte transmitted and ACK received
	// TWSR == 0x58 --> Data byte transmitted and NACK received

	// Check the status of the TWI operation
	if ((TWSR & 0xF8) == 0x58 || (TWSR & 0xF8) == 0x50 || (TWSR & 0xF8) == 0x38)
    25ea:	e1 e2       	ldi	r30, 0x21	; 33
    25ec:	f0 e0       	ldi	r31, 0x00	; 0
    25ee:	80 81       	ld	r24, Z
    25f0:	88 2f       	mov	r24, r24
    25f2:	90 e0       	ldi	r25, 0x00	; 0
    25f4:	88 7f       	andi	r24, 0xF8	; 248
    25f6:	90 70       	andi	r25, 0x00	; 0
    25f8:	88 35       	cpi	r24, 0x58	; 88
    25fa:	91 05       	cpc	r25, r1
    25fc:	a1 f0       	breq	.+40     	; 0x2626 <IIC_enuStopCondition+0x62>
    25fe:	e1 e2       	ldi	r30, 0x21	; 33
    2600:	f0 e0       	ldi	r31, 0x00	; 0
    2602:	80 81       	ld	r24, Z
    2604:	88 2f       	mov	r24, r24
    2606:	90 e0       	ldi	r25, 0x00	; 0
    2608:	88 7f       	andi	r24, 0xF8	; 248
    260a:	90 70       	andi	r25, 0x00	; 0
    260c:	80 35       	cpi	r24, 0x50	; 80
    260e:	91 05       	cpc	r25, r1
    2610:	51 f0       	breq	.+20     	; 0x2626 <IIC_enuStopCondition+0x62>
    2612:	e1 e2       	ldi	r30, 0x21	; 33
    2614:	f0 e0       	ldi	r31, 0x00	; 0
    2616:	80 81       	ld	r24, Z
    2618:	88 2f       	mov	r24, r24
    261a:	90 e0       	ldi	r25, 0x00	; 0
    261c:	88 7f       	andi	r24, 0xF8	; 248
    261e:	90 70       	andi	r25, 0x00	; 0
    2620:	88 33       	cpi	r24, 0x38	; 56
    2622:	91 05       	cpc	r25, r1
    2624:	11 f4       	brne	.+4      	; 0x262a <IIC_enuStopCondition+0x66>
	{
		// Stop condition transmitted successfully
		Local_enuErrorState = ES_OK;
    2626:	81 e0       	ldi	r24, 0x01	; 1
    2628:	89 83       	std	Y+1, r24	; 0x01
	}



	return Local_enuErrorState;
    262a:	89 81       	ldd	r24, Y+1	; 0x01
}
    262c:	0f 90       	pop	r0
    262e:	cf 91       	pop	r28
    2630:	df 91       	pop	r29
    2632:	08 95       	ret

00002634 <IIC_enuWriteSlaveAddress>:

ES_t IIC_enuWriteSlaveAddress(u8 Copy_u8SlaveAddress, u8 Copy_u8Operation)
{
    2634:	df 93       	push	r29
    2636:	cf 93       	push	r28
    2638:	00 d0       	rcall	.+0      	; 0x263a <IIC_enuWriteSlaveAddress+0x6>
    263a:	0f 92       	push	r0
    263c:	cd b7       	in	r28, 0x3d	; 61
    263e:	de b7       	in	r29, 0x3e	; 62
    2640:	8a 83       	std	Y+2, r24	; 0x02
    2642:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState=ES_NOK;
    2644:	19 82       	std	Y+1, r1	; 0x01

	// Check if the address and operation are within valid ranges
	if (Copy_u8SlaveAddress >= 2 && Copy_u8SlaveAddress <= 118 && (Copy_u8Operation == 0 || Copy_u8Operation == 1))
    2646:	8a 81       	ldd	r24, Y+2	; 0x02
    2648:	82 30       	cpi	r24, 0x02	; 2
    264a:	08 f4       	brcc	.+2      	; 0x264e <IIC_enuWriteSlaveAddress+0x1a>
    264c:	3f c0       	rjmp	.+126    	; 0x26cc <IIC_enuWriteSlaveAddress+0x98>
    264e:	8a 81       	ldd	r24, Y+2	; 0x02
    2650:	87 37       	cpi	r24, 0x77	; 119
    2652:	e0 f5       	brcc	.+120    	; 0x26cc <IIC_enuWriteSlaveAddress+0x98>
    2654:	8b 81       	ldd	r24, Y+3	; 0x03
    2656:	88 23       	and	r24, r24
    2658:	19 f0       	breq	.+6      	; 0x2660 <IIC_enuWriteSlaveAddress+0x2c>
    265a:	8b 81       	ldd	r24, Y+3	; 0x03
    265c:	81 30       	cpi	r24, 0x01	; 1
    265e:	b1 f5       	brne	.+108    	; 0x26cc <IIC_enuWriteSlaveAddress+0x98>
	{
		// Load the slave address and operation (read or write) into the TWI Data Register
		TWDR = (Copy_u8SlaveAddress << 1) | Copy_u8Operation;
    2660:	e3 e2       	ldi	r30, 0x23	; 35
    2662:	f0 e0       	ldi	r31, 0x00	; 0
    2664:	8a 81       	ldd	r24, Y+2	; 0x02
    2666:	88 2f       	mov	r24, r24
    2668:	90 e0       	ldi	r25, 0x00	; 0
    266a:	88 0f       	add	r24, r24
    266c:	99 1f       	adc	r25, r25
    266e:	98 2f       	mov	r25, r24
    2670:	8b 81       	ldd	r24, Y+3	; 0x03
    2672:	89 2b       	or	r24, r25
    2674:	80 83       	st	Z, r24

		// Clear the TWINT flag to start the transmission of the address
		TWCR = (1 << TWCR_TWEN) | (1 << TWCR_TWINT);
    2676:	e6 e5       	ldi	r30, 0x56	; 86
    2678:	f0 e0       	ldi	r31, 0x00	; 0
    267a:	84 e8       	ldi	r24, 0x84	; 132
    267c:	80 83       	st	Z, r24

		// Wait until the TWINT flag is set, indicating that the transmission is complete
		while (!(TWCR & (1 << TWCR_TWINT)));
    267e:	e6 e5       	ldi	r30, 0x56	; 86
    2680:	f0 e0       	ldi	r31, 0x00	; 0
    2682:	80 81       	ld	r24, Z
    2684:	88 23       	and	r24, r24
    2686:	dc f7       	brge	.-10     	; 0x267e <IIC_enuWriteSlaveAddress+0x4a>

		// Check the status of the TWI operation
		if ((TWSR & 0xF8) == 0x18 && Copy_u8Operation == 0)
    2688:	e1 e2       	ldi	r30, 0x21	; 33
    268a:	f0 e0       	ldi	r31, 0x00	; 0
    268c:	80 81       	ld	r24, Z
    268e:	88 2f       	mov	r24, r24
    2690:	90 e0       	ldi	r25, 0x00	; 0
    2692:	88 7f       	andi	r24, 0xF8	; 248
    2694:	90 70       	andi	r25, 0x00	; 0
    2696:	88 31       	cpi	r24, 0x18	; 24
    2698:	91 05       	cpc	r25, r1
    269a:	31 f4       	brne	.+12     	; 0x26a8 <IIC_enuWriteSlaveAddress+0x74>
    269c:	8b 81       	ldd	r24, Y+3	; 0x03
    269e:	88 23       	and	r24, r24
    26a0:	19 f4       	brne	.+6      	; 0x26a8 <IIC_enuWriteSlaveAddress+0x74>
		{
			// Master transmit mode and received ACK from slave
			Local_enuErrorState = ES_OK;
    26a2:	81 e0       	ldi	r24, 0x01	; 1
    26a4:	89 83       	std	Y+1, r24	; 0x01
    26a6:	14 c0       	rjmp	.+40     	; 0x26d0 <IIC_enuWriteSlaveAddress+0x9c>
		}
		else if ((TWSR & 0xF8) == 0x40 && Copy_u8Operation == 1)
    26a8:	e1 e2       	ldi	r30, 0x21	; 33
    26aa:	f0 e0       	ldi	r31, 0x00	; 0
    26ac:	80 81       	ld	r24, Z
    26ae:	88 2f       	mov	r24, r24
    26b0:	90 e0       	ldi	r25, 0x00	; 0
    26b2:	88 7f       	andi	r24, 0xF8	; 248
    26b4:	90 70       	andi	r25, 0x00	; 0
    26b6:	80 34       	cpi	r24, 0x40	; 64
    26b8:	91 05       	cpc	r25, r1
    26ba:	31 f4       	brne	.+12     	; 0x26c8 <IIC_enuWriteSlaveAddress+0x94>
    26bc:	8b 81       	ldd	r24, Y+3	; 0x03
    26be:	81 30       	cpi	r24, 0x01	; 1
    26c0:	19 f4       	brne	.+6      	; 0x26c8 <IIC_enuWriteSlaveAddress+0x94>
		{
			// Master receive mode and received ACK from slave
			Local_enuErrorState = ES_OK;
    26c2:	81 e0       	ldi	r24, 0x01	; 1
    26c4:	89 83       	std	Y+1, r24	; 0x01
    26c6:	04 c0       	rjmp	.+8      	; 0x26d0 <IIC_enuWriteSlaveAddress+0x9c>
		}
		else
		{
			// Address not acknowledged by slave
			Local_enuErrorState = ES_NOK;
    26c8:	19 82       	std	Y+1, r1	; 0x01
    26ca:	02 c0       	rjmp	.+4      	; 0x26d0 <IIC_enuWriteSlaveAddress+0x9c>
		}
	}
	else
	{
		// Address or operation out of range
		Local_enuErrorState = ES_OUT_OF_RANGE;
    26cc:	83 e0       	ldi	r24, 0x03	; 3
    26ce:	89 83       	std	Y+1, r24	; 0x01
	}



	return Local_enuErrorState;
    26d0:	89 81       	ldd	r24, Y+1	; 0x01
}
    26d2:	0f 90       	pop	r0
    26d4:	0f 90       	pop	r0
    26d6:	0f 90       	pop	r0
    26d8:	cf 91       	pop	r28
    26da:	df 91       	pop	r29
    26dc:	08 95       	ret

000026de <IIC_enuWriteData>:

ES_t IIC_enuWriteData(u8 Copy_u8Data)
{
    26de:	df 93       	push	r29
    26e0:	cf 93       	push	r28
    26e2:	00 d0       	rcall	.+0      	; 0x26e4 <IIC_enuWriteData+0x6>
    26e4:	cd b7       	in	r28, 0x3d	; 61
    26e6:	de b7       	in	r29, 0x3e	; 62
    26e8:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    26ea:	19 82       	std	Y+1, r1	; 0x01

	TWDR = Copy_u8Data;
    26ec:	e3 e2       	ldi	r30, 0x23	; 35
    26ee:	f0 e0       	ldi	r31, 0x00	; 0
    26f0:	8a 81       	ldd	r24, Y+2	; 0x02
    26f2:	80 83       	st	Z, r24
	//Clear flag
	TWCR |= (1<<TWCR_TWINT) | (1<<TWCR_TWEN);
    26f4:	a6 e5       	ldi	r26, 0x56	; 86
    26f6:	b0 e0       	ldi	r27, 0x00	; 0
    26f8:	e6 e5       	ldi	r30, 0x56	; 86
    26fa:	f0 e0       	ldi	r31, 0x00	; 0
    26fc:	80 81       	ld	r24, Z
    26fe:	84 68       	ori	r24, 0x84	; 132
    2700:	8c 93       	st	X, r24
	//wait on flag
	while(!((TWCR>>TWCR_TWINT)&1));
    2702:	e6 e5       	ldi	r30, 0x56	; 86
    2704:	f0 e0       	ldi	r31, 0x00	; 0
    2706:	80 81       	ld	r24, Z
    2708:	88 23       	and	r24, r24
    270a:	dc f7       	brge	.-10     	; 0x2702 <IIC_enuWriteData+0x24>
	//check   state
	if((TWSR & 0xF8)==0x28 ) //Data+ACK //Master transmit
    270c:	e1 e2       	ldi	r30, 0x21	; 33
    270e:	f0 e0       	ldi	r31, 0x00	; 0
    2710:	80 81       	ld	r24, Z
    2712:	88 2f       	mov	r24, r24
    2714:	90 e0       	ldi	r25, 0x00	; 0
    2716:	88 7f       	andi	r24, 0xF8	; 248
    2718:	90 70       	andi	r25, 0x00	; 0
    271a:	88 32       	cpi	r24, 0x28	; 40
    271c:	91 05       	cpc	r25, r1
    271e:	11 f4       	brne	.+4      	; 0x2724 <IIC_enuWriteData+0x46>
	{
		Local_enuErrorState=ES_OK;
    2720:	81 e0       	ldi	r24, 0x01	; 1
    2722:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorState;
    2724:	89 81       	ldd	r24, Y+1	; 0x01
}
    2726:	0f 90       	pop	r0
    2728:	0f 90       	pop	r0
    272a:	cf 91       	pop	r28
    272c:	df 91       	pop	r29
    272e:	08 95       	ret

00002730 <IIC_enuCheckMyAddress>:

ES_t IIC_enuCheckMyAddress(void)
{
    2730:	df 93       	push	r29
    2732:	cf 93       	push	r28
    2734:	0f 92       	push	r0
    2736:	cd b7       	in	r28, 0x3d	; 61
    2738:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
    273a:	19 82       	std	Y+1, r1	; 0x01

	//set ACK bit
	TWCR |=(1<<TWCR_TWEA);
    273c:	a6 e5       	ldi	r26, 0x56	; 86
    273e:	b0 e0       	ldi	r27, 0x00	; 0
    2740:	e6 e5       	ldi	r30, 0x56	; 86
    2742:	f0 e0       	ldi	r31, 0x00	; 0
    2744:	80 81       	ld	r24, Z
    2746:	80 64       	ori	r24, 0x40	; 64
    2748:	8c 93       	st	X, r24
	//Clear flag
	TWCR |= (1<<TWCR_TWINT);
    274a:	a6 e5       	ldi	r26, 0x56	; 86
    274c:	b0 e0       	ldi	r27, 0x00	; 0
    274e:	e6 e5       	ldi	r30, 0x56	; 86
    2750:	f0 e0       	ldi	r31, 0x00	; 0
    2752:	80 81       	ld	r24, Z
    2754:	80 68       	ori	r24, 0x80	; 128
    2756:	8c 93       	st	X, r24
	//wait on flag
	while(!((TWCR>>TWCR_TWINT)&1));
    2758:	e6 e5       	ldi	r30, 0x56	; 86
    275a:	f0 e0       	ldi	r31, 0x00	; 0
    275c:	80 81       	ld	r24, Z
    275e:	88 23       	and	r24, r24
    2760:	dc f7       	brge	.-10     	; 0x2758 <IIC_enuCheckMyAddress+0x28>
	//check state
	if((TWSR & 0xF8)==0xA8 ) //SLA+W+ACK //slave transmit
    2762:	e1 e2       	ldi	r30, 0x21	; 33
    2764:	f0 e0       	ldi	r31, 0x00	; 0
    2766:	80 81       	ld	r24, Z
    2768:	88 2f       	mov	r24, r24
    276a:	90 e0       	ldi	r25, 0x00	; 0
    276c:	88 7f       	andi	r24, 0xF8	; 248
    276e:	90 70       	andi	r25, 0x00	; 0
    2770:	88 3a       	cpi	r24, 0xA8	; 168
    2772:	91 05       	cpc	r25, r1
    2774:	19 f4       	brne	.+6      	; 0x277c <IIC_enuCheckMyAddress+0x4c>
	{

		Local_enuErrorState=ES_OK;
    2776:	81 e0       	ldi	r24, 0x01	; 1
    2778:	89 83       	std	Y+1, r24	; 0x01
    277a:	0c c0       	rjmp	.+24     	; 0x2794 <IIC_enuCheckMyAddress+0x64>
	}
	else if((TWSR & 0xF8)==0x60 ) //SLA+W+ACK //slave recieve
    277c:	e1 e2       	ldi	r30, 0x21	; 33
    277e:	f0 e0       	ldi	r31, 0x00	; 0
    2780:	80 81       	ld	r24, Z
    2782:	88 2f       	mov	r24, r24
    2784:	90 e0       	ldi	r25, 0x00	; 0
    2786:	88 7f       	andi	r24, 0xF8	; 248
    2788:	90 70       	andi	r25, 0x00	; 0
    278a:	80 36       	cpi	r24, 0x60	; 96
    278c:	91 05       	cpc	r25, r1
    278e:	11 f4       	brne	.+4      	; 0x2794 <IIC_enuCheckMyAddress+0x64>
	{

		Local_enuErrorState=ES_OK;
    2790:	81 e0       	ldi	r24, 0x01	; 1
    2792:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorState;
    2794:	89 81       	ldd	r24, Y+1	; 0x01
}
    2796:	0f 90       	pop	r0
    2798:	cf 91       	pop	r28
    279a:	df 91       	pop	r29
    279c:	08 95       	ret

0000279e <IIC_enuReadData>:

ES_t IIC_enuReadData(u8 * Copy_pu8Data)
{
    279e:	df 93       	push	r29
    27a0:	cf 93       	push	r28
    27a2:	00 d0       	rcall	.+0      	; 0x27a4 <IIC_enuReadData+0x6>
    27a4:	0f 92       	push	r0
    27a6:	cd b7       	in	r28, 0x3d	; 61
    27a8:	de b7       	in	r29, 0x3e	; 62
    27aa:	9b 83       	std	Y+3, r25	; 0x03
    27ac:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    27ae:	19 82       	std	Y+1, r1	; 0x01

	//Clear flags

	TWCR = (1<< TWCR_TWINT) | (1 << TWCR_TWEN) | (1 << TWCR_TWEA) ;
    27b0:	e6 e5       	ldi	r30, 0x56	; 86
    27b2:	f0 e0       	ldi	r31, 0x00	; 0
    27b4:	84 ec       	ldi	r24, 0xC4	; 196
    27b6:	80 83       	st	Z, r24
	//wait on flag
	//while (!((TWCR >> TWCR_TWINT) & 1));
	 while( GET_BIT(TWCR ,TWCR_TWINT) ==  0 );
    27b8:	e6 e5       	ldi	r30, 0x56	; 86
    27ba:	f0 e0       	ldi	r31, 0x00	; 0
    27bc:	80 81       	ld	r24, Z
    27be:	88 23       	and	r24, r24
    27c0:	dc f7       	brge	.-10     	; 0x27b8 <IIC_enuReadData+0x1a>
	}
	else if ((TWSR & 0xF8) == 0x58) //Data+NACK //Master receive
	{
		Local_enuErrorState = ES_OK;
	}*/
		*Copy_pu8Data = TWDR;
    27c2:	e3 e2       	ldi	r30, 0x23	; 35
    27c4:	f0 e0       	ldi	r31, 0x00	; 0
    27c6:	80 81       	ld	r24, Z
    27c8:	ea 81       	ldd	r30, Y+2	; 0x02
    27ca:	fb 81       	ldd	r31, Y+3	; 0x03
    27cc:	80 83       	st	Z, r24
	Local_enuErrorState = ES_OK;
    27ce:	81 e0       	ldi	r24, 0x01	; 1
    27d0:	89 83       	std	Y+1, r24	; 0x01



	return Local_enuErrorState;
    27d2:	89 81       	ldd	r24, Y+1	; 0x01
}
    27d4:	0f 90       	pop	r0
    27d6:	0f 90       	pop	r0
    27d8:	0f 90       	pop	r0
    27da:	cf 91       	pop	r28
    27dc:	df 91       	pop	r29
    27de:	08 95       	ret

000027e0 <GIE_enuEnable>:

#include "GIE_priv.h"


ES_t GIE_enuEnable(void)
{
    27e0:	df 93       	push	r29
    27e2:	cf 93       	push	r28
    27e4:	0f 92       	push	r0
    27e6:	cd b7       	in	r28, 0x3d	; 61
    27e8:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
    27ea:	19 82       	std	Y+1, r1	; 0x01

	SREG |=(1<<7);
    27ec:	af e5       	ldi	r26, 0x5F	; 95
    27ee:	b0 e0       	ldi	r27, 0x00	; 0
    27f0:	ef e5       	ldi	r30, 0x5F	; 95
    27f2:	f0 e0       	ldi	r31, 0x00	; 0
    27f4:	80 81       	ld	r24, Z
    27f6:	80 68       	ori	r24, 0x80	; 128
    27f8:	8c 93       	st	X, r24
	Local_enuErrorState=ES_OK;
    27fa:	81 e0       	ldi	r24, 0x01	; 1
    27fc:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    27fe:	89 81       	ldd	r24, Y+1	; 0x01
}
    2800:	0f 90       	pop	r0
    2802:	cf 91       	pop	r28
    2804:	df 91       	pop	r29
    2806:	08 95       	ret

00002808 <GIE_enuDisable>:


ES_t GIE_enuDisable(void)
{
    2808:	df 93       	push	r29
    280a:	cf 93       	push	r28
    280c:	0f 92       	push	r0
    280e:	cd b7       	in	r28, 0x3d	; 61
    2810:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
    2812:	19 82       	std	Y+1, r1	; 0x01

	SREG &=~(1<<7);
    2814:	af e5       	ldi	r26, 0x5F	; 95
    2816:	b0 e0       	ldi	r27, 0x00	; 0
    2818:	ef e5       	ldi	r30, 0x5F	; 95
    281a:	f0 e0       	ldi	r31, 0x00	; 0
    281c:	80 81       	ld	r24, Z
    281e:	8f 77       	andi	r24, 0x7F	; 127
    2820:	8c 93       	st	X, r24
	Local_enuErrorState=ES_OK;
    2822:	81 e0       	ldi	r24, 0x01	; 1
    2824:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    2826:	89 81       	ldd	r24, Y+1	; 0x01
}
    2828:	0f 90       	pop	r0
    282a:	cf 91       	pop	r28
    282c:	df 91       	pop	r29
    282e:	08 95       	ret

00002830 <EINT_enuInit>:

static volatile void* EINT_ApvoidINT[3]={NULL,NULL,NULL};


ES_t EINT_enuInit(EINT_t* Copy_pstrEINT)
{
    2830:	df 93       	push	r29
    2832:	cf 93       	push	r28
    2834:	cd b7       	in	r28, 0x3d	; 61
    2836:	de b7       	in	r29, 0x3e	; 62
    2838:	2c 97       	sbiw	r28, 0x0c	; 12
    283a:	0f b6       	in	r0, 0x3f	; 63
    283c:	f8 94       	cli
    283e:	de bf       	out	0x3e, r29	; 62
    2840:	0f be       	out	0x3f, r0	; 63
    2842:	cd bf       	out	0x3d, r28	; 61
    2844:	9c 83       	std	Y+4, r25	; 0x04
    2846:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorstate=ES_NOK;
    2848:	1a 82       	std	Y+2, r1	; 0x02

	if(Copy_pstrEINT!=NULL)
    284a:	8b 81       	ldd	r24, Y+3	; 0x03
    284c:	9c 81       	ldd	r25, Y+4	; 0x04
    284e:	00 97       	sbiw	r24, 0x00	; 0
    2850:	09 f4       	brne	.+2      	; 0x2854 <EINT_enuInit+0x24>
    2852:	42 c1       	rjmp	.+644    	; 0x2ad8 <EINT_enuInit+0x2a8>
	{
		u8 Local_u8Iter=0;
    2854:	19 82       	std	Y+1, r1	; 0x01
		for(Local_u8Iter=0;Local_u8Iter<3;Local_u8Iter++)
    2856:	19 82       	std	Y+1, r1	; 0x01
    2858:	3a c1       	rjmp	.+628    	; 0x2ace <EINT_enuInit+0x29e>
		{
			if(Copy_pstrEINT[Local_u8Iter].EINT_u8State==EINT_ENABLED)
    285a:	89 81       	ldd	r24, Y+1	; 0x01
    285c:	88 2f       	mov	r24, r24
    285e:	90 e0       	ldi	r25, 0x00	; 0
    2860:	9c 01       	movw	r18, r24
    2862:	22 0f       	add	r18, r18
    2864:	33 1f       	adc	r19, r19
    2866:	8b 81       	ldd	r24, Y+3	; 0x03
    2868:	9c 81       	ldd	r25, Y+4	; 0x04
    286a:	fc 01       	movw	r30, r24
    286c:	e2 0f       	add	r30, r18
    286e:	f3 1f       	adc	r31, r19
    2870:	80 81       	ld	r24, Z
    2872:	81 30       	cpi	r24, 0x01	; 1
    2874:	09 f0       	breq	.+2      	; 0x2878 <EINT_enuInit+0x48>
    2876:	28 c1       	rjmp	.+592    	; 0x2ac8 <EINT_enuInit+0x298>
			{
				switch(Local_u8Iter)
    2878:	89 81       	ldd	r24, Y+1	; 0x01
    287a:	28 2f       	mov	r18, r24
    287c:	30 e0       	ldi	r19, 0x00	; 0
    287e:	3c 87       	std	Y+12, r19	; 0x0c
    2880:	2b 87       	std	Y+11, r18	; 0x0b
    2882:	8b 85       	ldd	r24, Y+11	; 0x0b
    2884:	9c 85       	ldd	r25, Y+12	; 0x0c
    2886:	81 30       	cpi	r24, 0x01	; 1
    2888:	91 05       	cpc	r25, r1
    288a:	09 f4       	brne	.+2      	; 0x288e <EINT_enuInit+0x5e>
    288c:	7b c0       	rjmp	.+246    	; 0x2984 <EINT_enuInit+0x154>
    288e:	2b 85       	ldd	r18, Y+11	; 0x0b
    2890:	3c 85       	ldd	r19, Y+12	; 0x0c
    2892:	22 30       	cpi	r18, 0x02	; 2
    2894:	31 05       	cpc	r19, r1
    2896:	09 f4       	brne	.+2      	; 0x289a <EINT_enuInit+0x6a>
    2898:	e5 c0       	rjmp	.+458    	; 0x2a64 <EINT_enuInit+0x234>
    289a:	8b 85       	ldd	r24, Y+11	; 0x0b
    289c:	9c 85       	ldd	r25, Y+12	; 0x0c
    289e:	00 97       	sbiw	r24, 0x00	; 0
    28a0:	09 f0       	breq	.+2      	; 0x28a4 <EINT_enuInit+0x74>
    28a2:	12 c1       	rjmp	.+548    	; 0x2ac8 <EINT_enuInit+0x298>
				{
				case 0:
					GICR |=(1<<6);//set bit6 to 1
    28a4:	ab e5       	ldi	r26, 0x5B	; 91
    28a6:	b0 e0       	ldi	r27, 0x00	; 0
    28a8:	eb e5       	ldi	r30, 0x5B	; 91
    28aa:	f0 e0       	ldi	r31, 0x00	; 0
    28ac:	80 81       	ld	r24, Z
    28ae:	80 64       	ori	r24, 0x40	; 64
    28b0:	8c 93       	st	X, r24
					switch(Copy_pstrEINT[Local_u8Iter].EINT_u8SenceLevel)
    28b2:	89 81       	ldd	r24, Y+1	; 0x01
    28b4:	88 2f       	mov	r24, r24
    28b6:	90 e0       	ldi	r25, 0x00	; 0
    28b8:	9c 01       	movw	r18, r24
    28ba:	22 0f       	add	r18, r18
    28bc:	33 1f       	adc	r19, r19
    28be:	8b 81       	ldd	r24, Y+3	; 0x03
    28c0:	9c 81       	ldd	r25, Y+4	; 0x04
    28c2:	fc 01       	movw	r30, r24
    28c4:	e2 0f       	add	r30, r18
    28c6:	f3 1f       	adc	r31, r19
    28c8:	81 81       	ldd	r24, Z+1	; 0x01
    28ca:	28 2f       	mov	r18, r24
    28cc:	30 e0       	ldi	r19, 0x00	; 0
    28ce:	3a 87       	std	Y+10, r19	; 0x0a
    28d0:	29 87       	std	Y+9, r18	; 0x09
    28d2:	89 85       	ldd	r24, Y+9	; 0x09
    28d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    28d6:	82 30       	cpi	r24, 0x02	; 2
    28d8:	91 05       	cpc	r25, r1
    28da:	29 f1       	breq	.+74     	; 0x2926 <EINT_enuInit+0xf6>
    28dc:	29 85       	ldd	r18, Y+9	; 0x09
    28de:	3a 85       	ldd	r19, Y+10	; 0x0a
    28e0:	23 30       	cpi	r18, 0x03	; 3
    28e2:	31 05       	cpc	r19, r1
    28e4:	34 f4       	brge	.+12     	; 0x28f2 <EINT_enuInit+0xc2>
    28e6:	89 85       	ldd	r24, Y+9	; 0x09
    28e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    28ea:	81 30       	cpi	r24, 0x01	; 1
    28ec:	91 05       	cpc	r25, r1
    28ee:	61 f0       	breq	.+24     	; 0x2908 <EINT_enuInit+0xd8>
    28f0:	46 c0       	rjmp	.+140    	; 0x297e <EINT_enuInit+0x14e>
    28f2:	29 85       	ldd	r18, Y+9	; 0x09
    28f4:	3a 85       	ldd	r19, Y+10	; 0x0a
    28f6:	23 30       	cpi	r18, 0x03	; 3
    28f8:	31 05       	cpc	r19, r1
    28fa:	99 f1       	breq	.+102    	; 0x2962 <EINT_enuInit+0x132>
    28fc:	89 85       	ldd	r24, Y+9	; 0x09
    28fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2900:	84 30       	cpi	r24, 0x04	; 4
    2902:	91 05       	cpc	r25, r1
    2904:	f9 f0       	breq	.+62     	; 0x2944 <EINT_enuInit+0x114>
    2906:	3b c0       	rjmp	.+118    	; 0x297e <EINT_enuInit+0x14e>
					{
					case EINT_LOW_LEVEL:
						MCUCR&=~(1<<1);
    2908:	a5 e5       	ldi	r26, 0x55	; 85
    290a:	b0 e0       	ldi	r27, 0x00	; 0
    290c:	e5 e5       	ldi	r30, 0x55	; 85
    290e:	f0 e0       	ldi	r31, 0x00	; 0
    2910:	80 81       	ld	r24, Z
    2912:	8d 7f       	andi	r24, 0xFD	; 253
    2914:	8c 93       	st	X, r24
						MCUCR&=~(1<<0);
    2916:	a5 e5       	ldi	r26, 0x55	; 85
    2918:	b0 e0       	ldi	r27, 0x00	; 0
    291a:	e5 e5       	ldi	r30, 0x55	; 85
    291c:	f0 e0       	ldi	r31, 0x00	; 0
    291e:	80 81       	ld	r24, Z
    2920:	8e 7f       	andi	r24, 0xFE	; 254
    2922:	8c 93       	st	X, r24
    2924:	2c c0       	rjmp	.+88     	; 0x297e <EINT_enuInit+0x14e>
						break;
					case EINT_ANY_LOG_CHANGE:
						MCUCR&=~(1<<1);
    2926:	a5 e5       	ldi	r26, 0x55	; 85
    2928:	b0 e0       	ldi	r27, 0x00	; 0
    292a:	e5 e5       	ldi	r30, 0x55	; 85
    292c:	f0 e0       	ldi	r31, 0x00	; 0
    292e:	80 81       	ld	r24, Z
    2930:	8d 7f       	andi	r24, 0xFD	; 253
    2932:	8c 93       	st	X, r24
						MCUCR |=(1<<0);
    2934:	a5 e5       	ldi	r26, 0x55	; 85
    2936:	b0 e0       	ldi	r27, 0x00	; 0
    2938:	e5 e5       	ldi	r30, 0x55	; 85
    293a:	f0 e0       	ldi	r31, 0x00	; 0
    293c:	80 81       	ld	r24, Z
    293e:	81 60       	ori	r24, 0x01	; 1
    2940:	8c 93       	st	X, r24
    2942:	1d c0       	rjmp	.+58     	; 0x297e <EINT_enuInit+0x14e>
						break;
					case EINT_FALLING_EDGE:
						MCUCR |=(1<<1);
    2944:	a5 e5       	ldi	r26, 0x55	; 85
    2946:	b0 e0       	ldi	r27, 0x00	; 0
    2948:	e5 e5       	ldi	r30, 0x55	; 85
    294a:	f0 e0       	ldi	r31, 0x00	; 0
    294c:	80 81       	ld	r24, Z
    294e:	82 60       	ori	r24, 0x02	; 2
    2950:	8c 93       	st	X, r24
						MCUCR&=~(1<<0);
    2952:	a5 e5       	ldi	r26, 0x55	; 85
    2954:	b0 e0       	ldi	r27, 0x00	; 0
    2956:	e5 e5       	ldi	r30, 0x55	; 85
    2958:	f0 e0       	ldi	r31, 0x00	; 0
    295a:	80 81       	ld	r24, Z
    295c:	8e 7f       	andi	r24, 0xFE	; 254
    295e:	8c 93       	st	X, r24
    2960:	0e c0       	rjmp	.+28     	; 0x297e <EINT_enuInit+0x14e>
						break;
					case EINT_RISING_EDGE:
						MCUCR |=(1<<1);
    2962:	a5 e5       	ldi	r26, 0x55	; 85
    2964:	b0 e0       	ldi	r27, 0x00	; 0
    2966:	e5 e5       	ldi	r30, 0x55	; 85
    2968:	f0 e0       	ldi	r31, 0x00	; 0
    296a:	80 81       	ld	r24, Z
    296c:	82 60       	ori	r24, 0x02	; 2
    296e:	8c 93       	st	X, r24
						MCUCR |=(1<<0);
    2970:	a5 e5       	ldi	r26, 0x55	; 85
    2972:	b0 e0       	ldi	r27, 0x00	; 0
    2974:	e5 e5       	ldi	r30, 0x55	; 85
    2976:	f0 e0       	ldi	r31, 0x00	; 0
    2978:	80 81       	ld	r24, Z
    297a:	81 60       	ori	r24, 0x01	; 1
    297c:	8c 93       	st	X, r24
						break;
					}
					Local_enuErrorstate=ES_OK;
    297e:	81 e0       	ldi	r24, 0x01	; 1
    2980:	8a 83       	std	Y+2, r24	; 0x02
    2982:	a2 c0       	rjmp	.+324    	; 0x2ac8 <EINT_enuInit+0x298>
					break;
				case 1:
					GICR |=(1<<7);//set bit7 to 1
    2984:	ab e5       	ldi	r26, 0x5B	; 91
    2986:	b0 e0       	ldi	r27, 0x00	; 0
    2988:	eb e5       	ldi	r30, 0x5B	; 91
    298a:	f0 e0       	ldi	r31, 0x00	; 0
    298c:	80 81       	ld	r24, Z
    298e:	80 68       	ori	r24, 0x80	; 128
    2990:	8c 93       	st	X, r24
					switch(Copy_pstrEINT[Local_u8Iter].EINT_u8SenceLevel)
    2992:	89 81       	ldd	r24, Y+1	; 0x01
    2994:	88 2f       	mov	r24, r24
    2996:	90 e0       	ldi	r25, 0x00	; 0
    2998:	9c 01       	movw	r18, r24
    299a:	22 0f       	add	r18, r18
    299c:	33 1f       	adc	r19, r19
    299e:	8b 81       	ldd	r24, Y+3	; 0x03
    29a0:	9c 81       	ldd	r25, Y+4	; 0x04
    29a2:	fc 01       	movw	r30, r24
    29a4:	e2 0f       	add	r30, r18
    29a6:	f3 1f       	adc	r31, r19
    29a8:	81 81       	ldd	r24, Z+1	; 0x01
    29aa:	28 2f       	mov	r18, r24
    29ac:	30 e0       	ldi	r19, 0x00	; 0
    29ae:	38 87       	std	Y+8, r19	; 0x08
    29b0:	2f 83       	std	Y+7, r18	; 0x07
    29b2:	8f 81       	ldd	r24, Y+7	; 0x07
    29b4:	98 85       	ldd	r25, Y+8	; 0x08
    29b6:	82 30       	cpi	r24, 0x02	; 2
    29b8:	91 05       	cpc	r25, r1
    29ba:	29 f1       	breq	.+74     	; 0x2a06 <EINT_enuInit+0x1d6>
    29bc:	2f 81       	ldd	r18, Y+7	; 0x07
    29be:	38 85       	ldd	r19, Y+8	; 0x08
    29c0:	23 30       	cpi	r18, 0x03	; 3
    29c2:	31 05       	cpc	r19, r1
    29c4:	34 f4       	brge	.+12     	; 0x29d2 <EINT_enuInit+0x1a2>
    29c6:	8f 81       	ldd	r24, Y+7	; 0x07
    29c8:	98 85       	ldd	r25, Y+8	; 0x08
    29ca:	81 30       	cpi	r24, 0x01	; 1
    29cc:	91 05       	cpc	r25, r1
    29ce:	61 f0       	breq	.+24     	; 0x29e8 <EINT_enuInit+0x1b8>
    29d0:	46 c0       	rjmp	.+140    	; 0x2a5e <EINT_enuInit+0x22e>
    29d2:	2f 81       	ldd	r18, Y+7	; 0x07
    29d4:	38 85       	ldd	r19, Y+8	; 0x08
    29d6:	23 30       	cpi	r18, 0x03	; 3
    29d8:	31 05       	cpc	r19, r1
    29da:	99 f1       	breq	.+102    	; 0x2a42 <EINT_enuInit+0x212>
    29dc:	8f 81       	ldd	r24, Y+7	; 0x07
    29de:	98 85       	ldd	r25, Y+8	; 0x08
    29e0:	84 30       	cpi	r24, 0x04	; 4
    29e2:	91 05       	cpc	r25, r1
    29e4:	f9 f0       	breq	.+62     	; 0x2a24 <EINT_enuInit+0x1f4>
    29e6:	3b c0       	rjmp	.+118    	; 0x2a5e <EINT_enuInit+0x22e>
					{
					case EINT_LOW_LEVEL:
						MCUCR&=~(1<<3);
    29e8:	a5 e5       	ldi	r26, 0x55	; 85
    29ea:	b0 e0       	ldi	r27, 0x00	; 0
    29ec:	e5 e5       	ldi	r30, 0x55	; 85
    29ee:	f0 e0       	ldi	r31, 0x00	; 0
    29f0:	80 81       	ld	r24, Z
    29f2:	87 7f       	andi	r24, 0xF7	; 247
    29f4:	8c 93       	st	X, r24
						MCUCR&=~(1<<2);
    29f6:	a5 e5       	ldi	r26, 0x55	; 85
    29f8:	b0 e0       	ldi	r27, 0x00	; 0
    29fa:	e5 e5       	ldi	r30, 0x55	; 85
    29fc:	f0 e0       	ldi	r31, 0x00	; 0
    29fe:	80 81       	ld	r24, Z
    2a00:	8b 7f       	andi	r24, 0xFB	; 251
    2a02:	8c 93       	st	X, r24
    2a04:	2c c0       	rjmp	.+88     	; 0x2a5e <EINT_enuInit+0x22e>
						break;
					case EINT_ANY_LOG_CHANGE:
						MCUCR&=~(1<<3);
    2a06:	a5 e5       	ldi	r26, 0x55	; 85
    2a08:	b0 e0       	ldi	r27, 0x00	; 0
    2a0a:	e5 e5       	ldi	r30, 0x55	; 85
    2a0c:	f0 e0       	ldi	r31, 0x00	; 0
    2a0e:	80 81       	ld	r24, Z
    2a10:	87 7f       	andi	r24, 0xF7	; 247
    2a12:	8c 93       	st	X, r24
						MCUCR |=(1<<2);
    2a14:	a5 e5       	ldi	r26, 0x55	; 85
    2a16:	b0 e0       	ldi	r27, 0x00	; 0
    2a18:	e5 e5       	ldi	r30, 0x55	; 85
    2a1a:	f0 e0       	ldi	r31, 0x00	; 0
    2a1c:	80 81       	ld	r24, Z
    2a1e:	84 60       	ori	r24, 0x04	; 4
    2a20:	8c 93       	st	X, r24
    2a22:	1d c0       	rjmp	.+58     	; 0x2a5e <EINT_enuInit+0x22e>
						break;
					case EINT_FALLING_EDGE:
						MCUCR |=(1<<3);
    2a24:	a5 e5       	ldi	r26, 0x55	; 85
    2a26:	b0 e0       	ldi	r27, 0x00	; 0
    2a28:	e5 e5       	ldi	r30, 0x55	; 85
    2a2a:	f0 e0       	ldi	r31, 0x00	; 0
    2a2c:	80 81       	ld	r24, Z
    2a2e:	88 60       	ori	r24, 0x08	; 8
    2a30:	8c 93       	st	X, r24
						MCUCR&=~(1<<2);
    2a32:	a5 e5       	ldi	r26, 0x55	; 85
    2a34:	b0 e0       	ldi	r27, 0x00	; 0
    2a36:	e5 e5       	ldi	r30, 0x55	; 85
    2a38:	f0 e0       	ldi	r31, 0x00	; 0
    2a3a:	80 81       	ld	r24, Z
    2a3c:	8b 7f       	andi	r24, 0xFB	; 251
    2a3e:	8c 93       	st	X, r24
    2a40:	0e c0       	rjmp	.+28     	; 0x2a5e <EINT_enuInit+0x22e>
						break;
					case EINT_RISING_EDGE:
						MCUCR |=(1<<3);
    2a42:	a5 e5       	ldi	r26, 0x55	; 85
    2a44:	b0 e0       	ldi	r27, 0x00	; 0
    2a46:	e5 e5       	ldi	r30, 0x55	; 85
    2a48:	f0 e0       	ldi	r31, 0x00	; 0
    2a4a:	80 81       	ld	r24, Z
    2a4c:	88 60       	ori	r24, 0x08	; 8
    2a4e:	8c 93       	st	X, r24
						MCUCR |=(1<<2);
    2a50:	a5 e5       	ldi	r26, 0x55	; 85
    2a52:	b0 e0       	ldi	r27, 0x00	; 0
    2a54:	e5 e5       	ldi	r30, 0x55	; 85
    2a56:	f0 e0       	ldi	r31, 0x00	; 0
    2a58:	80 81       	ld	r24, Z
    2a5a:	84 60       	ori	r24, 0x04	; 4
    2a5c:	8c 93       	st	X, r24
						break;
					}
					Local_enuErrorstate=ES_OK;
    2a5e:	81 e0       	ldi	r24, 0x01	; 1
    2a60:	8a 83       	std	Y+2, r24	; 0x02
    2a62:	32 c0       	rjmp	.+100    	; 0x2ac8 <EINT_enuInit+0x298>
					break;
				case 2:
					GICR |=(1<<5);//set bit5 to 1
    2a64:	ab e5       	ldi	r26, 0x5B	; 91
    2a66:	b0 e0       	ldi	r27, 0x00	; 0
    2a68:	eb e5       	ldi	r30, 0x5B	; 91
    2a6a:	f0 e0       	ldi	r31, 0x00	; 0
    2a6c:	80 81       	ld	r24, Z
    2a6e:	80 62       	ori	r24, 0x20	; 32
    2a70:	8c 93       	st	X, r24
					switch(Copy_pstrEINT[Local_u8Iter].EINT_u8SenceLevel)
    2a72:	89 81       	ldd	r24, Y+1	; 0x01
    2a74:	88 2f       	mov	r24, r24
    2a76:	90 e0       	ldi	r25, 0x00	; 0
    2a78:	9c 01       	movw	r18, r24
    2a7a:	22 0f       	add	r18, r18
    2a7c:	33 1f       	adc	r19, r19
    2a7e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a80:	9c 81       	ldd	r25, Y+4	; 0x04
    2a82:	fc 01       	movw	r30, r24
    2a84:	e2 0f       	add	r30, r18
    2a86:	f3 1f       	adc	r31, r19
    2a88:	81 81       	ldd	r24, Z+1	; 0x01
    2a8a:	28 2f       	mov	r18, r24
    2a8c:	30 e0       	ldi	r19, 0x00	; 0
    2a8e:	3e 83       	std	Y+6, r19	; 0x06
    2a90:	2d 83       	std	Y+5, r18	; 0x05
    2a92:	8d 81       	ldd	r24, Y+5	; 0x05
    2a94:	9e 81       	ldd	r25, Y+6	; 0x06
    2a96:	83 30       	cpi	r24, 0x03	; 3
    2a98:	91 05       	cpc	r25, r1
    2a9a:	69 f0       	breq	.+26     	; 0x2ab6 <EINT_enuInit+0x286>
    2a9c:	2d 81       	ldd	r18, Y+5	; 0x05
    2a9e:	3e 81       	ldd	r19, Y+6	; 0x06
    2aa0:	24 30       	cpi	r18, 0x04	; 4
    2aa2:	31 05       	cpc	r19, r1
    2aa4:	79 f4       	brne	.+30     	; 0x2ac4 <EINT_enuInit+0x294>
					{
					case EINT_FALLING_EDGE:
						MCUCSR&=~(1<<6);
    2aa6:	a4 e5       	ldi	r26, 0x54	; 84
    2aa8:	b0 e0       	ldi	r27, 0x00	; 0
    2aaa:	e4 e5       	ldi	r30, 0x54	; 84
    2aac:	f0 e0       	ldi	r31, 0x00	; 0
    2aae:	80 81       	ld	r24, Z
    2ab0:	8f 7b       	andi	r24, 0xBF	; 191
    2ab2:	8c 93       	st	X, r24
    2ab4:	07 c0       	rjmp	.+14     	; 0x2ac4 <EINT_enuInit+0x294>
						break;
					case EINT_RISING_EDGE:
						MCUCSR |=(1<<6);
    2ab6:	a4 e5       	ldi	r26, 0x54	; 84
    2ab8:	b0 e0       	ldi	r27, 0x00	; 0
    2aba:	e4 e5       	ldi	r30, 0x54	; 84
    2abc:	f0 e0       	ldi	r31, 0x00	; 0
    2abe:	80 81       	ld	r24, Z
    2ac0:	80 64       	ori	r24, 0x40	; 64
    2ac2:	8c 93       	st	X, r24
						break;
					}
					Local_enuErrorstate=ES_OK;
    2ac4:	81 e0       	ldi	r24, 0x01	; 1
    2ac6:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate=ES_NOK;

	if(Copy_pstrEINT!=NULL)
	{
		u8 Local_u8Iter=0;
		for(Local_u8Iter=0;Local_u8Iter<3;Local_u8Iter++)
    2ac8:	89 81       	ldd	r24, Y+1	; 0x01
    2aca:	8f 5f       	subi	r24, 0xFF	; 255
    2acc:	89 83       	std	Y+1, r24	; 0x01
    2ace:	89 81       	ldd	r24, Y+1	; 0x01
    2ad0:	83 30       	cpi	r24, 0x03	; 3
    2ad2:	08 f4       	brcc	.+2      	; 0x2ad6 <EINT_enuInit+0x2a6>
    2ad4:	c2 ce       	rjmp	.-636    	; 0x285a <EINT_enuInit+0x2a>
    2ad6:	02 c0       	rjmp	.+4      	; 0x2adc <EINT_enuInit+0x2ac>
			}
		}
	}
	else
	{
		Local_enuErrorstate=ES_NULL_POINTER;
    2ad8:	82 e0       	ldi	r24, 0x02	; 2
    2ada:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_enuErrorstate;
    2adc:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2ade:	2c 96       	adiw	r28, 0x0c	; 12
    2ae0:	0f b6       	in	r0, 0x3f	; 63
    2ae2:	f8 94       	cli
    2ae4:	de bf       	out	0x3e, r29	; 62
    2ae6:	0f be       	out	0x3f, r0	; 63
    2ae8:	cd bf       	out	0x3d, r28	; 61
    2aea:	cf 91       	pop	r28
    2aec:	df 91       	pop	r29
    2aee:	08 95       	ret

00002af0 <EINT_enuEnableINT>:

ES_t EINT_enuEnableINT(u8 Copy_u8ID)
{
    2af0:	df 93       	push	r29
    2af2:	cf 93       	push	r28
    2af4:	00 d0       	rcall	.+0      	; 0x2af6 <EINT_enuEnableINT+0x6>
    2af6:	00 d0       	rcall	.+0      	; 0x2af8 <EINT_enuEnableINT+0x8>
    2af8:	cd b7       	in	r28, 0x3d	; 61
    2afa:	de b7       	in	r29, 0x3e	; 62
    2afc:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate=ES_NOK;
    2afe:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8ID<3)
    2b00:	8a 81       	ldd	r24, Y+2	; 0x02
    2b02:	83 30       	cpi	r24, 0x03	; 3
    2b04:	88 f5       	brcc	.+98     	; 0x2b68 <EINT_enuEnableINT+0x78>
	{
		switch(Copy_u8ID)
    2b06:	8a 81       	ldd	r24, Y+2	; 0x02
    2b08:	28 2f       	mov	r18, r24
    2b0a:	30 e0       	ldi	r19, 0x00	; 0
    2b0c:	3c 83       	std	Y+4, r19	; 0x04
    2b0e:	2b 83       	std	Y+3, r18	; 0x03
    2b10:	8b 81       	ldd	r24, Y+3	; 0x03
    2b12:	9c 81       	ldd	r25, Y+4	; 0x04
    2b14:	81 30       	cpi	r24, 0x01	; 1
    2b16:	91 05       	cpc	r25, r1
    2b18:	99 f0       	breq	.+38     	; 0x2b40 <EINT_enuEnableINT+0x50>
    2b1a:	2b 81       	ldd	r18, Y+3	; 0x03
    2b1c:	3c 81       	ldd	r19, Y+4	; 0x04
    2b1e:	22 30       	cpi	r18, 0x02	; 2
    2b20:	31 05       	cpc	r19, r1
    2b22:	c1 f0       	breq	.+48     	; 0x2b54 <EINT_enuEnableINT+0x64>
    2b24:	8b 81       	ldd	r24, Y+3	; 0x03
    2b26:	9c 81       	ldd	r25, Y+4	; 0x04
    2b28:	00 97       	sbiw	r24, 0x00	; 0
    2b2a:	01 f5       	brne	.+64     	; 0x2b6c <EINT_enuEnableINT+0x7c>
		{
		case EINT0:
			GICR |=(1<<6);
    2b2c:	ab e5       	ldi	r26, 0x5B	; 91
    2b2e:	b0 e0       	ldi	r27, 0x00	; 0
    2b30:	eb e5       	ldi	r30, 0x5B	; 91
    2b32:	f0 e0       	ldi	r31, 0x00	; 0
    2b34:	80 81       	ld	r24, Z
    2b36:	80 64       	ori	r24, 0x40	; 64
    2b38:	8c 93       	st	X, r24
			Local_enuErrorstate=ES_OK;
    2b3a:	81 e0       	ldi	r24, 0x01	; 1
    2b3c:	89 83       	std	Y+1, r24	; 0x01
    2b3e:	16 c0       	rjmp	.+44     	; 0x2b6c <EINT_enuEnableINT+0x7c>
			break;
		case EINT1:
			GICR |=(1<<7);
    2b40:	ab e5       	ldi	r26, 0x5B	; 91
    2b42:	b0 e0       	ldi	r27, 0x00	; 0
    2b44:	eb e5       	ldi	r30, 0x5B	; 91
    2b46:	f0 e0       	ldi	r31, 0x00	; 0
    2b48:	80 81       	ld	r24, Z
    2b4a:	80 68       	ori	r24, 0x80	; 128
    2b4c:	8c 93       	st	X, r24
			Local_enuErrorstate=ES_OK;
    2b4e:	81 e0       	ldi	r24, 0x01	; 1
    2b50:	89 83       	std	Y+1, r24	; 0x01
    2b52:	0c c0       	rjmp	.+24     	; 0x2b6c <EINT_enuEnableINT+0x7c>
			break;
		case EINT2:
			GICR |=(1<<5);
    2b54:	ab e5       	ldi	r26, 0x5B	; 91
    2b56:	b0 e0       	ldi	r27, 0x00	; 0
    2b58:	eb e5       	ldi	r30, 0x5B	; 91
    2b5a:	f0 e0       	ldi	r31, 0x00	; 0
    2b5c:	80 81       	ld	r24, Z
    2b5e:	80 62       	ori	r24, 0x20	; 32
    2b60:	8c 93       	st	X, r24
			Local_enuErrorstate=ES_OK;
    2b62:	81 e0       	ldi	r24, 0x01	; 1
    2b64:	89 83       	std	Y+1, r24	; 0x01
    2b66:	02 c0       	rjmp	.+4      	; 0x2b6c <EINT_enuEnableINT+0x7c>
			break;
		}
	}
	else
	{
		Local_enuErrorstate=ES_OUT_OF_RANGE;
    2b68:	83 e0       	ldi	r24, 0x03	; 3
    2b6a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    2b6c:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b6e:	0f 90       	pop	r0
    2b70:	0f 90       	pop	r0
    2b72:	0f 90       	pop	r0
    2b74:	0f 90       	pop	r0
    2b76:	cf 91       	pop	r28
    2b78:	df 91       	pop	r29
    2b7a:	08 95       	ret

00002b7c <EINT_enuDisableINT>:

ES_t EINT_enuDisableINT(u8 Copy_u8ID)
{
    2b7c:	df 93       	push	r29
    2b7e:	cf 93       	push	r28
    2b80:	00 d0       	rcall	.+0      	; 0x2b82 <EINT_enuDisableINT+0x6>
    2b82:	00 d0       	rcall	.+0      	; 0x2b84 <EINT_enuDisableINT+0x8>
    2b84:	cd b7       	in	r28, 0x3d	; 61
    2b86:	de b7       	in	r29, 0x3e	; 62
    2b88:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate=ES_NOK;
    2b8a:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8ID<3)
    2b8c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b8e:	83 30       	cpi	r24, 0x03	; 3
    2b90:	88 f5       	brcc	.+98     	; 0x2bf4 <EINT_enuDisableINT+0x78>
	{
		switch(Copy_u8ID)
    2b92:	8a 81       	ldd	r24, Y+2	; 0x02
    2b94:	28 2f       	mov	r18, r24
    2b96:	30 e0       	ldi	r19, 0x00	; 0
    2b98:	3c 83       	std	Y+4, r19	; 0x04
    2b9a:	2b 83       	std	Y+3, r18	; 0x03
    2b9c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b9e:	9c 81       	ldd	r25, Y+4	; 0x04
    2ba0:	81 30       	cpi	r24, 0x01	; 1
    2ba2:	91 05       	cpc	r25, r1
    2ba4:	99 f0       	breq	.+38     	; 0x2bcc <EINT_enuDisableINT+0x50>
    2ba6:	2b 81       	ldd	r18, Y+3	; 0x03
    2ba8:	3c 81       	ldd	r19, Y+4	; 0x04
    2baa:	22 30       	cpi	r18, 0x02	; 2
    2bac:	31 05       	cpc	r19, r1
    2bae:	c1 f0       	breq	.+48     	; 0x2be0 <EINT_enuDisableINT+0x64>
    2bb0:	8b 81       	ldd	r24, Y+3	; 0x03
    2bb2:	9c 81       	ldd	r25, Y+4	; 0x04
    2bb4:	00 97       	sbiw	r24, 0x00	; 0
    2bb6:	01 f5       	brne	.+64     	; 0x2bf8 <EINT_enuDisableINT+0x7c>
		{
		case EINT0:
			GICR &=~(1<<6);
    2bb8:	ab e5       	ldi	r26, 0x5B	; 91
    2bba:	b0 e0       	ldi	r27, 0x00	; 0
    2bbc:	eb e5       	ldi	r30, 0x5B	; 91
    2bbe:	f0 e0       	ldi	r31, 0x00	; 0
    2bc0:	80 81       	ld	r24, Z
    2bc2:	8f 7b       	andi	r24, 0xBF	; 191
    2bc4:	8c 93       	st	X, r24
			Local_enuErrorstate=ES_OK;
    2bc6:	81 e0       	ldi	r24, 0x01	; 1
    2bc8:	89 83       	std	Y+1, r24	; 0x01
    2bca:	16 c0       	rjmp	.+44     	; 0x2bf8 <EINT_enuDisableINT+0x7c>
			break;
		case EINT1:
			GICR &=~(1<<7);
    2bcc:	ab e5       	ldi	r26, 0x5B	; 91
    2bce:	b0 e0       	ldi	r27, 0x00	; 0
    2bd0:	eb e5       	ldi	r30, 0x5B	; 91
    2bd2:	f0 e0       	ldi	r31, 0x00	; 0
    2bd4:	80 81       	ld	r24, Z
    2bd6:	8f 77       	andi	r24, 0x7F	; 127
    2bd8:	8c 93       	st	X, r24
			Local_enuErrorstate=ES_OK;
    2bda:	81 e0       	ldi	r24, 0x01	; 1
    2bdc:	89 83       	std	Y+1, r24	; 0x01
    2bde:	0c c0       	rjmp	.+24     	; 0x2bf8 <EINT_enuDisableINT+0x7c>
			break;
		case EINT2:
			GICR &=~(1<<5);
    2be0:	ab e5       	ldi	r26, 0x5B	; 91
    2be2:	b0 e0       	ldi	r27, 0x00	; 0
    2be4:	eb e5       	ldi	r30, 0x5B	; 91
    2be6:	f0 e0       	ldi	r31, 0x00	; 0
    2be8:	80 81       	ld	r24, Z
    2bea:	8f 7d       	andi	r24, 0xDF	; 223
    2bec:	8c 93       	st	X, r24
			Local_enuErrorstate=ES_OK;
    2bee:	81 e0       	ldi	r24, 0x01	; 1
    2bf0:	89 83       	std	Y+1, r24	; 0x01
    2bf2:	02 c0       	rjmp	.+4      	; 0x2bf8 <EINT_enuDisableINT+0x7c>
			break;
		}
	}
	else
	{
		Local_enuErrorstate=ES_OUT_OF_RANGE;
    2bf4:	83 e0       	ldi	r24, 0x03	; 3
    2bf6:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    2bf8:	89 81       	ldd	r24, Y+1	; 0x01
}
    2bfa:	0f 90       	pop	r0
    2bfc:	0f 90       	pop	r0
    2bfe:	0f 90       	pop	r0
    2c00:	0f 90       	pop	r0
    2c02:	cf 91       	pop	r28
    2c04:	df 91       	pop	r29
    2c06:	08 95       	ret

00002c08 <EINT_enuSelectSenceLevel>:

ES_t EINT_enuSelectSenceLevel(u8 Copy_u8ID , u8 Copy_u8SenceLevel)
{
    2c08:	df 93       	push	r29
    2c0a:	cf 93       	push	r28
    2c0c:	cd b7       	in	r28, 0x3d	; 61
    2c0e:	de b7       	in	r29, 0x3e	; 62
    2c10:	2b 97       	sbiw	r28, 0x0b	; 11
    2c12:	0f b6       	in	r0, 0x3f	; 63
    2c14:	f8 94       	cli
    2c16:	de bf       	out	0x3e, r29	; 62
    2c18:	0f be       	out	0x3f, r0	; 63
    2c1a:	cd bf       	out	0x3d, r28	; 61
    2c1c:	8a 83       	std	Y+2, r24	; 0x02
    2c1e:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate=ES_NOK;
    2c20:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8ID<3)
    2c22:	8a 81       	ldd	r24, Y+2	; 0x02
    2c24:	83 30       	cpi	r24, 0x03	; 3
    2c26:	08 f0       	brcs	.+2      	; 0x2c2a <EINT_enuSelectSenceLevel+0x22>
    2c28:	f3 c0       	rjmp	.+486    	; 0x2e10 <EINT_enuSelectSenceLevel+0x208>
	{
		switch(Copy_u8ID)
    2c2a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c2c:	28 2f       	mov	r18, r24
    2c2e:	30 e0       	ldi	r19, 0x00	; 0
    2c30:	3b 87       	std	Y+11, r19	; 0x0b
    2c32:	2a 87       	std	Y+10, r18	; 0x0a
    2c34:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c36:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c38:	81 30       	cpi	r24, 0x01	; 1
    2c3a:	91 05       	cpc	r25, r1
    2c3c:	09 f4       	brne	.+2      	; 0x2c40 <EINT_enuSelectSenceLevel+0x38>
    2c3e:	69 c0       	rjmp	.+210    	; 0x2d12 <EINT_enuSelectSenceLevel+0x10a>
    2c40:	2a 85       	ldd	r18, Y+10	; 0x0a
    2c42:	3b 85       	ldd	r19, Y+11	; 0x0b
    2c44:	22 30       	cpi	r18, 0x02	; 2
    2c46:	31 05       	cpc	r19, r1
    2c48:	09 f4       	brne	.+2      	; 0x2c4c <EINT_enuSelectSenceLevel+0x44>
    2c4a:	c1 c0       	rjmp	.+386    	; 0x2dce <EINT_enuSelectSenceLevel+0x1c6>
    2c4c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c4e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c50:	00 97       	sbiw	r24, 0x00	; 0
    2c52:	09 f0       	breq	.+2      	; 0x2c56 <EINT_enuSelectSenceLevel+0x4e>
    2c54:	df c0       	rjmp	.+446    	; 0x2e14 <EINT_enuSelectSenceLevel+0x20c>
		{
		case EINT0:
			switch(Copy_u8SenceLevel)
    2c56:	8b 81       	ldd	r24, Y+3	; 0x03
    2c58:	28 2f       	mov	r18, r24
    2c5a:	30 e0       	ldi	r19, 0x00	; 0
    2c5c:	39 87       	std	Y+9, r19	; 0x09
    2c5e:	28 87       	std	Y+8, r18	; 0x08
    2c60:	88 85       	ldd	r24, Y+8	; 0x08
    2c62:	99 85       	ldd	r25, Y+9	; 0x09
    2c64:	82 30       	cpi	r24, 0x02	; 2
    2c66:	91 05       	cpc	r25, r1
    2c68:	29 f1       	breq	.+74     	; 0x2cb4 <EINT_enuSelectSenceLevel+0xac>
    2c6a:	28 85       	ldd	r18, Y+8	; 0x08
    2c6c:	39 85       	ldd	r19, Y+9	; 0x09
    2c6e:	23 30       	cpi	r18, 0x03	; 3
    2c70:	31 05       	cpc	r19, r1
    2c72:	34 f4       	brge	.+12     	; 0x2c80 <EINT_enuSelectSenceLevel+0x78>
    2c74:	88 85       	ldd	r24, Y+8	; 0x08
    2c76:	99 85       	ldd	r25, Y+9	; 0x09
    2c78:	81 30       	cpi	r24, 0x01	; 1
    2c7a:	91 05       	cpc	r25, r1
    2c7c:	61 f0       	breq	.+24     	; 0x2c96 <EINT_enuSelectSenceLevel+0x8e>
    2c7e:	46 c0       	rjmp	.+140    	; 0x2d0c <EINT_enuSelectSenceLevel+0x104>
    2c80:	28 85       	ldd	r18, Y+8	; 0x08
    2c82:	39 85       	ldd	r19, Y+9	; 0x09
    2c84:	23 30       	cpi	r18, 0x03	; 3
    2c86:	31 05       	cpc	r19, r1
    2c88:	99 f1       	breq	.+102    	; 0x2cf0 <EINT_enuSelectSenceLevel+0xe8>
    2c8a:	88 85       	ldd	r24, Y+8	; 0x08
    2c8c:	99 85       	ldd	r25, Y+9	; 0x09
    2c8e:	84 30       	cpi	r24, 0x04	; 4
    2c90:	91 05       	cpc	r25, r1
    2c92:	f9 f0       	breq	.+62     	; 0x2cd2 <EINT_enuSelectSenceLevel+0xca>
    2c94:	3b c0       	rjmp	.+118    	; 0x2d0c <EINT_enuSelectSenceLevel+0x104>
			{
			case EINT_LOW_LEVEL:
				MCUCR&=~(1<<1);
    2c96:	a5 e5       	ldi	r26, 0x55	; 85
    2c98:	b0 e0       	ldi	r27, 0x00	; 0
    2c9a:	e5 e5       	ldi	r30, 0x55	; 85
    2c9c:	f0 e0       	ldi	r31, 0x00	; 0
    2c9e:	80 81       	ld	r24, Z
    2ca0:	8d 7f       	andi	r24, 0xFD	; 253
    2ca2:	8c 93       	st	X, r24
				MCUCR&=~(1<<0);
    2ca4:	a5 e5       	ldi	r26, 0x55	; 85
    2ca6:	b0 e0       	ldi	r27, 0x00	; 0
    2ca8:	e5 e5       	ldi	r30, 0x55	; 85
    2caa:	f0 e0       	ldi	r31, 0x00	; 0
    2cac:	80 81       	ld	r24, Z
    2cae:	8e 7f       	andi	r24, 0xFE	; 254
    2cb0:	8c 93       	st	X, r24
    2cb2:	2c c0       	rjmp	.+88     	; 0x2d0c <EINT_enuSelectSenceLevel+0x104>
				break;
			case EINT_ANY_LOG_CHANGE:
				MCUCR&=~(1<<1);
    2cb4:	a5 e5       	ldi	r26, 0x55	; 85
    2cb6:	b0 e0       	ldi	r27, 0x00	; 0
    2cb8:	e5 e5       	ldi	r30, 0x55	; 85
    2cba:	f0 e0       	ldi	r31, 0x00	; 0
    2cbc:	80 81       	ld	r24, Z
    2cbe:	8d 7f       	andi	r24, 0xFD	; 253
    2cc0:	8c 93       	st	X, r24
				MCUCR |=(1<<0);
    2cc2:	a5 e5       	ldi	r26, 0x55	; 85
    2cc4:	b0 e0       	ldi	r27, 0x00	; 0
    2cc6:	e5 e5       	ldi	r30, 0x55	; 85
    2cc8:	f0 e0       	ldi	r31, 0x00	; 0
    2cca:	80 81       	ld	r24, Z
    2ccc:	81 60       	ori	r24, 0x01	; 1
    2cce:	8c 93       	st	X, r24
    2cd0:	1d c0       	rjmp	.+58     	; 0x2d0c <EINT_enuSelectSenceLevel+0x104>
				break;
			case EINT_FALLING_EDGE:
				MCUCR |=(1<<1);
    2cd2:	a5 e5       	ldi	r26, 0x55	; 85
    2cd4:	b0 e0       	ldi	r27, 0x00	; 0
    2cd6:	e5 e5       	ldi	r30, 0x55	; 85
    2cd8:	f0 e0       	ldi	r31, 0x00	; 0
    2cda:	80 81       	ld	r24, Z
    2cdc:	82 60       	ori	r24, 0x02	; 2
    2cde:	8c 93       	st	X, r24
				MCUCR&=~(1<<0);
    2ce0:	a5 e5       	ldi	r26, 0x55	; 85
    2ce2:	b0 e0       	ldi	r27, 0x00	; 0
    2ce4:	e5 e5       	ldi	r30, 0x55	; 85
    2ce6:	f0 e0       	ldi	r31, 0x00	; 0
    2ce8:	80 81       	ld	r24, Z
    2cea:	8e 7f       	andi	r24, 0xFE	; 254
    2cec:	8c 93       	st	X, r24
    2cee:	0e c0       	rjmp	.+28     	; 0x2d0c <EINT_enuSelectSenceLevel+0x104>
				break;
			case EINT_RISING_EDGE:
				MCUCR |=(1<<1);
    2cf0:	a5 e5       	ldi	r26, 0x55	; 85
    2cf2:	b0 e0       	ldi	r27, 0x00	; 0
    2cf4:	e5 e5       	ldi	r30, 0x55	; 85
    2cf6:	f0 e0       	ldi	r31, 0x00	; 0
    2cf8:	80 81       	ld	r24, Z
    2cfa:	82 60       	ori	r24, 0x02	; 2
    2cfc:	8c 93       	st	X, r24
				MCUCR |=(1<<0);
    2cfe:	a5 e5       	ldi	r26, 0x55	; 85
    2d00:	b0 e0       	ldi	r27, 0x00	; 0
    2d02:	e5 e5       	ldi	r30, 0x55	; 85
    2d04:	f0 e0       	ldi	r31, 0x00	; 0
    2d06:	80 81       	ld	r24, Z
    2d08:	81 60       	ori	r24, 0x01	; 1
    2d0a:	8c 93       	st	X, r24
				break;
			}
			Local_enuErrorstate=ES_OK;
    2d0c:	81 e0       	ldi	r24, 0x01	; 1
    2d0e:	89 83       	std	Y+1, r24	; 0x01
    2d10:	81 c0       	rjmp	.+258    	; 0x2e14 <EINT_enuSelectSenceLevel+0x20c>
			break;
		case EINT1:
			switch(Copy_u8SenceLevel)
    2d12:	8b 81       	ldd	r24, Y+3	; 0x03
    2d14:	28 2f       	mov	r18, r24
    2d16:	30 e0       	ldi	r19, 0x00	; 0
    2d18:	3f 83       	std	Y+7, r19	; 0x07
    2d1a:	2e 83       	std	Y+6, r18	; 0x06
    2d1c:	8e 81       	ldd	r24, Y+6	; 0x06
    2d1e:	9f 81       	ldd	r25, Y+7	; 0x07
    2d20:	82 30       	cpi	r24, 0x02	; 2
    2d22:	91 05       	cpc	r25, r1
    2d24:	29 f1       	breq	.+74     	; 0x2d70 <EINT_enuSelectSenceLevel+0x168>
    2d26:	2e 81       	ldd	r18, Y+6	; 0x06
    2d28:	3f 81       	ldd	r19, Y+7	; 0x07
    2d2a:	23 30       	cpi	r18, 0x03	; 3
    2d2c:	31 05       	cpc	r19, r1
    2d2e:	34 f4       	brge	.+12     	; 0x2d3c <EINT_enuSelectSenceLevel+0x134>
    2d30:	8e 81       	ldd	r24, Y+6	; 0x06
    2d32:	9f 81       	ldd	r25, Y+7	; 0x07
    2d34:	81 30       	cpi	r24, 0x01	; 1
    2d36:	91 05       	cpc	r25, r1
    2d38:	61 f0       	breq	.+24     	; 0x2d52 <EINT_enuSelectSenceLevel+0x14a>
    2d3a:	46 c0       	rjmp	.+140    	; 0x2dc8 <EINT_enuSelectSenceLevel+0x1c0>
    2d3c:	2e 81       	ldd	r18, Y+6	; 0x06
    2d3e:	3f 81       	ldd	r19, Y+7	; 0x07
    2d40:	23 30       	cpi	r18, 0x03	; 3
    2d42:	31 05       	cpc	r19, r1
    2d44:	99 f1       	breq	.+102    	; 0x2dac <EINT_enuSelectSenceLevel+0x1a4>
    2d46:	8e 81       	ldd	r24, Y+6	; 0x06
    2d48:	9f 81       	ldd	r25, Y+7	; 0x07
    2d4a:	84 30       	cpi	r24, 0x04	; 4
    2d4c:	91 05       	cpc	r25, r1
    2d4e:	f9 f0       	breq	.+62     	; 0x2d8e <EINT_enuSelectSenceLevel+0x186>
    2d50:	3b c0       	rjmp	.+118    	; 0x2dc8 <EINT_enuSelectSenceLevel+0x1c0>
			{
			case EINT_LOW_LEVEL:
				MCUCR&=~(1<<3);
    2d52:	a5 e5       	ldi	r26, 0x55	; 85
    2d54:	b0 e0       	ldi	r27, 0x00	; 0
    2d56:	e5 e5       	ldi	r30, 0x55	; 85
    2d58:	f0 e0       	ldi	r31, 0x00	; 0
    2d5a:	80 81       	ld	r24, Z
    2d5c:	87 7f       	andi	r24, 0xF7	; 247
    2d5e:	8c 93       	st	X, r24
				MCUCR&=~(1<<2);
    2d60:	a5 e5       	ldi	r26, 0x55	; 85
    2d62:	b0 e0       	ldi	r27, 0x00	; 0
    2d64:	e5 e5       	ldi	r30, 0x55	; 85
    2d66:	f0 e0       	ldi	r31, 0x00	; 0
    2d68:	80 81       	ld	r24, Z
    2d6a:	8b 7f       	andi	r24, 0xFB	; 251
    2d6c:	8c 93       	st	X, r24
    2d6e:	2c c0       	rjmp	.+88     	; 0x2dc8 <EINT_enuSelectSenceLevel+0x1c0>
				break;
			case EINT_ANY_LOG_CHANGE:
				MCUCR&=~(1<<3);
    2d70:	a5 e5       	ldi	r26, 0x55	; 85
    2d72:	b0 e0       	ldi	r27, 0x00	; 0
    2d74:	e5 e5       	ldi	r30, 0x55	; 85
    2d76:	f0 e0       	ldi	r31, 0x00	; 0
    2d78:	80 81       	ld	r24, Z
    2d7a:	87 7f       	andi	r24, 0xF7	; 247
    2d7c:	8c 93       	st	X, r24
				MCUCR |=(1<<2);
    2d7e:	a5 e5       	ldi	r26, 0x55	; 85
    2d80:	b0 e0       	ldi	r27, 0x00	; 0
    2d82:	e5 e5       	ldi	r30, 0x55	; 85
    2d84:	f0 e0       	ldi	r31, 0x00	; 0
    2d86:	80 81       	ld	r24, Z
    2d88:	84 60       	ori	r24, 0x04	; 4
    2d8a:	8c 93       	st	X, r24
    2d8c:	1d c0       	rjmp	.+58     	; 0x2dc8 <EINT_enuSelectSenceLevel+0x1c0>
				break;
			case EINT_FALLING_EDGE:
				MCUCR |=(1<<3);
    2d8e:	a5 e5       	ldi	r26, 0x55	; 85
    2d90:	b0 e0       	ldi	r27, 0x00	; 0
    2d92:	e5 e5       	ldi	r30, 0x55	; 85
    2d94:	f0 e0       	ldi	r31, 0x00	; 0
    2d96:	80 81       	ld	r24, Z
    2d98:	88 60       	ori	r24, 0x08	; 8
    2d9a:	8c 93       	st	X, r24
				MCUCR&=~(1<<2);
    2d9c:	a5 e5       	ldi	r26, 0x55	; 85
    2d9e:	b0 e0       	ldi	r27, 0x00	; 0
    2da0:	e5 e5       	ldi	r30, 0x55	; 85
    2da2:	f0 e0       	ldi	r31, 0x00	; 0
    2da4:	80 81       	ld	r24, Z
    2da6:	8b 7f       	andi	r24, 0xFB	; 251
    2da8:	8c 93       	st	X, r24
    2daa:	0e c0       	rjmp	.+28     	; 0x2dc8 <EINT_enuSelectSenceLevel+0x1c0>
				break;
			case EINT_RISING_EDGE:
				MCUCR |=(1<<3);
    2dac:	a5 e5       	ldi	r26, 0x55	; 85
    2dae:	b0 e0       	ldi	r27, 0x00	; 0
    2db0:	e5 e5       	ldi	r30, 0x55	; 85
    2db2:	f0 e0       	ldi	r31, 0x00	; 0
    2db4:	80 81       	ld	r24, Z
    2db6:	88 60       	ori	r24, 0x08	; 8
    2db8:	8c 93       	st	X, r24
				MCUCR |=(1<<2);
    2dba:	a5 e5       	ldi	r26, 0x55	; 85
    2dbc:	b0 e0       	ldi	r27, 0x00	; 0
    2dbe:	e5 e5       	ldi	r30, 0x55	; 85
    2dc0:	f0 e0       	ldi	r31, 0x00	; 0
    2dc2:	80 81       	ld	r24, Z
    2dc4:	84 60       	ori	r24, 0x04	; 4
    2dc6:	8c 93       	st	X, r24
				break;
			}
			Local_enuErrorstate=ES_OK;
    2dc8:	81 e0       	ldi	r24, 0x01	; 1
    2dca:	89 83       	std	Y+1, r24	; 0x01
    2dcc:	23 c0       	rjmp	.+70     	; 0x2e14 <EINT_enuSelectSenceLevel+0x20c>
			break;
		case EINT2:
			switch(Copy_u8SenceLevel)
    2dce:	8b 81       	ldd	r24, Y+3	; 0x03
    2dd0:	28 2f       	mov	r18, r24
    2dd2:	30 e0       	ldi	r19, 0x00	; 0
    2dd4:	3d 83       	std	Y+5, r19	; 0x05
    2dd6:	2c 83       	std	Y+4, r18	; 0x04
    2dd8:	8c 81       	ldd	r24, Y+4	; 0x04
    2dda:	9d 81       	ldd	r25, Y+5	; 0x05
    2ddc:	83 30       	cpi	r24, 0x03	; 3
    2dde:	91 05       	cpc	r25, r1
    2de0:	69 f0       	breq	.+26     	; 0x2dfc <EINT_enuSelectSenceLevel+0x1f4>
    2de2:	2c 81       	ldd	r18, Y+4	; 0x04
    2de4:	3d 81       	ldd	r19, Y+5	; 0x05
    2de6:	24 30       	cpi	r18, 0x04	; 4
    2de8:	31 05       	cpc	r19, r1
    2dea:	79 f4       	brne	.+30     	; 0x2e0a <EINT_enuSelectSenceLevel+0x202>
			{
			case EINT_FALLING_EDGE:
				MCUCSR&=~(1<<6);
    2dec:	a4 e5       	ldi	r26, 0x54	; 84
    2dee:	b0 e0       	ldi	r27, 0x00	; 0
    2df0:	e4 e5       	ldi	r30, 0x54	; 84
    2df2:	f0 e0       	ldi	r31, 0x00	; 0
    2df4:	80 81       	ld	r24, Z
    2df6:	8f 7b       	andi	r24, 0xBF	; 191
    2df8:	8c 93       	st	X, r24
    2dfa:	07 c0       	rjmp	.+14     	; 0x2e0a <EINT_enuSelectSenceLevel+0x202>
				break;
			case EINT_RISING_EDGE:
				MCUCSR |=(1<<6);
    2dfc:	a4 e5       	ldi	r26, 0x54	; 84
    2dfe:	b0 e0       	ldi	r27, 0x00	; 0
    2e00:	e4 e5       	ldi	r30, 0x54	; 84
    2e02:	f0 e0       	ldi	r31, 0x00	; 0
    2e04:	80 81       	ld	r24, Z
    2e06:	80 64       	ori	r24, 0x40	; 64
    2e08:	8c 93       	st	X, r24
				break;
			}
			Local_enuErrorstate=ES_OK;
    2e0a:	81 e0       	ldi	r24, 0x01	; 1
    2e0c:	89 83       	std	Y+1, r24	; 0x01
    2e0e:	02 c0       	rjmp	.+4      	; 0x2e14 <EINT_enuSelectSenceLevel+0x20c>
			break;
		}
	}
	else
	{
		Local_enuErrorstate=ES_OUT_OF_RANGE;
    2e10:	83 e0       	ldi	r24, 0x03	; 3
    2e12:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    2e14:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e16:	2b 96       	adiw	r28, 0x0b	; 11
    2e18:	0f b6       	in	r0, 0x3f	; 63
    2e1a:	f8 94       	cli
    2e1c:	de bf       	out	0x3e, r29	; 62
    2e1e:	0f be       	out	0x3f, r0	; 63
    2e20:	cd bf       	out	0x3d, r28	; 61
    2e22:	cf 91       	pop	r28
    2e24:	df 91       	pop	r29
    2e26:	08 95       	ret

00002e28 <EINT_enuCallBack>:

ES_t EINT_enuCallBack(void *(Copy_pfun)(void *),void *Copy_pvoid,u8 Copy_u8ID)
{
    2e28:	df 93       	push	r29
    2e2a:	cf 93       	push	r28
    2e2c:	00 d0       	rcall	.+0      	; 0x2e2e <EINT_enuCallBack+0x6>
    2e2e:	00 d0       	rcall	.+0      	; 0x2e30 <EINT_enuCallBack+0x8>
    2e30:	00 d0       	rcall	.+0      	; 0x2e32 <EINT_enuCallBack+0xa>
    2e32:	cd b7       	in	r28, 0x3d	; 61
    2e34:	de b7       	in	r29, 0x3e	; 62
    2e36:	9b 83       	std	Y+3, r25	; 0x03
    2e38:	8a 83       	std	Y+2, r24	; 0x02
    2e3a:	7d 83       	std	Y+5, r23	; 0x05
    2e3c:	6c 83       	std	Y+4, r22	; 0x04
    2e3e:	4e 83       	std	Y+6, r20	; 0x06
	ES_t Local_enuErrorState=ES_NOK;
    2e40:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pfun!=NULL)
    2e42:	8a 81       	ldd	r24, Y+2	; 0x02
    2e44:	9b 81       	ldd	r25, Y+3	; 0x03
    2e46:	00 97       	sbiw	r24, 0x00	; 0
    2e48:	09 f1       	breq	.+66     	; 0x2e8c <EINT_enuCallBack+0x64>
	{
		if(Copy_u8ID<3)
    2e4a:	8e 81       	ldd	r24, Y+6	; 0x06
    2e4c:	83 30       	cpi	r24, 0x03	; 3
    2e4e:	d8 f4       	brcc	.+54     	; 0x2e86 <EINT_enuCallBack+0x5e>
		{
			EINT_pfunINT[Copy_u8ID]=Copy_pfun;
    2e50:	8e 81       	ldd	r24, Y+6	; 0x06
    2e52:	88 2f       	mov	r24, r24
    2e54:	90 e0       	ldi	r25, 0x00	; 0
    2e56:	2a 81       	ldd	r18, Y+2	; 0x02
    2e58:	3b 81       	ldd	r19, Y+3	; 0x03
    2e5a:	88 0f       	add	r24, r24
    2e5c:	99 1f       	adc	r25, r25
    2e5e:	fc 01       	movw	r30, r24
    2e60:	e8 51       	subi	r30, 0x18	; 24
    2e62:	fd 4f       	sbci	r31, 0xFD	; 253
    2e64:	31 83       	std	Z+1, r19	; 0x01
    2e66:	20 83       	st	Z, r18
			EINT_ApvoidINT[Copy_u8ID]=Copy_pvoid;
    2e68:	8e 81       	ldd	r24, Y+6	; 0x06
    2e6a:	88 2f       	mov	r24, r24
    2e6c:	90 e0       	ldi	r25, 0x00	; 0
    2e6e:	88 0f       	add	r24, r24
    2e70:	99 1f       	adc	r25, r25
    2e72:	fc 01       	movw	r30, r24
    2e74:	e2 51       	subi	r30, 0x12	; 18
    2e76:	fd 4f       	sbci	r31, 0xFD	; 253
    2e78:	8c 81       	ldd	r24, Y+4	; 0x04
    2e7a:	9d 81       	ldd	r25, Y+5	; 0x05
    2e7c:	91 83       	std	Z+1, r25	; 0x01
    2e7e:	80 83       	st	Z, r24
			Local_enuErrorState=ES_OK;
    2e80:	81 e0       	ldi	r24, 0x01	; 1
    2e82:	89 83       	std	Y+1, r24	; 0x01
    2e84:	05 c0       	rjmp	.+10     	; 0x2e90 <EINT_enuCallBack+0x68>
		}
		else
		{
			Local_enuErrorState=ES_OUT_OF_RANGE;
    2e86:	83 e0       	ldi	r24, 0x03	; 3
    2e88:	89 83       	std	Y+1, r24	; 0x01
    2e8a:	02 c0       	rjmp	.+4      	; 0x2e90 <EINT_enuCallBack+0x68>
		}
	}
	else
	{
		Local_enuErrorState=ES_NULL_POINTER;
    2e8c:	82 e0       	ldi	r24, 0x02	; 2
    2e8e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    2e90:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e92:	26 96       	adiw	r28, 0x06	; 6
    2e94:	0f b6       	in	r0, 0x3f	; 63
    2e96:	f8 94       	cli
    2e98:	de bf       	out	0x3e, r29	; 62
    2e9a:	0f be       	out	0x3f, r0	; 63
    2e9c:	cd bf       	out	0x3d, r28	; 61
    2e9e:	cf 91       	pop	r28
    2ea0:	df 91       	pop	r29
    2ea2:	08 95       	ret

00002ea4 <__vector_1>:

ISR(VECT_INT0)
{
    2ea4:	1f 92       	push	r1
    2ea6:	0f 92       	push	r0
    2ea8:	0f b6       	in	r0, 0x3f	; 63
    2eaa:	0f 92       	push	r0
    2eac:	11 24       	eor	r1, r1
    2eae:	2f 93       	push	r18
    2eb0:	3f 93       	push	r19
    2eb2:	4f 93       	push	r20
    2eb4:	5f 93       	push	r21
    2eb6:	6f 93       	push	r22
    2eb8:	7f 93       	push	r23
    2eba:	8f 93       	push	r24
    2ebc:	9f 93       	push	r25
    2ebe:	af 93       	push	r26
    2ec0:	bf 93       	push	r27
    2ec2:	ef 93       	push	r30
    2ec4:	ff 93       	push	r31
    2ec6:	df 93       	push	r29
    2ec8:	cf 93       	push	r28
    2eca:	cd b7       	in	r28, 0x3d	; 61
    2ecc:	de b7       	in	r29, 0x3e	; 62
	if(EINT_pfunINT[EINT0]!=NULL)
    2ece:	80 91 e8 02 	lds	r24, 0x02E8
    2ed2:	90 91 e9 02 	lds	r25, 0x02E9
    2ed6:	00 97       	sbiw	r24, 0x00	; 0
    2ed8:	49 f0       	breq	.+18     	; 0x2eec <__vector_1+0x48>
	{
		EINT_pfunINT[EINT0](EINT_ApvoidINT[EINT0]);
    2eda:	e0 91 e8 02 	lds	r30, 0x02E8
    2ede:	f0 91 e9 02 	lds	r31, 0x02E9
    2ee2:	80 91 ee 02 	lds	r24, 0x02EE
    2ee6:	90 91 ef 02 	lds	r25, 0x02EF
    2eea:	09 95       	icall
	}
}
    2eec:	cf 91       	pop	r28
    2eee:	df 91       	pop	r29
    2ef0:	ff 91       	pop	r31
    2ef2:	ef 91       	pop	r30
    2ef4:	bf 91       	pop	r27
    2ef6:	af 91       	pop	r26
    2ef8:	9f 91       	pop	r25
    2efa:	8f 91       	pop	r24
    2efc:	7f 91       	pop	r23
    2efe:	6f 91       	pop	r22
    2f00:	5f 91       	pop	r21
    2f02:	4f 91       	pop	r20
    2f04:	3f 91       	pop	r19
    2f06:	2f 91       	pop	r18
    2f08:	0f 90       	pop	r0
    2f0a:	0f be       	out	0x3f, r0	; 63
    2f0c:	0f 90       	pop	r0
    2f0e:	1f 90       	pop	r1
    2f10:	18 95       	reti

00002f12 <__vector_2>:
ISR(VECT_INT1)
{
    2f12:	1f 92       	push	r1
    2f14:	0f 92       	push	r0
    2f16:	0f b6       	in	r0, 0x3f	; 63
    2f18:	0f 92       	push	r0
    2f1a:	11 24       	eor	r1, r1
    2f1c:	2f 93       	push	r18
    2f1e:	3f 93       	push	r19
    2f20:	4f 93       	push	r20
    2f22:	5f 93       	push	r21
    2f24:	6f 93       	push	r22
    2f26:	7f 93       	push	r23
    2f28:	8f 93       	push	r24
    2f2a:	9f 93       	push	r25
    2f2c:	af 93       	push	r26
    2f2e:	bf 93       	push	r27
    2f30:	ef 93       	push	r30
    2f32:	ff 93       	push	r31
    2f34:	df 93       	push	r29
    2f36:	cf 93       	push	r28
    2f38:	cd b7       	in	r28, 0x3d	; 61
    2f3a:	de b7       	in	r29, 0x3e	; 62
	if(EINT_pfunINT[EINT1]!=NULL)
    2f3c:	80 91 ea 02 	lds	r24, 0x02EA
    2f40:	90 91 eb 02 	lds	r25, 0x02EB
    2f44:	00 97       	sbiw	r24, 0x00	; 0
    2f46:	49 f0       	breq	.+18     	; 0x2f5a <__vector_2+0x48>
	{
		EINT_pfunINT[EINT1](EINT_ApvoidINT[EINT1]);
    2f48:	e0 91 ea 02 	lds	r30, 0x02EA
    2f4c:	f0 91 eb 02 	lds	r31, 0x02EB
    2f50:	80 91 f0 02 	lds	r24, 0x02F0
    2f54:	90 91 f1 02 	lds	r25, 0x02F1
    2f58:	09 95       	icall
	}
}
    2f5a:	cf 91       	pop	r28
    2f5c:	df 91       	pop	r29
    2f5e:	ff 91       	pop	r31
    2f60:	ef 91       	pop	r30
    2f62:	bf 91       	pop	r27
    2f64:	af 91       	pop	r26
    2f66:	9f 91       	pop	r25
    2f68:	8f 91       	pop	r24
    2f6a:	7f 91       	pop	r23
    2f6c:	6f 91       	pop	r22
    2f6e:	5f 91       	pop	r21
    2f70:	4f 91       	pop	r20
    2f72:	3f 91       	pop	r19
    2f74:	2f 91       	pop	r18
    2f76:	0f 90       	pop	r0
    2f78:	0f be       	out	0x3f, r0	; 63
    2f7a:	0f 90       	pop	r0
    2f7c:	1f 90       	pop	r1
    2f7e:	18 95       	reti

00002f80 <__vector_3>:
ISR(VECT_INT2)
{
    2f80:	1f 92       	push	r1
    2f82:	0f 92       	push	r0
    2f84:	0f b6       	in	r0, 0x3f	; 63
    2f86:	0f 92       	push	r0
    2f88:	11 24       	eor	r1, r1
    2f8a:	2f 93       	push	r18
    2f8c:	3f 93       	push	r19
    2f8e:	4f 93       	push	r20
    2f90:	5f 93       	push	r21
    2f92:	6f 93       	push	r22
    2f94:	7f 93       	push	r23
    2f96:	8f 93       	push	r24
    2f98:	9f 93       	push	r25
    2f9a:	af 93       	push	r26
    2f9c:	bf 93       	push	r27
    2f9e:	ef 93       	push	r30
    2fa0:	ff 93       	push	r31
    2fa2:	df 93       	push	r29
    2fa4:	cf 93       	push	r28
    2fa6:	cd b7       	in	r28, 0x3d	; 61
    2fa8:	de b7       	in	r29, 0x3e	; 62
	if(EINT_pfunINT[EINT2]!=NULL)
    2faa:	80 91 ec 02 	lds	r24, 0x02EC
    2fae:	90 91 ed 02 	lds	r25, 0x02ED
    2fb2:	00 97       	sbiw	r24, 0x00	; 0
    2fb4:	49 f0       	breq	.+18     	; 0x2fc8 <__vector_3+0x48>
	{
		EINT_pfunINT[EINT2](EINT_ApvoidINT[EINT2]);
    2fb6:	e0 91 ec 02 	lds	r30, 0x02EC
    2fba:	f0 91 ed 02 	lds	r31, 0x02ED
    2fbe:	80 91 f2 02 	lds	r24, 0x02F2
    2fc2:	90 91 f3 02 	lds	r25, 0x02F3
    2fc6:	09 95       	icall
	}
}
    2fc8:	cf 91       	pop	r28
    2fca:	df 91       	pop	r29
    2fcc:	ff 91       	pop	r31
    2fce:	ef 91       	pop	r30
    2fd0:	bf 91       	pop	r27
    2fd2:	af 91       	pop	r26
    2fd4:	9f 91       	pop	r25
    2fd6:	8f 91       	pop	r24
    2fd8:	7f 91       	pop	r23
    2fda:	6f 91       	pop	r22
    2fdc:	5f 91       	pop	r21
    2fde:	4f 91       	pop	r20
    2fe0:	3f 91       	pop	r19
    2fe2:	2f 91       	pop	r18
    2fe4:	0f 90       	pop	r0
    2fe6:	0f be       	out	0x3f, r0	; 63
    2fe8:	0f 90       	pop	r0
    2fea:	1f 90       	pop	r1
    2fec:	18 95       	reti

00002fee <DIO_enuInit>:
#include "DIO_private.h"



ES_t DIO_enuInit(void)
{
    2fee:	df 93       	push	r29
    2ff0:	cf 93       	push	r28
    2ff2:	0f 92       	push	r0
    2ff4:	cd b7       	in	r28, 0x3d	; 61
    2ff6:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorstate=ES_NOK;
    2ff8:	19 82       	std	Y+1, r1	; 0x01

	DDRA= CONC(PA_PIN7_DIR,PA_PIN6_DIR,PA_PIN5_DIR,PA_PIN4_DIR,PA_PIN3_DIR,PA_PIN2_DIR,PA_PIN1_DIR,PA_PIN0_DIR);
    2ffa:	ea e3       	ldi	r30, 0x3A	; 58
    2ffc:	f0 e0       	ldi	r31, 0x00	; 0
    2ffe:	8f ef       	ldi	r24, 0xFF	; 255
    3000:	80 83       	st	Z, r24
	DDRB= CONC(PB_PIN7_DIR,PB_PIN6_DIR,PB_PIN5_DIR,PB_PIN4_DIR,PB_PIN3_DIR,PB_PIN2_DIR,PB_PIN1_DIR,PB_PIN0_DIR);
    3002:	e7 e3       	ldi	r30, 0x37	; 55
    3004:	f0 e0       	ldi	r31, 0x00	; 0
    3006:	86 e9       	ldi	r24, 0x96	; 150
    3008:	80 83       	st	Z, r24
	DDRC= CONC(PC_PIN7_DIR,PC_PIN6_DIR,PC_PIN5_DIR,PC_PIN4_DIR,PC_PIN3_DIR,PC_PIN2_DIR,PC_PIN1_DIR,PC_PIN0_DIR);
    300a:	e4 e3       	ldi	r30, 0x34	; 52
    300c:	f0 e0       	ldi	r31, 0x00	; 0
    300e:	86 e9       	ldi	r24, 0x96	; 150
    3010:	80 83       	st	Z, r24
	DDRD= CONC(PD_PIN7_DIR,PD_PIN6_DIR,PD_PIN5_DIR,PD_PIN4_DIR,PD_PIN3_DIR,PD_PIN2_DIR,PD_PIN1_DIR,PD_PIN0_DIR);
    3012:	e1 e3       	ldi	r30, 0x31	; 49
    3014:	f0 e0       	ldi	r31, 0x00	; 0
    3016:	86 e9       	ldi	r24, 0x96	; 150
    3018:	80 83       	st	Z, r24

	PORTA= CONC(PA_PIN7_VAL,PA_PIN6_VAL,PA_PIN5_VAL,PA_PIN4_VAL,PA_PIN3_VAL,PA_PIN2_VAL,PA_PIN1_VAL,PA_PIN0_VAL);
    301a:	eb e3       	ldi	r30, 0x3B	; 59
    301c:	f0 e0       	ldi	r31, 0x00	; 0
    301e:	10 82       	st	Z, r1
	PORTB= CONC(PB_PIN7_VAL,PB_PIN6_VAL,PB_PIN5_VAL,PB_PIN4_VAL,PB_PIN3_VAL,PB_PIN2_VAL,PB_PIN1_VAL,PB_PIN0_VAL);
    3020:	e8 e3       	ldi	r30, 0x38	; 56
    3022:	f0 e0       	ldi	r31, 0x00	; 0
    3024:	8a e5       	ldi	r24, 0x5A	; 90
    3026:	80 83       	st	Z, r24
	PORTC= CONC(PC_PIN7_VAL,PC_PIN6_VAL,PC_PIN5_VAL,PC_PIN4_VAL,PC_PIN3_VAL,PC_PIN2_VAL,PC_PIN1_VAL,PC_PIN0_VAL);
    3028:	e5 e3       	ldi	r30, 0x35	; 53
    302a:	f0 e0       	ldi	r31, 0x00	; 0
    302c:	8a e5       	ldi	r24, 0x5A	; 90
    302e:	80 83       	st	Z, r24
	PORTD= CONC(PD_PIN7_VAL,PD_PIN6_VAL,PD_PIN5_VAL,PD_PIN4_VAL,PD_PIN3_VAL,PD_PIN2_VAL,PD_PIN1_VAL,PD_PIN0_VAL);
    3030:	e2 e3       	ldi	r30, 0x32	; 50
    3032:	f0 e0       	ldi	r31, 0x00	; 0
    3034:	8a e5       	ldi	r24, 0x5A	; 90
    3036:	80 83       	st	Z, r24

	Local_enuErrorstate=ES_OK;
    3038:	81 e0       	ldi	r24, 0x01	; 1
    303a:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorstate;
    303c:	89 81       	ldd	r24, Y+1	; 0x01
}
    303e:	0f 90       	pop	r0
    3040:	cf 91       	pop	r28
    3042:	df 91       	pop	r29
    3044:	08 95       	ret

00003046 <DIO_enuSetPortDirection>:

ES_t DIO_enuSetPortDirection(u8 Copy_u8PortID ,u8 Copy_u8Value)
{
    3046:	df 93       	push	r29
    3048:	cf 93       	push	r28
    304a:	00 d0       	rcall	.+0      	; 0x304c <DIO_enuSetPortDirection+0x6>
    304c:	00 d0       	rcall	.+0      	; 0x304e <DIO_enuSetPortDirection+0x8>
    304e:	0f 92       	push	r0
    3050:	cd b7       	in	r28, 0x3d	; 61
    3052:	de b7       	in	r29, 0x3e	; 62
    3054:	8a 83       	std	Y+2, r24	; 0x02
    3056:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate=ES_NOK;
    3058:	19 82       	std	Y+1, r1	; 0x01

	if( Copy_u8PortID <= DIO_PORTD)
    305a:	8a 81       	ldd	r24, Y+2	; 0x02
    305c:	84 30       	cpi	r24, 0x04	; 4
    305e:	a8 f5       	brcc	.+106    	; 0x30ca <DIO_enuSetPortDirection+0x84>
	{
		switch(Copy_u8PortID)
    3060:	8a 81       	ldd	r24, Y+2	; 0x02
    3062:	28 2f       	mov	r18, r24
    3064:	30 e0       	ldi	r19, 0x00	; 0
    3066:	3d 83       	std	Y+5, r19	; 0x05
    3068:	2c 83       	std	Y+4, r18	; 0x04
    306a:	8c 81       	ldd	r24, Y+4	; 0x04
    306c:	9d 81       	ldd	r25, Y+5	; 0x05
    306e:	81 30       	cpi	r24, 0x01	; 1
    3070:	91 05       	cpc	r25, r1
    3072:	d1 f0       	breq	.+52     	; 0x30a8 <DIO_enuSetPortDirection+0x62>
    3074:	2c 81       	ldd	r18, Y+4	; 0x04
    3076:	3d 81       	ldd	r19, Y+5	; 0x05
    3078:	22 30       	cpi	r18, 0x02	; 2
    307a:	31 05       	cpc	r19, r1
    307c:	2c f4       	brge	.+10     	; 0x3088 <DIO_enuSetPortDirection+0x42>
    307e:	8c 81       	ldd	r24, Y+4	; 0x04
    3080:	9d 81       	ldd	r25, Y+5	; 0x05
    3082:	00 97       	sbiw	r24, 0x00	; 0
    3084:	61 f0       	breq	.+24     	; 0x309e <DIO_enuSetPortDirection+0x58>
    3086:	1e c0       	rjmp	.+60     	; 0x30c4 <DIO_enuSetPortDirection+0x7e>
    3088:	2c 81       	ldd	r18, Y+4	; 0x04
    308a:	3d 81       	ldd	r19, Y+5	; 0x05
    308c:	22 30       	cpi	r18, 0x02	; 2
    308e:	31 05       	cpc	r19, r1
    3090:	81 f0       	breq	.+32     	; 0x30b2 <DIO_enuSetPortDirection+0x6c>
    3092:	8c 81       	ldd	r24, Y+4	; 0x04
    3094:	9d 81       	ldd	r25, Y+5	; 0x05
    3096:	83 30       	cpi	r24, 0x03	; 3
    3098:	91 05       	cpc	r25, r1
    309a:	81 f0       	breq	.+32     	; 0x30bc <DIO_enuSetPortDirection+0x76>
    309c:	13 c0       	rjmp	.+38     	; 0x30c4 <DIO_enuSetPortDirection+0x7e>
		{
		case DIO_PORTA:
			DDRA=Copy_u8Value;
    309e:	ea e3       	ldi	r30, 0x3A	; 58
    30a0:	f0 e0       	ldi	r31, 0x00	; 0
    30a2:	8b 81       	ldd	r24, Y+3	; 0x03
    30a4:	80 83       	st	Z, r24
    30a6:	0e c0       	rjmp	.+28     	; 0x30c4 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTB:
			DDRB=Copy_u8Value;
    30a8:	e7 e3       	ldi	r30, 0x37	; 55
    30aa:	f0 e0       	ldi	r31, 0x00	; 0
    30ac:	8b 81       	ldd	r24, Y+3	; 0x03
    30ae:	80 83       	st	Z, r24
    30b0:	09 c0       	rjmp	.+18     	; 0x30c4 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTC:
			DDRC=Copy_u8Value;
    30b2:	e4 e3       	ldi	r30, 0x34	; 52
    30b4:	f0 e0       	ldi	r31, 0x00	; 0
    30b6:	8b 81       	ldd	r24, Y+3	; 0x03
    30b8:	80 83       	st	Z, r24
    30ba:	04 c0       	rjmp	.+8      	; 0x30c4 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTD:
			DDRD=Copy_u8Value;
    30bc:	e1 e3       	ldi	r30, 0x31	; 49
    30be:	f0 e0       	ldi	r31, 0x00	; 0
    30c0:	8b 81       	ldd	r24, Y+3	; 0x03
    30c2:	80 83       	st	Z, r24
			break;
		}
		 Local_enuErrorstate=ES_OK;
    30c4:	81 e0       	ldi	r24, 0x01	; 1
    30c6:	89 83       	std	Y+1, r24	; 0x01
    30c8:	02 c0       	rjmp	.+4      	; 0x30ce <DIO_enuSetPortDirection+0x88>
	}
	else
	{
		Local_enuErrorstate=ES_OUT_OF_RANGE;
    30ca:	83 e0       	ldi	r24, 0x03	; 3
    30cc:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    30ce:	89 81       	ldd	r24, Y+1	; 0x01
}
    30d0:	0f 90       	pop	r0
    30d2:	0f 90       	pop	r0
    30d4:	0f 90       	pop	r0
    30d6:	0f 90       	pop	r0
    30d8:	0f 90       	pop	r0
    30da:	cf 91       	pop	r28
    30dc:	df 91       	pop	r29
    30de:	08 95       	ret

000030e0 <DIO_enuSetPortValue>:

ES_t DIO_enuSetPortValue(u8 Copy_u8PortID ,u8 Copy_u8Value)
{
    30e0:	df 93       	push	r29
    30e2:	cf 93       	push	r28
    30e4:	00 d0       	rcall	.+0      	; 0x30e6 <DIO_enuSetPortValue+0x6>
    30e6:	00 d0       	rcall	.+0      	; 0x30e8 <DIO_enuSetPortValue+0x8>
    30e8:	0f 92       	push	r0
    30ea:	cd b7       	in	r28, 0x3d	; 61
    30ec:	de b7       	in	r29, 0x3e	; 62
    30ee:	8a 83       	std	Y+2, r24	; 0x02
    30f0:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate=ES_NOK;
    30f2:	19 82       	std	Y+1, r1	; 0x01
	if( Copy_u8PortID <= DIO_PORTD)
    30f4:	8a 81       	ldd	r24, Y+2	; 0x02
    30f6:	84 30       	cpi	r24, 0x04	; 4
    30f8:	a8 f5       	brcc	.+106    	; 0x3164 <DIO_enuSetPortValue+0x84>
	{
		switch(Copy_u8PortID)
    30fa:	8a 81       	ldd	r24, Y+2	; 0x02
    30fc:	28 2f       	mov	r18, r24
    30fe:	30 e0       	ldi	r19, 0x00	; 0
    3100:	3d 83       	std	Y+5, r19	; 0x05
    3102:	2c 83       	std	Y+4, r18	; 0x04
    3104:	8c 81       	ldd	r24, Y+4	; 0x04
    3106:	9d 81       	ldd	r25, Y+5	; 0x05
    3108:	81 30       	cpi	r24, 0x01	; 1
    310a:	91 05       	cpc	r25, r1
    310c:	d1 f0       	breq	.+52     	; 0x3142 <DIO_enuSetPortValue+0x62>
    310e:	2c 81       	ldd	r18, Y+4	; 0x04
    3110:	3d 81       	ldd	r19, Y+5	; 0x05
    3112:	22 30       	cpi	r18, 0x02	; 2
    3114:	31 05       	cpc	r19, r1
    3116:	2c f4       	brge	.+10     	; 0x3122 <DIO_enuSetPortValue+0x42>
    3118:	8c 81       	ldd	r24, Y+4	; 0x04
    311a:	9d 81       	ldd	r25, Y+5	; 0x05
    311c:	00 97       	sbiw	r24, 0x00	; 0
    311e:	61 f0       	breq	.+24     	; 0x3138 <DIO_enuSetPortValue+0x58>
    3120:	1e c0       	rjmp	.+60     	; 0x315e <DIO_enuSetPortValue+0x7e>
    3122:	2c 81       	ldd	r18, Y+4	; 0x04
    3124:	3d 81       	ldd	r19, Y+5	; 0x05
    3126:	22 30       	cpi	r18, 0x02	; 2
    3128:	31 05       	cpc	r19, r1
    312a:	81 f0       	breq	.+32     	; 0x314c <DIO_enuSetPortValue+0x6c>
    312c:	8c 81       	ldd	r24, Y+4	; 0x04
    312e:	9d 81       	ldd	r25, Y+5	; 0x05
    3130:	83 30       	cpi	r24, 0x03	; 3
    3132:	91 05       	cpc	r25, r1
    3134:	81 f0       	breq	.+32     	; 0x3156 <DIO_enuSetPortValue+0x76>
    3136:	13 c0       	rjmp	.+38     	; 0x315e <DIO_enuSetPortValue+0x7e>
		{
		case DIO_PORTA:
			PORTA=Copy_u8Value;
    3138:	eb e3       	ldi	r30, 0x3B	; 59
    313a:	f0 e0       	ldi	r31, 0x00	; 0
    313c:	8b 81       	ldd	r24, Y+3	; 0x03
    313e:	80 83       	st	Z, r24
    3140:	0e c0       	rjmp	.+28     	; 0x315e <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTB:
			PORTB=Copy_u8Value;
    3142:	e8 e3       	ldi	r30, 0x38	; 56
    3144:	f0 e0       	ldi	r31, 0x00	; 0
    3146:	8b 81       	ldd	r24, Y+3	; 0x03
    3148:	80 83       	st	Z, r24
    314a:	09 c0       	rjmp	.+18     	; 0x315e <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTC:
			PORTC=Copy_u8Value;
    314c:	e5 e3       	ldi	r30, 0x35	; 53
    314e:	f0 e0       	ldi	r31, 0x00	; 0
    3150:	8b 81       	ldd	r24, Y+3	; 0x03
    3152:	80 83       	st	Z, r24
    3154:	04 c0       	rjmp	.+8      	; 0x315e <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTD:
			PORTD=Copy_u8Value;
    3156:	e2 e3       	ldi	r30, 0x32	; 50
    3158:	f0 e0       	ldi	r31, 0x00	; 0
    315a:	8b 81       	ldd	r24, Y+3	; 0x03
    315c:	80 83       	st	Z, r24
			break;
		}
		 Local_enuErrorstate=ES_OK;
    315e:	81 e0       	ldi	r24, 0x01	; 1
    3160:	89 83       	std	Y+1, r24	; 0x01
    3162:	02 c0       	rjmp	.+4      	; 0x3168 <DIO_enuSetPortValue+0x88>
	}
	else
	{
		Local_enuErrorstate=ES_OUT_OF_RANGE;
    3164:	83 e0       	ldi	r24, 0x03	; 3
    3166:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorstate;
    3168:	89 81       	ldd	r24, Y+1	; 0x01
}
    316a:	0f 90       	pop	r0
    316c:	0f 90       	pop	r0
    316e:	0f 90       	pop	r0
    3170:	0f 90       	pop	r0
    3172:	0f 90       	pop	r0
    3174:	cf 91       	pop	r28
    3176:	df 91       	pop	r29
    3178:	08 95       	ret

0000317a <DIO_enuTogPortValue>:

ES_t DIO_enuTogPortValue(u8 Copy_u8PortID )
{
    317a:	df 93       	push	r29
    317c:	cf 93       	push	r28
    317e:	00 d0       	rcall	.+0      	; 0x3180 <DIO_enuTogPortValue+0x6>
    3180:	00 d0       	rcall	.+0      	; 0x3182 <DIO_enuTogPortValue+0x8>
    3182:	cd b7       	in	r28, 0x3d	; 61
    3184:	de b7       	in	r29, 0x3e	; 62
    3186:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate=ES_NOK;
    3188:	19 82       	std	Y+1, r1	; 0x01
	if( Copy_u8PortID <= DIO_PORTD)
    318a:	8a 81       	ldd	r24, Y+2	; 0x02
    318c:	84 30       	cpi	r24, 0x04	; 4
    318e:	08 f0       	brcs	.+2      	; 0x3192 <DIO_enuTogPortValue+0x18>
    3190:	41 c0       	rjmp	.+130    	; 0x3214 <DIO_enuTogPortValue+0x9a>
	{
		switch(Copy_u8PortID)
    3192:	8a 81       	ldd	r24, Y+2	; 0x02
    3194:	28 2f       	mov	r18, r24
    3196:	30 e0       	ldi	r19, 0x00	; 0
    3198:	3c 83       	std	Y+4, r19	; 0x04
    319a:	2b 83       	std	Y+3, r18	; 0x03
    319c:	8b 81       	ldd	r24, Y+3	; 0x03
    319e:	9c 81       	ldd	r25, Y+4	; 0x04
    31a0:	81 30       	cpi	r24, 0x01	; 1
    31a2:	91 05       	cpc	r25, r1
    31a4:	e9 f0       	breq	.+58     	; 0x31e0 <DIO_enuTogPortValue+0x66>
    31a6:	2b 81       	ldd	r18, Y+3	; 0x03
    31a8:	3c 81       	ldd	r19, Y+4	; 0x04
    31aa:	22 30       	cpi	r18, 0x02	; 2
    31ac:	31 05       	cpc	r19, r1
    31ae:	2c f4       	brge	.+10     	; 0x31ba <DIO_enuTogPortValue+0x40>
    31b0:	8b 81       	ldd	r24, Y+3	; 0x03
    31b2:	9c 81       	ldd	r25, Y+4	; 0x04
    31b4:	00 97       	sbiw	r24, 0x00	; 0
    31b6:	61 f0       	breq	.+24     	; 0x31d0 <DIO_enuTogPortValue+0x56>
    31b8:	2a c0       	rjmp	.+84     	; 0x320e <DIO_enuTogPortValue+0x94>
    31ba:	2b 81       	ldd	r18, Y+3	; 0x03
    31bc:	3c 81       	ldd	r19, Y+4	; 0x04
    31be:	22 30       	cpi	r18, 0x02	; 2
    31c0:	31 05       	cpc	r19, r1
    31c2:	b1 f0       	breq	.+44     	; 0x31f0 <DIO_enuTogPortValue+0x76>
    31c4:	8b 81       	ldd	r24, Y+3	; 0x03
    31c6:	9c 81       	ldd	r25, Y+4	; 0x04
    31c8:	83 30       	cpi	r24, 0x03	; 3
    31ca:	91 05       	cpc	r25, r1
    31cc:	c9 f0       	breq	.+50     	; 0x3200 <DIO_enuTogPortValue+0x86>
    31ce:	1f c0       	rjmp	.+62     	; 0x320e <DIO_enuTogPortValue+0x94>
		{
		case DIO_PORTA:
			PORTA=~PORTA;
    31d0:	ab e3       	ldi	r26, 0x3B	; 59
    31d2:	b0 e0       	ldi	r27, 0x00	; 0
    31d4:	eb e3       	ldi	r30, 0x3B	; 59
    31d6:	f0 e0       	ldi	r31, 0x00	; 0
    31d8:	80 81       	ld	r24, Z
    31da:	80 95       	com	r24
    31dc:	8c 93       	st	X, r24
    31de:	17 c0       	rjmp	.+46     	; 0x320e <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTB:
			PORTB=~PORTB;
    31e0:	a8 e3       	ldi	r26, 0x38	; 56
    31e2:	b0 e0       	ldi	r27, 0x00	; 0
    31e4:	e8 e3       	ldi	r30, 0x38	; 56
    31e6:	f0 e0       	ldi	r31, 0x00	; 0
    31e8:	80 81       	ld	r24, Z
    31ea:	80 95       	com	r24
    31ec:	8c 93       	st	X, r24
    31ee:	0f c0       	rjmp	.+30     	; 0x320e <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTC:
			PORTC=~PORTC;
    31f0:	a5 e3       	ldi	r26, 0x35	; 53
    31f2:	b0 e0       	ldi	r27, 0x00	; 0
    31f4:	e5 e3       	ldi	r30, 0x35	; 53
    31f6:	f0 e0       	ldi	r31, 0x00	; 0
    31f8:	80 81       	ld	r24, Z
    31fa:	80 95       	com	r24
    31fc:	8c 93       	st	X, r24
    31fe:	07 c0       	rjmp	.+14     	; 0x320e <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTD:
			PORTD=~PORTD;
    3200:	a2 e3       	ldi	r26, 0x32	; 50
    3202:	b0 e0       	ldi	r27, 0x00	; 0
    3204:	e2 e3       	ldi	r30, 0x32	; 50
    3206:	f0 e0       	ldi	r31, 0x00	; 0
    3208:	80 81       	ld	r24, Z
    320a:	80 95       	com	r24
    320c:	8c 93       	st	X, r24
			break;
		}
		 Local_enuErrorstate=ES_OK;
    320e:	81 e0       	ldi	r24, 0x01	; 1
    3210:	89 83       	std	Y+1, r24	; 0x01
    3212:	02 c0       	rjmp	.+4      	; 0x3218 <DIO_enuTogPortValue+0x9e>
	}
	else
	{
		Local_enuErrorstate=ES_OUT_OF_RANGE;
    3214:	83 e0       	ldi	r24, 0x03	; 3
    3216:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorstate;
    3218:	89 81       	ldd	r24, Y+1	; 0x01
}
    321a:	0f 90       	pop	r0
    321c:	0f 90       	pop	r0
    321e:	0f 90       	pop	r0
    3220:	0f 90       	pop	r0
    3222:	cf 91       	pop	r28
    3224:	df 91       	pop	r29
    3226:	08 95       	ret

00003228 <DIO_enuGetPortValue>:

ES_t DIO_enuGetPortValue(u8 Copy_u8PortID ,u8* Copy_pu8Value)
{
    3228:	df 93       	push	r29
    322a:	cf 93       	push	r28
    322c:	00 d0       	rcall	.+0      	; 0x322e <DIO_enuGetPortValue+0x6>
    322e:	00 d0       	rcall	.+0      	; 0x3230 <DIO_enuGetPortValue+0x8>
    3230:	00 d0       	rcall	.+0      	; 0x3232 <DIO_enuGetPortValue+0xa>
    3232:	cd b7       	in	r28, 0x3d	; 61
    3234:	de b7       	in	r29, 0x3e	; 62
    3236:	8a 83       	std	Y+2, r24	; 0x02
    3238:	7c 83       	std	Y+4, r23	; 0x04
    323a:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate=ES_NOK;
    323c:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pu8Value !=NULL)
    323e:	8b 81       	ldd	r24, Y+3	; 0x03
    3240:	9c 81       	ldd	r25, Y+4	; 0x04
    3242:	00 97       	sbiw	r24, 0x00	; 0
    3244:	09 f4       	brne	.+2      	; 0x3248 <DIO_enuGetPortValue+0x20>
    3246:	41 c0       	rjmp	.+130    	; 0x32ca <DIO_enuGetPortValue+0xa2>
	{
		if( Copy_u8PortID <= DIO_PORTD)
    3248:	8a 81       	ldd	r24, Y+2	; 0x02
    324a:	84 30       	cpi	r24, 0x04	; 4
    324c:	d8 f5       	brcc	.+118    	; 0x32c4 <DIO_enuGetPortValue+0x9c>
		{
			switch(Copy_u8PortID)
    324e:	8a 81       	ldd	r24, Y+2	; 0x02
    3250:	28 2f       	mov	r18, r24
    3252:	30 e0       	ldi	r19, 0x00	; 0
    3254:	3e 83       	std	Y+6, r19	; 0x06
    3256:	2d 83       	std	Y+5, r18	; 0x05
    3258:	8d 81       	ldd	r24, Y+5	; 0x05
    325a:	9e 81       	ldd	r25, Y+6	; 0x06
    325c:	81 30       	cpi	r24, 0x01	; 1
    325e:	91 05       	cpc	r25, r1
    3260:	e1 f0       	breq	.+56     	; 0x329a <DIO_enuGetPortValue+0x72>
    3262:	2d 81       	ldd	r18, Y+5	; 0x05
    3264:	3e 81       	ldd	r19, Y+6	; 0x06
    3266:	22 30       	cpi	r18, 0x02	; 2
    3268:	31 05       	cpc	r19, r1
    326a:	2c f4       	brge	.+10     	; 0x3276 <DIO_enuGetPortValue+0x4e>
    326c:	8d 81       	ldd	r24, Y+5	; 0x05
    326e:	9e 81       	ldd	r25, Y+6	; 0x06
    3270:	00 97       	sbiw	r24, 0x00	; 0
    3272:	61 f0       	breq	.+24     	; 0x328c <DIO_enuGetPortValue+0x64>
    3274:	2c c0       	rjmp	.+88     	; 0x32ce <DIO_enuGetPortValue+0xa6>
    3276:	2d 81       	ldd	r18, Y+5	; 0x05
    3278:	3e 81       	ldd	r19, Y+6	; 0x06
    327a:	22 30       	cpi	r18, 0x02	; 2
    327c:	31 05       	cpc	r19, r1
    327e:	a1 f0       	breq	.+40     	; 0x32a8 <DIO_enuGetPortValue+0x80>
    3280:	8d 81       	ldd	r24, Y+5	; 0x05
    3282:	9e 81       	ldd	r25, Y+6	; 0x06
    3284:	83 30       	cpi	r24, 0x03	; 3
    3286:	91 05       	cpc	r25, r1
    3288:	b1 f0       	breq	.+44     	; 0x32b6 <DIO_enuGetPortValue+0x8e>
    328a:	21 c0       	rjmp	.+66     	; 0x32ce <DIO_enuGetPortValue+0xa6>
			{
			case DIO_PORTA:
				*Copy_pu8Value=PINA;
    328c:	e9 e3       	ldi	r30, 0x39	; 57
    328e:	f0 e0       	ldi	r31, 0x00	; 0
    3290:	80 81       	ld	r24, Z
    3292:	eb 81       	ldd	r30, Y+3	; 0x03
    3294:	fc 81       	ldd	r31, Y+4	; 0x04
    3296:	80 83       	st	Z, r24
    3298:	1a c0       	rjmp	.+52     	; 0x32ce <DIO_enuGetPortValue+0xa6>
				break;
			case DIO_PORTB:
				*Copy_pu8Value=PINB;
    329a:	e6 e3       	ldi	r30, 0x36	; 54
    329c:	f0 e0       	ldi	r31, 0x00	; 0
    329e:	80 81       	ld	r24, Z
    32a0:	eb 81       	ldd	r30, Y+3	; 0x03
    32a2:	fc 81       	ldd	r31, Y+4	; 0x04
    32a4:	80 83       	st	Z, r24
    32a6:	13 c0       	rjmp	.+38     	; 0x32ce <DIO_enuGetPortValue+0xa6>
				break;
			case DIO_PORTC:
				*Copy_pu8Value=PINC;
    32a8:	e3 e3       	ldi	r30, 0x33	; 51
    32aa:	f0 e0       	ldi	r31, 0x00	; 0
    32ac:	80 81       	ld	r24, Z
    32ae:	eb 81       	ldd	r30, Y+3	; 0x03
    32b0:	fc 81       	ldd	r31, Y+4	; 0x04
    32b2:	80 83       	st	Z, r24
    32b4:	0c c0       	rjmp	.+24     	; 0x32ce <DIO_enuGetPortValue+0xa6>
				break;
			case DIO_PORTD:
				*Copy_pu8Value=PIND;
    32b6:	e0 e3       	ldi	r30, 0x30	; 48
    32b8:	f0 e0       	ldi	r31, 0x00	; 0
    32ba:	80 81       	ld	r24, Z
    32bc:	eb 81       	ldd	r30, Y+3	; 0x03
    32be:	fc 81       	ldd	r31, Y+4	; 0x04
    32c0:	80 83       	st	Z, r24
    32c2:	05 c0       	rjmp	.+10     	; 0x32ce <DIO_enuGetPortValue+0xa6>
				break;
			}
		}
		else
		{
			Local_enuErrorstate=ES_OUT_OF_RANGE;
    32c4:	83 e0       	ldi	r24, 0x03	; 3
    32c6:	89 83       	std	Y+1, r24	; 0x01
    32c8:	02 c0       	rjmp	.+4      	; 0x32ce <DIO_enuGetPortValue+0xa6>
		}
	}
	else
	{
		Local_enuErrorstate=ES_NULL_POINTER;
    32ca:	82 e0       	ldi	r24, 0x02	; 2
    32cc:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorstate;
    32ce:	89 81       	ldd	r24, Y+1	; 0x01
}
    32d0:	26 96       	adiw	r28, 0x06	; 6
    32d2:	0f b6       	in	r0, 0x3f	; 63
    32d4:	f8 94       	cli
    32d6:	de bf       	out	0x3e, r29	; 62
    32d8:	0f be       	out	0x3f, r0	; 63
    32da:	cd bf       	out	0x3d, r28	; 61
    32dc:	cf 91       	pop	r28
    32de:	df 91       	pop	r29
    32e0:	08 95       	ret

000032e2 <DIO_enuSetPinDirection>:

ES_t DIO_enuSetPinDirection(u8 Copy_u8PortID ,u8 Copy_u8PinID ,u8 Copy_u8Value)
{
    32e2:	df 93       	push	r29
    32e4:	cf 93       	push	r28
    32e6:	00 d0       	rcall	.+0      	; 0x32e8 <DIO_enuSetPinDirection+0x6>
    32e8:	00 d0       	rcall	.+0      	; 0x32ea <DIO_enuSetPinDirection+0x8>
    32ea:	00 d0       	rcall	.+0      	; 0x32ec <DIO_enuSetPinDirection+0xa>
    32ec:	cd b7       	in	r28, 0x3d	; 61
    32ee:	de b7       	in	r29, 0x3e	; 62
    32f0:	8a 83       	std	Y+2, r24	; 0x02
    32f2:	6b 83       	std	Y+3, r22	; 0x03
    32f4:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate=ES_NOK;
    32f6:	19 82       	std	Y+1, r1	; 0x01

	if( Copy_u8PortID <= DIO_PORTD && Copy_u8PinID<=DIO_PIN7 && Copy_u8Value <=OUTPUT )
    32f8:	8a 81       	ldd	r24, Y+2	; 0x02
    32fa:	84 30       	cpi	r24, 0x04	; 4
    32fc:	08 f0       	brcs	.+2      	; 0x3300 <DIO_enuSetPinDirection+0x1e>
    32fe:	d1 c0       	rjmp	.+418    	; 0x34a2 <DIO_enuSetPinDirection+0x1c0>
    3300:	8b 81       	ldd	r24, Y+3	; 0x03
    3302:	88 30       	cpi	r24, 0x08	; 8
    3304:	08 f0       	brcs	.+2      	; 0x3308 <DIO_enuSetPinDirection+0x26>
    3306:	cd c0       	rjmp	.+410    	; 0x34a2 <DIO_enuSetPinDirection+0x1c0>
    3308:	8c 81       	ldd	r24, Y+4	; 0x04
    330a:	82 30       	cpi	r24, 0x02	; 2
    330c:	08 f0       	brcs	.+2      	; 0x3310 <DIO_enuSetPinDirection+0x2e>
    330e:	c9 c0       	rjmp	.+402    	; 0x34a2 <DIO_enuSetPinDirection+0x1c0>
	{
		switch(Copy_u8PortID)
    3310:	8a 81       	ldd	r24, Y+2	; 0x02
    3312:	28 2f       	mov	r18, r24
    3314:	30 e0       	ldi	r19, 0x00	; 0
    3316:	3e 83       	std	Y+6, r19	; 0x06
    3318:	2d 83       	std	Y+5, r18	; 0x05
    331a:	6d 81       	ldd	r22, Y+5	; 0x05
    331c:	7e 81       	ldd	r23, Y+6	; 0x06
    331e:	61 30       	cpi	r22, 0x01	; 1
    3320:	71 05       	cpc	r23, r1
    3322:	09 f4       	brne	.+2      	; 0x3326 <DIO_enuSetPinDirection+0x44>
    3324:	41 c0       	rjmp	.+130    	; 0x33a8 <DIO_enuSetPinDirection+0xc6>
    3326:	8d 81       	ldd	r24, Y+5	; 0x05
    3328:	9e 81       	ldd	r25, Y+6	; 0x06
    332a:	82 30       	cpi	r24, 0x02	; 2
    332c:	91 05       	cpc	r25, r1
    332e:	34 f4       	brge	.+12     	; 0x333c <DIO_enuSetPinDirection+0x5a>
    3330:	2d 81       	ldd	r18, Y+5	; 0x05
    3332:	3e 81       	ldd	r19, Y+6	; 0x06
    3334:	21 15       	cp	r18, r1
    3336:	31 05       	cpc	r19, r1
    3338:	71 f0       	breq	.+28     	; 0x3356 <DIO_enuSetPinDirection+0x74>
    333a:	b0 c0       	rjmp	.+352    	; 0x349c <DIO_enuSetPinDirection+0x1ba>
    333c:	6d 81       	ldd	r22, Y+5	; 0x05
    333e:	7e 81       	ldd	r23, Y+6	; 0x06
    3340:	62 30       	cpi	r22, 0x02	; 2
    3342:	71 05       	cpc	r23, r1
    3344:	09 f4       	brne	.+2      	; 0x3348 <DIO_enuSetPinDirection+0x66>
    3346:	59 c0       	rjmp	.+178    	; 0x33fa <DIO_enuSetPinDirection+0x118>
    3348:	8d 81       	ldd	r24, Y+5	; 0x05
    334a:	9e 81       	ldd	r25, Y+6	; 0x06
    334c:	83 30       	cpi	r24, 0x03	; 3
    334e:	91 05       	cpc	r25, r1
    3350:	09 f4       	brne	.+2      	; 0x3354 <DIO_enuSetPinDirection+0x72>
    3352:	7c c0       	rjmp	.+248    	; 0x344c <DIO_enuSetPinDirection+0x16a>
    3354:	a3 c0       	rjmp	.+326    	; 0x349c <DIO_enuSetPinDirection+0x1ba>
		{
		case DIO_PORTA:
			DDRA&=~(DIO_MASK_BIT<<Copy_u8PinID);
    3356:	aa e3       	ldi	r26, 0x3A	; 58
    3358:	b0 e0       	ldi	r27, 0x00	; 0
    335a:	ea e3       	ldi	r30, 0x3A	; 58
    335c:	f0 e0       	ldi	r31, 0x00	; 0
    335e:	80 81       	ld	r24, Z
    3360:	48 2f       	mov	r20, r24
    3362:	8b 81       	ldd	r24, Y+3	; 0x03
    3364:	28 2f       	mov	r18, r24
    3366:	30 e0       	ldi	r19, 0x00	; 0
    3368:	81 e0       	ldi	r24, 0x01	; 1
    336a:	90 e0       	ldi	r25, 0x00	; 0
    336c:	02 c0       	rjmp	.+4      	; 0x3372 <DIO_enuSetPinDirection+0x90>
    336e:	88 0f       	add	r24, r24
    3370:	99 1f       	adc	r25, r25
    3372:	2a 95       	dec	r18
    3374:	e2 f7       	brpl	.-8      	; 0x336e <DIO_enuSetPinDirection+0x8c>
    3376:	80 95       	com	r24
    3378:	84 23       	and	r24, r20
    337a:	8c 93       	st	X, r24
			DDRA |=(Copy_u8Value<<Copy_u8PinID);
    337c:	aa e3       	ldi	r26, 0x3A	; 58
    337e:	b0 e0       	ldi	r27, 0x00	; 0
    3380:	ea e3       	ldi	r30, 0x3A	; 58
    3382:	f0 e0       	ldi	r31, 0x00	; 0
    3384:	80 81       	ld	r24, Z
    3386:	48 2f       	mov	r20, r24
    3388:	8c 81       	ldd	r24, Y+4	; 0x04
    338a:	28 2f       	mov	r18, r24
    338c:	30 e0       	ldi	r19, 0x00	; 0
    338e:	8b 81       	ldd	r24, Y+3	; 0x03
    3390:	88 2f       	mov	r24, r24
    3392:	90 e0       	ldi	r25, 0x00	; 0
    3394:	b9 01       	movw	r22, r18
    3396:	02 c0       	rjmp	.+4      	; 0x339c <DIO_enuSetPinDirection+0xba>
    3398:	66 0f       	add	r22, r22
    339a:	77 1f       	adc	r23, r23
    339c:	8a 95       	dec	r24
    339e:	e2 f7       	brpl	.-8      	; 0x3398 <DIO_enuSetPinDirection+0xb6>
    33a0:	cb 01       	movw	r24, r22
    33a2:	84 2b       	or	r24, r20
    33a4:	8c 93       	st	X, r24
    33a6:	7a c0       	rjmp	.+244    	; 0x349c <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTB:
			DDRB&=~(DIO_MASK_BIT<<Copy_u8PinID);
    33a8:	a7 e3       	ldi	r26, 0x37	; 55
    33aa:	b0 e0       	ldi	r27, 0x00	; 0
    33ac:	e7 e3       	ldi	r30, 0x37	; 55
    33ae:	f0 e0       	ldi	r31, 0x00	; 0
    33b0:	80 81       	ld	r24, Z
    33b2:	48 2f       	mov	r20, r24
    33b4:	8b 81       	ldd	r24, Y+3	; 0x03
    33b6:	28 2f       	mov	r18, r24
    33b8:	30 e0       	ldi	r19, 0x00	; 0
    33ba:	81 e0       	ldi	r24, 0x01	; 1
    33bc:	90 e0       	ldi	r25, 0x00	; 0
    33be:	02 c0       	rjmp	.+4      	; 0x33c4 <DIO_enuSetPinDirection+0xe2>
    33c0:	88 0f       	add	r24, r24
    33c2:	99 1f       	adc	r25, r25
    33c4:	2a 95       	dec	r18
    33c6:	e2 f7       	brpl	.-8      	; 0x33c0 <DIO_enuSetPinDirection+0xde>
    33c8:	80 95       	com	r24
    33ca:	84 23       	and	r24, r20
    33cc:	8c 93       	st	X, r24
			DDRB |=(Copy_u8Value<<Copy_u8PinID);
    33ce:	a7 e3       	ldi	r26, 0x37	; 55
    33d0:	b0 e0       	ldi	r27, 0x00	; 0
    33d2:	e7 e3       	ldi	r30, 0x37	; 55
    33d4:	f0 e0       	ldi	r31, 0x00	; 0
    33d6:	80 81       	ld	r24, Z
    33d8:	48 2f       	mov	r20, r24
    33da:	8c 81       	ldd	r24, Y+4	; 0x04
    33dc:	28 2f       	mov	r18, r24
    33de:	30 e0       	ldi	r19, 0x00	; 0
    33e0:	8b 81       	ldd	r24, Y+3	; 0x03
    33e2:	88 2f       	mov	r24, r24
    33e4:	90 e0       	ldi	r25, 0x00	; 0
    33e6:	b9 01       	movw	r22, r18
    33e8:	02 c0       	rjmp	.+4      	; 0x33ee <DIO_enuSetPinDirection+0x10c>
    33ea:	66 0f       	add	r22, r22
    33ec:	77 1f       	adc	r23, r23
    33ee:	8a 95       	dec	r24
    33f0:	e2 f7       	brpl	.-8      	; 0x33ea <DIO_enuSetPinDirection+0x108>
    33f2:	cb 01       	movw	r24, r22
    33f4:	84 2b       	or	r24, r20
    33f6:	8c 93       	st	X, r24
    33f8:	51 c0       	rjmp	.+162    	; 0x349c <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTC:
			DDRC&=~(DIO_MASK_BIT<<Copy_u8PinID);
    33fa:	a4 e3       	ldi	r26, 0x34	; 52
    33fc:	b0 e0       	ldi	r27, 0x00	; 0
    33fe:	e4 e3       	ldi	r30, 0x34	; 52
    3400:	f0 e0       	ldi	r31, 0x00	; 0
    3402:	80 81       	ld	r24, Z
    3404:	48 2f       	mov	r20, r24
    3406:	8b 81       	ldd	r24, Y+3	; 0x03
    3408:	28 2f       	mov	r18, r24
    340a:	30 e0       	ldi	r19, 0x00	; 0
    340c:	81 e0       	ldi	r24, 0x01	; 1
    340e:	90 e0       	ldi	r25, 0x00	; 0
    3410:	02 c0       	rjmp	.+4      	; 0x3416 <DIO_enuSetPinDirection+0x134>
    3412:	88 0f       	add	r24, r24
    3414:	99 1f       	adc	r25, r25
    3416:	2a 95       	dec	r18
    3418:	e2 f7       	brpl	.-8      	; 0x3412 <DIO_enuSetPinDirection+0x130>
    341a:	80 95       	com	r24
    341c:	84 23       	and	r24, r20
    341e:	8c 93       	st	X, r24
			DDRC |=(Copy_u8Value<<Copy_u8PinID);
    3420:	a4 e3       	ldi	r26, 0x34	; 52
    3422:	b0 e0       	ldi	r27, 0x00	; 0
    3424:	e4 e3       	ldi	r30, 0x34	; 52
    3426:	f0 e0       	ldi	r31, 0x00	; 0
    3428:	80 81       	ld	r24, Z
    342a:	48 2f       	mov	r20, r24
    342c:	8c 81       	ldd	r24, Y+4	; 0x04
    342e:	28 2f       	mov	r18, r24
    3430:	30 e0       	ldi	r19, 0x00	; 0
    3432:	8b 81       	ldd	r24, Y+3	; 0x03
    3434:	88 2f       	mov	r24, r24
    3436:	90 e0       	ldi	r25, 0x00	; 0
    3438:	b9 01       	movw	r22, r18
    343a:	02 c0       	rjmp	.+4      	; 0x3440 <DIO_enuSetPinDirection+0x15e>
    343c:	66 0f       	add	r22, r22
    343e:	77 1f       	adc	r23, r23
    3440:	8a 95       	dec	r24
    3442:	e2 f7       	brpl	.-8      	; 0x343c <DIO_enuSetPinDirection+0x15a>
    3444:	cb 01       	movw	r24, r22
    3446:	84 2b       	or	r24, r20
    3448:	8c 93       	st	X, r24
    344a:	28 c0       	rjmp	.+80     	; 0x349c <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTD:
			DDRD&=~(DIO_MASK_BIT<<Copy_u8PinID);
    344c:	a1 e3       	ldi	r26, 0x31	; 49
    344e:	b0 e0       	ldi	r27, 0x00	; 0
    3450:	e1 e3       	ldi	r30, 0x31	; 49
    3452:	f0 e0       	ldi	r31, 0x00	; 0
    3454:	80 81       	ld	r24, Z
    3456:	48 2f       	mov	r20, r24
    3458:	8b 81       	ldd	r24, Y+3	; 0x03
    345a:	28 2f       	mov	r18, r24
    345c:	30 e0       	ldi	r19, 0x00	; 0
    345e:	81 e0       	ldi	r24, 0x01	; 1
    3460:	90 e0       	ldi	r25, 0x00	; 0
    3462:	02 c0       	rjmp	.+4      	; 0x3468 <DIO_enuSetPinDirection+0x186>
    3464:	88 0f       	add	r24, r24
    3466:	99 1f       	adc	r25, r25
    3468:	2a 95       	dec	r18
    346a:	e2 f7       	brpl	.-8      	; 0x3464 <DIO_enuSetPinDirection+0x182>
    346c:	80 95       	com	r24
    346e:	84 23       	and	r24, r20
    3470:	8c 93       	st	X, r24
			DDRD |=(Copy_u8Value<<Copy_u8PinID);
    3472:	a1 e3       	ldi	r26, 0x31	; 49
    3474:	b0 e0       	ldi	r27, 0x00	; 0
    3476:	e1 e3       	ldi	r30, 0x31	; 49
    3478:	f0 e0       	ldi	r31, 0x00	; 0
    347a:	80 81       	ld	r24, Z
    347c:	48 2f       	mov	r20, r24
    347e:	8c 81       	ldd	r24, Y+4	; 0x04
    3480:	28 2f       	mov	r18, r24
    3482:	30 e0       	ldi	r19, 0x00	; 0
    3484:	8b 81       	ldd	r24, Y+3	; 0x03
    3486:	88 2f       	mov	r24, r24
    3488:	90 e0       	ldi	r25, 0x00	; 0
    348a:	b9 01       	movw	r22, r18
    348c:	02 c0       	rjmp	.+4      	; 0x3492 <DIO_enuSetPinDirection+0x1b0>
    348e:	66 0f       	add	r22, r22
    3490:	77 1f       	adc	r23, r23
    3492:	8a 95       	dec	r24
    3494:	e2 f7       	brpl	.-8      	; 0x348e <DIO_enuSetPinDirection+0x1ac>
    3496:	cb 01       	movw	r24, r22
    3498:	84 2b       	or	r24, r20
    349a:	8c 93       	st	X, r24
			break;
		}
		 Local_enuErrorstate=ES_OK;
    349c:	81 e0       	ldi	r24, 0x01	; 1
    349e:	89 83       	std	Y+1, r24	; 0x01
    34a0:	02 c0       	rjmp	.+4      	; 0x34a6 <DIO_enuSetPinDirection+0x1c4>
	}
	else
	{
		Local_enuErrorstate=ES_OUT_OF_RANGE;
    34a2:	83 e0       	ldi	r24, 0x03	; 3
    34a4:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    34a6:	89 81       	ldd	r24, Y+1	; 0x01
}
    34a8:	26 96       	adiw	r28, 0x06	; 6
    34aa:	0f b6       	in	r0, 0x3f	; 63
    34ac:	f8 94       	cli
    34ae:	de bf       	out	0x3e, r29	; 62
    34b0:	0f be       	out	0x3f, r0	; 63
    34b2:	cd bf       	out	0x3d, r28	; 61
    34b4:	cf 91       	pop	r28
    34b6:	df 91       	pop	r29
    34b8:	08 95       	ret

000034ba <DIO_enuSetPinValue>:

ES_t DIO_enuSetPinValue(u8 Copy_u8PortID ,u8 Copy_u8PinID ,u8 Copy_u8Value)
{
    34ba:	df 93       	push	r29
    34bc:	cf 93       	push	r28
    34be:	00 d0       	rcall	.+0      	; 0x34c0 <DIO_enuSetPinValue+0x6>
    34c0:	00 d0       	rcall	.+0      	; 0x34c2 <DIO_enuSetPinValue+0x8>
    34c2:	00 d0       	rcall	.+0      	; 0x34c4 <DIO_enuSetPinValue+0xa>
    34c4:	cd b7       	in	r28, 0x3d	; 61
    34c6:	de b7       	in	r29, 0x3e	; 62
    34c8:	8a 83       	std	Y+2, r24	; 0x02
    34ca:	6b 83       	std	Y+3, r22	; 0x03
    34cc:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate=ES_NOK;
    34ce:	19 82       	std	Y+1, r1	; 0x01
	if( Copy_u8PortID <= DIO_PORTD && Copy_u8PinID<=DIO_PIN7 && Copy_u8Value <=OUTPUT )
    34d0:	8a 81       	ldd	r24, Y+2	; 0x02
    34d2:	84 30       	cpi	r24, 0x04	; 4
    34d4:	08 f0       	brcs	.+2      	; 0x34d8 <DIO_enuSetPinValue+0x1e>
    34d6:	d1 c0       	rjmp	.+418    	; 0x367a <DIO_enuSetPinValue+0x1c0>
    34d8:	8b 81       	ldd	r24, Y+3	; 0x03
    34da:	88 30       	cpi	r24, 0x08	; 8
    34dc:	08 f0       	brcs	.+2      	; 0x34e0 <DIO_enuSetPinValue+0x26>
    34de:	cd c0       	rjmp	.+410    	; 0x367a <DIO_enuSetPinValue+0x1c0>
    34e0:	8c 81       	ldd	r24, Y+4	; 0x04
    34e2:	82 30       	cpi	r24, 0x02	; 2
    34e4:	08 f0       	brcs	.+2      	; 0x34e8 <DIO_enuSetPinValue+0x2e>
    34e6:	c9 c0       	rjmp	.+402    	; 0x367a <DIO_enuSetPinValue+0x1c0>
	{
		switch(Copy_u8PortID)
    34e8:	8a 81       	ldd	r24, Y+2	; 0x02
    34ea:	28 2f       	mov	r18, r24
    34ec:	30 e0       	ldi	r19, 0x00	; 0
    34ee:	3e 83       	std	Y+6, r19	; 0x06
    34f0:	2d 83       	std	Y+5, r18	; 0x05
    34f2:	6d 81       	ldd	r22, Y+5	; 0x05
    34f4:	7e 81       	ldd	r23, Y+6	; 0x06
    34f6:	61 30       	cpi	r22, 0x01	; 1
    34f8:	71 05       	cpc	r23, r1
    34fa:	09 f4       	brne	.+2      	; 0x34fe <DIO_enuSetPinValue+0x44>
    34fc:	41 c0       	rjmp	.+130    	; 0x3580 <DIO_enuSetPinValue+0xc6>
    34fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3500:	9e 81       	ldd	r25, Y+6	; 0x06
    3502:	82 30       	cpi	r24, 0x02	; 2
    3504:	91 05       	cpc	r25, r1
    3506:	34 f4       	brge	.+12     	; 0x3514 <DIO_enuSetPinValue+0x5a>
    3508:	2d 81       	ldd	r18, Y+5	; 0x05
    350a:	3e 81       	ldd	r19, Y+6	; 0x06
    350c:	21 15       	cp	r18, r1
    350e:	31 05       	cpc	r19, r1
    3510:	71 f0       	breq	.+28     	; 0x352e <DIO_enuSetPinValue+0x74>
    3512:	b0 c0       	rjmp	.+352    	; 0x3674 <DIO_enuSetPinValue+0x1ba>
    3514:	6d 81       	ldd	r22, Y+5	; 0x05
    3516:	7e 81       	ldd	r23, Y+6	; 0x06
    3518:	62 30       	cpi	r22, 0x02	; 2
    351a:	71 05       	cpc	r23, r1
    351c:	09 f4       	brne	.+2      	; 0x3520 <DIO_enuSetPinValue+0x66>
    351e:	59 c0       	rjmp	.+178    	; 0x35d2 <DIO_enuSetPinValue+0x118>
    3520:	8d 81       	ldd	r24, Y+5	; 0x05
    3522:	9e 81       	ldd	r25, Y+6	; 0x06
    3524:	83 30       	cpi	r24, 0x03	; 3
    3526:	91 05       	cpc	r25, r1
    3528:	09 f4       	brne	.+2      	; 0x352c <DIO_enuSetPinValue+0x72>
    352a:	7c c0       	rjmp	.+248    	; 0x3624 <DIO_enuSetPinValue+0x16a>
    352c:	a3 c0       	rjmp	.+326    	; 0x3674 <DIO_enuSetPinValue+0x1ba>
		{
		case DIO_PORTA:
			PORTA&=~(DIO_MASK_BIT<<Copy_u8PinID);
    352e:	ab e3       	ldi	r26, 0x3B	; 59
    3530:	b0 e0       	ldi	r27, 0x00	; 0
    3532:	eb e3       	ldi	r30, 0x3B	; 59
    3534:	f0 e0       	ldi	r31, 0x00	; 0
    3536:	80 81       	ld	r24, Z
    3538:	48 2f       	mov	r20, r24
    353a:	8b 81       	ldd	r24, Y+3	; 0x03
    353c:	28 2f       	mov	r18, r24
    353e:	30 e0       	ldi	r19, 0x00	; 0
    3540:	81 e0       	ldi	r24, 0x01	; 1
    3542:	90 e0       	ldi	r25, 0x00	; 0
    3544:	02 c0       	rjmp	.+4      	; 0x354a <DIO_enuSetPinValue+0x90>
    3546:	88 0f       	add	r24, r24
    3548:	99 1f       	adc	r25, r25
    354a:	2a 95       	dec	r18
    354c:	e2 f7       	brpl	.-8      	; 0x3546 <DIO_enuSetPinValue+0x8c>
    354e:	80 95       	com	r24
    3550:	84 23       	and	r24, r20
    3552:	8c 93       	st	X, r24
			PORTA |=(Copy_u8Value<<Copy_u8PinID);
    3554:	ab e3       	ldi	r26, 0x3B	; 59
    3556:	b0 e0       	ldi	r27, 0x00	; 0
    3558:	eb e3       	ldi	r30, 0x3B	; 59
    355a:	f0 e0       	ldi	r31, 0x00	; 0
    355c:	80 81       	ld	r24, Z
    355e:	48 2f       	mov	r20, r24
    3560:	8c 81       	ldd	r24, Y+4	; 0x04
    3562:	28 2f       	mov	r18, r24
    3564:	30 e0       	ldi	r19, 0x00	; 0
    3566:	8b 81       	ldd	r24, Y+3	; 0x03
    3568:	88 2f       	mov	r24, r24
    356a:	90 e0       	ldi	r25, 0x00	; 0
    356c:	b9 01       	movw	r22, r18
    356e:	02 c0       	rjmp	.+4      	; 0x3574 <DIO_enuSetPinValue+0xba>
    3570:	66 0f       	add	r22, r22
    3572:	77 1f       	adc	r23, r23
    3574:	8a 95       	dec	r24
    3576:	e2 f7       	brpl	.-8      	; 0x3570 <DIO_enuSetPinValue+0xb6>
    3578:	cb 01       	movw	r24, r22
    357a:	84 2b       	or	r24, r20
    357c:	8c 93       	st	X, r24
    357e:	7a c0       	rjmp	.+244    	; 0x3674 <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTB:
			PORTB&=~(DIO_MASK_BIT<<Copy_u8PinID);
    3580:	a8 e3       	ldi	r26, 0x38	; 56
    3582:	b0 e0       	ldi	r27, 0x00	; 0
    3584:	e8 e3       	ldi	r30, 0x38	; 56
    3586:	f0 e0       	ldi	r31, 0x00	; 0
    3588:	80 81       	ld	r24, Z
    358a:	48 2f       	mov	r20, r24
    358c:	8b 81       	ldd	r24, Y+3	; 0x03
    358e:	28 2f       	mov	r18, r24
    3590:	30 e0       	ldi	r19, 0x00	; 0
    3592:	81 e0       	ldi	r24, 0x01	; 1
    3594:	90 e0       	ldi	r25, 0x00	; 0
    3596:	02 c0       	rjmp	.+4      	; 0x359c <DIO_enuSetPinValue+0xe2>
    3598:	88 0f       	add	r24, r24
    359a:	99 1f       	adc	r25, r25
    359c:	2a 95       	dec	r18
    359e:	e2 f7       	brpl	.-8      	; 0x3598 <DIO_enuSetPinValue+0xde>
    35a0:	80 95       	com	r24
    35a2:	84 23       	and	r24, r20
    35a4:	8c 93       	st	X, r24
			PORTB |=(Copy_u8Value<<Copy_u8PinID);
    35a6:	a8 e3       	ldi	r26, 0x38	; 56
    35a8:	b0 e0       	ldi	r27, 0x00	; 0
    35aa:	e8 e3       	ldi	r30, 0x38	; 56
    35ac:	f0 e0       	ldi	r31, 0x00	; 0
    35ae:	80 81       	ld	r24, Z
    35b0:	48 2f       	mov	r20, r24
    35b2:	8c 81       	ldd	r24, Y+4	; 0x04
    35b4:	28 2f       	mov	r18, r24
    35b6:	30 e0       	ldi	r19, 0x00	; 0
    35b8:	8b 81       	ldd	r24, Y+3	; 0x03
    35ba:	88 2f       	mov	r24, r24
    35bc:	90 e0       	ldi	r25, 0x00	; 0
    35be:	b9 01       	movw	r22, r18
    35c0:	02 c0       	rjmp	.+4      	; 0x35c6 <DIO_enuSetPinValue+0x10c>
    35c2:	66 0f       	add	r22, r22
    35c4:	77 1f       	adc	r23, r23
    35c6:	8a 95       	dec	r24
    35c8:	e2 f7       	brpl	.-8      	; 0x35c2 <DIO_enuSetPinValue+0x108>
    35ca:	cb 01       	movw	r24, r22
    35cc:	84 2b       	or	r24, r20
    35ce:	8c 93       	st	X, r24
    35d0:	51 c0       	rjmp	.+162    	; 0x3674 <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTC:
			PORTC&=~(DIO_MASK_BIT<<Copy_u8PinID);
    35d2:	a5 e3       	ldi	r26, 0x35	; 53
    35d4:	b0 e0       	ldi	r27, 0x00	; 0
    35d6:	e5 e3       	ldi	r30, 0x35	; 53
    35d8:	f0 e0       	ldi	r31, 0x00	; 0
    35da:	80 81       	ld	r24, Z
    35dc:	48 2f       	mov	r20, r24
    35de:	8b 81       	ldd	r24, Y+3	; 0x03
    35e0:	28 2f       	mov	r18, r24
    35e2:	30 e0       	ldi	r19, 0x00	; 0
    35e4:	81 e0       	ldi	r24, 0x01	; 1
    35e6:	90 e0       	ldi	r25, 0x00	; 0
    35e8:	02 c0       	rjmp	.+4      	; 0x35ee <DIO_enuSetPinValue+0x134>
    35ea:	88 0f       	add	r24, r24
    35ec:	99 1f       	adc	r25, r25
    35ee:	2a 95       	dec	r18
    35f0:	e2 f7       	brpl	.-8      	; 0x35ea <DIO_enuSetPinValue+0x130>
    35f2:	80 95       	com	r24
    35f4:	84 23       	and	r24, r20
    35f6:	8c 93       	st	X, r24
			PORTC |=(Copy_u8Value<<Copy_u8PinID);
    35f8:	a5 e3       	ldi	r26, 0x35	; 53
    35fa:	b0 e0       	ldi	r27, 0x00	; 0
    35fc:	e5 e3       	ldi	r30, 0x35	; 53
    35fe:	f0 e0       	ldi	r31, 0x00	; 0
    3600:	80 81       	ld	r24, Z
    3602:	48 2f       	mov	r20, r24
    3604:	8c 81       	ldd	r24, Y+4	; 0x04
    3606:	28 2f       	mov	r18, r24
    3608:	30 e0       	ldi	r19, 0x00	; 0
    360a:	8b 81       	ldd	r24, Y+3	; 0x03
    360c:	88 2f       	mov	r24, r24
    360e:	90 e0       	ldi	r25, 0x00	; 0
    3610:	b9 01       	movw	r22, r18
    3612:	02 c0       	rjmp	.+4      	; 0x3618 <DIO_enuSetPinValue+0x15e>
    3614:	66 0f       	add	r22, r22
    3616:	77 1f       	adc	r23, r23
    3618:	8a 95       	dec	r24
    361a:	e2 f7       	brpl	.-8      	; 0x3614 <DIO_enuSetPinValue+0x15a>
    361c:	cb 01       	movw	r24, r22
    361e:	84 2b       	or	r24, r20
    3620:	8c 93       	st	X, r24
    3622:	28 c0       	rjmp	.+80     	; 0x3674 <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTD:
			PORTD&=~(DIO_MASK_BIT<<Copy_u8PinID);
    3624:	a2 e3       	ldi	r26, 0x32	; 50
    3626:	b0 e0       	ldi	r27, 0x00	; 0
    3628:	e2 e3       	ldi	r30, 0x32	; 50
    362a:	f0 e0       	ldi	r31, 0x00	; 0
    362c:	80 81       	ld	r24, Z
    362e:	48 2f       	mov	r20, r24
    3630:	8b 81       	ldd	r24, Y+3	; 0x03
    3632:	28 2f       	mov	r18, r24
    3634:	30 e0       	ldi	r19, 0x00	; 0
    3636:	81 e0       	ldi	r24, 0x01	; 1
    3638:	90 e0       	ldi	r25, 0x00	; 0
    363a:	02 c0       	rjmp	.+4      	; 0x3640 <DIO_enuSetPinValue+0x186>
    363c:	88 0f       	add	r24, r24
    363e:	99 1f       	adc	r25, r25
    3640:	2a 95       	dec	r18
    3642:	e2 f7       	brpl	.-8      	; 0x363c <DIO_enuSetPinValue+0x182>
    3644:	80 95       	com	r24
    3646:	84 23       	and	r24, r20
    3648:	8c 93       	st	X, r24
			PORTD |=(Copy_u8Value<<Copy_u8PinID);
    364a:	a2 e3       	ldi	r26, 0x32	; 50
    364c:	b0 e0       	ldi	r27, 0x00	; 0
    364e:	e2 e3       	ldi	r30, 0x32	; 50
    3650:	f0 e0       	ldi	r31, 0x00	; 0
    3652:	80 81       	ld	r24, Z
    3654:	48 2f       	mov	r20, r24
    3656:	8c 81       	ldd	r24, Y+4	; 0x04
    3658:	28 2f       	mov	r18, r24
    365a:	30 e0       	ldi	r19, 0x00	; 0
    365c:	8b 81       	ldd	r24, Y+3	; 0x03
    365e:	88 2f       	mov	r24, r24
    3660:	90 e0       	ldi	r25, 0x00	; 0
    3662:	b9 01       	movw	r22, r18
    3664:	02 c0       	rjmp	.+4      	; 0x366a <DIO_enuSetPinValue+0x1b0>
    3666:	66 0f       	add	r22, r22
    3668:	77 1f       	adc	r23, r23
    366a:	8a 95       	dec	r24
    366c:	e2 f7       	brpl	.-8      	; 0x3666 <DIO_enuSetPinValue+0x1ac>
    366e:	cb 01       	movw	r24, r22
    3670:	84 2b       	or	r24, r20
    3672:	8c 93       	st	X, r24
			break;
		}
		 Local_enuErrorstate=ES_OK;
    3674:	81 e0       	ldi	r24, 0x01	; 1
    3676:	89 83       	std	Y+1, r24	; 0x01
    3678:	02 c0       	rjmp	.+4      	; 0x367e <DIO_enuSetPinValue+0x1c4>
	}
	else
	{
		Local_enuErrorstate=ES_OUT_OF_RANGE;
    367a:	83 e0       	ldi	r24, 0x03	; 3
    367c:	89 83       	std	Y+1, r24	; 0x01
	}



	return Local_enuErrorstate;
    367e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3680:	26 96       	adiw	r28, 0x06	; 6
    3682:	0f b6       	in	r0, 0x3f	; 63
    3684:	f8 94       	cli
    3686:	de bf       	out	0x3e, r29	; 62
    3688:	0f be       	out	0x3f, r0	; 63
    368a:	cd bf       	out	0x3d, r28	; 61
    368c:	cf 91       	pop	r28
    368e:	df 91       	pop	r29
    3690:	08 95       	ret

00003692 <DIO_enuTogPinValue>:

ES_t DIO_enuTogPinValue(u8 Copy_u8PortID ,u8 Copy_u8PinID )
{
    3692:	df 93       	push	r29
    3694:	cf 93       	push	r28
    3696:	00 d0       	rcall	.+0      	; 0x3698 <DIO_enuTogPinValue+0x6>
    3698:	00 d0       	rcall	.+0      	; 0x369a <DIO_enuTogPinValue+0x8>
    369a:	0f 92       	push	r0
    369c:	cd b7       	in	r28, 0x3d	; 61
    369e:	de b7       	in	r29, 0x3e	; 62
    36a0:	8a 83       	std	Y+2, r24	; 0x02
    36a2:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate=ES_NOK;
    36a4:	19 82       	std	Y+1, r1	; 0x01
	if( Copy_u8PortID <= DIO_PORTD && Copy_u8PinID<=DIO_PIN7  )
    36a6:	8a 81       	ldd	r24, Y+2	; 0x02
    36a8:	84 30       	cpi	r24, 0x04	; 4
    36aa:	08 f0       	brcs	.+2      	; 0x36ae <DIO_enuTogPinValue+0x1c>
    36ac:	75 c0       	rjmp	.+234    	; 0x3798 <DIO_enuTogPinValue+0x106>
    36ae:	8b 81       	ldd	r24, Y+3	; 0x03
    36b0:	88 30       	cpi	r24, 0x08	; 8
    36b2:	08 f0       	brcs	.+2      	; 0x36b6 <DIO_enuTogPinValue+0x24>
    36b4:	71 c0       	rjmp	.+226    	; 0x3798 <DIO_enuTogPinValue+0x106>
	{
		switch(Copy_u8PortID)
    36b6:	8a 81       	ldd	r24, Y+2	; 0x02
    36b8:	28 2f       	mov	r18, r24
    36ba:	30 e0       	ldi	r19, 0x00	; 0
    36bc:	3d 83       	std	Y+5, r19	; 0x05
    36be:	2c 83       	std	Y+4, r18	; 0x04
    36c0:	8c 81       	ldd	r24, Y+4	; 0x04
    36c2:	9d 81       	ldd	r25, Y+5	; 0x05
    36c4:	81 30       	cpi	r24, 0x01	; 1
    36c6:	91 05       	cpc	r25, r1
    36c8:	49 f1       	breq	.+82     	; 0x371c <DIO_enuTogPinValue+0x8a>
    36ca:	2c 81       	ldd	r18, Y+4	; 0x04
    36cc:	3d 81       	ldd	r19, Y+5	; 0x05
    36ce:	22 30       	cpi	r18, 0x02	; 2
    36d0:	31 05       	cpc	r19, r1
    36d2:	2c f4       	brge	.+10     	; 0x36de <DIO_enuTogPinValue+0x4c>
    36d4:	8c 81       	ldd	r24, Y+4	; 0x04
    36d6:	9d 81       	ldd	r25, Y+5	; 0x05
    36d8:	00 97       	sbiw	r24, 0x00	; 0
    36da:	61 f0       	breq	.+24     	; 0x36f4 <DIO_enuTogPinValue+0x62>
    36dc:	5a c0       	rjmp	.+180    	; 0x3792 <DIO_enuTogPinValue+0x100>
    36de:	2c 81       	ldd	r18, Y+4	; 0x04
    36e0:	3d 81       	ldd	r19, Y+5	; 0x05
    36e2:	22 30       	cpi	r18, 0x02	; 2
    36e4:	31 05       	cpc	r19, r1
    36e6:	71 f1       	breq	.+92     	; 0x3744 <DIO_enuTogPinValue+0xb2>
    36e8:	8c 81       	ldd	r24, Y+4	; 0x04
    36ea:	9d 81       	ldd	r25, Y+5	; 0x05
    36ec:	83 30       	cpi	r24, 0x03	; 3
    36ee:	91 05       	cpc	r25, r1
    36f0:	e9 f1       	breq	.+122    	; 0x376c <DIO_enuTogPinValue+0xda>
    36f2:	4f c0       	rjmp	.+158    	; 0x3792 <DIO_enuTogPinValue+0x100>
		{
		case DIO_PORTA:
			PORTA ^=(DIO_MASK_BIT<<Copy_u8PinID);
    36f4:	ab e3       	ldi	r26, 0x3B	; 59
    36f6:	b0 e0       	ldi	r27, 0x00	; 0
    36f8:	eb e3       	ldi	r30, 0x3B	; 59
    36fa:	f0 e0       	ldi	r31, 0x00	; 0
    36fc:	80 81       	ld	r24, Z
    36fe:	48 2f       	mov	r20, r24
    3700:	8b 81       	ldd	r24, Y+3	; 0x03
    3702:	28 2f       	mov	r18, r24
    3704:	30 e0       	ldi	r19, 0x00	; 0
    3706:	81 e0       	ldi	r24, 0x01	; 1
    3708:	90 e0       	ldi	r25, 0x00	; 0
    370a:	02 2e       	mov	r0, r18
    370c:	02 c0       	rjmp	.+4      	; 0x3712 <DIO_enuTogPinValue+0x80>
    370e:	88 0f       	add	r24, r24
    3710:	99 1f       	adc	r25, r25
    3712:	0a 94       	dec	r0
    3714:	e2 f7       	brpl	.-8      	; 0x370e <DIO_enuTogPinValue+0x7c>
    3716:	84 27       	eor	r24, r20
    3718:	8c 93       	st	X, r24
    371a:	3b c0       	rjmp	.+118    	; 0x3792 <DIO_enuTogPinValue+0x100>
			break;
		case DIO_PORTB:
			PORTB ^=(DIO_MASK_BIT<<Copy_u8PinID);
    371c:	a8 e3       	ldi	r26, 0x38	; 56
    371e:	b0 e0       	ldi	r27, 0x00	; 0
    3720:	e8 e3       	ldi	r30, 0x38	; 56
    3722:	f0 e0       	ldi	r31, 0x00	; 0
    3724:	80 81       	ld	r24, Z
    3726:	48 2f       	mov	r20, r24
    3728:	8b 81       	ldd	r24, Y+3	; 0x03
    372a:	28 2f       	mov	r18, r24
    372c:	30 e0       	ldi	r19, 0x00	; 0
    372e:	81 e0       	ldi	r24, 0x01	; 1
    3730:	90 e0       	ldi	r25, 0x00	; 0
    3732:	02 2e       	mov	r0, r18
    3734:	02 c0       	rjmp	.+4      	; 0x373a <DIO_enuTogPinValue+0xa8>
    3736:	88 0f       	add	r24, r24
    3738:	99 1f       	adc	r25, r25
    373a:	0a 94       	dec	r0
    373c:	e2 f7       	brpl	.-8      	; 0x3736 <DIO_enuTogPinValue+0xa4>
    373e:	84 27       	eor	r24, r20
    3740:	8c 93       	st	X, r24
    3742:	27 c0       	rjmp	.+78     	; 0x3792 <DIO_enuTogPinValue+0x100>
			break;
		case DIO_PORTC:
			PORTC ^=(DIO_MASK_BIT<<Copy_u8PinID);
    3744:	a5 e3       	ldi	r26, 0x35	; 53
    3746:	b0 e0       	ldi	r27, 0x00	; 0
    3748:	e5 e3       	ldi	r30, 0x35	; 53
    374a:	f0 e0       	ldi	r31, 0x00	; 0
    374c:	80 81       	ld	r24, Z
    374e:	48 2f       	mov	r20, r24
    3750:	8b 81       	ldd	r24, Y+3	; 0x03
    3752:	28 2f       	mov	r18, r24
    3754:	30 e0       	ldi	r19, 0x00	; 0
    3756:	81 e0       	ldi	r24, 0x01	; 1
    3758:	90 e0       	ldi	r25, 0x00	; 0
    375a:	02 2e       	mov	r0, r18
    375c:	02 c0       	rjmp	.+4      	; 0x3762 <DIO_enuTogPinValue+0xd0>
    375e:	88 0f       	add	r24, r24
    3760:	99 1f       	adc	r25, r25
    3762:	0a 94       	dec	r0
    3764:	e2 f7       	brpl	.-8      	; 0x375e <DIO_enuTogPinValue+0xcc>
    3766:	84 27       	eor	r24, r20
    3768:	8c 93       	st	X, r24
    376a:	13 c0       	rjmp	.+38     	; 0x3792 <DIO_enuTogPinValue+0x100>
			break;
		case DIO_PORTD:
			PORTD ^=(DIO_MASK_BIT<<Copy_u8PinID);
    376c:	a2 e3       	ldi	r26, 0x32	; 50
    376e:	b0 e0       	ldi	r27, 0x00	; 0
    3770:	e2 e3       	ldi	r30, 0x32	; 50
    3772:	f0 e0       	ldi	r31, 0x00	; 0
    3774:	80 81       	ld	r24, Z
    3776:	48 2f       	mov	r20, r24
    3778:	8b 81       	ldd	r24, Y+3	; 0x03
    377a:	28 2f       	mov	r18, r24
    377c:	30 e0       	ldi	r19, 0x00	; 0
    377e:	81 e0       	ldi	r24, 0x01	; 1
    3780:	90 e0       	ldi	r25, 0x00	; 0
    3782:	02 2e       	mov	r0, r18
    3784:	02 c0       	rjmp	.+4      	; 0x378a <DIO_enuTogPinValue+0xf8>
    3786:	88 0f       	add	r24, r24
    3788:	99 1f       	adc	r25, r25
    378a:	0a 94       	dec	r0
    378c:	e2 f7       	brpl	.-8      	; 0x3786 <DIO_enuTogPinValue+0xf4>
    378e:	84 27       	eor	r24, r20
    3790:	8c 93       	st	X, r24
			break;
		}
		 Local_enuErrorstate=ES_OK;
    3792:	81 e0       	ldi	r24, 0x01	; 1
    3794:	89 83       	std	Y+1, r24	; 0x01
    3796:	02 c0       	rjmp	.+4      	; 0x379c <DIO_enuTogPinValue+0x10a>
	}
	else
	{
		Local_enuErrorstate=ES_OUT_OF_RANGE;
    3798:	83 e0       	ldi	r24, 0x03	; 3
    379a:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorstate;
    379c:	89 81       	ldd	r24, Y+1	; 0x01
}
    379e:	0f 90       	pop	r0
    37a0:	0f 90       	pop	r0
    37a2:	0f 90       	pop	r0
    37a4:	0f 90       	pop	r0
    37a6:	0f 90       	pop	r0
    37a8:	cf 91       	pop	r28
    37aa:	df 91       	pop	r29
    37ac:	08 95       	ret

000037ae <DIO_enuGetPinValue>:

ES_t DIO_enuGetPinValue(u8 Copy_u8PortID ,u8 Copy_u8PinID ,u8* Copy_pu8Value)
{
    37ae:	df 93       	push	r29
    37b0:	cf 93       	push	r28
    37b2:	cd b7       	in	r28, 0x3d	; 61
    37b4:	de b7       	in	r29, 0x3e	; 62
    37b6:	27 97       	sbiw	r28, 0x07	; 7
    37b8:	0f b6       	in	r0, 0x3f	; 63
    37ba:	f8 94       	cli
    37bc:	de bf       	out	0x3e, r29	; 62
    37be:	0f be       	out	0x3f, r0	; 63
    37c0:	cd bf       	out	0x3d, r28	; 61
    37c2:	8a 83       	std	Y+2, r24	; 0x02
    37c4:	6b 83       	std	Y+3, r22	; 0x03
    37c6:	5d 83       	std	Y+5, r21	; 0x05
    37c8:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate=ES_NOK;
    37ca:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pu8Value !=NULL)
    37cc:	8c 81       	ldd	r24, Y+4	; 0x04
    37ce:	9d 81       	ldd	r25, Y+5	; 0x05
    37d0:	00 97       	sbiw	r24, 0x00	; 0
    37d2:	09 f4       	brne	.+2      	; 0x37d6 <DIO_enuGetPinValue+0x28>
    37d4:	7c c0       	rjmp	.+248    	; 0x38ce <DIO_enuGetPinValue+0x120>
	{
		if( Copy_u8PortID <= DIO_PORTD && Copy_u8PinID<=DIO_PIN7 )
    37d6:	8a 81       	ldd	r24, Y+2	; 0x02
    37d8:	84 30       	cpi	r24, 0x04	; 4
    37da:	08 f0       	brcs	.+2      	; 0x37de <DIO_enuGetPinValue+0x30>
    37dc:	75 c0       	rjmp	.+234    	; 0x38c8 <DIO_enuGetPinValue+0x11a>
    37de:	8b 81       	ldd	r24, Y+3	; 0x03
    37e0:	88 30       	cpi	r24, 0x08	; 8
    37e2:	08 f0       	brcs	.+2      	; 0x37e6 <DIO_enuGetPinValue+0x38>
    37e4:	71 c0       	rjmp	.+226    	; 0x38c8 <DIO_enuGetPinValue+0x11a>
		{
			switch(Copy_u8PortID)
    37e6:	8a 81       	ldd	r24, Y+2	; 0x02
    37e8:	28 2f       	mov	r18, r24
    37ea:	30 e0       	ldi	r19, 0x00	; 0
    37ec:	3f 83       	std	Y+7, r19	; 0x07
    37ee:	2e 83       	std	Y+6, r18	; 0x06
    37f0:	4e 81       	ldd	r20, Y+6	; 0x06
    37f2:	5f 81       	ldd	r21, Y+7	; 0x07
    37f4:	41 30       	cpi	r20, 0x01	; 1
    37f6:	51 05       	cpc	r21, r1
    37f8:	59 f1       	breq	.+86     	; 0x3850 <DIO_enuGetPinValue+0xa2>
    37fa:	8e 81       	ldd	r24, Y+6	; 0x06
    37fc:	9f 81       	ldd	r25, Y+7	; 0x07
    37fe:	82 30       	cpi	r24, 0x02	; 2
    3800:	91 05       	cpc	r25, r1
    3802:	34 f4       	brge	.+12     	; 0x3810 <DIO_enuGetPinValue+0x62>
    3804:	2e 81       	ldd	r18, Y+6	; 0x06
    3806:	3f 81       	ldd	r19, Y+7	; 0x07
    3808:	21 15       	cp	r18, r1
    380a:	31 05       	cpc	r19, r1
    380c:	69 f0       	breq	.+26     	; 0x3828 <DIO_enuGetPinValue+0x7a>
    380e:	61 c0       	rjmp	.+194    	; 0x38d2 <DIO_enuGetPinValue+0x124>
    3810:	4e 81       	ldd	r20, Y+6	; 0x06
    3812:	5f 81       	ldd	r21, Y+7	; 0x07
    3814:	42 30       	cpi	r20, 0x02	; 2
    3816:	51 05       	cpc	r21, r1
    3818:	79 f1       	breq	.+94     	; 0x3878 <DIO_enuGetPinValue+0xca>
    381a:	8e 81       	ldd	r24, Y+6	; 0x06
    381c:	9f 81       	ldd	r25, Y+7	; 0x07
    381e:	83 30       	cpi	r24, 0x03	; 3
    3820:	91 05       	cpc	r25, r1
    3822:	09 f4       	brne	.+2      	; 0x3826 <DIO_enuGetPinValue+0x78>
    3824:	3d c0       	rjmp	.+122    	; 0x38a0 <DIO_enuGetPinValue+0xf2>
    3826:	55 c0       	rjmp	.+170    	; 0x38d2 <DIO_enuGetPinValue+0x124>
			{
			case DIO_PORTA:
				*Copy_pu8Value=!((PINA & (DIO_MASK_BIT << Copy_u8PinID)) == 0);
    3828:	e9 e3       	ldi	r30, 0x39	; 57
    382a:	f0 e0       	ldi	r31, 0x00	; 0
    382c:	80 81       	ld	r24, Z
    382e:	28 2f       	mov	r18, r24
    3830:	30 e0       	ldi	r19, 0x00	; 0
    3832:	8b 81       	ldd	r24, Y+3	; 0x03
    3834:	88 2f       	mov	r24, r24
    3836:	90 e0       	ldi	r25, 0x00	; 0
    3838:	a9 01       	movw	r20, r18
    383a:	02 c0       	rjmp	.+4      	; 0x3840 <DIO_enuGetPinValue+0x92>
    383c:	55 95       	asr	r21
    383e:	47 95       	ror	r20
    3840:	8a 95       	dec	r24
    3842:	e2 f7       	brpl	.-8      	; 0x383c <DIO_enuGetPinValue+0x8e>
    3844:	ca 01       	movw	r24, r20
    3846:	81 70       	andi	r24, 0x01	; 1
    3848:	ec 81       	ldd	r30, Y+4	; 0x04
    384a:	fd 81       	ldd	r31, Y+5	; 0x05
    384c:	80 83       	st	Z, r24
    384e:	41 c0       	rjmp	.+130    	; 0x38d2 <DIO_enuGetPinValue+0x124>
				break;
			case DIO_PORTB:
				*Copy_pu8Value=!((PINB & (DIO_MASK_BIT << Copy_u8PinID)) == 0);
    3850:	e6 e3       	ldi	r30, 0x36	; 54
    3852:	f0 e0       	ldi	r31, 0x00	; 0
    3854:	80 81       	ld	r24, Z
    3856:	28 2f       	mov	r18, r24
    3858:	30 e0       	ldi	r19, 0x00	; 0
    385a:	8b 81       	ldd	r24, Y+3	; 0x03
    385c:	88 2f       	mov	r24, r24
    385e:	90 e0       	ldi	r25, 0x00	; 0
    3860:	a9 01       	movw	r20, r18
    3862:	02 c0       	rjmp	.+4      	; 0x3868 <DIO_enuGetPinValue+0xba>
    3864:	55 95       	asr	r21
    3866:	47 95       	ror	r20
    3868:	8a 95       	dec	r24
    386a:	e2 f7       	brpl	.-8      	; 0x3864 <DIO_enuGetPinValue+0xb6>
    386c:	ca 01       	movw	r24, r20
    386e:	81 70       	andi	r24, 0x01	; 1
    3870:	ec 81       	ldd	r30, Y+4	; 0x04
    3872:	fd 81       	ldd	r31, Y+5	; 0x05
    3874:	80 83       	st	Z, r24
    3876:	2d c0       	rjmp	.+90     	; 0x38d2 <DIO_enuGetPinValue+0x124>
				break;
			case DIO_PORTC:
				*Copy_pu8Value=!((PINC & (DIO_MASK_BIT << Copy_u8PinID)) == 0);
    3878:	e3 e3       	ldi	r30, 0x33	; 51
    387a:	f0 e0       	ldi	r31, 0x00	; 0
    387c:	80 81       	ld	r24, Z
    387e:	28 2f       	mov	r18, r24
    3880:	30 e0       	ldi	r19, 0x00	; 0
    3882:	8b 81       	ldd	r24, Y+3	; 0x03
    3884:	88 2f       	mov	r24, r24
    3886:	90 e0       	ldi	r25, 0x00	; 0
    3888:	a9 01       	movw	r20, r18
    388a:	02 c0       	rjmp	.+4      	; 0x3890 <DIO_enuGetPinValue+0xe2>
    388c:	55 95       	asr	r21
    388e:	47 95       	ror	r20
    3890:	8a 95       	dec	r24
    3892:	e2 f7       	brpl	.-8      	; 0x388c <DIO_enuGetPinValue+0xde>
    3894:	ca 01       	movw	r24, r20
    3896:	81 70       	andi	r24, 0x01	; 1
    3898:	ec 81       	ldd	r30, Y+4	; 0x04
    389a:	fd 81       	ldd	r31, Y+5	; 0x05
    389c:	80 83       	st	Z, r24
    389e:	19 c0       	rjmp	.+50     	; 0x38d2 <DIO_enuGetPinValue+0x124>
				break;
			case DIO_PORTD:
				*Copy_pu8Value=!((PIND & (DIO_MASK_BIT << Copy_u8PinID)) == 0);
    38a0:	e0 e3       	ldi	r30, 0x30	; 48
    38a2:	f0 e0       	ldi	r31, 0x00	; 0
    38a4:	80 81       	ld	r24, Z
    38a6:	28 2f       	mov	r18, r24
    38a8:	30 e0       	ldi	r19, 0x00	; 0
    38aa:	8b 81       	ldd	r24, Y+3	; 0x03
    38ac:	88 2f       	mov	r24, r24
    38ae:	90 e0       	ldi	r25, 0x00	; 0
    38b0:	a9 01       	movw	r20, r18
    38b2:	02 c0       	rjmp	.+4      	; 0x38b8 <DIO_enuGetPinValue+0x10a>
    38b4:	55 95       	asr	r21
    38b6:	47 95       	ror	r20
    38b8:	8a 95       	dec	r24
    38ba:	e2 f7       	brpl	.-8      	; 0x38b4 <DIO_enuGetPinValue+0x106>
    38bc:	ca 01       	movw	r24, r20
    38be:	81 70       	andi	r24, 0x01	; 1
    38c0:	ec 81       	ldd	r30, Y+4	; 0x04
    38c2:	fd 81       	ldd	r31, Y+5	; 0x05
    38c4:	80 83       	st	Z, r24
    38c6:	05 c0       	rjmp	.+10     	; 0x38d2 <DIO_enuGetPinValue+0x124>
				break;
			}
		}
		else
		{
			Local_enuErrorstate=ES_OUT_OF_RANGE;
    38c8:	83 e0       	ldi	r24, 0x03	; 3
    38ca:	89 83       	std	Y+1, r24	; 0x01
    38cc:	02 c0       	rjmp	.+4      	; 0x38d2 <DIO_enuGetPinValue+0x124>
		}
	}
	else
	{
		Local_enuErrorstate=ES_NULL_POINTER;
    38ce:	82 e0       	ldi	r24, 0x02	; 2
    38d0:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorstate;
    38d2:	89 81       	ldd	r24, Y+1	; 0x01
}
    38d4:	27 96       	adiw	r28, 0x07	; 7
    38d6:	0f b6       	in	r0, 0x3f	; 63
    38d8:	f8 94       	cli
    38da:	de bf       	out	0x3e, r29	; 62
    38dc:	0f be       	out	0x3f, r0	; 63
    38de:	cd bf       	out	0x3d, r28	; 61
    38e0:	cf 91       	pop	r28
    38e2:	df 91       	pop	r29
    38e4:	08 95       	ret

000038e6 <ADC_enuInit>:

static void (*ADC_pfunISRFun)(void *)=NULL;
static void *ADC_pvidISRParameter =NULL;

ES_t ADC_enuInit(void)
{
    38e6:	df 93       	push	r29
    38e8:	cf 93       	push	r28
    38ea:	0f 92       	push	r0
    38ec:	cd b7       	in	r28, 0x3d	; 61
    38ee:	de b7       	in	r29, 0x3e	; 62
	 ES_t Local_enuErrorState=ES_NOK;
    38f0:	19 82       	std	Y+1, r1	; 0x01
	 ADCSRA |=(1<<2);
	 ADCSRA |=(1<<1);
	 ADCSRA &=~(1<<0);
	 Local_enuErrorState=ES_OK;
#elif ADC_PRES==PRES_128
	 ADCSRA |=(1<<2);
    38f2:	a6 e2       	ldi	r26, 0x26	; 38
    38f4:	b0 e0       	ldi	r27, 0x00	; 0
    38f6:	e6 e2       	ldi	r30, 0x26	; 38
    38f8:	f0 e0       	ldi	r31, 0x00	; 0
    38fa:	80 81       	ld	r24, Z
    38fc:	84 60       	ori	r24, 0x04	; 4
    38fe:	8c 93       	st	X, r24
	 ADCSRA |=(1<<1);
    3900:	a6 e2       	ldi	r26, 0x26	; 38
    3902:	b0 e0       	ldi	r27, 0x00	; 0
    3904:	e6 e2       	ldi	r30, 0x26	; 38
    3906:	f0 e0       	ldi	r31, 0x00	; 0
    3908:	80 81       	ld	r24, Z
    390a:	82 60       	ori	r24, 0x02	; 2
    390c:	8c 93       	st	X, r24
	 ADCSRA |=(1<<0);
    390e:	a6 e2       	ldi	r26, 0x26	; 38
    3910:	b0 e0       	ldi	r27, 0x00	; 0
    3912:	e6 e2       	ldi	r30, 0x26	; 38
    3914:	f0 e0       	ldi	r31, 0x00	; 0
    3916:	80 81       	ld	r24, Z
    3918:	81 60       	ori	r24, 0x01	; 1
    391a:	8c 93       	st	X, r24
	 Local_enuErrorState=ES_OK;
    391c:	81 e0       	ldi	r24, 0x01	; 1
    391e:	89 83       	std	Y+1, r24	; 0x01
#if ADC_REF_VOLT==AREF_REF
	 ADMUX &=~(1<<7);
	 ADMUX &=~(1<<6);
	 Local_enuErrorState=ES_OK;
#elif ADC_REF_VOLT==AVCC_REF
	 ADMUX &=~(1<<7);
    3920:	a7 e2       	ldi	r26, 0x27	; 39
    3922:	b0 e0       	ldi	r27, 0x00	; 0
    3924:	e7 e2       	ldi	r30, 0x27	; 39
    3926:	f0 e0       	ldi	r31, 0x00	; 0
    3928:	80 81       	ld	r24, Z
    392a:	8f 77       	andi	r24, 0x7F	; 127
    392c:	8c 93       	st	X, r24
	 ADMUX |=(1<<6);
    392e:	a7 e2       	ldi	r26, 0x27	; 39
    3930:	b0 e0       	ldi	r27, 0x00	; 0
    3932:	e7 e2       	ldi	r30, 0x27	; 39
    3934:	f0 e0       	ldi	r31, 0x00	; 0
    3936:	80 81       	ld	r24, Z
    3938:	80 64       	ori	r24, 0x40	; 64
    393a:	8c 93       	st	X, r24
	 Local_enuErrorState=ES_OK;
    393c:	81 e0       	ldi	r24, 0x01	; 1
    393e:	89 83       	std	Y+1, r24	; 0x01
#error"your ADC_REF_VOLT has a wrong selection"
#endif

	 //ADJUSTEMENT
#if ADC_ADJ==RIGHT_ADJ
	 ADMUX &=~(1<<5);
    3940:	a7 e2       	ldi	r26, 0x27	; 39
    3942:	b0 e0       	ldi	r27, 0x00	; 0
    3944:	e7 e2       	ldi	r30, 0x27	; 39
    3946:	f0 e0       	ldi	r31, 0x00	; 0
    3948:	80 81       	ld	r24, Z
    394a:	8f 7d       	andi	r24, 0xDF	; 223
    394c:	8c 93       	st	X, r24
	 Local_enuErrorState=ES_OK;
    394e:	81 e0       	ldi	r24, 0x01	; 1
    3950:	89 83       	std	Y+1, r24	; 0x01
	 Local_enuErrorState=ES_OUT_OF_RANGE;
#error"your ADC_ADJ has a wrong selection"
#endif


	 return Local_enuErrorState;
    3952:	89 81       	ldd	r24, Y+1	; 0x01
}
    3954:	0f 90       	pop	r0
    3956:	cf 91       	pop	r28
    3958:	df 91       	pop	r29
    395a:	08 95       	ret

0000395c <ADC_enuStartConversion>:

ES_t ADC_enuStartConversion(void)
{
    395c:	df 93       	push	r29
    395e:	cf 93       	push	r28
    3960:	0f 92       	push	r0
    3962:	cd b7       	in	r28, 0x3d	; 61
    3964:	de b7       	in	r29, 0x3e	; 62
	 ES_t Local_enuErrorState=ES_NOK;
    3966:	19 82       	std	Y+1, r1	; 0x01

	 ADCSRA |=(1<<6);
    3968:	a6 e2       	ldi	r26, 0x26	; 38
    396a:	b0 e0       	ldi	r27, 0x00	; 0
    396c:	e6 e2       	ldi	r30, 0x26	; 38
    396e:	f0 e0       	ldi	r31, 0x00	; 0
    3970:	80 81       	ld	r24, Z
    3972:	80 64       	ori	r24, 0x40	; 64
    3974:	8c 93       	st	X, r24
	 Local_enuErrorState=ES_OK;
    3976:	81 e0       	ldi	r24, 0x01	; 1
    3978:	89 83       	std	Y+1, r24	; 0x01

	 return Local_enuErrorState;
    397a:	89 81       	ldd	r24, Y+1	; 0x01
}
    397c:	0f 90       	pop	r0
    397e:	cf 91       	pop	r28
    3980:	df 91       	pop	r29
    3982:	08 95       	ret

00003984 <ADC_enuPollingSystem>:

ES_t ADC_enuPollingSystem(void)
{
    3984:	df 93       	push	r29
    3986:	cf 93       	push	r28
    3988:	0f 92       	push	r0
    398a:	cd b7       	in	r28, 0x3d	; 61
    398c:	de b7       	in	r29, 0x3e	; 62
	 ES_t Local_enuErrorState=ES_NOK;
    398e:	19 82       	std	Y+1, r1	; 0x01

	 while(((ADCSRA >>4)&1)==0); //WAIT FOR FLAG (ADIF)
    3990:	e6 e2       	ldi	r30, 0x26	; 38
    3992:	f0 e0       	ldi	r31, 0x00	; 0
    3994:	80 81       	ld	r24, Z
    3996:	82 95       	swap	r24
    3998:	8f 70       	andi	r24, 0x0F	; 15
    399a:	88 2f       	mov	r24, r24
    399c:	90 e0       	ldi	r25, 0x00	; 0
    399e:	81 70       	andi	r24, 0x01	; 1
    39a0:	90 70       	andi	r25, 0x00	; 0
    39a2:	00 97       	sbiw	r24, 0x00	; 0
    39a4:	a9 f3       	breq	.-22     	; 0x3990 <ADC_enuPollingSystem+0xc>
	 ADCSRA |=(1<<4);   //CLEAR FLAG
    39a6:	a6 e2       	ldi	r26, 0x26	; 38
    39a8:	b0 e0       	ldi	r27, 0x00	; 0
    39aa:	e6 e2       	ldi	r30, 0x26	; 38
    39ac:	f0 e0       	ldi	r31, 0x00	; 0
    39ae:	80 81       	ld	r24, Z
    39b0:	80 61       	ori	r24, 0x10	; 16
    39b2:	8c 93       	st	X, r24
	 Local_enuErrorState=ES_OK;
    39b4:	81 e0       	ldi	r24, 0x01	; 1
    39b6:	89 83       	std	Y+1, r24	; 0x01

	 return Local_enuErrorState;
    39b8:	89 81       	ldd	r24, Y+1	; 0x01
}
    39ba:	0f 90       	pop	r0
    39bc:	cf 91       	pop	r28
    39be:	df 91       	pop	r29
    39c0:	08 95       	ret

000039c2 <ADC_enuReadHighValue>:

ES_t ADC_enuReadHighValue(u8 *Copy_pu8Value)
{
    39c2:	df 93       	push	r29
    39c4:	cf 93       	push	r28
    39c6:	00 d0       	rcall	.+0      	; 0x39c8 <ADC_enuReadHighValue+0x6>
    39c8:	0f 92       	push	r0
    39ca:	cd b7       	in	r28, 0x3d	; 61
    39cc:	de b7       	in	r29, 0x3e	; 62
    39ce:	9b 83       	std	Y+3, r25	; 0x03
    39d0:	8a 83       	std	Y+2, r24	; 0x02
	 ES_t Local_enuErrorState=ES_NOK;
    39d2:	19 82       	std	Y+1, r1	; 0x01

#if ADC_ADJ==RIGHT_ADJ
	 *Copy_pu8Value =(ADCL >>2);
    39d4:	e4 e2       	ldi	r30, 0x24	; 36
    39d6:	f0 e0       	ldi	r31, 0x00	; 0
    39d8:	80 81       	ld	r24, Z
    39da:	86 95       	lsr	r24
    39dc:	86 95       	lsr	r24
    39de:	ea 81       	ldd	r30, Y+2	; 0x02
    39e0:	fb 81       	ldd	r31, Y+3	; 0x03
    39e2:	80 83       	st	Z, r24
	 *Copy_pu8Value |=(ADCH <<6);
    39e4:	ea 81       	ldd	r30, Y+2	; 0x02
    39e6:	fb 81       	ldd	r31, Y+3	; 0x03
    39e8:	80 81       	ld	r24, Z
    39ea:	28 2f       	mov	r18, r24
    39ec:	e5 e2       	ldi	r30, 0x25	; 37
    39ee:	f0 e0       	ldi	r31, 0x00	; 0
    39f0:	80 81       	ld	r24, Z
    39f2:	88 2f       	mov	r24, r24
    39f4:	90 e0       	ldi	r25, 0x00	; 0
    39f6:	00 24       	eor	r0, r0
    39f8:	96 95       	lsr	r25
    39fa:	87 95       	ror	r24
    39fc:	07 94       	ror	r0
    39fe:	96 95       	lsr	r25
    3a00:	87 95       	ror	r24
    3a02:	07 94       	ror	r0
    3a04:	98 2f       	mov	r25, r24
    3a06:	80 2d       	mov	r24, r0
    3a08:	82 2b       	or	r24, r18
    3a0a:	ea 81       	ldd	r30, Y+2	; 0x02
    3a0c:	fb 81       	ldd	r31, Y+3	; 0x03
    3a0e:	80 83       	st	Z, r24
	 Local_enuErrorState=ES_OK;
    3a10:	81 e0       	ldi	r24, 0x01	; 1
    3a12:	89 83       	std	Y+1, r24	; 0x01
#else
	 Local_enuErrorState=ES_OUT_OF_RANGE;
#error"your ADC_ADJ has a wrong selection"
#endif

	 return Local_enuErrorState;
    3a14:	89 81       	ldd	r24, Y+1	; 0x01
}
    3a16:	0f 90       	pop	r0
    3a18:	0f 90       	pop	r0
    3a1a:	0f 90       	pop	r0
    3a1c:	cf 91       	pop	r28
    3a1e:	df 91       	pop	r29
    3a20:	08 95       	ret

00003a22 <ADC_enuRead>:

ES_t ADC_enuRead(u16 *Copy_pu16Value)
{
    3a22:	df 93       	push	r29
    3a24:	cf 93       	push	r28
    3a26:	00 d0       	rcall	.+0      	; 0x3a28 <ADC_enuRead+0x6>
    3a28:	0f 92       	push	r0
    3a2a:	cd b7       	in	r28, 0x3d	; 61
    3a2c:	de b7       	in	r29, 0x3e	; 62
    3a2e:	9b 83       	std	Y+3, r25	; 0x03
    3a30:	8a 83       	std	Y+2, r24	; 0x02
	 ES_t Local_enuErrorState=ES_NOK;
    3a32:	19 82       	std	Y+1, r1	; 0x01

#if ADC_ADJ==RIGHT_ADJ
	 *Copy_pu16Value =ADCL;
    3a34:	e4 e2       	ldi	r30, 0x24	; 36
    3a36:	f0 e0       	ldi	r31, 0x00	; 0
    3a38:	80 81       	ld	r24, Z
    3a3a:	88 2f       	mov	r24, r24
    3a3c:	90 e0       	ldi	r25, 0x00	; 0
    3a3e:	ea 81       	ldd	r30, Y+2	; 0x02
    3a40:	fb 81       	ldd	r31, Y+3	; 0x03
    3a42:	91 83       	std	Z+1, r25	; 0x01
    3a44:	80 83       	st	Z, r24
	 *Copy_pu16Value |=((u16)ADCH <<8);
    3a46:	ea 81       	ldd	r30, Y+2	; 0x02
    3a48:	fb 81       	ldd	r31, Y+3	; 0x03
    3a4a:	20 81       	ld	r18, Z
    3a4c:	31 81       	ldd	r19, Z+1	; 0x01
    3a4e:	e5 e2       	ldi	r30, 0x25	; 37
    3a50:	f0 e0       	ldi	r31, 0x00	; 0
    3a52:	80 81       	ld	r24, Z
    3a54:	88 2f       	mov	r24, r24
    3a56:	90 e0       	ldi	r25, 0x00	; 0
    3a58:	98 2f       	mov	r25, r24
    3a5a:	88 27       	eor	r24, r24
    3a5c:	82 2b       	or	r24, r18
    3a5e:	93 2b       	or	r25, r19
    3a60:	ea 81       	ldd	r30, Y+2	; 0x02
    3a62:	fb 81       	ldd	r31, Y+3	; 0x03
    3a64:	91 83       	std	Z+1, r25	; 0x01
    3a66:	80 83       	st	Z, r24
	 Local_enuErrorState=ES_OK;
    3a68:	81 e0       	ldi	r24, 0x01	; 1
    3a6a:	89 83       	std	Y+1, r24	; 0x01
#else
	 Local_enuErrorState=ES_OUT_OF_RANGE;
#error"your ADC_ADJ has a wrong selection"
#endif

	 return Local_enuErrorState;
    3a6c:	89 81       	ldd	r24, Y+1	; 0x01
}
    3a6e:	0f 90       	pop	r0
    3a70:	0f 90       	pop	r0
    3a72:	0f 90       	pop	r0
    3a74:	cf 91       	pop	r28
    3a76:	df 91       	pop	r29
    3a78:	08 95       	ret

00003a7a <ADC_enuCallBack>:

ES_t ADC_enuCallBack(void(Copy_pfunAppFun)(void*),void *Copy_pvidAppParameter)
{
    3a7a:	df 93       	push	r29
    3a7c:	cf 93       	push	r28
    3a7e:	00 d0       	rcall	.+0      	; 0x3a80 <ADC_enuCallBack+0x6>
    3a80:	00 d0       	rcall	.+0      	; 0x3a82 <ADC_enuCallBack+0x8>
    3a82:	0f 92       	push	r0
    3a84:	cd b7       	in	r28, 0x3d	; 61
    3a86:	de b7       	in	r29, 0x3e	; 62
    3a88:	9b 83       	std	Y+3, r25	; 0x03
    3a8a:	8a 83       	std	Y+2, r24	; 0x02
    3a8c:	7d 83       	std	Y+5, r23	; 0x05
    3a8e:	6c 83       	std	Y+4, r22	; 0x04
	 ES_t Local_enuErrorState=ES_NOK;
    3a90:	19 82       	std	Y+1, r1	; 0x01

	 if(Copy_pfunAppFun!=NULL)
    3a92:	8a 81       	ldd	r24, Y+2	; 0x02
    3a94:	9b 81       	ldd	r25, Y+3	; 0x03
    3a96:	00 97       	sbiw	r24, 0x00	; 0
    3a98:	79 f0       	breq	.+30     	; 0x3ab8 <ADC_enuCallBack+0x3e>
	 {
		 ADC_pfunISRFun=Copy_pfunAppFun;
    3a9a:	8a 81       	ldd	r24, Y+2	; 0x02
    3a9c:	9b 81       	ldd	r25, Y+3	; 0x03
    3a9e:	90 93 f5 02 	sts	0x02F5, r25
    3aa2:	80 93 f4 02 	sts	0x02F4, r24
		 ADC_pvidISRParameter=Copy_pvidAppParameter;
    3aa6:	8c 81       	ldd	r24, Y+4	; 0x04
    3aa8:	9d 81       	ldd	r25, Y+5	; 0x05
    3aaa:	90 93 f7 02 	sts	0x02F7, r25
    3aae:	80 93 f6 02 	sts	0x02F6, r24
		 Local_enuErrorState=ES_OK;
    3ab2:	81 e0       	ldi	r24, 0x01	; 1
    3ab4:	89 83       	std	Y+1, r24	; 0x01
    3ab6:	02 c0       	rjmp	.+4      	; 0x3abc <ADC_enuCallBack+0x42>
	 }
	 else
	 {
		 Local_enuErrorState=ES_NULL_POINTER;
    3ab8:	82 e0       	ldi	r24, 0x02	; 2
    3aba:	89 83       	std	Y+1, r24	; 0x01
	 }

	 return Local_enuErrorState;
    3abc:	89 81       	ldd	r24, Y+1	; 0x01
}
    3abe:	0f 90       	pop	r0
    3ac0:	0f 90       	pop	r0
    3ac2:	0f 90       	pop	r0
    3ac4:	0f 90       	pop	r0
    3ac6:	0f 90       	pop	r0
    3ac8:	cf 91       	pop	r28
    3aca:	df 91       	pop	r29
    3acc:	08 95       	ret

00003ace <ADC_enuSelectChannel>:

ES_t ADC_enuSelectChannel(u8 Copy_u8ChannelID)
{
    3ace:	df 93       	push	r29
    3ad0:	cf 93       	push	r28
    3ad2:	00 d0       	rcall	.+0      	; 0x3ad4 <ADC_enuSelectChannel+0x6>
    3ad4:	cd b7       	in	r28, 0x3d	; 61
    3ad6:	de b7       	in	r29, 0x3e	; 62
    3ad8:	8a 83       	std	Y+2, r24	; 0x02
	 ES_t Local_enuErrorState=ES_NOK;
    3ada:	19 82       	std	Y+1, r1	; 0x01

	 if(Copy_u8ChannelID<32)
    3adc:	8a 81       	ldd	r24, Y+2	; 0x02
    3ade:	80 32       	cpi	r24, 0x20	; 32
    3ae0:	90 f4       	brcc	.+36     	; 0x3b06 <ADC_enuSelectChannel+0x38>
	 {
		 ADMUX &=~ 0x1F;  //clear bits 4 3 2 1 0 >> 0b00011111 ~ 0b11100000
    3ae2:	a7 e2       	ldi	r26, 0x27	; 39
    3ae4:	b0 e0       	ldi	r27, 0x00	; 0
    3ae6:	e7 e2       	ldi	r30, 0x27	; 39
    3ae8:	f0 e0       	ldi	r31, 0x00	; 0
    3aea:	80 81       	ld	r24, Z
    3aec:	80 7e       	andi	r24, 0xE0	; 224
    3aee:	8c 93       	st	X, r24
		 ADMUX |=Copy_u8ChannelID;
    3af0:	a7 e2       	ldi	r26, 0x27	; 39
    3af2:	b0 e0       	ldi	r27, 0x00	; 0
    3af4:	e7 e2       	ldi	r30, 0x27	; 39
    3af6:	f0 e0       	ldi	r31, 0x00	; 0
    3af8:	90 81       	ld	r25, Z
    3afa:	8a 81       	ldd	r24, Y+2	; 0x02
    3afc:	89 2b       	or	r24, r25
    3afe:	8c 93       	st	X, r24
		 Local_enuErrorState=ES_OK;
    3b00:	81 e0       	ldi	r24, 0x01	; 1
    3b02:	89 83       	std	Y+1, r24	; 0x01
    3b04:	02 c0       	rjmp	.+4      	; 0x3b0a <ADC_enuSelectChannel+0x3c>
	 }
	 else
	 {
		 Local_enuErrorState=ES_OUT_OF_RANGE;
    3b06:	83 e0       	ldi	r24, 0x03	; 3
    3b08:	89 83       	std	Y+1, r24	; 0x01
	 }

	 return Local_enuErrorState;
    3b0a:	89 81       	ldd	r24, Y+1	; 0x01
}
    3b0c:	0f 90       	pop	r0
    3b0e:	0f 90       	pop	r0
    3b10:	cf 91       	pop	r28
    3b12:	df 91       	pop	r29
    3b14:	08 95       	ret

00003b16 <ADC_enuEnableTriggeringMode>:

ES_t ADC_enuEnableTriggeringMode(u8 Copy_u8TriggeringSource)
{
    3b16:	df 93       	push	r29
    3b18:	cf 93       	push	r28
    3b1a:	00 d0       	rcall	.+0      	; 0x3b1c <ADC_enuEnableTriggeringMode+0x6>
    3b1c:	00 d0       	rcall	.+0      	; 0x3b1e <ADC_enuEnableTriggeringMode+0x8>
    3b1e:	cd b7       	in	r28, 0x3d	; 61
    3b20:	de b7       	in	r29, 0x3e	; 62
    3b22:	8a 83       	std	Y+2, r24	; 0x02
	 ES_t Local_enuErrorState=ES_NOK;
    3b24:	19 82       	std	Y+1, r1	; 0x01

	 ADCSRA &=~(1<<5); //CLOSE AUTO_TRIGEERING TO SELECT TRIGGER SOURCE
    3b26:	a6 e2       	ldi	r26, 0x26	; 38
    3b28:	b0 e0       	ldi	r27, 0x00	; 0
    3b2a:	e6 e2       	ldi	r30, 0x26	; 38
    3b2c:	f0 e0       	ldi	r31, 0x00	; 0
    3b2e:	80 81       	ld	r24, Z
    3b30:	8f 7d       	andi	r24, 0xDF	; 223
    3b32:	8c 93       	st	X, r24

	 switch(Copy_u8TriggeringSource)
    3b34:	8a 81       	ldd	r24, Y+2	; 0x02
    3b36:	28 2f       	mov	r18, r24
    3b38:	30 e0       	ldi	r19, 0x00	; 0
    3b3a:	3c 83       	std	Y+4, r19	; 0x04
    3b3c:	2b 83       	std	Y+3, r18	; 0x03
    3b3e:	8b 81       	ldd	r24, Y+3	; 0x03
    3b40:	9c 81       	ldd	r25, Y+4	; 0x04
    3b42:	84 30       	cpi	r24, 0x04	; 4
    3b44:	91 05       	cpc	r25, r1
    3b46:	09 f4       	brne	.+2      	; 0x3b4a <ADC_enuEnableTriggeringMode+0x34>
    3b48:	77 c0       	rjmp	.+238    	; 0x3c38 <ADC_enuEnableTriggeringMode+0x122>
    3b4a:	2b 81       	ldd	r18, Y+3	; 0x03
    3b4c:	3c 81       	ldd	r19, Y+4	; 0x04
    3b4e:	25 30       	cpi	r18, 0x05	; 5
    3b50:	31 05       	cpc	r19, r1
    3b52:	8c f4       	brge	.+34     	; 0x3b76 <ADC_enuEnableTriggeringMode+0x60>
    3b54:	8b 81       	ldd	r24, Y+3	; 0x03
    3b56:	9c 81       	ldd	r25, Y+4	; 0x04
    3b58:	82 30       	cpi	r24, 0x02	; 2
    3b5a:	91 05       	cpc	r25, r1
    3b5c:	e9 f1       	breq	.+122    	; 0x3bd8 <ADC_enuEnableTriggeringMode+0xc2>
    3b5e:	2b 81       	ldd	r18, Y+3	; 0x03
    3b60:	3c 81       	ldd	r19, Y+4	; 0x04
    3b62:	23 30       	cpi	r18, 0x03	; 3
    3b64:	31 05       	cpc	r19, r1
    3b66:	0c f0       	brlt	.+2      	; 0x3b6a <ADC_enuEnableTriggeringMode+0x54>
    3b68:	4f c0       	rjmp	.+158    	; 0x3c08 <ADC_enuEnableTriggeringMode+0xf2>
    3b6a:	8b 81       	ldd	r24, Y+3	; 0x03
    3b6c:	9c 81       	ldd	r25, Y+4	; 0x04
    3b6e:	81 30       	cpi	r24, 0x01	; 1
    3b70:	91 05       	cpc	r25, r1
    3b72:	d1 f0       	breq	.+52     	; 0x3ba8 <ADC_enuEnableTriggeringMode+0x92>
    3b74:	d9 c0       	rjmp	.+434    	; 0x3d28 <ADC_enuEnableTriggeringMode+0x212>
    3b76:	2b 81       	ldd	r18, Y+3	; 0x03
    3b78:	3c 81       	ldd	r19, Y+4	; 0x04
    3b7a:	26 30       	cpi	r18, 0x06	; 6
    3b7c:	31 05       	cpc	r19, r1
    3b7e:	09 f4       	brne	.+2      	; 0x3b82 <ADC_enuEnableTriggeringMode+0x6c>
    3b80:	8b c0       	rjmp	.+278    	; 0x3c98 <ADC_enuEnableTriggeringMode+0x182>
    3b82:	8b 81       	ldd	r24, Y+3	; 0x03
    3b84:	9c 81       	ldd	r25, Y+4	; 0x04
    3b86:	86 30       	cpi	r24, 0x06	; 6
    3b88:	91 05       	cpc	r25, r1
    3b8a:	0c f4       	brge	.+2      	; 0x3b8e <ADC_enuEnableTriggeringMode+0x78>
    3b8c:	6d c0       	rjmp	.+218    	; 0x3c68 <ADC_enuEnableTriggeringMode+0x152>
    3b8e:	2b 81       	ldd	r18, Y+3	; 0x03
    3b90:	3c 81       	ldd	r19, Y+4	; 0x04
    3b92:	27 30       	cpi	r18, 0x07	; 7
    3b94:	31 05       	cpc	r19, r1
    3b96:	09 f4       	brne	.+2      	; 0x3b9a <ADC_enuEnableTriggeringMode+0x84>
    3b98:	97 c0       	rjmp	.+302    	; 0x3cc8 <ADC_enuEnableTriggeringMode+0x1b2>
    3b9a:	8b 81       	ldd	r24, Y+3	; 0x03
    3b9c:	9c 81       	ldd	r25, Y+4	; 0x04
    3b9e:	88 30       	cpi	r24, 0x08	; 8
    3ba0:	91 05       	cpc	r25, r1
    3ba2:	09 f4       	brne	.+2      	; 0x3ba6 <ADC_enuEnableTriggeringMode+0x90>
    3ba4:	a9 c0       	rjmp	.+338    	; 0x3cf8 <ADC_enuEnableTriggeringMode+0x1e2>
    3ba6:	c0 c0       	rjmp	.+384    	; 0x3d28 <ADC_enuEnableTriggeringMode+0x212>
	 {
	 case FREE_RUNNING:
		 SFIOR &=~(1<<7);
    3ba8:	a0 e5       	ldi	r26, 0x50	; 80
    3baa:	b0 e0       	ldi	r27, 0x00	; 0
    3bac:	e0 e5       	ldi	r30, 0x50	; 80
    3bae:	f0 e0       	ldi	r31, 0x00	; 0
    3bb0:	80 81       	ld	r24, Z
    3bb2:	8f 77       	andi	r24, 0x7F	; 127
    3bb4:	8c 93       	st	X, r24
		 SFIOR &=~(1<<6);
    3bb6:	a0 e5       	ldi	r26, 0x50	; 80
    3bb8:	b0 e0       	ldi	r27, 0x00	; 0
    3bba:	e0 e5       	ldi	r30, 0x50	; 80
    3bbc:	f0 e0       	ldi	r31, 0x00	; 0
    3bbe:	80 81       	ld	r24, Z
    3bc0:	8f 7b       	andi	r24, 0xBF	; 191
    3bc2:	8c 93       	st	X, r24
		 SFIOR &=~(1<<5);
    3bc4:	a0 e5       	ldi	r26, 0x50	; 80
    3bc6:	b0 e0       	ldi	r27, 0x00	; 0
    3bc8:	e0 e5       	ldi	r30, 0x50	; 80
    3bca:	f0 e0       	ldi	r31, 0x00	; 0
    3bcc:	80 81       	ld	r24, Z
    3bce:	8f 7d       	andi	r24, 0xDF	; 223
    3bd0:	8c 93       	st	X, r24
		 Local_enuErrorState=ES_OK;
    3bd2:	81 e0       	ldi	r24, 0x01	; 1
    3bd4:	89 83       	std	Y+1, r24	; 0x01
    3bd6:	aa c0       	rjmp	.+340    	; 0x3d2c <ADC_enuEnableTriggeringMode+0x216>
		 break;
	 case ANALOG_COMPARATOR:
		 SFIOR &=~(1<<7);
    3bd8:	a0 e5       	ldi	r26, 0x50	; 80
    3bda:	b0 e0       	ldi	r27, 0x00	; 0
    3bdc:	e0 e5       	ldi	r30, 0x50	; 80
    3bde:	f0 e0       	ldi	r31, 0x00	; 0
    3be0:	80 81       	ld	r24, Z
    3be2:	8f 77       	andi	r24, 0x7F	; 127
    3be4:	8c 93       	st	X, r24
		 SFIOR &=~(1<<6);
    3be6:	a0 e5       	ldi	r26, 0x50	; 80
    3be8:	b0 e0       	ldi	r27, 0x00	; 0
    3bea:	e0 e5       	ldi	r30, 0x50	; 80
    3bec:	f0 e0       	ldi	r31, 0x00	; 0
    3bee:	80 81       	ld	r24, Z
    3bf0:	8f 7b       	andi	r24, 0xBF	; 191
    3bf2:	8c 93       	st	X, r24
		 SFIOR |=(1<<5);
    3bf4:	a0 e5       	ldi	r26, 0x50	; 80
    3bf6:	b0 e0       	ldi	r27, 0x00	; 0
    3bf8:	e0 e5       	ldi	r30, 0x50	; 80
    3bfa:	f0 e0       	ldi	r31, 0x00	; 0
    3bfc:	80 81       	ld	r24, Z
    3bfe:	80 62       	ori	r24, 0x20	; 32
    3c00:	8c 93       	st	X, r24
		 Local_enuErrorState=ES_OK;
    3c02:	81 e0       	ldi	r24, 0x01	; 1
    3c04:	89 83       	std	Y+1, r24	; 0x01
    3c06:	92 c0       	rjmp	.+292    	; 0x3d2c <ADC_enuEnableTriggeringMode+0x216>
		 break;
	 case EXT_INT0_REQ:
		 SFIOR &=~(1<<7);
    3c08:	a0 e5       	ldi	r26, 0x50	; 80
    3c0a:	b0 e0       	ldi	r27, 0x00	; 0
    3c0c:	e0 e5       	ldi	r30, 0x50	; 80
    3c0e:	f0 e0       	ldi	r31, 0x00	; 0
    3c10:	80 81       	ld	r24, Z
    3c12:	8f 77       	andi	r24, 0x7F	; 127
    3c14:	8c 93       	st	X, r24
		 SFIOR |=(1<<6);
    3c16:	a0 e5       	ldi	r26, 0x50	; 80
    3c18:	b0 e0       	ldi	r27, 0x00	; 0
    3c1a:	e0 e5       	ldi	r30, 0x50	; 80
    3c1c:	f0 e0       	ldi	r31, 0x00	; 0
    3c1e:	80 81       	ld	r24, Z
    3c20:	80 64       	ori	r24, 0x40	; 64
    3c22:	8c 93       	st	X, r24
		 SFIOR &=~(1<<5);
    3c24:	a0 e5       	ldi	r26, 0x50	; 80
    3c26:	b0 e0       	ldi	r27, 0x00	; 0
    3c28:	e0 e5       	ldi	r30, 0x50	; 80
    3c2a:	f0 e0       	ldi	r31, 0x00	; 0
    3c2c:	80 81       	ld	r24, Z
    3c2e:	8f 7d       	andi	r24, 0xDF	; 223
    3c30:	8c 93       	st	X, r24
		 Local_enuErrorState=ES_OK;
    3c32:	81 e0       	ldi	r24, 0x01	; 1
    3c34:	89 83       	std	Y+1, r24	; 0x01
    3c36:	7a c0       	rjmp	.+244    	; 0x3d2c <ADC_enuEnableTriggeringMode+0x216>
		 break;
	 case TIM_COUNT_0_COMPARE_MATCH:
		 SFIOR &=~(1<<7);
    3c38:	a0 e5       	ldi	r26, 0x50	; 80
    3c3a:	b0 e0       	ldi	r27, 0x00	; 0
    3c3c:	e0 e5       	ldi	r30, 0x50	; 80
    3c3e:	f0 e0       	ldi	r31, 0x00	; 0
    3c40:	80 81       	ld	r24, Z
    3c42:	8f 77       	andi	r24, 0x7F	; 127
    3c44:	8c 93       	st	X, r24
		 SFIOR |=(1<<6);
    3c46:	a0 e5       	ldi	r26, 0x50	; 80
    3c48:	b0 e0       	ldi	r27, 0x00	; 0
    3c4a:	e0 e5       	ldi	r30, 0x50	; 80
    3c4c:	f0 e0       	ldi	r31, 0x00	; 0
    3c4e:	80 81       	ld	r24, Z
    3c50:	80 64       	ori	r24, 0x40	; 64
    3c52:	8c 93       	st	X, r24
		 SFIOR |=(1<<5);
    3c54:	a0 e5       	ldi	r26, 0x50	; 80
    3c56:	b0 e0       	ldi	r27, 0x00	; 0
    3c58:	e0 e5       	ldi	r30, 0x50	; 80
    3c5a:	f0 e0       	ldi	r31, 0x00	; 0
    3c5c:	80 81       	ld	r24, Z
    3c5e:	80 62       	ori	r24, 0x20	; 32
    3c60:	8c 93       	st	X, r24
		 Local_enuErrorState=ES_OK;
    3c62:	81 e0       	ldi	r24, 0x01	; 1
    3c64:	89 83       	std	Y+1, r24	; 0x01
    3c66:	62 c0       	rjmp	.+196    	; 0x3d2c <ADC_enuEnableTriggeringMode+0x216>
		 break;
	 case TIM_COUNT_0_OVERFLOW:
		 SFIOR |=(1<<7);
    3c68:	a0 e5       	ldi	r26, 0x50	; 80
    3c6a:	b0 e0       	ldi	r27, 0x00	; 0
    3c6c:	e0 e5       	ldi	r30, 0x50	; 80
    3c6e:	f0 e0       	ldi	r31, 0x00	; 0
    3c70:	80 81       	ld	r24, Z
    3c72:	80 68       	ori	r24, 0x80	; 128
    3c74:	8c 93       	st	X, r24
		 SFIOR &=~(1<<6);
    3c76:	a0 e5       	ldi	r26, 0x50	; 80
    3c78:	b0 e0       	ldi	r27, 0x00	; 0
    3c7a:	e0 e5       	ldi	r30, 0x50	; 80
    3c7c:	f0 e0       	ldi	r31, 0x00	; 0
    3c7e:	80 81       	ld	r24, Z
    3c80:	8f 7b       	andi	r24, 0xBF	; 191
    3c82:	8c 93       	st	X, r24
		 SFIOR &=~(1<<5);
    3c84:	a0 e5       	ldi	r26, 0x50	; 80
    3c86:	b0 e0       	ldi	r27, 0x00	; 0
    3c88:	e0 e5       	ldi	r30, 0x50	; 80
    3c8a:	f0 e0       	ldi	r31, 0x00	; 0
    3c8c:	80 81       	ld	r24, Z
    3c8e:	8f 7d       	andi	r24, 0xDF	; 223
    3c90:	8c 93       	st	X, r24
		 Local_enuErrorState=ES_OK;
    3c92:	81 e0       	ldi	r24, 0x01	; 1
    3c94:	89 83       	std	Y+1, r24	; 0x01
    3c96:	4a c0       	rjmp	.+148    	; 0x3d2c <ADC_enuEnableTriggeringMode+0x216>
		 break;
	 case TIM_COUNT_1_COMPARE_MATCH:
		 SFIOR |=(1<<7);
    3c98:	a0 e5       	ldi	r26, 0x50	; 80
    3c9a:	b0 e0       	ldi	r27, 0x00	; 0
    3c9c:	e0 e5       	ldi	r30, 0x50	; 80
    3c9e:	f0 e0       	ldi	r31, 0x00	; 0
    3ca0:	80 81       	ld	r24, Z
    3ca2:	80 68       	ori	r24, 0x80	; 128
    3ca4:	8c 93       	st	X, r24
		 SFIOR &=~(1<<6);
    3ca6:	a0 e5       	ldi	r26, 0x50	; 80
    3ca8:	b0 e0       	ldi	r27, 0x00	; 0
    3caa:	e0 e5       	ldi	r30, 0x50	; 80
    3cac:	f0 e0       	ldi	r31, 0x00	; 0
    3cae:	80 81       	ld	r24, Z
    3cb0:	8f 7b       	andi	r24, 0xBF	; 191
    3cb2:	8c 93       	st	X, r24
		 SFIOR |=(1<<5);
    3cb4:	a0 e5       	ldi	r26, 0x50	; 80
    3cb6:	b0 e0       	ldi	r27, 0x00	; 0
    3cb8:	e0 e5       	ldi	r30, 0x50	; 80
    3cba:	f0 e0       	ldi	r31, 0x00	; 0
    3cbc:	80 81       	ld	r24, Z
    3cbe:	80 62       	ori	r24, 0x20	; 32
    3cc0:	8c 93       	st	X, r24
		 Local_enuErrorState=ES_OK;
    3cc2:	81 e0       	ldi	r24, 0x01	; 1
    3cc4:	89 83       	std	Y+1, r24	; 0x01
    3cc6:	32 c0       	rjmp	.+100    	; 0x3d2c <ADC_enuEnableTriggeringMode+0x216>
		 break;
	 case TIM_COUNT_1_OVERFLOW:
		 SFIOR |=(1<<7);
    3cc8:	a0 e5       	ldi	r26, 0x50	; 80
    3cca:	b0 e0       	ldi	r27, 0x00	; 0
    3ccc:	e0 e5       	ldi	r30, 0x50	; 80
    3cce:	f0 e0       	ldi	r31, 0x00	; 0
    3cd0:	80 81       	ld	r24, Z
    3cd2:	80 68       	ori	r24, 0x80	; 128
    3cd4:	8c 93       	st	X, r24
		 SFIOR |=(1<<6);
    3cd6:	a0 e5       	ldi	r26, 0x50	; 80
    3cd8:	b0 e0       	ldi	r27, 0x00	; 0
    3cda:	e0 e5       	ldi	r30, 0x50	; 80
    3cdc:	f0 e0       	ldi	r31, 0x00	; 0
    3cde:	80 81       	ld	r24, Z
    3ce0:	80 64       	ori	r24, 0x40	; 64
    3ce2:	8c 93       	st	X, r24
		 SFIOR &=~(1<<5);
    3ce4:	a0 e5       	ldi	r26, 0x50	; 80
    3ce6:	b0 e0       	ldi	r27, 0x00	; 0
    3ce8:	e0 e5       	ldi	r30, 0x50	; 80
    3cea:	f0 e0       	ldi	r31, 0x00	; 0
    3cec:	80 81       	ld	r24, Z
    3cee:	8f 7d       	andi	r24, 0xDF	; 223
    3cf0:	8c 93       	st	X, r24
		 Local_enuErrorState=ES_OK;
    3cf2:	81 e0       	ldi	r24, 0x01	; 1
    3cf4:	89 83       	std	Y+1, r24	; 0x01
    3cf6:	1a c0       	rjmp	.+52     	; 0x3d2c <ADC_enuEnableTriggeringMode+0x216>
		 break;
	 case TIM_COUNT_1_CAP_EVENT:
		 SFIOR |=(1<<7);
    3cf8:	a0 e5       	ldi	r26, 0x50	; 80
    3cfa:	b0 e0       	ldi	r27, 0x00	; 0
    3cfc:	e0 e5       	ldi	r30, 0x50	; 80
    3cfe:	f0 e0       	ldi	r31, 0x00	; 0
    3d00:	80 81       	ld	r24, Z
    3d02:	80 68       	ori	r24, 0x80	; 128
    3d04:	8c 93       	st	X, r24
		 SFIOR |=(1<<6);
    3d06:	a0 e5       	ldi	r26, 0x50	; 80
    3d08:	b0 e0       	ldi	r27, 0x00	; 0
    3d0a:	e0 e5       	ldi	r30, 0x50	; 80
    3d0c:	f0 e0       	ldi	r31, 0x00	; 0
    3d0e:	80 81       	ld	r24, Z
    3d10:	80 64       	ori	r24, 0x40	; 64
    3d12:	8c 93       	st	X, r24
		 SFIOR |=(1<<5);
    3d14:	a0 e5       	ldi	r26, 0x50	; 80
    3d16:	b0 e0       	ldi	r27, 0x00	; 0
    3d18:	e0 e5       	ldi	r30, 0x50	; 80
    3d1a:	f0 e0       	ldi	r31, 0x00	; 0
    3d1c:	80 81       	ld	r24, Z
    3d1e:	80 62       	ori	r24, 0x20	; 32
    3d20:	8c 93       	st	X, r24
		 Local_enuErrorState=ES_OK;
    3d22:	81 e0       	ldi	r24, 0x01	; 1
    3d24:	89 83       	std	Y+1, r24	; 0x01
    3d26:	02 c0       	rjmp	.+4      	; 0x3d2c <ADC_enuEnableTriggeringMode+0x216>
		 break;
	 default:
		 Local_enuErrorState=ES_OUT_OF_RANGE;
    3d28:	83 e0       	ldi	r24, 0x03	; 3
    3d2a:	89 83       	std	Y+1, r24	; 0x01
		 break;
	 }
	 ADCSRA |=(1<<5);
    3d2c:	a6 e2       	ldi	r26, 0x26	; 38
    3d2e:	b0 e0       	ldi	r27, 0x00	; 0
    3d30:	e6 e2       	ldi	r30, 0x26	; 38
    3d32:	f0 e0       	ldi	r31, 0x00	; 0
    3d34:	80 81       	ld	r24, Z
    3d36:	80 62       	ori	r24, 0x20	; 32
    3d38:	8c 93       	st	X, r24

	 return Local_enuErrorState;
    3d3a:	89 81       	ldd	r24, Y+1	; 0x01
}
    3d3c:	0f 90       	pop	r0
    3d3e:	0f 90       	pop	r0
    3d40:	0f 90       	pop	r0
    3d42:	0f 90       	pop	r0
    3d44:	cf 91       	pop	r28
    3d46:	df 91       	pop	r29
    3d48:	08 95       	ret

00003d4a <ADC_enuDisableTriggeringMode>:

ES_t ADC_enuDisableTriggeringMode(void)
{
    3d4a:	df 93       	push	r29
    3d4c:	cf 93       	push	r28
    3d4e:	0f 92       	push	r0
    3d50:	cd b7       	in	r28, 0x3d	; 61
    3d52:	de b7       	in	r29, 0x3e	; 62
	 ES_t Local_enuErrorState=ES_NOK;
    3d54:	19 82       	std	Y+1, r1	; 0x01

	 ADCSRA &=~(1<<5);
    3d56:	a6 e2       	ldi	r26, 0x26	; 38
    3d58:	b0 e0       	ldi	r27, 0x00	; 0
    3d5a:	e6 e2       	ldi	r30, 0x26	; 38
    3d5c:	f0 e0       	ldi	r31, 0x00	; 0
    3d5e:	80 81       	ld	r24, Z
    3d60:	8f 7d       	andi	r24, 0xDF	; 223
    3d62:	8c 93       	st	X, r24
	 Local_enuErrorState=ES_OK;
    3d64:	81 e0       	ldi	r24, 0x01	; 1
    3d66:	89 83       	std	Y+1, r24	; 0x01

	 return Local_enuErrorState;
    3d68:	89 81       	ldd	r24, Y+1	; 0x01
}
    3d6a:	0f 90       	pop	r0
    3d6c:	cf 91       	pop	r28
    3d6e:	df 91       	pop	r29
    3d70:	08 95       	ret

00003d72 <ADC_enuEnableInterruptMode>:

ES_t ADC_enuEnableInterruptMode(void)
{
    3d72:	df 93       	push	r29
    3d74:	cf 93       	push	r28
    3d76:	0f 92       	push	r0
    3d78:	cd b7       	in	r28, 0x3d	; 61
    3d7a:	de b7       	in	r29, 0x3e	; 62
	 ES_t Local_enuErrorState=ES_NOK;
    3d7c:	19 82       	std	Y+1, r1	; 0x01

	 ADCSRA |=(1<<3);
    3d7e:	a6 e2       	ldi	r26, 0x26	; 38
    3d80:	b0 e0       	ldi	r27, 0x00	; 0
    3d82:	e6 e2       	ldi	r30, 0x26	; 38
    3d84:	f0 e0       	ldi	r31, 0x00	; 0
    3d86:	80 81       	ld	r24, Z
    3d88:	88 60       	ori	r24, 0x08	; 8
    3d8a:	8c 93       	st	X, r24
	 Local_enuErrorState=ES_OK;
    3d8c:	81 e0       	ldi	r24, 0x01	; 1
    3d8e:	89 83       	std	Y+1, r24	; 0x01

	 return Local_enuErrorState;
    3d90:	89 81       	ldd	r24, Y+1	; 0x01
}
    3d92:	0f 90       	pop	r0
    3d94:	cf 91       	pop	r28
    3d96:	df 91       	pop	r29
    3d98:	08 95       	ret

00003d9a <ADC_enuDisableInterruptMode>:

ES_t ADC_enuDisableInterruptMode(void)
{
    3d9a:	df 93       	push	r29
    3d9c:	cf 93       	push	r28
    3d9e:	0f 92       	push	r0
    3da0:	cd b7       	in	r28, 0x3d	; 61
    3da2:	de b7       	in	r29, 0x3e	; 62
	 ES_t Local_enuErrorState=ES_NOK;
    3da4:	19 82       	std	Y+1, r1	; 0x01

	 ADCSRA &=~(1<<3);
    3da6:	a6 e2       	ldi	r26, 0x26	; 38
    3da8:	b0 e0       	ldi	r27, 0x00	; 0
    3daa:	e6 e2       	ldi	r30, 0x26	; 38
    3dac:	f0 e0       	ldi	r31, 0x00	; 0
    3dae:	80 81       	ld	r24, Z
    3db0:	87 7f       	andi	r24, 0xF7	; 247
    3db2:	8c 93       	st	X, r24
	 Local_enuErrorState=ES_OK;
    3db4:	81 e0       	ldi	r24, 0x01	; 1
    3db6:	89 83       	std	Y+1, r24	; 0x01

	 return Local_enuErrorState;
    3db8:	89 81       	ldd	r24, Y+1	; 0x01
}
    3dba:	0f 90       	pop	r0
    3dbc:	cf 91       	pop	r28
    3dbe:	df 91       	pop	r29
    3dc0:	08 95       	ret

00003dc2 <ADC_enuEnable>:

ES_t ADC_enuEnable(void)
{
    3dc2:	df 93       	push	r29
    3dc4:	cf 93       	push	r28
    3dc6:	0f 92       	push	r0
    3dc8:	cd b7       	in	r28, 0x3d	; 61
    3dca:	de b7       	in	r29, 0x3e	; 62
	 ES_t Local_enuErrorState=ES_NOK;
    3dcc:	19 82       	std	Y+1, r1	; 0x01

	 ADCSRA |=(1<<7);
    3dce:	a6 e2       	ldi	r26, 0x26	; 38
    3dd0:	b0 e0       	ldi	r27, 0x00	; 0
    3dd2:	e6 e2       	ldi	r30, 0x26	; 38
    3dd4:	f0 e0       	ldi	r31, 0x00	; 0
    3dd6:	80 81       	ld	r24, Z
    3dd8:	80 68       	ori	r24, 0x80	; 128
    3dda:	8c 93       	st	X, r24
	 Local_enuErrorState=ES_OK;
    3ddc:	81 e0       	ldi	r24, 0x01	; 1
    3dde:	89 83       	std	Y+1, r24	; 0x01

	 return Local_enuErrorState;
    3de0:	89 81       	ldd	r24, Y+1	; 0x01
}
    3de2:	0f 90       	pop	r0
    3de4:	cf 91       	pop	r28
    3de6:	df 91       	pop	r29
    3de8:	08 95       	ret

00003dea <ADC_enuDisable>:

ES_t ADC_enuDisable(void)
{
    3dea:	df 93       	push	r29
    3dec:	cf 93       	push	r28
    3dee:	0f 92       	push	r0
    3df0:	cd b7       	in	r28, 0x3d	; 61
    3df2:	de b7       	in	r29, 0x3e	; 62
	 ES_t Local_enuErrorState=ES_NOK;
    3df4:	19 82       	std	Y+1, r1	; 0x01

	 ADCSRA &=~(1<<7);
    3df6:	a6 e2       	ldi	r26, 0x26	; 38
    3df8:	b0 e0       	ldi	r27, 0x00	; 0
    3dfa:	e6 e2       	ldi	r30, 0x26	; 38
    3dfc:	f0 e0       	ldi	r31, 0x00	; 0
    3dfe:	80 81       	ld	r24, Z
    3e00:	8f 77       	andi	r24, 0x7F	; 127
    3e02:	8c 93       	st	X, r24
	 Local_enuErrorState=ES_OK;
    3e04:	81 e0       	ldi	r24, 0x01	; 1
    3e06:	89 83       	std	Y+1, r24	; 0x01

	 return Local_enuErrorState;
    3e08:	89 81       	ldd	r24, Y+1	; 0x01
}
    3e0a:	0f 90       	pop	r0
    3e0c:	cf 91       	pop	r28
    3e0e:	df 91       	pop	r29
    3e10:	08 95       	ret

00003e12 <__vector_16>:


ISR(VECT_ADC)
{
    3e12:	1f 92       	push	r1
    3e14:	0f 92       	push	r0
    3e16:	0f b6       	in	r0, 0x3f	; 63
    3e18:	0f 92       	push	r0
    3e1a:	11 24       	eor	r1, r1
    3e1c:	2f 93       	push	r18
    3e1e:	3f 93       	push	r19
    3e20:	4f 93       	push	r20
    3e22:	5f 93       	push	r21
    3e24:	6f 93       	push	r22
    3e26:	7f 93       	push	r23
    3e28:	8f 93       	push	r24
    3e2a:	9f 93       	push	r25
    3e2c:	af 93       	push	r26
    3e2e:	bf 93       	push	r27
    3e30:	ef 93       	push	r30
    3e32:	ff 93       	push	r31
    3e34:	df 93       	push	r29
    3e36:	cf 93       	push	r28
    3e38:	cd b7       	in	r28, 0x3d	; 61
    3e3a:	de b7       	in	r29, 0x3e	; 62
	if(ADC_pfunISRFun!=NULL)
    3e3c:	80 91 f4 02 	lds	r24, 0x02F4
    3e40:	90 91 f5 02 	lds	r25, 0x02F5
    3e44:	00 97       	sbiw	r24, 0x00	; 0
    3e46:	49 f0       	breq	.+18     	; 0x3e5a <__vector_16+0x48>
	{
		ADC_pfunISRFun(ADC_pvidISRParameter);
    3e48:	e0 91 f4 02 	lds	r30, 0x02F4
    3e4c:	f0 91 f5 02 	lds	r31, 0x02F5
    3e50:	80 91 f6 02 	lds	r24, 0x02F6
    3e54:	90 91 f7 02 	lds	r25, 0x02F7
    3e58:	09 95       	icall
	}

}
    3e5a:	cf 91       	pop	r28
    3e5c:	df 91       	pop	r29
    3e5e:	ff 91       	pop	r31
    3e60:	ef 91       	pop	r30
    3e62:	bf 91       	pop	r27
    3e64:	af 91       	pop	r26
    3e66:	9f 91       	pop	r25
    3e68:	8f 91       	pop	r24
    3e6a:	7f 91       	pop	r23
    3e6c:	6f 91       	pop	r22
    3e6e:	5f 91       	pop	r21
    3e70:	4f 91       	pop	r20
    3e72:	3f 91       	pop	r19
    3e74:	2f 91       	pop	r18
    3e76:	0f 90       	pop	r0
    3e78:	0f be       	out	0x3f, r0	; 63
    3e7a:	0f 90       	pop	r0
    3e7c:	1f 90       	pop	r1
    3e7e:	18 95       	reti

00003e80 <SERVO_enudInit>:
#include "Servo_priv.h"



ES_t SERVO_enudInit(void)
{
    3e80:	df 93       	push	r29
    3e82:	cf 93       	push	r28
    3e84:	0f 92       	push	r0
    3e86:	cd b7       	in	r28, 0x3d	; 61
    3e88:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
    3e8a:	19 82       	std	Y+1, r1	; 0x01

	Local_enuErrorState= DIO_enuInit();
    3e8c:	0e 94 f7 17 	call	0x2fee	; 0x2fee <DIO_enuInit>
    3e90:	89 83       	std	Y+1, r24	; 0x01
	Local_enuErrorState= TIMER1_enuInit();
    3e92:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <TIMER1_enuInit>
    3e96:	89 83       	std	Y+1, r24	; 0x01
#if SERVO_CHANNEL==TIMER1_Channel_A
	Local_enuErrorState= DIO_enuSetPinDirection(DIO_u8PORTD,DIO_u8PIN5,DIO_u8OUTPUT);
	Local_enuErrorState= DIO_enuSetPinValue(DIO_u8PORTD,DIO_u8PIN5,DIO_u8LOW);

#elif SERVO_CHANNEL==TIMER1_Channel_B
	Local_enuErrorState= DIO_enuSetPinDirection(DIO_u8PORTD,DIO_u8PIN4,DIO_u8OUTPUT);
    3e98:	83 e0       	ldi	r24, 0x03	; 3
    3e9a:	64 e0       	ldi	r22, 0x04	; 4
    3e9c:	41 e0       	ldi	r20, 0x01	; 1
    3e9e:	0e 94 71 19 	call	0x32e2	; 0x32e2 <DIO_enuSetPinDirection>
    3ea2:	89 83       	std	Y+1, r24	; 0x01
	Local_enuErrorState= DIO_enuSetPinValue(DIO_u8PORTD,DIO_u8PIN4,DIO_u8LOW);
    3ea4:	83 e0       	ldi	r24, 0x03	; 3
    3ea6:	64 e0       	ldi	r22, 0x04	; 4
    3ea8:	40 e0       	ldi	r20, 0x00	; 0
    3eaa:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <DIO_enuSetPinValue>
    3eae:	89 83       	std	Y+1, r24	; 0x01
#else
#error "Attention!!, your PWM_CHANNEL Selection is Wrong...."

#endif

	Local_enuErrorState= TIMER1_enuSetICR(SERVO_PERIOD);
    3eb0:	80 e2       	ldi	r24, 0x20	; 32
    3eb2:	9e e4       	ldi	r25, 0x4E	; 78
    3eb4:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <TIMER1_enuSetICR>
    3eb8:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    3eba:	89 81       	ldd	r24, Y+1	; 0x01
}
    3ebc:	0f 90       	pop	r0
    3ebe:	cf 91       	pop	r28
    3ec0:	df 91       	pop	r29
    3ec2:	08 95       	ret

00003ec4 <SERVO_enuSetAngle>:

ES_t SERVO_enuSetAngle(s8 Copy_s8Angle)
{
    3ec4:	df 93       	push	r29
    3ec6:	cf 93       	push	r28
    3ec8:	00 d0       	rcall	.+0      	; 0x3eca <SERVO_enuSetAngle+0x6>
    3eca:	00 d0       	rcall	.+0      	; 0x3ecc <SERVO_enuSetAngle+0x8>
    3ecc:	00 d0       	rcall	.+0      	; 0x3ece <SERVO_enuSetAngle+0xa>
    3ece:	cd b7       	in	r28, 0x3d	; 61
    3ed0:	de b7       	in	r29, 0x3e	; 62
    3ed2:	8e 83       	std	Y+6, r24	; 0x06
	ES_t Local_enuErrorState=ES_NOK;
    3ed4:	1d 82       	std	Y+5, r1	; 0x05

	Copy_s8Angle+=90;
    3ed6:	8e 81       	ldd	r24, Y+6	; 0x06
    3ed8:	86 5a       	subi	r24, 0xA6	; 166
    3eda:	8e 83       	std	Y+6, r24	; 0x06
	u32 Local_u32TON=1000+((u32)Copy_s8Angle*1000/180);
    3edc:	8e 81       	ldd	r24, Y+6	; 0x06
    3ede:	88 2f       	mov	r24, r24
    3ee0:	90 e0       	ldi	r25, 0x00	; 0
    3ee2:	a0 e0       	ldi	r26, 0x00	; 0
    3ee4:	b0 e0       	ldi	r27, 0x00	; 0
    3ee6:	28 ee       	ldi	r18, 0xE8	; 232
    3ee8:	33 e0       	ldi	r19, 0x03	; 3
    3eea:	40 e0       	ldi	r20, 0x00	; 0
    3eec:	50 e0       	ldi	r21, 0x00	; 0
    3eee:	bc 01       	movw	r22, r24
    3ef0:	cd 01       	movw	r24, r26
    3ef2:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <__mulsi3>
    3ef6:	dc 01       	movw	r26, r24
    3ef8:	cb 01       	movw	r24, r22
    3efa:	24 eb       	ldi	r18, 0xB4	; 180
    3efc:	30 e0       	ldi	r19, 0x00	; 0
    3efe:	40 e0       	ldi	r20, 0x00	; 0
    3f00:	50 e0       	ldi	r21, 0x00	; 0
    3f02:	bc 01       	movw	r22, r24
    3f04:	cd 01       	movw	r24, r26
    3f06:	0e 94 4f 2d 	call	0x5a9e	; 0x5a9e <__udivmodsi4>
    3f0a:	da 01       	movw	r26, r20
    3f0c:	c9 01       	movw	r24, r18
    3f0e:	88 51       	subi	r24, 0x18	; 24
    3f10:	9c 4f       	sbci	r25, 0xFC	; 252
    3f12:	af 4f       	sbci	r26, 0xFF	; 255
    3f14:	bf 4f       	sbci	r27, 0xFF	; 255
    3f16:	89 83       	std	Y+1, r24	; 0x01
    3f18:	9a 83       	std	Y+2, r25	; 0x02
    3f1a:	ab 83       	std	Y+3, r26	; 0x03
    3f1c:	bc 83       	std	Y+4, r27	; 0x04

#if SERVO_CHANNEL==TIMER1_Channel_A
	Local_enuErrorState= TIMER1_enuSetChannelACTC(Local_u32TON);

#elif SERVO_CHANNEL==TIMER1_Channel_B
	Local_enuErrorState= TIMER1_enuSetChannelBCTC(Local_u32TON);
    3f1e:	89 81       	ldd	r24, Y+1	; 0x01
    3f20:	9a 81       	ldd	r25, Y+2	; 0x02
    3f22:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <TIMER1_enuSetChannelBCTC>
    3f26:	8d 83       	std	Y+5, r24	; 0x05

#endif



	return Local_enuErrorState;
    3f28:	8d 81       	ldd	r24, Y+5	; 0x05
}
    3f2a:	26 96       	adiw	r28, 0x06	; 6
    3f2c:	0f b6       	in	r0, 0x3f	; 63
    3f2e:	f8 94       	cli
    3f30:	de bf       	out	0x3e, r29	; 62
    3f32:	0f be       	out	0x3f, r0	; 63
    3f34:	cd bf       	out	0x3d, r28	; 61
    3f36:	cf 91       	pop	r28
    3f38:	df 91       	pop	r29
    3f3a:	08 95       	ret

00003f3c <LED_enuInit>:




ES_t LED_enuInit(LED_t * copy_pstrLedConfig)
{
    3f3c:	df 93       	push	r29
    3f3e:	cf 93       	push	r28
    3f40:	00 d0       	rcall	.+0      	; 0x3f42 <LED_enuInit+0x6>
    3f42:	00 d0       	rcall	.+0      	; 0x3f44 <LED_enuInit+0x8>
    3f44:	0f 92       	push	r0
    3f46:	cd b7       	in	r28, 0x3d	; 61
    3f48:	de b7       	in	r29, 0x3e	; 62
    3f4a:	9c 83       	std	Y+4, r25	; 0x04
    3f4c:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState=ES_NOK;
    3f4e:	1a 82       	std	Y+2, r1	; 0x02
	if(copy_pstrLedConfig !=NULL)
    3f50:	8b 81       	ldd	r24, Y+3	; 0x03
    3f52:	9c 81       	ldd	r25, Y+4	; 0x04
    3f54:	00 97       	sbiw	r24, 0x00	; 0
    3f56:	09 f4       	brne	.+2      	; 0x3f5a <LED_enuInit+0x1e>
    3f58:	24 c1       	rjmp	.+584    	; 0x41a2 <LED_enuInit+0x266>
	{
		u8 Local_enuIterator=0;
    3f5a:	19 82       	std	Y+1, r1	; 0x01
		for(Local_enuIterator=0;Local_enuIterator<LED_NUM;Local_enuIterator++)
    3f5c:	19 82       	std	Y+1, r1	; 0x01
    3f5e:	1c c1       	rjmp	.+568    	; 0x4198 <LED_enuInit+0x25c>
		{
			Local_enuErrorState=DIO_enuSetPinDirection(copy_pstrLedConfig[Local_enuIterator].LED_u8PortID,copy_pstrLedConfig[Local_enuIterator].LED_u8PinID,DIO_u8OUTPUT);
    3f60:	89 81       	ldd	r24, Y+1	; 0x01
    3f62:	88 2f       	mov	r24, r24
    3f64:	90 e0       	ldi	r25, 0x00	; 0
    3f66:	9c 01       	movw	r18, r24
    3f68:	22 0f       	add	r18, r18
    3f6a:	33 1f       	adc	r19, r19
    3f6c:	22 0f       	add	r18, r18
    3f6e:	33 1f       	adc	r19, r19
    3f70:	8b 81       	ldd	r24, Y+3	; 0x03
    3f72:	9c 81       	ldd	r25, Y+4	; 0x04
    3f74:	fc 01       	movw	r30, r24
    3f76:	e2 0f       	add	r30, r18
    3f78:	f3 1f       	adc	r31, r19
    3f7a:	40 81       	ld	r20, Z
    3f7c:	89 81       	ldd	r24, Y+1	; 0x01
    3f7e:	88 2f       	mov	r24, r24
    3f80:	90 e0       	ldi	r25, 0x00	; 0
    3f82:	9c 01       	movw	r18, r24
    3f84:	22 0f       	add	r18, r18
    3f86:	33 1f       	adc	r19, r19
    3f88:	22 0f       	add	r18, r18
    3f8a:	33 1f       	adc	r19, r19
    3f8c:	8b 81       	ldd	r24, Y+3	; 0x03
    3f8e:	9c 81       	ldd	r25, Y+4	; 0x04
    3f90:	fc 01       	movw	r30, r24
    3f92:	e2 0f       	add	r30, r18
    3f94:	f3 1f       	adc	r31, r19
    3f96:	91 81       	ldd	r25, Z+1	; 0x01
    3f98:	84 2f       	mov	r24, r20
    3f9a:	69 2f       	mov	r22, r25
    3f9c:	41 e0       	ldi	r20, 0x01	; 1
    3f9e:	0e 94 71 19 	call	0x32e2	; 0x32e2 <DIO_enuSetPinDirection>
    3fa2:	8a 83       	std	Y+2, r24	; 0x02
			if(copy_pstrLedConfig[Local_enuIterator].LED_u8Connection==LED_SINK)
    3fa4:	89 81       	ldd	r24, Y+1	; 0x01
    3fa6:	88 2f       	mov	r24, r24
    3fa8:	90 e0       	ldi	r25, 0x00	; 0
    3faa:	9c 01       	movw	r18, r24
    3fac:	22 0f       	add	r18, r18
    3fae:	33 1f       	adc	r19, r19
    3fb0:	22 0f       	add	r18, r18
    3fb2:	33 1f       	adc	r19, r19
    3fb4:	8b 81       	ldd	r24, Y+3	; 0x03
    3fb6:	9c 81       	ldd	r25, Y+4	; 0x04
    3fb8:	fc 01       	movw	r30, r24
    3fba:	e2 0f       	add	r30, r18
    3fbc:	f3 1f       	adc	r31, r19
    3fbe:	82 81       	ldd	r24, Z+2	; 0x02
    3fc0:	88 23       	and	r24, r24
    3fc2:	09 f0       	breq	.+2      	; 0x3fc6 <LED_enuInit+0x8a>
    3fc4:	69 c0       	rjmp	.+210    	; 0x4098 <LED_enuInit+0x15c>
			{
				if(copy_pstrLedConfig[Local_enuIterator].LED_u8InitState==LED_ON)
    3fc6:	89 81       	ldd	r24, Y+1	; 0x01
    3fc8:	88 2f       	mov	r24, r24
    3fca:	90 e0       	ldi	r25, 0x00	; 0
    3fcc:	9c 01       	movw	r18, r24
    3fce:	22 0f       	add	r18, r18
    3fd0:	33 1f       	adc	r19, r19
    3fd2:	22 0f       	add	r18, r18
    3fd4:	33 1f       	adc	r19, r19
    3fd6:	8b 81       	ldd	r24, Y+3	; 0x03
    3fd8:	9c 81       	ldd	r25, Y+4	; 0x04
    3fda:	fc 01       	movw	r30, r24
    3fdc:	e2 0f       	add	r30, r18
    3fde:	f3 1f       	adc	r31, r19
    3fe0:	83 81       	ldd	r24, Z+3	; 0x03
    3fe2:	89 30       	cpi	r24, 0x09	; 9
    3fe4:	19 f5       	brne	.+70     	; 0x402c <LED_enuInit+0xf0>
				{
					Local_enuErrorState=DIO_enuSetPinValue(copy_pstrLedConfig[Local_enuIterator].LED_u8PortID,copy_pstrLedConfig[Local_enuIterator].LED_u8PinID,DIO_u8LOW);
    3fe6:	89 81       	ldd	r24, Y+1	; 0x01
    3fe8:	88 2f       	mov	r24, r24
    3fea:	90 e0       	ldi	r25, 0x00	; 0
    3fec:	9c 01       	movw	r18, r24
    3fee:	22 0f       	add	r18, r18
    3ff0:	33 1f       	adc	r19, r19
    3ff2:	22 0f       	add	r18, r18
    3ff4:	33 1f       	adc	r19, r19
    3ff6:	8b 81       	ldd	r24, Y+3	; 0x03
    3ff8:	9c 81       	ldd	r25, Y+4	; 0x04
    3ffa:	fc 01       	movw	r30, r24
    3ffc:	e2 0f       	add	r30, r18
    3ffe:	f3 1f       	adc	r31, r19
    4000:	40 81       	ld	r20, Z
    4002:	89 81       	ldd	r24, Y+1	; 0x01
    4004:	88 2f       	mov	r24, r24
    4006:	90 e0       	ldi	r25, 0x00	; 0
    4008:	9c 01       	movw	r18, r24
    400a:	22 0f       	add	r18, r18
    400c:	33 1f       	adc	r19, r19
    400e:	22 0f       	add	r18, r18
    4010:	33 1f       	adc	r19, r19
    4012:	8b 81       	ldd	r24, Y+3	; 0x03
    4014:	9c 81       	ldd	r25, Y+4	; 0x04
    4016:	fc 01       	movw	r30, r24
    4018:	e2 0f       	add	r30, r18
    401a:	f3 1f       	adc	r31, r19
    401c:	91 81       	ldd	r25, Z+1	; 0x01
    401e:	84 2f       	mov	r24, r20
    4020:	69 2f       	mov	r22, r25
    4022:	40 e0       	ldi	r20, 0x00	; 0
    4024:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <DIO_enuSetPinValue>
    4028:	8a 83       	std	Y+2, r24	; 0x02
    402a:	b3 c0       	rjmp	.+358    	; 0x4192 <LED_enuInit+0x256>
				}
				else if(copy_pstrLedConfig[Local_enuIterator].LED_u8InitState==LED_OFF)
    402c:	89 81       	ldd	r24, Y+1	; 0x01
    402e:	88 2f       	mov	r24, r24
    4030:	90 e0       	ldi	r25, 0x00	; 0
    4032:	9c 01       	movw	r18, r24
    4034:	22 0f       	add	r18, r18
    4036:	33 1f       	adc	r19, r19
    4038:	22 0f       	add	r18, r18
    403a:	33 1f       	adc	r19, r19
    403c:	8b 81       	ldd	r24, Y+3	; 0x03
    403e:	9c 81       	ldd	r25, Y+4	; 0x04
    4040:	fc 01       	movw	r30, r24
    4042:	e2 0f       	add	r30, r18
    4044:	f3 1f       	adc	r31, r19
    4046:	83 81       	ldd	r24, Z+3	; 0x03
    4048:	8b 37       	cpi	r24, 0x7B	; 123
    404a:	19 f5       	brne	.+70     	; 0x4092 <LED_enuInit+0x156>
				{
					Local_enuErrorState=DIO_enuSetPinValue(copy_pstrLedConfig[Local_enuIterator].LED_u8PortID,copy_pstrLedConfig[Local_enuIterator].LED_u8PinID,DIO_u8HIGH);
    404c:	89 81       	ldd	r24, Y+1	; 0x01
    404e:	88 2f       	mov	r24, r24
    4050:	90 e0       	ldi	r25, 0x00	; 0
    4052:	9c 01       	movw	r18, r24
    4054:	22 0f       	add	r18, r18
    4056:	33 1f       	adc	r19, r19
    4058:	22 0f       	add	r18, r18
    405a:	33 1f       	adc	r19, r19
    405c:	8b 81       	ldd	r24, Y+3	; 0x03
    405e:	9c 81       	ldd	r25, Y+4	; 0x04
    4060:	fc 01       	movw	r30, r24
    4062:	e2 0f       	add	r30, r18
    4064:	f3 1f       	adc	r31, r19
    4066:	40 81       	ld	r20, Z
    4068:	89 81       	ldd	r24, Y+1	; 0x01
    406a:	88 2f       	mov	r24, r24
    406c:	90 e0       	ldi	r25, 0x00	; 0
    406e:	9c 01       	movw	r18, r24
    4070:	22 0f       	add	r18, r18
    4072:	33 1f       	adc	r19, r19
    4074:	22 0f       	add	r18, r18
    4076:	33 1f       	adc	r19, r19
    4078:	8b 81       	ldd	r24, Y+3	; 0x03
    407a:	9c 81       	ldd	r25, Y+4	; 0x04
    407c:	fc 01       	movw	r30, r24
    407e:	e2 0f       	add	r30, r18
    4080:	f3 1f       	adc	r31, r19
    4082:	91 81       	ldd	r25, Z+1	; 0x01
    4084:	84 2f       	mov	r24, r20
    4086:	69 2f       	mov	r22, r25
    4088:	41 e0       	ldi	r20, 0x01	; 1
    408a:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <DIO_enuSetPinValue>
    408e:	8a 83       	std	Y+2, r24	; 0x02
    4090:	80 c0       	rjmp	.+256    	; 0x4192 <LED_enuInit+0x256>
				}
				else
				{
					return ES_OUT_OF_RANGE;
    4092:	83 e0       	ldi	r24, 0x03	; 3
    4094:	8d 83       	std	Y+5, r24	; 0x05
    4096:	89 c0       	rjmp	.+274    	; 0x41aa <LED_enuInit+0x26e>
				}
			}
			else if(copy_pstrLedConfig[Local_enuIterator].LED_u8Connection==LED_SOURCE)
    4098:	89 81       	ldd	r24, Y+1	; 0x01
    409a:	88 2f       	mov	r24, r24
    409c:	90 e0       	ldi	r25, 0x00	; 0
    409e:	9c 01       	movw	r18, r24
    40a0:	22 0f       	add	r18, r18
    40a2:	33 1f       	adc	r19, r19
    40a4:	22 0f       	add	r18, r18
    40a6:	33 1f       	adc	r19, r19
    40a8:	8b 81       	ldd	r24, Y+3	; 0x03
    40aa:	9c 81       	ldd	r25, Y+4	; 0x04
    40ac:	fc 01       	movw	r30, r24
    40ae:	e2 0f       	add	r30, r18
    40b0:	f3 1f       	adc	r31, r19
    40b2:	82 81       	ldd	r24, Z+2	; 0x02
    40b4:	81 30       	cpi	r24, 0x01	; 1
    40b6:	09 f0       	breq	.+2      	; 0x40ba <LED_enuInit+0x17e>
    40b8:	69 c0       	rjmp	.+210    	; 0x418c <LED_enuInit+0x250>
			{
				if(copy_pstrLedConfig[Local_enuIterator].LED_u8InitState==LED_ON)
    40ba:	89 81       	ldd	r24, Y+1	; 0x01
    40bc:	88 2f       	mov	r24, r24
    40be:	90 e0       	ldi	r25, 0x00	; 0
    40c0:	9c 01       	movw	r18, r24
    40c2:	22 0f       	add	r18, r18
    40c4:	33 1f       	adc	r19, r19
    40c6:	22 0f       	add	r18, r18
    40c8:	33 1f       	adc	r19, r19
    40ca:	8b 81       	ldd	r24, Y+3	; 0x03
    40cc:	9c 81       	ldd	r25, Y+4	; 0x04
    40ce:	fc 01       	movw	r30, r24
    40d0:	e2 0f       	add	r30, r18
    40d2:	f3 1f       	adc	r31, r19
    40d4:	83 81       	ldd	r24, Z+3	; 0x03
    40d6:	89 30       	cpi	r24, 0x09	; 9
    40d8:	19 f5       	brne	.+70     	; 0x4120 <LED_enuInit+0x1e4>
				{
					Local_enuErrorState=DIO_enuSetPinValue(copy_pstrLedConfig[Local_enuIterator].LED_u8PortID,copy_pstrLedConfig[Local_enuIterator].LED_u8PinID,DIO_u8HIGH);
    40da:	89 81       	ldd	r24, Y+1	; 0x01
    40dc:	88 2f       	mov	r24, r24
    40de:	90 e0       	ldi	r25, 0x00	; 0
    40e0:	9c 01       	movw	r18, r24
    40e2:	22 0f       	add	r18, r18
    40e4:	33 1f       	adc	r19, r19
    40e6:	22 0f       	add	r18, r18
    40e8:	33 1f       	adc	r19, r19
    40ea:	8b 81       	ldd	r24, Y+3	; 0x03
    40ec:	9c 81       	ldd	r25, Y+4	; 0x04
    40ee:	fc 01       	movw	r30, r24
    40f0:	e2 0f       	add	r30, r18
    40f2:	f3 1f       	adc	r31, r19
    40f4:	40 81       	ld	r20, Z
    40f6:	89 81       	ldd	r24, Y+1	; 0x01
    40f8:	88 2f       	mov	r24, r24
    40fa:	90 e0       	ldi	r25, 0x00	; 0
    40fc:	9c 01       	movw	r18, r24
    40fe:	22 0f       	add	r18, r18
    4100:	33 1f       	adc	r19, r19
    4102:	22 0f       	add	r18, r18
    4104:	33 1f       	adc	r19, r19
    4106:	8b 81       	ldd	r24, Y+3	; 0x03
    4108:	9c 81       	ldd	r25, Y+4	; 0x04
    410a:	fc 01       	movw	r30, r24
    410c:	e2 0f       	add	r30, r18
    410e:	f3 1f       	adc	r31, r19
    4110:	91 81       	ldd	r25, Z+1	; 0x01
    4112:	84 2f       	mov	r24, r20
    4114:	69 2f       	mov	r22, r25
    4116:	41 e0       	ldi	r20, 0x01	; 1
    4118:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <DIO_enuSetPinValue>
    411c:	8a 83       	std	Y+2, r24	; 0x02
    411e:	39 c0       	rjmp	.+114    	; 0x4192 <LED_enuInit+0x256>
				}
				else if(copy_pstrLedConfig[Local_enuIterator].LED_u8InitState==LED_OFF)
    4120:	89 81       	ldd	r24, Y+1	; 0x01
    4122:	88 2f       	mov	r24, r24
    4124:	90 e0       	ldi	r25, 0x00	; 0
    4126:	9c 01       	movw	r18, r24
    4128:	22 0f       	add	r18, r18
    412a:	33 1f       	adc	r19, r19
    412c:	22 0f       	add	r18, r18
    412e:	33 1f       	adc	r19, r19
    4130:	8b 81       	ldd	r24, Y+3	; 0x03
    4132:	9c 81       	ldd	r25, Y+4	; 0x04
    4134:	fc 01       	movw	r30, r24
    4136:	e2 0f       	add	r30, r18
    4138:	f3 1f       	adc	r31, r19
    413a:	83 81       	ldd	r24, Z+3	; 0x03
    413c:	8b 37       	cpi	r24, 0x7B	; 123
    413e:	19 f5       	brne	.+70     	; 0x4186 <LED_enuInit+0x24a>
				{
					Local_enuErrorState=DIO_enuSetPinValue(copy_pstrLedConfig[Local_enuIterator].LED_u8PortID,copy_pstrLedConfig[Local_enuIterator].LED_u8PinID,DIO_u8LOW);
    4140:	89 81       	ldd	r24, Y+1	; 0x01
    4142:	88 2f       	mov	r24, r24
    4144:	90 e0       	ldi	r25, 0x00	; 0
    4146:	9c 01       	movw	r18, r24
    4148:	22 0f       	add	r18, r18
    414a:	33 1f       	adc	r19, r19
    414c:	22 0f       	add	r18, r18
    414e:	33 1f       	adc	r19, r19
    4150:	8b 81       	ldd	r24, Y+3	; 0x03
    4152:	9c 81       	ldd	r25, Y+4	; 0x04
    4154:	fc 01       	movw	r30, r24
    4156:	e2 0f       	add	r30, r18
    4158:	f3 1f       	adc	r31, r19
    415a:	40 81       	ld	r20, Z
    415c:	89 81       	ldd	r24, Y+1	; 0x01
    415e:	88 2f       	mov	r24, r24
    4160:	90 e0       	ldi	r25, 0x00	; 0
    4162:	9c 01       	movw	r18, r24
    4164:	22 0f       	add	r18, r18
    4166:	33 1f       	adc	r19, r19
    4168:	22 0f       	add	r18, r18
    416a:	33 1f       	adc	r19, r19
    416c:	8b 81       	ldd	r24, Y+3	; 0x03
    416e:	9c 81       	ldd	r25, Y+4	; 0x04
    4170:	fc 01       	movw	r30, r24
    4172:	e2 0f       	add	r30, r18
    4174:	f3 1f       	adc	r31, r19
    4176:	91 81       	ldd	r25, Z+1	; 0x01
    4178:	84 2f       	mov	r24, r20
    417a:	69 2f       	mov	r22, r25
    417c:	40 e0       	ldi	r20, 0x00	; 0
    417e:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <DIO_enuSetPinValue>
    4182:	8a 83       	std	Y+2, r24	; 0x02
    4184:	06 c0       	rjmp	.+12     	; 0x4192 <LED_enuInit+0x256>
				}
				else
				{
					return ES_OUT_OF_RANGE;
    4186:	83 e0       	ldi	r24, 0x03	; 3
    4188:	8d 83       	std	Y+5, r24	; 0x05
    418a:	0f c0       	rjmp	.+30     	; 0x41aa <LED_enuInit+0x26e>
				}
			}
			else
			{
				return ES_OUT_OF_RANGE;
    418c:	83 e0       	ldi	r24, 0x03	; 3
    418e:	8d 83       	std	Y+5, r24	; 0x05
    4190:	0c c0       	rjmp	.+24     	; 0x41aa <LED_enuInit+0x26e>
{
	ES_t Local_enuErrorState=ES_NOK;
	if(copy_pstrLedConfig !=NULL)
	{
		u8 Local_enuIterator=0;
		for(Local_enuIterator=0;Local_enuIterator<LED_NUM;Local_enuIterator++)
    4192:	89 81       	ldd	r24, Y+1	; 0x01
    4194:	8f 5f       	subi	r24, 0xFF	; 255
    4196:	89 83       	std	Y+1, r24	; 0x01
    4198:	89 81       	ldd	r24, Y+1	; 0x01
    419a:	85 30       	cpi	r24, 0x05	; 5
    419c:	08 f4       	brcc	.+2      	; 0x41a0 <LED_enuInit+0x264>
    419e:	e0 ce       	rjmp	.-576    	; 0x3f60 <LED_enuInit+0x24>
    41a0:	02 c0       	rjmp	.+4      	; 0x41a6 <LED_enuInit+0x26a>
			}
		}
	}
	else
	{
		Local_enuErrorState=ES_NULL_POINTER;
    41a2:	82 e0       	ldi	r24, 0x02	; 2
    41a4:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_enuErrorState;
    41a6:	8a 81       	ldd	r24, Y+2	; 0x02
    41a8:	8d 83       	std	Y+5, r24	; 0x05
    41aa:	8d 81       	ldd	r24, Y+5	; 0x05
}
    41ac:	0f 90       	pop	r0
    41ae:	0f 90       	pop	r0
    41b0:	0f 90       	pop	r0
    41b2:	0f 90       	pop	r0
    41b4:	0f 90       	pop	r0
    41b6:	cf 91       	pop	r28
    41b8:	df 91       	pop	r29
    41ba:	08 95       	ret

000041bc <LED_enuTurnON>:

ES_t LED_enuTurnON(LED_t * copy_pstrLedID)
{
    41bc:	df 93       	push	r29
    41be:	cf 93       	push	r28
    41c0:	00 d0       	rcall	.+0      	; 0x41c2 <LED_enuTurnON+0x6>
    41c2:	0f 92       	push	r0
    41c4:	cd b7       	in	r28, 0x3d	; 61
    41c6:	de b7       	in	r29, 0x3e	; 62
    41c8:	9b 83       	std	Y+3, r25	; 0x03
    41ca:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    41cc:	19 82       	std	Y+1, r1	; 0x01
	if(copy_pstrLedID!=NULL)
    41ce:	8a 81       	ldd	r24, Y+2	; 0x02
    41d0:	9b 81       	ldd	r25, Y+3	; 0x03
    41d2:	00 97       	sbiw	r24, 0x00	; 0
    41d4:	29 f1       	breq	.+74     	; 0x4220 <LED_enuTurnON+0x64>
	{
		if(copy_pstrLedID->LED_u8Connection==LED_SINK)
    41d6:	ea 81       	ldd	r30, Y+2	; 0x02
    41d8:	fb 81       	ldd	r31, Y+3	; 0x03
    41da:	82 81       	ldd	r24, Z+2	; 0x02
    41dc:	88 23       	and	r24, r24
    41de:	61 f4       	brne	.+24     	; 0x41f8 <LED_enuTurnON+0x3c>
		{
			Local_enuErrorState=DIO_enuSetPinValue(copy_pstrLedID->LED_u8PortID,copy_pstrLedID->LED_u8PinID,DIO_u8LOW);
    41e0:	ea 81       	ldd	r30, Y+2	; 0x02
    41e2:	fb 81       	ldd	r31, Y+3	; 0x03
    41e4:	80 81       	ld	r24, Z
    41e6:	ea 81       	ldd	r30, Y+2	; 0x02
    41e8:	fb 81       	ldd	r31, Y+3	; 0x03
    41ea:	91 81       	ldd	r25, Z+1	; 0x01
    41ec:	69 2f       	mov	r22, r25
    41ee:	40 e0       	ldi	r20, 0x00	; 0
    41f0:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <DIO_enuSetPinValue>
    41f4:	89 83       	std	Y+1, r24	; 0x01
    41f6:	16 c0       	rjmp	.+44     	; 0x4224 <LED_enuTurnON+0x68>
		}
		else if(copy_pstrLedID->LED_u8Connection==LED_SOURCE)
    41f8:	ea 81       	ldd	r30, Y+2	; 0x02
    41fa:	fb 81       	ldd	r31, Y+3	; 0x03
    41fc:	82 81       	ldd	r24, Z+2	; 0x02
    41fe:	81 30       	cpi	r24, 0x01	; 1
    4200:	61 f4       	brne	.+24     	; 0x421a <LED_enuTurnON+0x5e>
		{
			Local_enuErrorState=DIO_enuSetPinValue(copy_pstrLedID->LED_u8PortID,copy_pstrLedID->LED_u8PinID,DIO_u8HIGH);
    4202:	ea 81       	ldd	r30, Y+2	; 0x02
    4204:	fb 81       	ldd	r31, Y+3	; 0x03
    4206:	80 81       	ld	r24, Z
    4208:	ea 81       	ldd	r30, Y+2	; 0x02
    420a:	fb 81       	ldd	r31, Y+3	; 0x03
    420c:	91 81       	ldd	r25, Z+1	; 0x01
    420e:	69 2f       	mov	r22, r25
    4210:	41 e0       	ldi	r20, 0x01	; 1
    4212:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <DIO_enuSetPinValue>
    4216:	89 83       	std	Y+1, r24	; 0x01
    4218:	05 c0       	rjmp	.+10     	; 0x4224 <LED_enuTurnON+0x68>
		}
		else
		{
			Local_enuErrorState= ES_OUT_OF_RANGE;
    421a:	83 e0       	ldi	r24, 0x03	; 3
    421c:	89 83       	std	Y+1, r24	; 0x01
    421e:	02 c0       	rjmp	.+4      	; 0x4224 <LED_enuTurnON+0x68>
		}
	}
	else
	{
		Local_enuErrorState=ES_NULL_POINTER;
    4220:	82 e0       	ldi	r24, 0x02	; 2
    4222:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    4224:	89 81       	ldd	r24, Y+1	; 0x01
}
    4226:	0f 90       	pop	r0
    4228:	0f 90       	pop	r0
    422a:	0f 90       	pop	r0
    422c:	cf 91       	pop	r28
    422e:	df 91       	pop	r29
    4230:	08 95       	ret

00004232 <LED_enuTurnOFF>:

ES_t LED_enuTurnOFF(LED_t * copy_pstrLedID)
{
    4232:	df 93       	push	r29
    4234:	cf 93       	push	r28
    4236:	00 d0       	rcall	.+0      	; 0x4238 <LED_enuTurnOFF+0x6>
    4238:	0f 92       	push	r0
    423a:	cd b7       	in	r28, 0x3d	; 61
    423c:	de b7       	in	r29, 0x3e	; 62
    423e:	9b 83       	std	Y+3, r25	; 0x03
    4240:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    4242:	19 82       	std	Y+1, r1	; 0x01
	if(copy_pstrLedID!=NULL)
    4244:	8a 81       	ldd	r24, Y+2	; 0x02
    4246:	9b 81       	ldd	r25, Y+3	; 0x03
    4248:	00 97       	sbiw	r24, 0x00	; 0
    424a:	29 f1       	breq	.+74     	; 0x4296 <LED_enuTurnOFF+0x64>
	{
		if(copy_pstrLedID->LED_u8Connection==LED_SINK)
    424c:	ea 81       	ldd	r30, Y+2	; 0x02
    424e:	fb 81       	ldd	r31, Y+3	; 0x03
    4250:	82 81       	ldd	r24, Z+2	; 0x02
    4252:	88 23       	and	r24, r24
    4254:	61 f4       	brne	.+24     	; 0x426e <LED_enuTurnOFF+0x3c>
		{
			Local_enuErrorState=DIO_enuSetPinValue(copy_pstrLedID->LED_u8PortID,copy_pstrLedID->LED_u8PinID,DIO_u8HIGH);
    4256:	ea 81       	ldd	r30, Y+2	; 0x02
    4258:	fb 81       	ldd	r31, Y+3	; 0x03
    425a:	80 81       	ld	r24, Z
    425c:	ea 81       	ldd	r30, Y+2	; 0x02
    425e:	fb 81       	ldd	r31, Y+3	; 0x03
    4260:	91 81       	ldd	r25, Z+1	; 0x01
    4262:	69 2f       	mov	r22, r25
    4264:	41 e0       	ldi	r20, 0x01	; 1
    4266:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <DIO_enuSetPinValue>
    426a:	89 83       	std	Y+1, r24	; 0x01
    426c:	16 c0       	rjmp	.+44     	; 0x429a <LED_enuTurnOFF+0x68>
		}
		else if(copy_pstrLedID->LED_u8Connection==LED_SOURCE)
    426e:	ea 81       	ldd	r30, Y+2	; 0x02
    4270:	fb 81       	ldd	r31, Y+3	; 0x03
    4272:	82 81       	ldd	r24, Z+2	; 0x02
    4274:	81 30       	cpi	r24, 0x01	; 1
    4276:	61 f4       	brne	.+24     	; 0x4290 <LED_enuTurnOFF+0x5e>
		{
			Local_enuErrorState=DIO_enuSetPinValue(copy_pstrLedID->LED_u8PortID,copy_pstrLedID->LED_u8PinID,DIO_u8LOW);
    4278:	ea 81       	ldd	r30, Y+2	; 0x02
    427a:	fb 81       	ldd	r31, Y+3	; 0x03
    427c:	80 81       	ld	r24, Z
    427e:	ea 81       	ldd	r30, Y+2	; 0x02
    4280:	fb 81       	ldd	r31, Y+3	; 0x03
    4282:	91 81       	ldd	r25, Z+1	; 0x01
    4284:	69 2f       	mov	r22, r25
    4286:	40 e0       	ldi	r20, 0x00	; 0
    4288:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <DIO_enuSetPinValue>
    428c:	89 83       	std	Y+1, r24	; 0x01
    428e:	05 c0       	rjmp	.+10     	; 0x429a <LED_enuTurnOFF+0x68>
		}
		else
		{
			Local_enuErrorState= ES_OUT_OF_RANGE;
    4290:	83 e0       	ldi	r24, 0x03	; 3
    4292:	89 83       	std	Y+1, r24	; 0x01
    4294:	02 c0       	rjmp	.+4      	; 0x429a <LED_enuTurnOFF+0x68>
		}
	}
	else
	{
		Local_enuErrorState=ES_NULL_POINTER;
    4296:	82 e0       	ldi	r24, 0x02	; 2
    4298:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    429a:	89 81       	ldd	r24, Y+1	; 0x01
}
    429c:	0f 90       	pop	r0
    429e:	0f 90       	pop	r0
    42a0:	0f 90       	pop	r0
    42a2:	cf 91       	pop	r28
    42a4:	df 91       	pop	r29
    42a6:	08 95       	ret

000042a8 <LCD_enuInit>:
#include "LCD_priv.h"

#include "util/delay.h"

ES_t LCD_enuInit(void)
{
    42a8:	0f 93       	push	r16
    42aa:	1f 93       	push	r17
    42ac:	df 93       	push	r29
    42ae:	cf 93       	push	r28
    42b0:	cd b7       	in	r28, 0x3d	; 61
    42b2:	de b7       	in	r29, 0x3e	; 62
    42b4:	c7 54       	subi	r28, 0x47	; 71
    42b6:	d0 40       	sbci	r29, 0x00	; 0
    42b8:	0f b6       	in	r0, 0x3f	; 63
    42ba:	f8 94       	cli
    42bc:	de bf       	out	0x3e, r29	; 62
    42be:	0f be       	out	0x3f, r0	; 63
    42c0:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState=ES_NOK;
    42c2:	fe 01       	movw	r30, r28
    42c4:	e9 5b       	subi	r30, 0xB9	; 185
    42c6:	ff 4f       	sbci	r31, 0xFF	; 255
    42c8:	10 82       	st	Z, r1
    42ca:	fe 01       	movw	r30, r28
    42cc:	ed 5b       	subi	r30, 0xBD	; 189
    42ce:	ff 4f       	sbci	r31, 0xFF	; 255
    42d0:	80 e0       	ldi	r24, 0x00	; 0
    42d2:	90 e0       	ldi	r25, 0x00	; 0
    42d4:	ac e0       	ldi	r26, 0x0C	; 12
    42d6:	b2 e4       	ldi	r27, 0x42	; 66
    42d8:	80 83       	st	Z, r24
    42da:	91 83       	std	Z+1, r25	; 0x01
    42dc:	a2 83       	std	Z+2, r26	; 0x02
    42de:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42e0:	8e 01       	movw	r16, r28
    42e2:	01 5c       	subi	r16, 0xC1	; 193
    42e4:	1f 4f       	sbci	r17, 0xFF	; 255
    42e6:	fe 01       	movw	r30, r28
    42e8:	ed 5b       	subi	r30, 0xBD	; 189
    42ea:	ff 4f       	sbci	r31, 0xFF	; 255
    42ec:	60 81       	ld	r22, Z
    42ee:	71 81       	ldd	r23, Z+1	; 0x01
    42f0:	82 81       	ldd	r24, Z+2	; 0x02
    42f2:	93 81       	ldd	r25, Z+3	; 0x03
    42f4:	20 e0       	ldi	r18, 0x00	; 0
    42f6:	30 e0       	ldi	r19, 0x00	; 0
    42f8:	4a ef       	ldi	r20, 0xFA	; 250
    42fa:	54 e4       	ldi	r21, 0x44	; 68
    42fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4300:	dc 01       	movw	r26, r24
    4302:	cb 01       	movw	r24, r22
    4304:	f8 01       	movw	r30, r16
    4306:	80 83       	st	Z, r24
    4308:	91 83       	std	Z+1, r25	; 0x01
    430a:	a2 83       	std	Z+2, r26	; 0x02
    430c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    430e:	fe 01       	movw	r30, r28
    4310:	ff 96       	adiw	r30, 0x3f	; 63
    4312:	60 81       	ld	r22, Z
    4314:	71 81       	ldd	r23, Z+1	; 0x01
    4316:	82 81       	ldd	r24, Z+2	; 0x02
    4318:	93 81       	ldd	r25, Z+3	; 0x03
    431a:	20 e0       	ldi	r18, 0x00	; 0
    431c:	30 e0       	ldi	r19, 0x00	; 0
    431e:	40 e8       	ldi	r20, 0x80	; 128
    4320:	5f e3       	ldi	r21, 0x3F	; 63
    4322:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4326:	88 23       	and	r24, r24
    4328:	2c f4       	brge	.+10     	; 0x4334 <LCD_enuInit+0x8c>
		__ticks = 1;
    432a:	81 e0       	ldi	r24, 0x01	; 1
    432c:	90 e0       	ldi	r25, 0x00	; 0
    432e:	9e af       	std	Y+62, r25	; 0x3e
    4330:	8d af       	std	Y+61, r24	; 0x3d
    4332:	46 c0       	rjmp	.+140    	; 0x43c0 <LCD_enuInit+0x118>
	else if (__tmp > 65535)
    4334:	fe 01       	movw	r30, r28
    4336:	ff 96       	adiw	r30, 0x3f	; 63
    4338:	60 81       	ld	r22, Z
    433a:	71 81       	ldd	r23, Z+1	; 0x01
    433c:	82 81       	ldd	r24, Z+2	; 0x02
    433e:	93 81       	ldd	r25, Z+3	; 0x03
    4340:	20 e0       	ldi	r18, 0x00	; 0
    4342:	3f ef       	ldi	r19, 0xFF	; 255
    4344:	4f e7       	ldi	r20, 0x7F	; 127
    4346:	57 e4       	ldi	r21, 0x47	; 71
    4348:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    434c:	18 16       	cp	r1, r24
    434e:	64 f5       	brge	.+88     	; 0x43a8 <LCD_enuInit+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4350:	fe 01       	movw	r30, r28
    4352:	ed 5b       	subi	r30, 0xBD	; 189
    4354:	ff 4f       	sbci	r31, 0xFF	; 255
    4356:	60 81       	ld	r22, Z
    4358:	71 81       	ldd	r23, Z+1	; 0x01
    435a:	82 81       	ldd	r24, Z+2	; 0x02
    435c:	93 81       	ldd	r25, Z+3	; 0x03
    435e:	20 e0       	ldi	r18, 0x00	; 0
    4360:	30 e0       	ldi	r19, 0x00	; 0
    4362:	40 e2       	ldi	r20, 0x20	; 32
    4364:	51 e4       	ldi	r21, 0x41	; 65
    4366:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    436a:	dc 01       	movw	r26, r24
    436c:	cb 01       	movw	r24, r22
    436e:	bc 01       	movw	r22, r24
    4370:	cd 01       	movw	r24, r26
    4372:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4376:	dc 01       	movw	r26, r24
    4378:	cb 01       	movw	r24, r22
    437a:	9e af       	std	Y+62, r25	; 0x3e
    437c:	8d af       	std	Y+61, r24	; 0x3d
    437e:	0f c0       	rjmp	.+30     	; 0x439e <LCD_enuInit+0xf6>
    4380:	88 ec       	ldi	r24, 0xC8	; 200
    4382:	90 e0       	ldi	r25, 0x00	; 0
    4384:	9c af       	std	Y+60, r25	; 0x3c
    4386:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4388:	8b ad       	ldd	r24, Y+59	; 0x3b
    438a:	9c ad       	ldd	r25, Y+60	; 0x3c
    438c:	01 97       	sbiw	r24, 0x01	; 1
    438e:	f1 f7       	brne	.-4      	; 0x438c <LCD_enuInit+0xe4>
    4390:	9c af       	std	Y+60, r25	; 0x3c
    4392:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4394:	8d ad       	ldd	r24, Y+61	; 0x3d
    4396:	9e ad       	ldd	r25, Y+62	; 0x3e
    4398:	01 97       	sbiw	r24, 0x01	; 1
    439a:	9e af       	std	Y+62, r25	; 0x3e
    439c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    439e:	8d ad       	ldd	r24, Y+61	; 0x3d
    43a0:	9e ad       	ldd	r25, Y+62	; 0x3e
    43a2:	00 97       	sbiw	r24, 0x00	; 0
    43a4:	69 f7       	brne	.-38     	; 0x4380 <LCD_enuInit+0xd8>
    43a6:	16 c0       	rjmp	.+44     	; 0x43d4 <LCD_enuInit+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43a8:	fe 01       	movw	r30, r28
    43aa:	ff 96       	adiw	r30, 0x3f	; 63
    43ac:	60 81       	ld	r22, Z
    43ae:	71 81       	ldd	r23, Z+1	; 0x01
    43b0:	82 81       	ldd	r24, Z+2	; 0x02
    43b2:	93 81       	ldd	r25, Z+3	; 0x03
    43b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43b8:	dc 01       	movw	r26, r24
    43ba:	cb 01       	movw	r24, r22
    43bc:	9e af       	std	Y+62, r25	; 0x3e
    43be:	8d af       	std	Y+61, r24	; 0x3d
    43c0:	8d ad       	ldd	r24, Y+61	; 0x3d
    43c2:	9e ad       	ldd	r25, Y+62	; 0x3e
    43c4:	9a af       	std	Y+58, r25	; 0x3a
    43c6:	89 af       	std	Y+57, r24	; 0x39
    43c8:	89 ad       	ldd	r24, Y+57	; 0x39
    43ca:	9a ad       	ldd	r25, Y+58	; 0x3a
    43cc:	01 97       	sbiw	r24, 0x01	; 1
    43ce:	f1 f7       	brne	.-4      	; 0x43cc <LCD_enuInit+0x124>
    43d0:	9a af       	std	Y+58, r25	; 0x3a
    43d2:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(35);
	DIO_enuSetPinDirection(RS_PORT,RS_PIN,DIO_u8OUTPUT);
    43d4:	81 e0       	ldi	r24, 0x01	; 1
    43d6:	60 e0       	ldi	r22, 0x00	; 0
    43d8:	41 e0       	ldi	r20, 0x01	; 1
    43da:	0e 94 71 19 	call	0x32e2	; 0x32e2 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(RW_PORT,RW_PIN,DIO_u8OUTPUT);
    43de:	81 e0       	ldi	r24, 0x01	; 1
    43e0:	61 e0       	ldi	r22, 0x01	; 1
    43e2:	41 e0       	ldi	r20, 0x01	; 1
    43e4:	0e 94 71 19 	call	0x32e2	; 0x32e2 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(EN_PORT,EN_PIN,DIO_u8OUTPUT);
    43e8:	81 e0       	ldi	r24, 0x01	; 1
    43ea:	62 e0       	ldi	r22, 0x02	; 2
    43ec:	41 e0       	ldi	r20, 0x01	; 1
    43ee:	0e 94 71 19 	call	0x32e2	; 0x32e2 <DIO_enuSetPinDirection>

	DIO_enuSetPinDirection(D7_PORT,D7_PIN,DIO_u8OUTPUT);
    43f2:	81 e0       	ldi	r24, 0x01	; 1
    43f4:	63 e0       	ldi	r22, 0x03	; 3
    43f6:	41 e0       	ldi	r20, 0x01	; 1
    43f8:	0e 94 71 19 	call	0x32e2	; 0x32e2 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D6_PORT,D6_PIN,DIO_u8OUTPUT);
    43fc:	80 e0       	ldi	r24, 0x00	; 0
    43fe:	66 e0       	ldi	r22, 0x06	; 6
    4400:	41 e0       	ldi	r20, 0x01	; 1
    4402:	0e 94 71 19 	call	0x32e2	; 0x32e2 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D5_PORT,D5_PIN,DIO_u8OUTPUT);
    4406:	80 e0       	ldi	r24, 0x00	; 0
    4408:	65 e0       	ldi	r22, 0x05	; 5
    440a:	41 e0       	ldi	r20, 0x01	; 1
    440c:	0e 94 71 19 	call	0x32e2	; 0x32e2 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D4_PORT,D4_PIN,DIO_u8OUTPUT);
    4410:	80 e0       	ldi	r24, 0x00	; 0
    4412:	64 e0       	ldi	r22, 0x04	; 4
    4414:	41 e0       	ldi	r20, 0x01	; 1
    4416:	0e 94 71 19 	call	0x32e2	; 0x32e2 <DIO_enuSetPinDirection>

	//FUNCTION SET
#if LCD_MODE==EIGHT_BIT
	DIO_enuSetPinDirection(D3_PORT,D3_PIN,DIO_u8OUTPUT);
    441a:	80 e0       	ldi	r24, 0x00	; 0
    441c:	63 e0       	ldi	r22, 0x03	; 3
    441e:	41 e0       	ldi	r20, 0x01	; 1
    4420:	0e 94 71 19 	call	0x32e2	; 0x32e2 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D2_PORT,D2_PIN,DIO_u8OUTPUT);
    4424:	80 e0       	ldi	r24, 0x00	; 0
    4426:	62 e0       	ldi	r22, 0x02	; 2
    4428:	41 e0       	ldi	r20, 0x01	; 1
    442a:	0e 94 71 19 	call	0x32e2	; 0x32e2 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D1_PORT,D1_PIN,DIO_u8OUTPUT);
    442e:	80 e0       	ldi	r24, 0x00	; 0
    4430:	61 e0       	ldi	r22, 0x01	; 1
    4432:	41 e0       	ldi	r20, 0x01	; 1
    4434:	0e 94 71 19 	call	0x32e2	; 0x32e2 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D0_PORT,D0_PIN,DIO_u8OUTPUT);
    4438:	80 e0       	ldi	r24, 0x00	; 0
    443a:	60 e0       	ldi	r22, 0x00	; 0
    443c:	41 e0       	ldi	r20, 0x01	; 1
    443e:	0e 94 71 19 	call	0x32e2	; 0x32e2 <DIO_enuSetPinDirection>

	//FUNCTION SET
	LCD_invidSendCommand(EIGHT_BIT_MODE);
    4442:	88 e3       	ldi	r24, 0x38	; 56
    4444:	0e 94 76 27 	call	0x4eec	; 0x4eec <LCD_invidSendCommand>

	Local_enuErrorState=ES_OK;
    4448:	fe 01       	movw	r30, r28
    444a:	e9 5b       	subi	r30, 0xB9	; 185
    444c:	ff 4f       	sbci	r31, 0xFF	; 255
    444e:	81 e0       	ldi	r24, 0x01	; 1
    4450:	80 83       	st	Z, r24
    4452:	80 e0       	ldi	r24, 0x00	; 0
    4454:	90 e0       	ldi	r25, 0x00	; 0
    4456:	a0 e8       	ldi	r26, 0x80	; 128
    4458:	bf e3       	ldi	r27, 0x3F	; 63
    445a:	8d ab       	std	Y+53, r24	; 0x35
    445c:	9e ab       	std	Y+54, r25	; 0x36
    445e:	af ab       	std	Y+55, r26	; 0x37
    4460:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4462:	6d a9       	ldd	r22, Y+53	; 0x35
    4464:	7e a9       	ldd	r23, Y+54	; 0x36
    4466:	8f a9       	ldd	r24, Y+55	; 0x37
    4468:	98 ad       	ldd	r25, Y+56	; 0x38
    446a:	20 e0       	ldi	r18, 0x00	; 0
    446c:	30 e0       	ldi	r19, 0x00	; 0
    446e:	4a ef       	ldi	r20, 0xFA	; 250
    4470:	54 e4       	ldi	r21, 0x44	; 68
    4472:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4476:	dc 01       	movw	r26, r24
    4478:	cb 01       	movw	r24, r22
    447a:	89 ab       	std	Y+49, r24	; 0x31
    447c:	9a ab       	std	Y+50, r25	; 0x32
    447e:	ab ab       	std	Y+51, r26	; 0x33
    4480:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4482:	69 a9       	ldd	r22, Y+49	; 0x31
    4484:	7a a9       	ldd	r23, Y+50	; 0x32
    4486:	8b a9       	ldd	r24, Y+51	; 0x33
    4488:	9c a9       	ldd	r25, Y+52	; 0x34
    448a:	20 e0       	ldi	r18, 0x00	; 0
    448c:	30 e0       	ldi	r19, 0x00	; 0
    448e:	40 e8       	ldi	r20, 0x80	; 128
    4490:	5f e3       	ldi	r21, 0x3F	; 63
    4492:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4496:	88 23       	and	r24, r24
    4498:	2c f4       	brge	.+10     	; 0x44a4 <LCD_enuInit+0x1fc>
		__ticks = 1;
    449a:	81 e0       	ldi	r24, 0x01	; 1
    449c:	90 e0       	ldi	r25, 0x00	; 0
    449e:	98 ab       	std	Y+48, r25	; 0x30
    44a0:	8f a7       	std	Y+47, r24	; 0x2f
    44a2:	3f c0       	rjmp	.+126    	; 0x4522 <LCD_enuInit+0x27a>
	else if (__tmp > 65535)
    44a4:	69 a9       	ldd	r22, Y+49	; 0x31
    44a6:	7a a9       	ldd	r23, Y+50	; 0x32
    44a8:	8b a9       	ldd	r24, Y+51	; 0x33
    44aa:	9c a9       	ldd	r25, Y+52	; 0x34
    44ac:	20 e0       	ldi	r18, 0x00	; 0
    44ae:	3f ef       	ldi	r19, 0xFF	; 255
    44b0:	4f e7       	ldi	r20, 0x7F	; 127
    44b2:	57 e4       	ldi	r21, 0x47	; 71
    44b4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    44b8:	18 16       	cp	r1, r24
    44ba:	4c f5       	brge	.+82     	; 0x450e <LCD_enuInit+0x266>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    44bc:	6d a9       	ldd	r22, Y+53	; 0x35
    44be:	7e a9       	ldd	r23, Y+54	; 0x36
    44c0:	8f a9       	ldd	r24, Y+55	; 0x37
    44c2:	98 ad       	ldd	r25, Y+56	; 0x38
    44c4:	20 e0       	ldi	r18, 0x00	; 0
    44c6:	30 e0       	ldi	r19, 0x00	; 0
    44c8:	40 e2       	ldi	r20, 0x20	; 32
    44ca:	51 e4       	ldi	r21, 0x41	; 65
    44cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44d0:	dc 01       	movw	r26, r24
    44d2:	cb 01       	movw	r24, r22
    44d4:	bc 01       	movw	r22, r24
    44d6:	cd 01       	movw	r24, r26
    44d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44dc:	dc 01       	movw	r26, r24
    44de:	cb 01       	movw	r24, r22
    44e0:	98 ab       	std	Y+48, r25	; 0x30
    44e2:	8f a7       	std	Y+47, r24	; 0x2f
    44e4:	0f c0       	rjmp	.+30     	; 0x4504 <LCD_enuInit+0x25c>
    44e6:	88 ec       	ldi	r24, 0xC8	; 200
    44e8:	90 e0       	ldi	r25, 0x00	; 0
    44ea:	9e a7       	std	Y+46, r25	; 0x2e
    44ec:	8d a7       	std	Y+45, r24	; 0x2d
    44ee:	8d a5       	ldd	r24, Y+45	; 0x2d
    44f0:	9e a5       	ldd	r25, Y+46	; 0x2e
    44f2:	01 97       	sbiw	r24, 0x01	; 1
    44f4:	f1 f7       	brne	.-4      	; 0x44f2 <LCD_enuInit+0x24a>
    44f6:	9e a7       	std	Y+46, r25	; 0x2e
    44f8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44fa:	8f a5       	ldd	r24, Y+47	; 0x2f
    44fc:	98 a9       	ldd	r25, Y+48	; 0x30
    44fe:	01 97       	sbiw	r24, 0x01	; 1
    4500:	98 ab       	std	Y+48, r25	; 0x30
    4502:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4504:	8f a5       	ldd	r24, Y+47	; 0x2f
    4506:	98 a9       	ldd	r25, Y+48	; 0x30
    4508:	00 97       	sbiw	r24, 0x00	; 0
    450a:	69 f7       	brne	.-38     	; 0x44e6 <LCD_enuInit+0x23e>
    450c:	14 c0       	rjmp	.+40     	; 0x4536 <LCD_enuInit+0x28e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    450e:	69 a9       	ldd	r22, Y+49	; 0x31
    4510:	7a a9       	ldd	r23, Y+50	; 0x32
    4512:	8b a9       	ldd	r24, Y+51	; 0x33
    4514:	9c a9       	ldd	r25, Y+52	; 0x34
    4516:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    451a:	dc 01       	movw	r26, r24
    451c:	cb 01       	movw	r24, r22
    451e:	98 ab       	std	Y+48, r25	; 0x30
    4520:	8f a7       	std	Y+47, r24	; 0x2f
    4522:	8f a5       	ldd	r24, Y+47	; 0x2f
    4524:	98 a9       	ldd	r25, Y+48	; 0x30
    4526:	9c a7       	std	Y+44, r25	; 0x2c
    4528:	8b a7       	std	Y+43, r24	; 0x2b
    452a:	8b a5       	ldd	r24, Y+43	; 0x2b
    452c:	9c a5       	ldd	r25, Y+44	; 0x2c
    452e:	01 97       	sbiw	r24, 0x01	; 1
    4530:	f1 f7       	brne	.-4      	; 0x452e <LCD_enuInit+0x286>
    4532:	9c a7       	std	Y+44, r25	; 0x2c
    4534:	8b a7       	std	Y+43, r24	; 0x2b
#endif

	_delay_ms(1);
	//display on/off
	//LCD_invidSendCommand(0x0f);
	LCD_invidSendCommand(DISPLAY_ON_CURSOR_BLINK);
    4536:	8e e0       	ldi	r24, 0x0E	; 14
    4538:	0e 94 76 27 	call	0x4eec	; 0x4eec <LCD_invidSendCommand>
    453c:	80 e0       	ldi	r24, 0x00	; 0
    453e:	90 e0       	ldi	r25, 0x00	; 0
    4540:	a0 e8       	ldi	r26, 0x80	; 128
    4542:	bf e3       	ldi	r27, 0x3F	; 63
    4544:	8f a3       	std	Y+39, r24	; 0x27
    4546:	98 a7       	std	Y+40, r25	; 0x28
    4548:	a9 a7       	std	Y+41, r26	; 0x29
    454a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    454c:	6f a1       	ldd	r22, Y+39	; 0x27
    454e:	78 a5       	ldd	r23, Y+40	; 0x28
    4550:	89 a5       	ldd	r24, Y+41	; 0x29
    4552:	9a a5       	ldd	r25, Y+42	; 0x2a
    4554:	20 e0       	ldi	r18, 0x00	; 0
    4556:	30 e0       	ldi	r19, 0x00	; 0
    4558:	4a ef       	ldi	r20, 0xFA	; 250
    455a:	54 e4       	ldi	r21, 0x44	; 68
    455c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4560:	dc 01       	movw	r26, r24
    4562:	cb 01       	movw	r24, r22
    4564:	8b a3       	std	Y+35, r24	; 0x23
    4566:	9c a3       	std	Y+36, r25	; 0x24
    4568:	ad a3       	std	Y+37, r26	; 0x25
    456a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    456c:	6b a1       	ldd	r22, Y+35	; 0x23
    456e:	7c a1       	ldd	r23, Y+36	; 0x24
    4570:	8d a1       	ldd	r24, Y+37	; 0x25
    4572:	9e a1       	ldd	r25, Y+38	; 0x26
    4574:	20 e0       	ldi	r18, 0x00	; 0
    4576:	30 e0       	ldi	r19, 0x00	; 0
    4578:	40 e8       	ldi	r20, 0x80	; 128
    457a:	5f e3       	ldi	r21, 0x3F	; 63
    457c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4580:	88 23       	and	r24, r24
    4582:	2c f4       	brge	.+10     	; 0x458e <LCD_enuInit+0x2e6>
		__ticks = 1;
    4584:	81 e0       	ldi	r24, 0x01	; 1
    4586:	90 e0       	ldi	r25, 0x00	; 0
    4588:	9a a3       	std	Y+34, r25	; 0x22
    458a:	89 a3       	std	Y+33, r24	; 0x21
    458c:	3f c0       	rjmp	.+126    	; 0x460c <LCD_enuInit+0x364>
	else if (__tmp > 65535)
    458e:	6b a1       	ldd	r22, Y+35	; 0x23
    4590:	7c a1       	ldd	r23, Y+36	; 0x24
    4592:	8d a1       	ldd	r24, Y+37	; 0x25
    4594:	9e a1       	ldd	r25, Y+38	; 0x26
    4596:	20 e0       	ldi	r18, 0x00	; 0
    4598:	3f ef       	ldi	r19, 0xFF	; 255
    459a:	4f e7       	ldi	r20, 0x7F	; 127
    459c:	57 e4       	ldi	r21, 0x47	; 71
    459e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    45a2:	18 16       	cp	r1, r24
    45a4:	4c f5       	brge	.+82     	; 0x45f8 <LCD_enuInit+0x350>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45a6:	6f a1       	ldd	r22, Y+39	; 0x27
    45a8:	78 a5       	ldd	r23, Y+40	; 0x28
    45aa:	89 a5       	ldd	r24, Y+41	; 0x29
    45ac:	9a a5       	ldd	r25, Y+42	; 0x2a
    45ae:	20 e0       	ldi	r18, 0x00	; 0
    45b0:	30 e0       	ldi	r19, 0x00	; 0
    45b2:	40 e2       	ldi	r20, 0x20	; 32
    45b4:	51 e4       	ldi	r21, 0x41	; 65
    45b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45ba:	dc 01       	movw	r26, r24
    45bc:	cb 01       	movw	r24, r22
    45be:	bc 01       	movw	r22, r24
    45c0:	cd 01       	movw	r24, r26
    45c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45c6:	dc 01       	movw	r26, r24
    45c8:	cb 01       	movw	r24, r22
    45ca:	9a a3       	std	Y+34, r25	; 0x22
    45cc:	89 a3       	std	Y+33, r24	; 0x21
    45ce:	0f c0       	rjmp	.+30     	; 0x45ee <LCD_enuInit+0x346>
    45d0:	88 ec       	ldi	r24, 0xC8	; 200
    45d2:	90 e0       	ldi	r25, 0x00	; 0
    45d4:	98 a3       	std	Y+32, r25	; 0x20
    45d6:	8f 8f       	std	Y+31, r24	; 0x1f
    45d8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    45da:	98 a1       	ldd	r25, Y+32	; 0x20
    45dc:	01 97       	sbiw	r24, 0x01	; 1
    45de:	f1 f7       	brne	.-4      	; 0x45dc <LCD_enuInit+0x334>
    45e0:	98 a3       	std	Y+32, r25	; 0x20
    45e2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45e4:	89 a1       	ldd	r24, Y+33	; 0x21
    45e6:	9a a1       	ldd	r25, Y+34	; 0x22
    45e8:	01 97       	sbiw	r24, 0x01	; 1
    45ea:	9a a3       	std	Y+34, r25	; 0x22
    45ec:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45ee:	89 a1       	ldd	r24, Y+33	; 0x21
    45f0:	9a a1       	ldd	r25, Y+34	; 0x22
    45f2:	00 97       	sbiw	r24, 0x00	; 0
    45f4:	69 f7       	brne	.-38     	; 0x45d0 <LCD_enuInit+0x328>
    45f6:	14 c0       	rjmp	.+40     	; 0x4620 <LCD_enuInit+0x378>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45f8:	6b a1       	ldd	r22, Y+35	; 0x23
    45fa:	7c a1       	ldd	r23, Y+36	; 0x24
    45fc:	8d a1       	ldd	r24, Y+37	; 0x25
    45fe:	9e a1       	ldd	r25, Y+38	; 0x26
    4600:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4604:	dc 01       	movw	r26, r24
    4606:	cb 01       	movw	r24, r22
    4608:	9a a3       	std	Y+34, r25	; 0x22
    460a:	89 a3       	std	Y+33, r24	; 0x21
    460c:	89 a1       	ldd	r24, Y+33	; 0x21
    460e:	9a a1       	ldd	r25, Y+34	; 0x22
    4610:	9e 8f       	std	Y+30, r25	; 0x1e
    4612:	8d 8f       	std	Y+29, r24	; 0x1d
    4614:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4616:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4618:	01 97       	sbiw	r24, 0x01	; 1
    461a:	f1 f7       	brne	.-4      	; 0x4618 <LCD_enuInit+0x370>
    461c:	9e 8f       	std	Y+30, r25	; 0x1e
    461e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	//display clear
	LCD_invidSendCommand(CLEAR_DISPLAY);
    4620:	81 e0       	ldi	r24, 0x01	; 1
    4622:	0e 94 76 27 	call	0x4eec	; 0x4eec <LCD_invidSendCommand>
    4626:	80 e0       	ldi	r24, 0x00	; 0
    4628:	90 e0       	ldi	r25, 0x00	; 0
    462a:	a0 e0       	ldi	r26, 0x00	; 0
    462c:	b0 e4       	ldi	r27, 0x40	; 64
    462e:	89 8f       	std	Y+25, r24	; 0x19
    4630:	9a 8f       	std	Y+26, r25	; 0x1a
    4632:	ab 8f       	std	Y+27, r26	; 0x1b
    4634:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4636:	69 8d       	ldd	r22, Y+25	; 0x19
    4638:	7a 8d       	ldd	r23, Y+26	; 0x1a
    463a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    463c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    463e:	20 e0       	ldi	r18, 0x00	; 0
    4640:	30 e0       	ldi	r19, 0x00	; 0
    4642:	4a ef       	ldi	r20, 0xFA	; 250
    4644:	54 e4       	ldi	r21, 0x44	; 68
    4646:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    464a:	dc 01       	movw	r26, r24
    464c:	cb 01       	movw	r24, r22
    464e:	8d 8b       	std	Y+21, r24	; 0x15
    4650:	9e 8b       	std	Y+22, r25	; 0x16
    4652:	af 8b       	std	Y+23, r26	; 0x17
    4654:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4656:	6d 89       	ldd	r22, Y+21	; 0x15
    4658:	7e 89       	ldd	r23, Y+22	; 0x16
    465a:	8f 89       	ldd	r24, Y+23	; 0x17
    465c:	98 8d       	ldd	r25, Y+24	; 0x18
    465e:	20 e0       	ldi	r18, 0x00	; 0
    4660:	30 e0       	ldi	r19, 0x00	; 0
    4662:	40 e8       	ldi	r20, 0x80	; 128
    4664:	5f e3       	ldi	r21, 0x3F	; 63
    4666:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    466a:	88 23       	and	r24, r24
    466c:	2c f4       	brge	.+10     	; 0x4678 <LCD_enuInit+0x3d0>
		__ticks = 1;
    466e:	81 e0       	ldi	r24, 0x01	; 1
    4670:	90 e0       	ldi	r25, 0x00	; 0
    4672:	9c 8b       	std	Y+20, r25	; 0x14
    4674:	8b 8b       	std	Y+19, r24	; 0x13
    4676:	3f c0       	rjmp	.+126    	; 0x46f6 <LCD_enuInit+0x44e>
	else if (__tmp > 65535)
    4678:	6d 89       	ldd	r22, Y+21	; 0x15
    467a:	7e 89       	ldd	r23, Y+22	; 0x16
    467c:	8f 89       	ldd	r24, Y+23	; 0x17
    467e:	98 8d       	ldd	r25, Y+24	; 0x18
    4680:	20 e0       	ldi	r18, 0x00	; 0
    4682:	3f ef       	ldi	r19, 0xFF	; 255
    4684:	4f e7       	ldi	r20, 0x7F	; 127
    4686:	57 e4       	ldi	r21, 0x47	; 71
    4688:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    468c:	18 16       	cp	r1, r24
    468e:	4c f5       	brge	.+82     	; 0x46e2 <LCD_enuInit+0x43a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4690:	69 8d       	ldd	r22, Y+25	; 0x19
    4692:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4694:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4696:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4698:	20 e0       	ldi	r18, 0x00	; 0
    469a:	30 e0       	ldi	r19, 0x00	; 0
    469c:	40 e2       	ldi	r20, 0x20	; 32
    469e:	51 e4       	ldi	r21, 0x41	; 65
    46a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46a4:	dc 01       	movw	r26, r24
    46a6:	cb 01       	movw	r24, r22
    46a8:	bc 01       	movw	r22, r24
    46aa:	cd 01       	movw	r24, r26
    46ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46b0:	dc 01       	movw	r26, r24
    46b2:	cb 01       	movw	r24, r22
    46b4:	9c 8b       	std	Y+20, r25	; 0x14
    46b6:	8b 8b       	std	Y+19, r24	; 0x13
    46b8:	0f c0       	rjmp	.+30     	; 0x46d8 <LCD_enuInit+0x430>
    46ba:	88 ec       	ldi	r24, 0xC8	; 200
    46bc:	90 e0       	ldi	r25, 0x00	; 0
    46be:	9a 8b       	std	Y+18, r25	; 0x12
    46c0:	89 8b       	std	Y+17, r24	; 0x11
    46c2:	89 89       	ldd	r24, Y+17	; 0x11
    46c4:	9a 89       	ldd	r25, Y+18	; 0x12
    46c6:	01 97       	sbiw	r24, 0x01	; 1
    46c8:	f1 f7       	brne	.-4      	; 0x46c6 <LCD_enuInit+0x41e>
    46ca:	9a 8b       	std	Y+18, r25	; 0x12
    46cc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46ce:	8b 89       	ldd	r24, Y+19	; 0x13
    46d0:	9c 89       	ldd	r25, Y+20	; 0x14
    46d2:	01 97       	sbiw	r24, 0x01	; 1
    46d4:	9c 8b       	std	Y+20, r25	; 0x14
    46d6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46d8:	8b 89       	ldd	r24, Y+19	; 0x13
    46da:	9c 89       	ldd	r25, Y+20	; 0x14
    46dc:	00 97       	sbiw	r24, 0x00	; 0
    46de:	69 f7       	brne	.-38     	; 0x46ba <LCD_enuInit+0x412>
    46e0:	14 c0       	rjmp	.+40     	; 0x470a <LCD_enuInit+0x462>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    46e2:	6d 89       	ldd	r22, Y+21	; 0x15
    46e4:	7e 89       	ldd	r23, Y+22	; 0x16
    46e6:	8f 89       	ldd	r24, Y+23	; 0x17
    46e8:	98 8d       	ldd	r25, Y+24	; 0x18
    46ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46ee:	dc 01       	movw	r26, r24
    46f0:	cb 01       	movw	r24, r22
    46f2:	9c 8b       	std	Y+20, r25	; 0x14
    46f4:	8b 8b       	std	Y+19, r24	; 0x13
    46f6:	8b 89       	ldd	r24, Y+19	; 0x13
    46f8:	9c 89       	ldd	r25, Y+20	; 0x14
    46fa:	98 8b       	std	Y+16, r25	; 0x10
    46fc:	8f 87       	std	Y+15, r24	; 0x0f
    46fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    4700:	98 89       	ldd	r25, Y+16	; 0x10
    4702:	01 97       	sbiw	r24, 0x01	; 1
    4704:	f1 f7       	brne	.-4      	; 0x4702 <LCD_enuInit+0x45a>
    4706:	98 8b       	std	Y+16, r25	; 0x10
    4708:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	//Entry mode set
	LCD_invidSendCommand(INCREMENT_CURSOR_TO_RIGHT);
    470a:	86 e0       	ldi	r24, 0x06	; 6
    470c:	0e 94 76 27 	call	0x4eec	; 0x4eec <LCD_invidSendCommand>
    4710:	80 e0       	ldi	r24, 0x00	; 0
    4712:	90 e0       	ldi	r25, 0x00	; 0
    4714:	a0 e8       	ldi	r26, 0x80	; 128
    4716:	bf e3       	ldi	r27, 0x3F	; 63
    4718:	8b 87       	std	Y+11, r24	; 0x0b
    471a:	9c 87       	std	Y+12, r25	; 0x0c
    471c:	ad 87       	std	Y+13, r26	; 0x0d
    471e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4720:	6b 85       	ldd	r22, Y+11	; 0x0b
    4722:	7c 85       	ldd	r23, Y+12	; 0x0c
    4724:	8d 85       	ldd	r24, Y+13	; 0x0d
    4726:	9e 85       	ldd	r25, Y+14	; 0x0e
    4728:	20 e0       	ldi	r18, 0x00	; 0
    472a:	30 e0       	ldi	r19, 0x00	; 0
    472c:	4a ef       	ldi	r20, 0xFA	; 250
    472e:	54 e4       	ldi	r21, 0x44	; 68
    4730:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4734:	dc 01       	movw	r26, r24
    4736:	cb 01       	movw	r24, r22
    4738:	8f 83       	std	Y+7, r24	; 0x07
    473a:	98 87       	std	Y+8, r25	; 0x08
    473c:	a9 87       	std	Y+9, r26	; 0x09
    473e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4740:	6f 81       	ldd	r22, Y+7	; 0x07
    4742:	78 85       	ldd	r23, Y+8	; 0x08
    4744:	89 85       	ldd	r24, Y+9	; 0x09
    4746:	9a 85       	ldd	r25, Y+10	; 0x0a
    4748:	20 e0       	ldi	r18, 0x00	; 0
    474a:	30 e0       	ldi	r19, 0x00	; 0
    474c:	40 e8       	ldi	r20, 0x80	; 128
    474e:	5f e3       	ldi	r21, 0x3F	; 63
    4750:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4754:	88 23       	and	r24, r24
    4756:	2c f4       	brge	.+10     	; 0x4762 <LCD_enuInit+0x4ba>
		__ticks = 1;
    4758:	81 e0       	ldi	r24, 0x01	; 1
    475a:	90 e0       	ldi	r25, 0x00	; 0
    475c:	9e 83       	std	Y+6, r25	; 0x06
    475e:	8d 83       	std	Y+5, r24	; 0x05
    4760:	3f c0       	rjmp	.+126    	; 0x47e0 <LCD_enuInit+0x538>
	else if (__tmp > 65535)
    4762:	6f 81       	ldd	r22, Y+7	; 0x07
    4764:	78 85       	ldd	r23, Y+8	; 0x08
    4766:	89 85       	ldd	r24, Y+9	; 0x09
    4768:	9a 85       	ldd	r25, Y+10	; 0x0a
    476a:	20 e0       	ldi	r18, 0x00	; 0
    476c:	3f ef       	ldi	r19, 0xFF	; 255
    476e:	4f e7       	ldi	r20, 0x7F	; 127
    4770:	57 e4       	ldi	r21, 0x47	; 71
    4772:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4776:	18 16       	cp	r1, r24
    4778:	4c f5       	brge	.+82     	; 0x47cc <LCD_enuInit+0x524>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    477a:	6b 85       	ldd	r22, Y+11	; 0x0b
    477c:	7c 85       	ldd	r23, Y+12	; 0x0c
    477e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4780:	9e 85       	ldd	r25, Y+14	; 0x0e
    4782:	20 e0       	ldi	r18, 0x00	; 0
    4784:	30 e0       	ldi	r19, 0x00	; 0
    4786:	40 e2       	ldi	r20, 0x20	; 32
    4788:	51 e4       	ldi	r21, 0x41	; 65
    478a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    478e:	dc 01       	movw	r26, r24
    4790:	cb 01       	movw	r24, r22
    4792:	bc 01       	movw	r22, r24
    4794:	cd 01       	movw	r24, r26
    4796:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    479a:	dc 01       	movw	r26, r24
    479c:	cb 01       	movw	r24, r22
    479e:	9e 83       	std	Y+6, r25	; 0x06
    47a0:	8d 83       	std	Y+5, r24	; 0x05
    47a2:	0f c0       	rjmp	.+30     	; 0x47c2 <LCD_enuInit+0x51a>
    47a4:	88 ec       	ldi	r24, 0xC8	; 200
    47a6:	90 e0       	ldi	r25, 0x00	; 0
    47a8:	9c 83       	std	Y+4, r25	; 0x04
    47aa:	8b 83       	std	Y+3, r24	; 0x03
    47ac:	8b 81       	ldd	r24, Y+3	; 0x03
    47ae:	9c 81       	ldd	r25, Y+4	; 0x04
    47b0:	01 97       	sbiw	r24, 0x01	; 1
    47b2:	f1 f7       	brne	.-4      	; 0x47b0 <LCD_enuInit+0x508>
    47b4:	9c 83       	std	Y+4, r25	; 0x04
    47b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    47b8:	8d 81       	ldd	r24, Y+5	; 0x05
    47ba:	9e 81       	ldd	r25, Y+6	; 0x06
    47bc:	01 97       	sbiw	r24, 0x01	; 1
    47be:	9e 83       	std	Y+6, r25	; 0x06
    47c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    47c2:	8d 81       	ldd	r24, Y+5	; 0x05
    47c4:	9e 81       	ldd	r25, Y+6	; 0x06
    47c6:	00 97       	sbiw	r24, 0x00	; 0
    47c8:	69 f7       	brne	.-38     	; 0x47a4 <LCD_enuInit+0x4fc>
    47ca:	14 c0       	rjmp	.+40     	; 0x47f4 <LCD_enuInit+0x54c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    47cc:	6f 81       	ldd	r22, Y+7	; 0x07
    47ce:	78 85       	ldd	r23, Y+8	; 0x08
    47d0:	89 85       	ldd	r24, Y+9	; 0x09
    47d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    47d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47d8:	dc 01       	movw	r26, r24
    47da:	cb 01       	movw	r24, r22
    47dc:	9e 83       	std	Y+6, r25	; 0x06
    47de:	8d 83       	std	Y+5, r24	; 0x05
    47e0:	8d 81       	ldd	r24, Y+5	; 0x05
    47e2:	9e 81       	ldd	r25, Y+6	; 0x06
    47e4:	9a 83       	std	Y+2, r25	; 0x02
    47e6:	89 83       	std	Y+1, r24	; 0x01
    47e8:	89 81       	ldd	r24, Y+1	; 0x01
    47ea:	9a 81       	ldd	r25, Y+2	; 0x02
    47ec:	01 97       	sbiw	r24, 0x01	; 1
    47ee:	f1 f7       	brne	.-4      	; 0x47ec <LCD_enuInit+0x544>
    47f0:	9a 83       	std	Y+2, r25	; 0x02
    47f2:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(1);
	LCD_invidSendCommand(FORCE_CURSOR_START_FIRST_LINE);
    47f4:	80 e8       	ldi	r24, 0x80	; 128
    47f6:	0e 94 76 27 	call	0x4eec	; 0x4eec <LCD_invidSendCommand>


	return Local_enuErrorState;
    47fa:	fe 01       	movw	r30, r28
    47fc:	e9 5b       	subi	r30, 0xB9	; 185
    47fe:	ff 4f       	sbci	r31, 0xFF	; 255
    4800:	80 81       	ld	r24, Z
}
    4802:	c9 5b       	subi	r28, 0xB9	; 185
    4804:	df 4f       	sbci	r29, 0xFF	; 255
    4806:	0f b6       	in	r0, 0x3f	; 63
    4808:	f8 94       	cli
    480a:	de bf       	out	0x3e, r29	; 62
    480c:	0f be       	out	0x3f, r0	; 63
    480e:	cd bf       	out	0x3d, r28	; 61
    4810:	cf 91       	pop	r28
    4812:	df 91       	pop	r29
    4814:	1f 91       	pop	r17
    4816:	0f 91       	pop	r16
    4818:	08 95       	ret

0000481a <LCD_enuDisplayChar>:

ES_t LCD_enuDisplayChar(u8 Copy_u8Data)
{
    481a:	df 93       	push	r29
    481c:	cf 93       	push	r28
    481e:	00 d0       	rcall	.+0      	; 0x4820 <LCD_enuDisplayChar+0x6>
    4820:	cd b7       	in	r28, 0x3d	; 61
    4822:	de b7       	in	r29, 0x3e	; 62
    4824:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    4826:	19 82       	std	Y+1, r1	; 0x01

	//set RS as data
	Local_enuErrorState=DIO_enuSetPinValue(RS_PORT,RS_PIN,DIO_u8HIGH);
    4828:	81 e0       	ldi	r24, 0x01	; 1
    482a:	60 e0       	ldi	r22, 0x00	; 0
    482c:	41 e0       	ldi	r20, 0x01	; 1
    482e:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <DIO_enuSetPinValue>
    4832:	89 83       	std	Y+1, r24	; 0x01

	LCD_vidLatch(Copy_u8Data);
    4834:	8a 81       	ldd	r24, Y+2	; 0x02
    4836:	0e 94 19 26 	call	0x4c32	; 0x4c32 <LCD_vidLatch>

	return Local_enuErrorState;
    483a:	89 81       	ldd	r24, Y+1	; 0x01
}
    483c:	0f 90       	pop	r0
    483e:	0f 90       	pop	r0
    4840:	cf 91       	pop	r28
    4842:	df 91       	pop	r29
    4844:	08 95       	ret

00004846 <LCD_enuDisplayString>:

ES_t LCD_enuDisplayString(u8 *Copy_pu8Data)
{
    4846:	df 93       	push	r29
    4848:	cf 93       	push	r28
    484a:	00 d0       	rcall	.+0      	; 0x484c <LCD_enuDisplayString+0x6>
    484c:	0f 92       	push	r0
    484e:	cd b7       	in	r28, 0x3d	; 61
    4850:	de b7       	in	r29, 0x3e	; 62
    4852:	9b 83       	std	Y+3, r25	; 0x03
    4854:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    4856:	19 82       	std	Y+1, r1	; 0x01
    4858:	13 c0       	rjmp	.+38     	; 0x4880 <LCD_enuDisplayString+0x3a>
	{
		Local_enuErrorState=LCD_enuDisplayChar(Copy_pu8Data[Local_u8Counter]);
	}*/
	while(*Copy_pu8Data)
		{
			LCD_enuDisplayChar(*Copy_pu8Data);
    485a:	ea 81       	ldd	r30, Y+2	; 0x02
    485c:	fb 81       	ldd	r31, Y+3	; 0x03
    485e:	80 81       	ld	r24, Z
    4860:	0e 94 0d 24 	call	0x481a	; 0x481a <LCD_enuDisplayChar>
			if (!(*(Copy_pu8Data+1))) {Local_enuErrorState =ES_OK;}
    4864:	8a 81       	ldd	r24, Y+2	; 0x02
    4866:	9b 81       	ldd	r25, Y+3	; 0x03
    4868:	fc 01       	movw	r30, r24
    486a:	31 96       	adiw	r30, 0x01	; 1
    486c:	80 81       	ld	r24, Z
    486e:	88 23       	and	r24, r24
    4870:	11 f4       	brne	.+4      	; 0x4876 <LCD_enuDisplayString+0x30>
    4872:	81 e0       	ldi	r24, 0x01	; 1
    4874:	89 83       	std	Y+1, r24	; 0x01
			Copy_pu8Data++;
    4876:	8a 81       	ldd	r24, Y+2	; 0x02
    4878:	9b 81       	ldd	r25, Y+3	; 0x03
    487a:	01 96       	adiw	r24, 0x01	; 1
    487c:	9b 83       	std	Y+3, r25	; 0x03
    487e:	8a 83       	std	Y+2, r24	; 0x02
	/*u8 Local_u8Counter;
	for(Local_u8Counter=0;Copy_pu8Data;Local_u8Counter++)
	{
		Local_enuErrorState=LCD_enuDisplayChar(Copy_pu8Data[Local_u8Counter]);
	}*/
	while(*Copy_pu8Data)
    4880:	ea 81       	ldd	r30, Y+2	; 0x02
    4882:	fb 81       	ldd	r31, Y+3	; 0x03
    4884:	80 81       	ld	r24, Z
    4886:	88 23       	and	r24, r24
    4888:	41 f7       	brne	.-48     	; 0x485a <LCD_enuDisplayString+0x14>
			LCD_enuDisplayChar(*Copy_pu8Data);
			if (!(*(Copy_pu8Data+1))) {Local_enuErrorState =ES_OK;}
			Copy_pu8Data++;
		}

	return Local_enuErrorState;
    488a:	89 81       	ldd	r24, Y+1	; 0x01
}
    488c:	0f 90       	pop	r0
    488e:	0f 90       	pop	r0
    4890:	0f 90       	pop	r0
    4892:	cf 91       	pop	r28
    4894:	df 91       	pop	r29
    4896:	08 95       	ret

00004898 <LCD_enuSendCommand>:

ES_t LCD_enuSendCommand(u8 Copy_u8Command)
{
    4898:	df 93       	push	r29
    489a:	cf 93       	push	r28
    489c:	00 d0       	rcall	.+0      	; 0x489e <LCD_enuSendCommand+0x6>
    489e:	cd b7       	in	r28, 0x3d	; 61
    48a0:	de b7       	in	r29, 0x3e	; 62
    48a2:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    48a4:	19 82       	std	Y+1, r1	; 0x01

	//set RS as command
	Local_enuErrorState=DIO_enuSetPinValue(RS_PORT,RS_PIN,DIO_u8LOW);
    48a6:	81 e0       	ldi	r24, 0x01	; 1
    48a8:	60 e0       	ldi	r22, 0x00	; 0
    48aa:	40 e0       	ldi	r20, 0x00	; 0
    48ac:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <DIO_enuSetPinValue>
    48b0:	89 83       	std	Y+1, r24	; 0x01

	LCD_vidLatch(Copy_u8Command);
    48b2:	8a 81       	ldd	r24, Y+2	; 0x02
    48b4:	0e 94 19 26 	call	0x4c32	; 0x4c32 <LCD_vidLatch>

	return Local_enuErrorState;
    48b8:	89 81       	ldd	r24, Y+1	; 0x01
}
    48ba:	0f 90       	pop	r0
    48bc:	0f 90       	pop	r0
    48be:	cf 91       	pop	r28
    48c0:	df 91       	pop	r29
    48c2:	08 95       	ret

000048c4 <LCD_enuGoToPosition>:

ES_t LCD_enuGoToPosition (u8 Copy_u8Row , u8 Copy_u8Col)
{
    48c4:	df 93       	push	r29
    48c6:	cf 93       	push	r28
    48c8:	00 d0       	rcall	.+0      	; 0x48ca <LCD_enuGoToPosition+0x6>
    48ca:	00 d0       	rcall	.+0      	; 0x48cc <LCD_enuGoToPosition+0x8>
    48cc:	0f 92       	push	r0
    48ce:	cd b7       	in	r28, 0x3d	; 61
    48d0:	de b7       	in	r29, 0x3e	; 62
    48d2:	8c 83       	std	Y+4, r24	; 0x04
    48d4:	6d 83       	std	Y+5, r22	; 0x05
	ES_t Local_enuErrorState=ES_NOK;
    48d6:	19 82       	std	Y+1, r1	; 0x01

	u8 Local_u8RowLocation [] = {FORCE_CURSOR_START_FIRST_LINE,FORCE_CURSOR_START_SECOND_LINE};
    48d8:	80 e8       	ldi	r24, 0x80	; 128
    48da:	8a 83       	std	Y+2, r24	; 0x02
    48dc:	80 ec       	ldi	r24, 0xC0	; 192
    48de:	8b 83       	std	Y+3, r24	; 0x03

	LCD_enuSendCommand(Local_u8RowLocation[Copy_u8Row-1]+(Copy_u8Col-1));
    48e0:	8c 81       	ldd	r24, Y+4	; 0x04
    48e2:	88 2f       	mov	r24, r24
    48e4:	90 e0       	ldi	r25, 0x00	; 0
    48e6:	9c 01       	movw	r18, r24
    48e8:	21 50       	subi	r18, 0x01	; 1
    48ea:	30 40       	sbci	r19, 0x00	; 0
    48ec:	ce 01       	movw	r24, r28
    48ee:	02 96       	adiw	r24, 0x02	; 2
    48f0:	fc 01       	movw	r30, r24
    48f2:	e2 0f       	add	r30, r18
    48f4:	f3 1f       	adc	r31, r19
    48f6:	90 81       	ld	r25, Z
    48f8:	8d 81       	ldd	r24, Y+5	; 0x05
    48fa:	89 0f       	add	r24, r25
    48fc:	81 50       	subi	r24, 0x01	; 1
    48fe:	0e 94 4c 24 	call	0x4898	; 0x4898 <LCD_enuSendCommand>

	Local_enuErrorState=ES_OK;
    4902:	81 e0       	ldi	r24, 0x01	; 1
    4904:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    4906:	89 81       	ldd	r24, Y+1	; 0x01
}
    4908:	0f 90       	pop	r0
    490a:	0f 90       	pop	r0
    490c:	0f 90       	pop	r0
    490e:	0f 90       	pop	r0
    4910:	0f 90       	pop	r0
    4912:	cf 91       	pop	r28
    4914:	df 91       	pop	r29
    4916:	08 95       	ret

00004918 <LCD_enuDisplayNum>:

ES_t LCD_enuDisplayNum(u8 Copy_u8Num)
{
    4918:	df 93       	push	r29
    491a:	cf 93       	push	r28
    491c:	cd b7       	in	r28, 0x3d	; 61
    491e:	de b7       	in	r29, 0x3e	; 62
    4920:	28 97       	sbiw	r28, 0x08	; 8
    4922:	0f b6       	in	r0, 0x3f	; 63
    4924:	f8 94       	cli
    4926:	de bf       	out	0x3e, r29	; 62
    4928:	0f be       	out	0x3f, r0	; 63
    492a:	cd bf       	out	0x3d, r28	; 61
    492c:	88 87       	std	Y+8, r24	; 0x08
	ES_t Local_enuErrorState=ES_NOK;
    492e:	1f 82       	std	Y+7, r1	; 0x07

	if(Copy_u8Num>=0 && Copy_u8Num<=9)
    4930:	88 85       	ldd	r24, Y+8	; 0x08
    4932:	8a 30       	cpi	r24, 0x0A	; 10
    4934:	28 f4       	brcc	.+10     	; 0x4940 <LCD_enuDisplayNum+0x28>
	{
		LCD_enuDisplayChar(0x30+Copy_u8Num);
    4936:	88 85       	ldd	r24, Y+8	; 0x08
    4938:	80 5d       	subi	r24, 0xD0	; 208
    493a:	0e 94 0d 24 	call	0x481a	; 0x481a <LCD_enuDisplayChar>
    493e:	86 c0       	rjmp	.+268    	; 0x4a4c <LCD_enuDisplayNum+0x134>
	}
	else
	{
		u8 Local_u8Iterator=0;
    4940:	1e 82       	std	Y+6, r1	; 0x06
		u32 Local_u8Divisor=10;
    4942:	8a e0       	ldi	r24, 0x0A	; 10
    4944:	90 e0       	ldi	r25, 0x00	; 0
    4946:	a0 e0       	ldi	r26, 0x00	; 0
    4948:	b0 e0       	ldi	r27, 0x00	; 0
    494a:	8a 83       	std	Y+2, r24	; 0x02
    494c:	9b 83       	std	Y+3, r25	; 0x03
    494e:	ac 83       	std	Y+4, r26	; 0x04
    4950:	bd 83       	std	Y+5, r27	; 0x05

		while(1)
		{
			if((Copy_u8Num/Local_u8Divisor)==0)
    4952:	88 85       	ldd	r24, Y+8	; 0x08
    4954:	88 2f       	mov	r24, r24
    4956:	90 e0       	ldi	r25, 0x00	; 0
    4958:	a0 e0       	ldi	r26, 0x00	; 0
    495a:	b0 e0       	ldi	r27, 0x00	; 0
    495c:	2a 81       	ldd	r18, Y+2	; 0x02
    495e:	3b 81       	ldd	r19, Y+3	; 0x03
    4960:	4c 81       	ldd	r20, Y+4	; 0x04
    4962:	5d 81       	ldd	r21, Y+5	; 0x05
    4964:	bc 01       	movw	r22, r24
    4966:	cd 01       	movw	r24, r26
    4968:	0e 94 4f 2d 	call	0x5a9e	; 0x5a9e <__udivmodsi4>
    496c:	da 01       	movw	r26, r20
    496e:	c9 01       	movw	r24, r18
    4970:	00 97       	sbiw	r24, 0x00	; 0
    4972:	a1 05       	cpc	r26, r1
    4974:	b1 05       	cpc	r27, r1
    4976:	09 f0       	breq	.+2      	; 0x497a <LCD_enuDisplayNum+0x62>
    4978:	53 c0       	rjmp	.+166    	; 0x4a20 <LCD_enuDisplayNum+0x108>
			{
				for(u8 Local_u8Iter=0; Local_u8Iter<=Local_u8Iterator ;Local_u8Iter++)
    497a:	19 82       	std	Y+1, r1	; 0x01
    497c:	4b c0       	rjmp	.+150    	; 0x4a14 <LCD_enuDisplayNum+0xfc>
				{
					Local_u8Divisor=Local_u8Divisor/10;
    497e:	8a 81       	ldd	r24, Y+2	; 0x02
    4980:	9b 81       	ldd	r25, Y+3	; 0x03
    4982:	ac 81       	ldd	r26, Y+4	; 0x04
    4984:	bd 81       	ldd	r27, Y+5	; 0x05
    4986:	2a e0       	ldi	r18, 0x0A	; 10
    4988:	30 e0       	ldi	r19, 0x00	; 0
    498a:	40 e0       	ldi	r20, 0x00	; 0
    498c:	50 e0       	ldi	r21, 0x00	; 0
    498e:	bc 01       	movw	r22, r24
    4990:	cd 01       	movw	r24, r26
    4992:	0e 94 4f 2d 	call	0x5a9e	; 0x5a9e <__udivmodsi4>
    4996:	da 01       	movw	r26, r20
    4998:	c9 01       	movw	r24, r18
    499a:	8a 83       	std	Y+2, r24	; 0x02
    499c:	9b 83       	std	Y+3, r25	; 0x03
    499e:	ac 83       	std	Y+4, r26	; 0x04
    49a0:	bd 83       	std	Y+5, r27	; 0x05
					if((Copy_u8Num/Local_u8Divisor)>=0  && (Copy_u8Num/Local_u8Divisor)<=9 )
    49a2:	88 85       	ldd	r24, Y+8	; 0x08
    49a4:	88 2f       	mov	r24, r24
    49a6:	90 e0       	ldi	r25, 0x00	; 0
    49a8:	a0 e0       	ldi	r26, 0x00	; 0
    49aa:	b0 e0       	ldi	r27, 0x00	; 0
    49ac:	2a 81       	ldd	r18, Y+2	; 0x02
    49ae:	3b 81       	ldd	r19, Y+3	; 0x03
    49b0:	4c 81       	ldd	r20, Y+4	; 0x04
    49b2:	5d 81       	ldd	r21, Y+5	; 0x05
    49b4:	bc 01       	movw	r22, r24
    49b6:	cd 01       	movw	r24, r26
    49b8:	0e 94 4f 2d 	call	0x5a9e	; 0x5a9e <__udivmodsi4>
    49bc:	da 01       	movw	r26, r20
    49be:	c9 01       	movw	r24, r18
    49c0:	8a 30       	cpi	r24, 0x0A	; 10
    49c2:	91 05       	cpc	r25, r1
    49c4:	a1 05       	cpc	r26, r1
    49c6:	b1 05       	cpc	r27, r1
    49c8:	90 f4       	brcc	.+36     	; 0x49ee <LCD_enuDisplayNum+0xd6>
					{
						//LCD_enuDisplayChar(Array_u8Num[(Copy_u8Num/Local_u8Divisor)]);
						//LCD_enuDisplayChar('0'+(Copy_u8Num/Local_u8Divisor));
						LCD_enuDisplayChar(0x30+(Copy_u8Num/Local_u8Divisor));
    49ca:	88 85       	ldd	r24, Y+8	; 0x08
    49cc:	88 2f       	mov	r24, r24
    49ce:	90 e0       	ldi	r25, 0x00	; 0
    49d0:	a0 e0       	ldi	r26, 0x00	; 0
    49d2:	b0 e0       	ldi	r27, 0x00	; 0
    49d4:	2a 81       	ldd	r18, Y+2	; 0x02
    49d6:	3b 81       	ldd	r19, Y+3	; 0x03
    49d8:	4c 81       	ldd	r20, Y+4	; 0x04
    49da:	5d 81       	ldd	r21, Y+5	; 0x05
    49dc:	bc 01       	movw	r22, r24
    49de:	cd 01       	movw	r24, r26
    49e0:	0e 94 4f 2d 	call	0x5a9e	; 0x5a9e <__udivmodsi4>
    49e4:	da 01       	movw	r26, r20
    49e6:	c9 01       	movw	r24, r18
    49e8:	80 5d       	subi	r24, 0xD0	; 208
    49ea:	0e 94 0d 24 	call	0x481a	; 0x481a <LCD_enuDisplayChar>
					}
					Copy_u8Num= Copy_u8Num % Local_u8Divisor;
    49ee:	88 85       	ldd	r24, Y+8	; 0x08
    49f0:	88 2f       	mov	r24, r24
    49f2:	90 e0       	ldi	r25, 0x00	; 0
    49f4:	a0 e0       	ldi	r26, 0x00	; 0
    49f6:	b0 e0       	ldi	r27, 0x00	; 0
    49f8:	2a 81       	ldd	r18, Y+2	; 0x02
    49fa:	3b 81       	ldd	r19, Y+3	; 0x03
    49fc:	4c 81       	ldd	r20, Y+4	; 0x04
    49fe:	5d 81       	ldd	r21, Y+5	; 0x05
    4a00:	bc 01       	movw	r22, r24
    4a02:	cd 01       	movw	r24, r26
    4a04:	0e 94 4f 2d 	call	0x5a9e	; 0x5a9e <__udivmodsi4>
    4a08:	dc 01       	movw	r26, r24
    4a0a:	cb 01       	movw	r24, r22
    4a0c:	88 87       	std	Y+8, r24	; 0x08

		while(1)
		{
			if((Copy_u8Num/Local_u8Divisor)==0)
			{
				for(u8 Local_u8Iter=0; Local_u8Iter<=Local_u8Iterator ;Local_u8Iter++)
    4a0e:	89 81       	ldd	r24, Y+1	; 0x01
    4a10:	8f 5f       	subi	r24, 0xFF	; 255
    4a12:	89 83       	std	Y+1, r24	; 0x01
    4a14:	99 81       	ldd	r25, Y+1	; 0x01
    4a16:	8e 81       	ldd	r24, Y+6	; 0x06
    4a18:	89 17       	cp	r24, r25
    4a1a:	08 f0       	brcs	.+2      	; 0x4a1e <LCD_enuDisplayNum+0x106>
    4a1c:	b0 cf       	rjmp	.-160    	; 0x497e <LCD_enuDisplayNum+0x66>
    4a1e:	16 c0       	rjmp	.+44     	; 0x4a4c <LCD_enuDisplayNum+0x134>
				}
				break;
			}
			else
			{
				Local_u8Divisor=Local_u8Divisor*10;
    4a20:	8a 81       	ldd	r24, Y+2	; 0x02
    4a22:	9b 81       	ldd	r25, Y+3	; 0x03
    4a24:	ac 81       	ldd	r26, Y+4	; 0x04
    4a26:	bd 81       	ldd	r27, Y+5	; 0x05
    4a28:	2a e0       	ldi	r18, 0x0A	; 10
    4a2a:	30 e0       	ldi	r19, 0x00	; 0
    4a2c:	40 e0       	ldi	r20, 0x00	; 0
    4a2e:	50 e0       	ldi	r21, 0x00	; 0
    4a30:	bc 01       	movw	r22, r24
    4a32:	cd 01       	movw	r24, r26
    4a34:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <__mulsi3>
    4a38:	dc 01       	movw	r26, r24
    4a3a:	cb 01       	movw	r24, r22
    4a3c:	8a 83       	std	Y+2, r24	; 0x02
    4a3e:	9b 83       	std	Y+3, r25	; 0x03
    4a40:	ac 83       	std	Y+4, r26	; 0x04
    4a42:	bd 83       	std	Y+5, r27	; 0x05
				Local_u8Iterator++;
    4a44:	8e 81       	ldd	r24, Y+6	; 0x06
    4a46:	8f 5f       	subi	r24, 0xFF	; 255
    4a48:	8e 83       	std	Y+6, r24	; 0x06
    4a4a:	83 cf       	rjmp	.-250    	; 0x4952 <LCD_enuDisplayNum+0x3a>
			}
		}
	}

		Local_enuErrorState=ES_OK;
    4a4c:	81 e0       	ldi	r24, 0x01	; 1
    4a4e:	8f 83       	std	Y+7, r24	; 0x07

		return Local_enuErrorState;
    4a50:	8f 81       	ldd	r24, Y+7	; 0x07
}
    4a52:	28 96       	adiw	r28, 0x08	; 8
    4a54:	0f b6       	in	r0, 0x3f	; 63
    4a56:	f8 94       	cli
    4a58:	de bf       	out	0x3e, r29	; 62
    4a5a:	0f be       	out	0x3f, r0	; 63
    4a5c:	cd bf       	out	0x3d, r28	; 61
    4a5e:	cf 91       	pop	r28
    4a60:	df 91       	pop	r29
    4a62:	08 95       	ret

00004a64 <LCD_enuSendSpecialNumber>:

ES_t LCD_enuSendSpecialNumber(u32 Copy_u32Number)
{
    4a64:	df 93       	push	r29
    4a66:	cf 93       	push	r28
    4a68:	cd b7       	in	r28, 0x3d	; 61
    4a6a:	de b7       	in	r29, 0x3e	; 62
    4a6c:	2f 97       	sbiw	r28, 0x0f	; 15
    4a6e:	0f b6       	in	r0, 0x3f	; 63
    4a70:	f8 94       	cli
    4a72:	de bf       	out	0x3e, r29	; 62
    4a74:	0f be       	out	0x3f, r0	; 63
    4a76:	cd bf       	out	0x3d, r28	; 61
    4a78:	6c 87       	std	Y+12, r22	; 0x0c
    4a7a:	7d 87       	std	Y+13, r23	; 0x0d
    4a7c:	8e 87       	std	Y+14, r24	; 0x0e
    4a7e:	9f 87       	std	Y+15, r25	; 0x0f
	ES_t error_enuState = ES_NOK;
    4a80:	1b 86       	std	Y+11, r1	; 0x0b

	u8 Local_u8Iteration , Local_u8NumOfDigits=LCD_ZERO;
    4a82:	19 86       	std	Y+9, r1	; 0x09
	u32 Local_u32Reminder , Local_u8PowerTen ;
	Local_u32Reminder=Copy_u32Number;
    4a84:	8c 85       	ldd	r24, Y+12	; 0x0c
    4a86:	9d 85       	ldd	r25, Y+13	; 0x0d
    4a88:	ae 85       	ldd	r26, Y+14	; 0x0e
    4a8a:	bf 85       	ldd	r27, Y+15	; 0x0f
    4a8c:	8d 83       	std	Y+5, r24	; 0x05
    4a8e:	9e 83       	std	Y+6, r25	; 0x06
    4a90:	af 83       	std	Y+7, r26	; 0x07
    4a92:	b8 87       	std	Y+8, r27	; 0x08

	for (Local_u8Iteration = LCD_ONE ;  ; Local_u8Iteration++)
    4a94:	81 e0       	ldi	r24, 0x01	; 1
    4a96:	8a 87       	std	Y+10, r24	; 0x0a
	{
		Copy_u32Number=Local_u32Reminder;
    4a98:	8d 81       	ldd	r24, Y+5	; 0x05
    4a9a:	9e 81       	ldd	r25, Y+6	; 0x06
    4a9c:	af 81       	ldd	r26, Y+7	; 0x07
    4a9e:	b8 85       	ldd	r27, Y+8	; 0x08
    4aa0:	8c 87       	std	Y+12, r24	; 0x0c
    4aa2:	9d 87       	std	Y+13, r25	; 0x0d
    4aa4:	ae 87       	std	Y+14, r26	; 0x0e
    4aa6:	bf 87       	std	Y+15, r27	; 0x0f
		Local_u8PowerTen=POWER_u32PowerNumbers( LCD_TEN , Local_u8Iteration);
    4aa8:	6a e0       	ldi	r22, 0x0A	; 10
    4aaa:	70 e0       	ldi	r23, 0x00	; 0
    4aac:	80 e0       	ldi	r24, 0x00	; 0
    4aae:	90 e0       	ldi	r25, 0x00	; 0
    4ab0:	4a 85       	ldd	r20, Y+10	; 0x0a
    4ab2:	0e 94 d7 25 	call	0x4bae	; 0x4bae <POWER_u32PowerNumbers>
    4ab6:	dc 01       	movw	r26, r24
    4ab8:	cb 01       	movw	r24, r22
    4aba:	89 83       	std	Y+1, r24	; 0x01
    4abc:	9a 83       	std	Y+2, r25	; 0x02
    4abe:	ab 83       	std	Y+3, r26	; 0x03
    4ac0:	bc 83       	std	Y+4, r27	; 0x04
		Copy_u32Number /= Local_u8PowerTen;
    4ac2:	8c 85       	ldd	r24, Y+12	; 0x0c
    4ac4:	9d 85       	ldd	r25, Y+13	; 0x0d
    4ac6:	ae 85       	ldd	r26, Y+14	; 0x0e
    4ac8:	bf 85       	ldd	r27, Y+15	; 0x0f
    4aca:	29 81       	ldd	r18, Y+1	; 0x01
    4acc:	3a 81       	ldd	r19, Y+2	; 0x02
    4ace:	4b 81       	ldd	r20, Y+3	; 0x03
    4ad0:	5c 81       	ldd	r21, Y+4	; 0x04
    4ad2:	bc 01       	movw	r22, r24
    4ad4:	cd 01       	movw	r24, r26
    4ad6:	0e 94 4f 2d 	call	0x5a9e	; 0x5a9e <__udivmodsi4>
    4ada:	da 01       	movw	r26, r20
    4adc:	c9 01       	movw	r24, r18
    4ade:	8c 87       	std	Y+12, r24	; 0x0c
    4ae0:	9d 87       	std	Y+13, r25	; 0x0d
    4ae2:	ae 87       	std	Y+14, r26	; 0x0e
    4ae4:	bf 87       	std	Y+15, r27	; 0x0f

		if (! (Copy_u32Number))
    4ae6:	8c 85       	ldd	r24, Y+12	; 0x0c
    4ae8:	9d 85       	ldd	r25, Y+13	; 0x0d
    4aea:	ae 85       	ldd	r26, Y+14	; 0x0e
    4aec:	bf 85       	ldd	r27, Y+15	; 0x0f
    4aee:	00 97       	sbiw	r24, 0x00	; 0
    4af0:	a1 05       	cpc	r26, r1
    4af2:	b1 05       	cpc	r27, r1
    4af4:	29 f4       	brne	.+10     	; 0x4b00 <LCD_enuSendSpecialNumber+0x9c>
		{
			Local_u8NumOfDigits=Local_u8Iteration;
    4af6:	8a 85       	ldd	r24, Y+10	; 0x0a
    4af8:	89 87       	std	Y+9, r24	; 0x09
			break;
		}
	}

	for (Local_u8Iteration = Local_u8NumOfDigits ; Local_u8Iteration > LCD_ZERO ;Local_u8Iteration--)
    4afa:	89 85       	ldd	r24, Y+9	; 0x09
    4afc:	8a 87       	std	Y+10, r24	; 0x0a
    4afe:	47 c0       	rjmp	.+142    	; 0x4b8e <LCD_enuSendSpecialNumber+0x12a>

	u8 Local_u8Iteration , Local_u8NumOfDigits=LCD_ZERO;
	u32 Local_u32Reminder , Local_u8PowerTen ;
	Local_u32Reminder=Copy_u32Number;

	for (Local_u8Iteration = LCD_ONE ;  ; Local_u8Iteration++)
    4b00:	8a 85       	ldd	r24, Y+10	; 0x0a
    4b02:	8f 5f       	subi	r24, 0xFF	; 255
    4b04:	8a 87       	std	Y+10, r24	; 0x0a
    4b06:	c8 cf       	rjmp	.-112    	; 0x4a98 <LCD_enuSendSpecialNumber+0x34>
		}
	}

	for (Local_u8Iteration = Local_u8NumOfDigits ; Local_u8Iteration > LCD_ZERO ;Local_u8Iteration--)
	{
		Copy_u32Number=Local_u32Reminder;
    4b08:	8d 81       	ldd	r24, Y+5	; 0x05
    4b0a:	9e 81       	ldd	r25, Y+6	; 0x06
    4b0c:	af 81       	ldd	r26, Y+7	; 0x07
    4b0e:	b8 85       	ldd	r27, Y+8	; 0x08
    4b10:	8c 87       	std	Y+12, r24	; 0x0c
    4b12:	9d 87       	std	Y+13, r25	; 0x0d
    4b14:	ae 87       	std	Y+14, r26	; 0x0e
    4b16:	bf 87       	std	Y+15, r27	; 0x0f
		Local_u8PowerTen=POWER_u32PowerNumbers( LCD_TEN , Local_u8Iteration - LCD_ONE);
    4b18:	8a 85       	ldd	r24, Y+10	; 0x0a
    4b1a:	28 2f       	mov	r18, r24
    4b1c:	21 50       	subi	r18, 0x01	; 1
    4b1e:	6a e0       	ldi	r22, 0x0A	; 10
    4b20:	70 e0       	ldi	r23, 0x00	; 0
    4b22:	80 e0       	ldi	r24, 0x00	; 0
    4b24:	90 e0       	ldi	r25, 0x00	; 0
    4b26:	42 2f       	mov	r20, r18
    4b28:	0e 94 d7 25 	call	0x4bae	; 0x4bae <POWER_u32PowerNumbers>
    4b2c:	dc 01       	movw	r26, r24
    4b2e:	cb 01       	movw	r24, r22
    4b30:	89 83       	std	Y+1, r24	; 0x01
    4b32:	9a 83       	std	Y+2, r25	; 0x02
    4b34:	ab 83       	std	Y+3, r26	; 0x03
    4b36:	bc 83       	std	Y+4, r27	; 0x04

		Local_u32Reminder  %= Local_u8PowerTen;
    4b38:	8d 81       	ldd	r24, Y+5	; 0x05
    4b3a:	9e 81       	ldd	r25, Y+6	; 0x06
    4b3c:	af 81       	ldd	r26, Y+7	; 0x07
    4b3e:	b8 85       	ldd	r27, Y+8	; 0x08
    4b40:	29 81       	ldd	r18, Y+1	; 0x01
    4b42:	3a 81       	ldd	r19, Y+2	; 0x02
    4b44:	4b 81       	ldd	r20, Y+3	; 0x03
    4b46:	5c 81       	ldd	r21, Y+4	; 0x04
    4b48:	bc 01       	movw	r22, r24
    4b4a:	cd 01       	movw	r24, r26
    4b4c:	0e 94 4f 2d 	call	0x5a9e	; 0x5a9e <__udivmodsi4>
    4b50:	dc 01       	movw	r26, r24
    4b52:	cb 01       	movw	r24, r22
    4b54:	8d 83       	std	Y+5, r24	; 0x05
    4b56:	9e 83       	std	Y+6, r25	; 0x06
    4b58:	af 83       	std	Y+7, r26	; 0x07
    4b5a:	b8 87       	std	Y+8, r27	; 0x08

		Copy_u32Number /= (Local_u8PowerTen);
    4b5c:	8c 85       	ldd	r24, Y+12	; 0x0c
    4b5e:	9d 85       	ldd	r25, Y+13	; 0x0d
    4b60:	ae 85       	ldd	r26, Y+14	; 0x0e
    4b62:	bf 85       	ldd	r27, Y+15	; 0x0f
    4b64:	29 81       	ldd	r18, Y+1	; 0x01
    4b66:	3a 81       	ldd	r19, Y+2	; 0x02
    4b68:	4b 81       	ldd	r20, Y+3	; 0x03
    4b6a:	5c 81       	ldd	r21, Y+4	; 0x04
    4b6c:	bc 01       	movw	r22, r24
    4b6e:	cd 01       	movw	r24, r26
    4b70:	0e 94 4f 2d 	call	0x5a9e	; 0x5a9e <__udivmodsi4>
    4b74:	da 01       	movw	r26, r20
    4b76:	c9 01       	movw	r24, r18
    4b78:	8c 87       	std	Y+12, r24	; 0x0c
    4b7a:	9d 87       	std	Y+13, r25	; 0x0d
    4b7c:	ae 87       	std	Y+14, r26	; 0x0e
    4b7e:	bf 87       	std	Y+15, r27	; 0x0f

		LCD_enuDisplayChar(Copy_u32Number+'0');
    4b80:	8c 85       	ldd	r24, Y+12	; 0x0c
    4b82:	80 5d       	subi	r24, 0xD0	; 208
    4b84:	0e 94 0d 24 	call	0x481a	; 0x481a <LCD_enuDisplayChar>
			Local_u8NumOfDigits=Local_u8Iteration;
			break;
		}
	}

	for (Local_u8Iteration = Local_u8NumOfDigits ; Local_u8Iteration > LCD_ZERO ;Local_u8Iteration--)
    4b88:	8a 85       	ldd	r24, Y+10	; 0x0a
    4b8a:	81 50       	subi	r24, 0x01	; 1
    4b8c:	8a 87       	std	Y+10, r24	; 0x0a
    4b8e:	8a 85       	ldd	r24, Y+10	; 0x0a
    4b90:	88 23       	and	r24, r24
    4b92:	09 f0       	breq	.+2      	; 0x4b96 <LCD_enuSendSpecialNumber+0x132>
    4b94:	b9 cf       	rjmp	.-142    	; 0x4b08 <LCD_enuSendSpecialNumber+0xa4>

		Copy_u32Number /= (Local_u8PowerTen);

		LCD_enuDisplayChar(Copy_u32Number+'0');
	}
	error_enuState = ES_OK;
    4b96:	81 e0       	ldi	r24, 0x01	; 1
    4b98:	8b 87       	std	Y+11, r24	; 0x0b

	return error_enuState;
    4b9a:	8b 85       	ldd	r24, Y+11	; 0x0b
}
    4b9c:	2f 96       	adiw	r28, 0x0f	; 15
    4b9e:	0f b6       	in	r0, 0x3f	; 63
    4ba0:	f8 94       	cli
    4ba2:	de bf       	out	0x3e, r29	; 62
    4ba4:	0f be       	out	0x3f, r0	; 63
    4ba6:	cd bf       	out	0x3d, r28	; 61
    4ba8:	cf 91       	pop	r28
    4baa:	df 91       	pop	r29
    4bac:	08 95       	ret

00004bae <POWER_u32PowerNumbers>:

u32 POWER_u32PowerNumbers(u32 Copy_u32Number , u8 Copy_u8Power)
{
    4bae:	df 93       	push	r29
    4bb0:	cf 93       	push	r28
    4bb2:	cd b7       	in	r28, 0x3d	; 61
    4bb4:	de b7       	in	r29, 0x3e	; 62
    4bb6:	2a 97       	sbiw	r28, 0x0a	; 10
    4bb8:	0f b6       	in	r0, 0x3f	; 63
    4bba:	f8 94       	cli
    4bbc:	de bf       	out	0x3e, r29	; 62
    4bbe:	0f be       	out	0x3f, r0	; 63
    4bc0:	cd bf       	out	0x3d, r28	; 61
    4bc2:	6e 83       	std	Y+6, r22	; 0x06
    4bc4:	7f 83       	std	Y+7, r23	; 0x07
    4bc6:	88 87       	std	Y+8, r24	; 0x08
    4bc8:	99 87       	std	Y+9, r25	; 0x09
    4bca:	4a 87       	std	Y+10, r20	; 0x0a
	u32 Local_u32Result = LCD_ONE ;
    4bcc:	81 e0       	ldi	r24, 0x01	; 1
    4bce:	90 e0       	ldi	r25, 0x00	; 0
    4bd0:	a0 e0       	ldi	r26, 0x00	; 0
    4bd2:	b0 e0       	ldi	r27, 0x00	; 0
    4bd4:	8a 83       	std	Y+2, r24	; 0x02
    4bd6:	9b 83       	std	Y+3, r25	; 0x03
    4bd8:	ac 83       	std	Y+4, r26	; 0x04
    4bda:	bd 83       	std	Y+5, r27	; 0x05
	u8 Local_u8Iteration ;

	for (Local_u8Iteration = LCD_ONE ; Local_u8Iteration <= Copy_u8Power ; Local_u8Iteration++)
    4bdc:	81 e0       	ldi	r24, 0x01	; 1
    4bde:	89 83       	std	Y+1, r24	; 0x01
    4be0:	15 c0       	rjmp	.+42     	; 0x4c0c <POWER_u32PowerNumbers+0x5e>
	{
		Local_u32Result *=Copy_u32Number ;
    4be2:	8a 81       	ldd	r24, Y+2	; 0x02
    4be4:	9b 81       	ldd	r25, Y+3	; 0x03
    4be6:	ac 81       	ldd	r26, Y+4	; 0x04
    4be8:	bd 81       	ldd	r27, Y+5	; 0x05
    4bea:	2e 81       	ldd	r18, Y+6	; 0x06
    4bec:	3f 81       	ldd	r19, Y+7	; 0x07
    4bee:	48 85       	ldd	r20, Y+8	; 0x08
    4bf0:	59 85       	ldd	r21, Y+9	; 0x09
    4bf2:	bc 01       	movw	r22, r24
    4bf4:	cd 01       	movw	r24, r26
    4bf6:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <__mulsi3>
    4bfa:	dc 01       	movw	r26, r24
    4bfc:	cb 01       	movw	r24, r22
    4bfe:	8a 83       	std	Y+2, r24	; 0x02
    4c00:	9b 83       	std	Y+3, r25	; 0x03
    4c02:	ac 83       	std	Y+4, r26	; 0x04
    4c04:	bd 83       	std	Y+5, r27	; 0x05
u32 POWER_u32PowerNumbers(u32 Copy_u32Number , u8 Copy_u8Power)
{
	u32 Local_u32Result = LCD_ONE ;
	u8 Local_u8Iteration ;

	for (Local_u8Iteration = LCD_ONE ; Local_u8Iteration <= Copy_u8Power ; Local_u8Iteration++)
    4c06:	89 81       	ldd	r24, Y+1	; 0x01
    4c08:	8f 5f       	subi	r24, 0xFF	; 255
    4c0a:	89 83       	std	Y+1, r24	; 0x01
    4c0c:	99 81       	ldd	r25, Y+1	; 0x01
    4c0e:	8a 85       	ldd	r24, Y+10	; 0x0a
    4c10:	89 17       	cp	r24, r25
    4c12:	38 f7       	brcc	.-50     	; 0x4be2 <POWER_u32PowerNumbers+0x34>
	{
		Local_u32Result *=Copy_u32Number ;
	}

	return Local_u32Result ;
    4c14:	8a 81       	ldd	r24, Y+2	; 0x02
    4c16:	9b 81       	ldd	r25, Y+3	; 0x03
    4c18:	ac 81       	ldd	r26, Y+4	; 0x04
    4c1a:	bd 81       	ldd	r27, Y+5	; 0x05
}
    4c1c:	bc 01       	movw	r22, r24
    4c1e:	cd 01       	movw	r24, r26
    4c20:	2a 96       	adiw	r28, 0x0a	; 10
    4c22:	0f b6       	in	r0, 0x3f	; 63
    4c24:	f8 94       	cli
    4c26:	de bf       	out	0x3e, r29	; 62
    4c28:	0f be       	out	0x3f, r0	; 63
    4c2a:	cd bf       	out	0x3d, r28	; 61
    4c2c:	cf 91       	pop	r28
    4c2e:	df 91       	pop	r29
    4c30:	08 95       	ret

00004c32 <LCD_vidLatch>:


static void LCD_vidLatch(u8 Copy_u8Data)
{
    4c32:	df 93       	push	r29
    4c34:	cf 93       	push	r28
    4c36:	cd b7       	in	r28, 0x3d	; 61
    4c38:	de b7       	in	r29, 0x3e	; 62
    4c3a:	6d 97       	sbiw	r28, 0x1d	; 29
    4c3c:	0f b6       	in	r0, 0x3f	; 63
    4c3e:	f8 94       	cli
    4c40:	de bf       	out	0x3e, r29	; 62
    4c42:	0f be       	out	0x3f, r0	; 63
    4c44:	cd bf       	out	0x3d, r28	; 61
    4c46:	8d 8f       	std	Y+29, r24	; 0x1d
	//set EN as low
		DIO_enuSetPinValue(EN_PORT,EN_PIN,DIO_u8LOW);
    4c48:	81 e0       	ldi	r24, 0x01	; 1
    4c4a:	62 e0       	ldi	r22, 0x02	; 2
    4c4c:	40 e0       	ldi	r20, 0x00	; 0
    4c4e:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <DIO_enuSetPinValue>
		//set RW as write operation
		DIO_enuSetPinValue(RW_PORT,RW_PIN,DIO_u8LOW);
    4c52:	81 e0       	ldi	r24, 0x01	; 1
    4c54:	61 e0       	ldi	r22, 0x01	; 1
    4c56:	40 e0       	ldi	r20, 0x00	; 0
    4c58:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <DIO_enuSetPinValue>
		//write data
		DIO_enuSetPinValue(D7_PORT,D7_PIN,((Copy_u8Data>>7)&LCD_MASK_BIT));
    4c5c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4c5e:	98 2f       	mov	r25, r24
    4c60:	99 1f       	adc	r25, r25
    4c62:	99 27       	eor	r25, r25
    4c64:	99 1f       	adc	r25, r25
    4c66:	81 e0       	ldi	r24, 0x01	; 1
    4c68:	63 e0       	ldi	r22, 0x03	; 3
    4c6a:	49 2f       	mov	r20, r25
    4c6c:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D6_PORT,D6_PIN,((Copy_u8Data>>6)&LCD_MASK_BIT));
    4c70:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4c72:	82 95       	swap	r24
    4c74:	86 95       	lsr	r24
    4c76:	86 95       	lsr	r24
    4c78:	83 70       	andi	r24, 0x03	; 3
    4c7a:	98 2f       	mov	r25, r24
    4c7c:	91 70       	andi	r25, 0x01	; 1
    4c7e:	80 e0       	ldi	r24, 0x00	; 0
    4c80:	66 e0       	ldi	r22, 0x06	; 6
    4c82:	49 2f       	mov	r20, r25
    4c84:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D5_PORT,D5_PIN,((Copy_u8Data>>5)&LCD_MASK_BIT));
    4c88:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4c8a:	82 95       	swap	r24
    4c8c:	86 95       	lsr	r24
    4c8e:	87 70       	andi	r24, 0x07	; 7
    4c90:	98 2f       	mov	r25, r24
    4c92:	91 70       	andi	r25, 0x01	; 1
    4c94:	80 e0       	ldi	r24, 0x00	; 0
    4c96:	65 e0       	ldi	r22, 0x05	; 5
    4c98:	49 2f       	mov	r20, r25
    4c9a:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D4_PORT,D4_PIN,((Copy_u8Data>>4)&LCD_MASK_BIT));
    4c9e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4ca0:	82 95       	swap	r24
    4ca2:	8f 70       	andi	r24, 0x0F	; 15
    4ca4:	98 2f       	mov	r25, r24
    4ca6:	91 70       	andi	r25, 0x01	; 1
    4ca8:	80 e0       	ldi	r24, 0x00	; 0
    4caa:	64 e0       	ldi	r22, 0x04	; 4
    4cac:	49 2f       	mov	r20, r25
    4cae:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <DIO_enuSetPinValue>
#if LCD_MODE==EIGHT_BIT
		DIO_enuSetPinValue(D3_PORT,D3_PIN,((Copy_u8Data>>3)&LCD_MASK_BIT));
    4cb2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4cb4:	86 95       	lsr	r24
    4cb6:	86 95       	lsr	r24
    4cb8:	86 95       	lsr	r24
    4cba:	98 2f       	mov	r25, r24
    4cbc:	91 70       	andi	r25, 0x01	; 1
    4cbe:	80 e0       	ldi	r24, 0x00	; 0
    4cc0:	63 e0       	ldi	r22, 0x03	; 3
    4cc2:	49 2f       	mov	r20, r25
    4cc4:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D2_PORT,D2_PIN,((Copy_u8Data>>2)&LCD_MASK_BIT));
    4cc8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4cca:	86 95       	lsr	r24
    4ccc:	86 95       	lsr	r24
    4cce:	98 2f       	mov	r25, r24
    4cd0:	91 70       	andi	r25, 0x01	; 1
    4cd2:	80 e0       	ldi	r24, 0x00	; 0
    4cd4:	62 e0       	ldi	r22, 0x02	; 2
    4cd6:	49 2f       	mov	r20, r25
    4cd8:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D1_PORT,D1_PIN,((Copy_u8Data>>1)&LCD_MASK_BIT));
    4cdc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4cde:	86 95       	lsr	r24
    4ce0:	98 2f       	mov	r25, r24
    4ce2:	91 70       	andi	r25, 0x01	; 1
    4ce4:	80 e0       	ldi	r24, 0x00	; 0
    4ce6:	61 e0       	ldi	r22, 0x01	; 1
    4ce8:	49 2f       	mov	r20, r25
    4cea:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D0_PORT,D0_PIN,((Copy_u8Data>>0)&LCD_MASK_BIT));
    4cee:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4cf0:	98 2f       	mov	r25, r24
    4cf2:	91 70       	andi	r25, 0x01	; 1
    4cf4:	80 e0       	ldi	r24, 0x00	; 0
    4cf6:	60 e0       	ldi	r22, 0x00	; 0
    4cf8:	49 2f       	mov	r20, r25
    4cfa:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <DIO_enuSetPinValue>
#else
#error"your LCD_MODE has a wrong selection"
#endif

		//enable latch
		DIO_enuSetPinValue(EN_PORT,EN_PIN,DIO_u8HIGH);
    4cfe:	81 e0       	ldi	r24, 0x01	; 1
    4d00:	62 e0       	ldi	r22, 0x02	; 2
    4d02:	41 e0       	ldi	r20, 0x01	; 1
    4d04:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <DIO_enuSetPinValue>
    4d08:	80 e0       	ldi	r24, 0x00	; 0
    4d0a:	90 e0       	ldi	r25, 0x00	; 0
    4d0c:	a0 e2       	ldi	r26, 0x20	; 32
    4d0e:	b1 e4       	ldi	r27, 0x41	; 65
    4d10:	89 8f       	std	Y+25, r24	; 0x19
    4d12:	9a 8f       	std	Y+26, r25	; 0x1a
    4d14:	ab 8f       	std	Y+27, r26	; 0x1b
    4d16:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d18:	69 8d       	ldd	r22, Y+25	; 0x19
    4d1a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4d1c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4d1e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4d20:	20 e0       	ldi	r18, 0x00	; 0
    4d22:	30 e0       	ldi	r19, 0x00	; 0
    4d24:	4a ef       	ldi	r20, 0xFA	; 250
    4d26:	54 e4       	ldi	r21, 0x44	; 68
    4d28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d2c:	dc 01       	movw	r26, r24
    4d2e:	cb 01       	movw	r24, r22
    4d30:	8d 8b       	std	Y+21, r24	; 0x15
    4d32:	9e 8b       	std	Y+22, r25	; 0x16
    4d34:	af 8b       	std	Y+23, r26	; 0x17
    4d36:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4d38:	6d 89       	ldd	r22, Y+21	; 0x15
    4d3a:	7e 89       	ldd	r23, Y+22	; 0x16
    4d3c:	8f 89       	ldd	r24, Y+23	; 0x17
    4d3e:	98 8d       	ldd	r25, Y+24	; 0x18
    4d40:	20 e0       	ldi	r18, 0x00	; 0
    4d42:	30 e0       	ldi	r19, 0x00	; 0
    4d44:	40 e8       	ldi	r20, 0x80	; 128
    4d46:	5f e3       	ldi	r21, 0x3F	; 63
    4d48:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4d4c:	88 23       	and	r24, r24
    4d4e:	2c f4       	brge	.+10     	; 0x4d5a <LCD_vidLatch+0x128>
		__ticks = 1;
    4d50:	81 e0       	ldi	r24, 0x01	; 1
    4d52:	90 e0       	ldi	r25, 0x00	; 0
    4d54:	9c 8b       	std	Y+20, r25	; 0x14
    4d56:	8b 8b       	std	Y+19, r24	; 0x13
    4d58:	3f c0       	rjmp	.+126    	; 0x4dd8 <LCD_vidLatch+0x1a6>
	else if (__tmp > 65535)
    4d5a:	6d 89       	ldd	r22, Y+21	; 0x15
    4d5c:	7e 89       	ldd	r23, Y+22	; 0x16
    4d5e:	8f 89       	ldd	r24, Y+23	; 0x17
    4d60:	98 8d       	ldd	r25, Y+24	; 0x18
    4d62:	20 e0       	ldi	r18, 0x00	; 0
    4d64:	3f ef       	ldi	r19, 0xFF	; 255
    4d66:	4f e7       	ldi	r20, 0x7F	; 127
    4d68:	57 e4       	ldi	r21, 0x47	; 71
    4d6a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4d6e:	18 16       	cp	r1, r24
    4d70:	4c f5       	brge	.+82     	; 0x4dc4 <LCD_vidLatch+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d72:	69 8d       	ldd	r22, Y+25	; 0x19
    4d74:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4d76:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4d78:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4d7a:	20 e0       	ldi	r18, 0x00	; 0
    4d7c:	30 e0       	ldi	r19, 0x00	; 0
    4d7e:	40 e2       	ldi	r20, 0x20	; 32
    4d80:	51 e4       	ldi	r21, 0x41	; 65
    4d82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d86:	dc 01       	movw	r26, r24
    4d88:	cb 01       	movw	r24, r22
    4d8a:	bc 01       	movw	r22, r24
    4d8c:	cd 01       	movw	r24, r26
    4d8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d92:	dc 01       	movw	r26, r24
    4d94:	cb 01       	movw	r24, r22
    4d96:	9c 8b       	std	Y+20, r25	; 0x14
    4d98:	8b 8b       	std	Y+19, r24	; 0x13
    4d9a:	0f c0       	rjmp	.+30     	; 0x4dba <LCD_vidLatch+0x188>
    4d9c:	88 ec       	ldi	r24, 0xC8	; 200
    4d9e:	90 e0       	ldi	r25, 0x00	; 0
    4da0:	9a 8b       	std	Y+18, r25	; 0x12
    4da2:	89 8b       	std	Y+17, r24	; 0x11
    4da4:	89 89       	ldd	r24, Y+17	; 0x11
    4da6:	9a 89       	ldd	r25, Y+18	; 0x12
    4da8:	01 97       	sbiw	r24, 0x01	; 1
    4daa:	f1 f7       	brne	.-4      	; 0x4da8 <LCD_vidLatch+0x176>
    4dac:	9a 8b       	std	Y+18, r25	; 0x12
    4dae:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4db0:	8b 89       	ldd	r24, Y+19	; 0x13
    4db2:	9c 89       	ldd	r25, Y+20	; 0x14
    4db4:	01 97       	sbiw	r24, 0x01	; 1
    4db6:	9c 8b       	std	Y+20, r25	; 0x14
    4db8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4dba:	8b 89       	ldd	r24, Y+19	; 0x13
    4dbc:	9c 89       	ldd	r25, Y+20	; 0x14
    4dbe:	00 97       	sbiw	r24, 0x00	; 0
    4dc0:	69 f7       	brne	.-38     	; 0x4d9c <LCD_vidLatch+0x16a>
    4dc2:	14 c0       	rjmp	.+40     	; 0x4dec <LCD_vidLatch+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4dc4:	6d 89       	ldd	r22, Y+21	; 0x15
    4dc6:	7e 89       	ldd	r23, Y+22	; 0x16
    4dc8:	8f 89       	ldd	r24, Y+23	; 0x17
    4dca:	98 8d       	ldd	r25, Y+24	; 0x18
    4dcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4dd0:	dc 01       	movw	r26, r24
    4dd2:	cb 01       	movw	r24, r22
    4dd4:	9c 8b       	std	Y+20, r25	; 0x14
    4dd6:	8b 8b       	std	Y+19, r24	; 0x13
    4dd8:	8b 89       	ldd	r24, Y+19	; 0x13
    4dda:	9c 89       	ldd	r25, Y+20	; 0x14
    4ddc:	98 8b       	std	Y+16, r25	; 0x10
    4dde:	8f 87       	std	Y+15, r24	; 0x0f
    4de0:	8f 85       	ldd	r24, Y+15	; 0x0f
    4de2:	98 89       	ldd	r25, Y+16	; 0x10
    4de4:	01 97       	sbiw	r24, 0x01	; 1
    4de6:	f1 f7       	brne	.-4      	; 0x4de4 <LCD_vidLatch+0x1b2>
    4de8:	98 8b       	std	Y+16, r25	; 0x10
    4dea:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(10);
		DIO_enuSetPinValue(EN_PORT,EN_PIN,DIO_u8LOW);
    4dec:	81 e0       	ldi	r24, 0x01	; 1
    4dee:	62 e0       	ldi	r22, 0x02	; 2
    4df0:	40 e0       	ldi	r20, 0x00	; 0
    4df2:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <DIO_enuSetPinValue>
    4df6:	80 e0       	ldi	r24, 0x00	; 0
    4df8:	90 e0       	ldi	r25, 0x00	; 0
    4dfa:	a0 e2       	ldi	r26, 0x20	; 32
    4dfc:	b1 e4       	ldi	r27, 0x41	; 65
    4dfe:	8b 87       	std	Y+11, r24	; 0x0b
    4e00:	9c 87       	std	Y+12, r25	; 0x0c
    4e02:	ad 87       	std	Y+13, r26	; 0x0d
    4e04:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e06:	6b 85       	ldd	r22, Y+11	; 0x0b
    4e08:	7c 85       	ldd	r23, Y+12	; 0x0c
    4e0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e0e:	20 e0       	ldi	r18, 0x00	; 0
    4e10:	30 e0       	ldi	r19, 0x00	; 0
    4e12:	4a ef       	ldi	r20, 0xFA	; 250
    4e14:	54 e4       	ldi	r21, 0x44	; 68
    4e16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e1a:	dc 01       	movw	r26, r24
    4e1c:	cb 01       	movw	r24, r22
    4e1e:	8f 83       	std	Y+7, r24	; 0x07
    4e20:	98 87       	std	Y+8, r25	; 0x08
    4e22:	a9 87       	std	Y+9, r26	; 0x09
    4e24:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4e26:	6f 81       	ldd	r22, Y+7	; 0x07
    4e28:	78 85       	ldd	r23, Y+8	; 0x08
    4e2a:	89 85       	ldd	r24, Y+9	; 0x09
    4e2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e2e:	20 e0       	ldi	r18, 0x00	; 0
    4e30:	30 e0       	ldi	r19, 0x00	; 0
    4e32:	40 e8       	ldi	r20, 0x80	; 128
    4e34:	5f e3       	ldi	r21, 0x3F	; 63
    4e36:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4e3a:	88 23       	and	r24, r24
    4e3c:	2c f4       	brge	.+10     	; 0x4e48 <LCD_vidLatch+0x216>
		__ticks = 1;
    4e3e:	81 e0       	ldi	r24, 0x01	; 1
    4e40:	90 e0       	ldi	r25, 0x00	; 0
    4e42:	9e 83       	std	Y+6, r25	; 0x06
    4e44:	8d 83       	std	Y+5, r24	; 0x05
    4e46:	3f c0       	rjmp	.+126    	; 0x4ec6 <LCD_vidLatch+0x294>
	else if (__tmp > 65535)
    4e48:	6f 81       	ldd	r22, Y+7	; 0x07
    4e4a:	78 85       	ldd	r23, Y+8	; 0x08
    4e4c:	89 85       	ldd	r24, Y+9	; 0x09
    4e4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e50:	20 e0       	ldi	r18, 0x00	; 0
    4e52:	3f ef       	ldi	r19, 0xFF	; 255
    4e54:	4f e7       	ldi	r20, 0x7F	; 127
    4e56:	57 e4       	ldi	r21, 0x47	; 71
    4e58:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4e5c:	18 16       	cp	r1, r24
    4e5e:	4c f5       	brge	.+82     	; 0x4eb2 <LCD_vidLatch+0x280>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e60:	6b 85       	ldd	r22, Y+11	; 0x0b
    4e62:	7c 85       	ldd	r23, Y+12	; 0x0c
    4e64:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e66:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e68:	20 e0       	ldi	r18, 0x00	; 0
    4e6a:	30 e0       	ldi	r19, 0x00	; 0
    4e6c:	40 e2       	ldi	r20, 0x20	; 32
    4e6e:	51 e4       	ldi	r21, 0x41	; 65
    4e70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e74:	dc 01       	movw	r26, r24
    4e76:	cb 01       	movw	r24, r22
    4e78:	bc 01       	movw	r22, r24
    4e7a:	cd 01       	movw	r24, r26
    4e7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e80:	dc 01       	movw	r26, r24
    4e82:	cb 01       	movw	r24, r22
    4e84:	9e 83       	std	Y+6, r25	; 0x06
    4e86:	8d 83       	std	Y+5, r24	; 0x05
    4e88:	0f c0       	rjmp	.+30     	; 0x4ea8 <LCD_vidLatch+0x276>
    4e8a:	88 ec       	ldi	r24, 0xC8	; 200
    4e8c:	90 e0       	ldi	r25, 0x00	; 0
    4e8e:	9c 83       	std	Y+4, r25	; 0x04
    4e90:	8b 83       	std	Y+3, r24	; 0x03
    4e92:	8b 81       	ldd	r24, Y+3	; 0x03
    4e94:	9c 81       	ldd	r25, Y+4	; 0x04
    4e96:	01 97       	sbiw	r24, 0x01	; 1
    4e98:	f1 f7       	brne	.-4      	; 0x4e96 <LCD_vidLatch+0x264>
    4e9a:	9c 83       	std	Y+4, r25	; 0x04
    4e9c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e9e:	8d 81       	ldd	r24, Y+5	; 0x05
    4ea0:	9e 81       	ldd	r25, Y+6	; 0x06
    4ea2:	01 97       	sbiw	r24, 0x01	; 1
    4ea4:	9e 83       	std	Y+6, r25	; 0x06
    4ea6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ea8:	8d 81       	ldd	r24, Y+5	; 0x05
    4eaa:	9e 81       	ldd	r25, Y+6	; 0x06
    4eac:	00 97       	sbiw	r24, 0x00	; 0
    4eae:	69 f7       	brne	.-38     	; 0x4e8a <LCD_vidLatch+0x258>
    4eb0:	14 c0       	rjmp	.+40     	; 0x4eda <LCD_vidLatch+0x2a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4eb2:	6f 81       	ldd	r22, Y+7	; 0x07
    4eb4:	78 85       	ldd	r23, Y+8	; 0x08
    4eb6:	89 85       	ldd	r24, Y+9	; 0x09
    4eb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    4eba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ebe:	dc 01       	movw	r26, r24
    4ec0:	cb 01       	movw	r24, r22
    4ec2:	9e 83       	std	Y+6, r25	; 0x06
    4ec4:	8d 83       	std	Y+5, r24	; 0x05
    4ec6:	8d 81       	ldd	r24, Y+5	; 0x05
    4ec8:	9e 81       	ldd	r25, Y+6	; 0x06
    4eca:	9a 83       	std	Y+2, r25	; 0x02
    4ecc:	89 83       	std	Y+1, r24	; 0x01
    4ece:	89 81       	ldd	r24, Y+1	; 0x01
    4ed0:	9a 81       	ldd	r25, Y+2	; 0x02
    4ed2:	01 97       	sbiw	r24, 0x01	; 1
    4ed4:	f1 f7       	brne	.-4      	; 0x4ed2 <LCD_vidLatch+0x2a0>
    4ed6:	9a 83       	std	Y+2, r25	; 0x02
    4ed8:	89 83       	std	Y+1, r24	; 0x01

		// solve prob of freq of atmega bigger than lcd (appear in real time)
		_delay_ms(10);
}
    4eda:	6d 96       	adiw	r28, 0x1d	; 29
    4edc:	0f b6       	in	r0, 0x3f	; 63
    4ede:	f8 94       	cli
    4ee0:	de bf       	out	0x3e, r29	; 62
    4ee2:	0f be       	out	0x3f, r0	; 63
    4ee4:	cd bf       	out	0x3d, r28	; 61
    4ee6:	cf 91       	pop	r28
    4ee8:	df 91       	pop	r29
    4eea:	08 95       	ret

00004eec <LCD_invidSendCommand>:

static inline void LCD_invidSendCommand(u8 Copy_u8Command)
{
    4eec:	df 93       	push	r29
    4eee:	cf 93       	push	r28
    4ef0:	cd b7       	in	r28, 0x3d	; 61
    4ef2:	de b7       	in	r29, 0x3e	; 62
    4ef4:	2f 97       	sbiw	r28, 0x0f	; 15
    4ef6:	0f b6       	in	r0, 0x3f	; 63
    4ef8:	f8 94       	cli
    4efa:	de bf       	out	0x3e, r29	; 62
    4efc:	0f be       	out	0x3f, r0	; 63
    4efe:	cd bf       	out	0x3d, r28	; 61
    4f00:	8f 87       	std	Y+15, r24	; 0x0f

	//set RS as command
	DIO_enuSetPinValue(RS_PORT,RS_PIN,DIO_u8LOW);
    4f02:	81 e0       	ldi	r24, 0x01	; 1
    4f04:	60 e0       	ldi	r22, 0x00	; 0
    4f06:	40 e0       	ldi	r20, 0x00	; 0
    4f08:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <DIO_enuSetPinValue>
	//set EN as low
	DIO_enuSetPinValue(EN_PORT,EN_PIN,DIO_u8LOW);
    4f0c:	81 e0       	ldi	r24, 0x01	; 1
    4f0e:	62 e0       	ldi	r22, 0x02	; 2
    4f10:	40 e0       	ldi	r20, 0x00	; 0
    4f12:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <DIO_enuSetPinValue>
	//set RW as write operation
	DIO_enuSetPinValue(RW_PORT,RW_PIN,DIO_u8LOW);
    4f16:	81 e0       	ldi	r24, 0x01	; 1
    4f18:	61 e0       	ldi	r22, 0x01	; 1
    4f1a:	40 e0       	ldi	r20, 0x00	; 0
    4f1c:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <DIO_enuSetPinValue>
	//write data
	DIO_enuSetPinValue(D7_PORT,D7_PIN,((Copy_u8Command>>7)&LCD_MASK_BIT));
    4f20:	8f 85       	ldd	r24, Y+15	; 0x0f
    4f22:	98 2f       	mov	r25, r24
    4f24:	99 1f       	adc	r25, r25
    4f26:	99 27       	eor	r25, r25
    4f28:	99 1f       	adc	r25, r25
    4f2a:	81 e0       	ldi	r24, 0x01	; 1
    4f2c:	63 e0       	ldi	r22, 0x03	; 3
    4f2e:	49 2f       	mov	r20, r25
    4f30:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT,D6_PIN,((Copy_u8Command>>6)&LCD_MASK_BIT));
    4f34:	8f 85       	ldd	r24, Y+15	; 0x0f
    4f36:	82 95       	swap	r24
    4f38:	86 95       	lsr	r24
    4f3a:	86 95       	lsr	r24
    4f3c:	83 70       	andi	r24, 0x03	; 3
    4f3e:	98 2f       	mov	r25, r24
    4f40:	91 70       	andi	r25, 0x01	; 1
    4f42:	80 e0       	ldi	r24, 0x00	; 0
    4f44:	66 e0       	ldi	r22, 0x06	; 6
    4f46:	49 2f       	mov	r20, r25
    4f48:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT,D5_PIN,((Copy_u8Command>>5)&LCD_MASK_BIT));
    4f4c:	8f 85       	ldd	r24, Y+15	; 0x0f
    4f4e:	82 95       	swap	r24
    4f50:	86 95       	lsr	r24
    4f52:	87 70       	andi	r24, 0x07	; 7
    4f54:	98 2f       	mov	r25, r24
    4f56:	91 70       	andi	r25, 0x01	; 1
    4f58:	80 e0       	ldi	r24, 0x00	; 0
    4f5a:	65 e0       	ldi	r22, 0x05	; 5
    4f5c:	49 2f       	mov	r20, r25
    4f5e:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_PORT,D4_PIN,((Copy_u8Command>>4)&LCD_MASK_BIT));
    4f62:	8f 85       	ldd	r24, Y+15	; 0x0f
    4f64:	82 95       	swap	r24
    4f66:	8f 70       	andi	r24, 0x0F	; 15
    4f68:	98 2f       	mov	r25, r24
    4f6a:	91 70       	andi	r25, 0x01	; 1
    4f6c:	80 e0       	ldi	r24, 0x00	; 0
    4f6e:	64 e0       	ldi	r22, 0x04	; 4
    4f70:	49 2f       	mov	r20, r25
    4f72:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D3_PORT,D3_PIN,((Copy_u8Command>>3)&LCD_MASK_BIT));
    4f76:	8f 85       	ldd	r24, Y+15	; 0x0f
    4f78:	86 95       	lsr	r24
    4f7a:	86 95       	lsr	r24
    4f7c:	86 95       	lsr	r24
    4f7e:	98 2f       	mov	r25, r24
    4f80:	91 70       	andi	r25, 0x01	; 1
    4f82:	80 e0       	ldi	r24, 0x00	; 0
    4f84:	63 e0       	ldi	r22, 0x03	; 3
    4f86:	49 2f       	mov	r20, r25
    4f88:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D2_PORT,D2_PIN,((Copy_u8Command>>2)&LCD_MASK_BIT));
    4f8c:	8f 85       	ldd	r24, Y+15	; 0x0f
    4f8e:	86 95       	lsr	r24
    4f90:	86 95       	lsr	r24
    4f92:	98 2f       	mov	r25, r24
    4f94:	91 70       	andi	r25, 0x01	; 1
    4f96:	80 e0       	ldi	r24, 0x00	; 0
    4f98:	62 e0       	ldi	r22, 0x02	; 2
    4f9a:	49 2f       	mov	r20, r25
    4f9c:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D1_PORT,D1_PIN,((Copy_u8Command>>1)&LCD_MASK_BIT));
    4fa0:	8f 85       	ldd	r24, Y+15	; 0x0f
    4fa2:	86 95       	lsr	r24
    4fa4:	98 2f       	mov	r25, r24
    4fa6:	91 70       	andi	r25, 0x01	; 1
    4fa8:	80 e0       	ldi	r24, 0x00	; 0
    4faa:	61 e0       	ldi	r22, 0x01	; 1
    4fac:	49 2f       	mov	r20, r25
    4fae:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D0_PORT,D0_PIN,((Copy_u8Command>>0)&LCD_MASK_BIT));
    4fb2:	8f 85       	ldd	r24, Y+15	; 0x0f
    4fb4:	98 2f       	mov	r25, r24
    4fb6:	91 70       	andi	r25, 0x01	; 1
    4fb8:	80 e0       	ldi	r24, 0x00	; 0
    4fba:	60 e0       	ldi	r22, 0x00	; 0
    4fbc:	49 2f       	mov	r20, r25
    4fbe:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <DIO_enuSetPinValue>

	//enable latch
	DIO_enuSetPinValue(EN_PORT,EN_PIN,DIO_u8HIGH);
    4fc2:	81 e0       	ldi	r24, 0x01	; 1
    4fc4:	62 e0       	ldi	r22, 0x02	; 2
    4fc6:	41 e0       	ldi	r20, 0x01	; 1
    4fc8:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <DIO_enuSetPinValue>
    4fcc:	80 e0       	ldi	r24, 0x00	; 0
    4fce:	90 e0       	ldi	r25, 0x00	; 0
    4fd0:	a0 e2       	ldi	r26, 0x20	; 32
    4fd2:	b1 e4       	ldi	r27, 0x41	; 65
    4fd4:	8b 87       	std	Y+11, r24	; 0x0b
    4fd6:	9c 87       	std	Y+12, r25	; 0x0c
    4fd8:	ad 87       	std	Y+13, r26	; 0x0d
    4fda:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4fdc:	6b 85       	ldd	r22, Y+11	; 0x0b
    4fde:	7c 85       	ldd	r23, Y+12	; 0x0c
    4fe0:	8d 85       	ldd	r24, Y+13	; 0x0d
    4fe2:	9e 85       	ldd	r25, Y+14	; 0x0e
    4fe4:	20 e0       	ldi	r18, 0x00	; 0
    4fe6:	30 e0       	ldi	r19, 0x00	; 0
    4fe8:	4a ef       	ldi	r20, 0xFA	; 250
    4fea:	54 e4       	ldi	r21, 0x44	; 68
    4fec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ff0:	dc 01       	movw	r26, r24
    4ff2:	cb 01       	movw	r24, r22
    4ff4:	8f 83       	std	Y+7, r24	; 0x07
    4ff6:	98 87       	std	Y+8, r25	; 0x08
    4ff8:	a9 87       	std	Y+9, r26	; 0x09
    4ffa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4ffc:	6f 81       	ldd	r22, Y+7	; 0x07
    4ffe:	78 85       	ldd	r23, Y+8	; 0x08
    5000:	89 85       	ldd	r24, Y+9	; 0x09
    5002:	9a 85       	ldd	r25, Y+10	; 0x0a
    5004:	20 e0       	ldi	r18, 0x00	; 0
    5006:	30 e0       	ldi	r19, 0x00	; 0
    5008:	40 e8       	ldi	r20, 0x80	; 128
    500a:	5f e3       	ldi	r21, 0x3F	; 63
    500c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    5010:	88 23       	and	r24, r24
    5012:	2c f4       	brge	.+10     	; 0x501e <LCD_invidSendCommand+0x132>
		__ticks = 1;
    5014:	81 e0       	ldi	r24, 0x01	; 1
    5016:	90 e0       	ldi	r25, 0x00	; 0
    5018:	9e 83       	std	Y+6, r25	; 0x06
    501a:	8d 83       	std	Y+5, r24	; 0x05
    501c:	3f c0       	rjmp	.+126    	; 0x509c <LCD_invidSendCommand+0x1b0>
	else if (__tmp > 65535)
    501e:	6f 81       	ldd	r22, Y+7	; 0x07
    5020:	78 85       	ldd	r23, Y+8	; 0x08
    5022:	89 85       	ldd	r24, Y+9	; 0x09
    5024:	9a 85       	ldd	r25, Y+10	; 0x0a
    5026:	20 e0       	ldi	r18, 0x00	; 0
    5028:	3f ef       	ldi	r19, 0xFF	; 255
    502a:	4f e7       	ldi	r20, 0x7F	; 127
    502c:	57 e4       	ldi	r21, 0x47	; 71
    502e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    5032:	18 16       	cp	r1, r24
    5034:	4c f5       	brge	.+82     	; 0x5088 <LCD_invidSendCommand+0x19c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5036:	6b 85       	ldd	r22, Y+11	; 0x0b
    5038:	7c 85       	ldd	r23, Y+12	; 0x0c
    503a:	8d 85       	ldd	r24, Y+13	; 0x0d
    503c:	9e 85       	ldd	r25, Y+14	; 0x0e
    503e:	20 e0       	ldi	r18, 0x00	; 0
    5040:	30 e0       	ldi	r19, 0x00	; 0
    5042:	40 e2       	ldi	r20, 0x20	; 32
    5044:	51 e4       	ldi	r21, 0x41	; 65
    5046:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    504a:	dc 01       	movw	r26, r24
    504c:	cb 01       	movw	r24, r22
    504e:	bc 01       	movw	r22, r24
    5050:	cd 01       	movw	r24, r26
    5052:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5056:	dc 01       	movw	r26, r24
    5058:	cb 01       	movw	r24, r22
    505a:	9e 83       	std	Y+6, r25	; 0x06
    505c:	8d 83       	std	Y+5, r24	; 0x05
    505e:	0f c0       	rjmp	.+30     	; 0x507e <LCD_invidSendCommand+0x192>
    5060:	88 ec       	ldi	r24, 0xC8	; 200
    5062:	90 e0       	ldi	r25, 0x00	; 0
    5064:	9c 83       	std	Y+4, r25	; 0x04
    5066:	8b 83       	std	Y+3, r24	; 0x03
    5068:	8b 81       	ldd	r24, Y+3	; 0x03
    506a:	9c 81       	ldd	r25, Y+4	; 0x04
    506c:	01 97       	sbiw	r24, 0x01	; 1
    506e:	f1 f7       	brne	.-4      	; 0x506c <LCD_invidSendCommand+0x180>
    5070:	9c 83       	std	Y+4, r25	; 0x04
    5072:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5074:	8d 81       	ldd	r24, Y+5	; 0x05
    5076:	9e 81       	ldd	r25, Y+6	; 0x06
    5078:	01 97       	sbiw	r24, 0x01	; 1
    507a:	9e 83       	std	Y+6, r25	; 0x06
    507c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    507e:	8d 81       	ldd	r24, Y+5	; 0x05
    5080:	9e 81       	ldd	r25, Y+6	; 0x06
    5082:	00 97       	sbiw	r24, 0x00	; 0
    5084:	69 f7       	brne	.-38     	; 0x5060 <LCD_invidSendCommand+0x174>
    5086:	14 c0       	rjmp	.+40     	; 0x50b0 <LCD_invidSendCommand+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5088:	6f 81       	ldd	r22, Y+7	; 0x07
    508a:	78 85       	ldd	r23, Y+8	; 0x08
    508c:	89 85       	ldd	r24, Y+9	; 0x09
    508e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5090:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5094:	dc 01       	movw	r26, r24
    5096:	cb 01       	movw	r24, r22
    5098:	9e 83       	std	Y+6, r25	; 0x06
    509a:	8d 83       	std	Y+5, r24	; 0x05
    509c:	8d 81       	ldd	r24, Y+5	; 0x05
    509e:	9e 81       	ldd	r25, Y+6	; 0x06
    50a0:	9a 83       	std	Y+2, r25	; 0x02
    50a2:	89 83       	std	Y+1, r24	; 0x01
    50a4:	89 81       	ldd	r24, Y+1	; 0x01
    50a6:	9a 81       	ldd	r25, Y+2	; 0x02
    50a8:	01 97       	sbiw	r24, 0x01	; 1
    50aa:	f1 f7       	brne	.-4      	; 0x50a8 <LCD_invidSendCommand+0x1bc>
    50ac:	9a 83       	std	Y+2, r25	; 0x02
    50ae:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	DIO_enuSetPinValue(EN_PORT,EN_PIN,DIO_u8LOW);
    50b0:	81 e0       	ldi	r24, 0x01	; 1
    50b2:	62 e0       	ldi	r22, 0x02	; 2
    50b4:	40 e0       	ldi	r20, 0x00	; 0
    50b6:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <DIO_enuSetPinValue>


}
    50ba:	2f 96       	adiw	r28, 0x0f	; 15
    50bc:	0f b6       	in	r0, 0x3f	; 63
    50be:	f8 94       	cli
    50c0:	de bf       	out	0x3e, r29	; 62
    50c2:	0f be       	out	0x3f, r0	; 63
    50c4:	cd bf       	out	0x3d, r28	; 61
    50c6:	cf 91       	pop	r28
    50c8:	df 91       	pop	r29
    50ca:	08 95       	ret

000050cc <LCD_enuClearLcd>:

ES_t LCD_enuClearLcd()
{
    50cc:	df 93       	push	r29
    50ce:	cf 93       	push	r28
    50d0:	0f 92       	push	r0
    50d2:	cd b7       	in	r28, 0x3d	; 61
    50d4:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
    50d6:	19 82       	std	Y+1, r1	; 0x01

	Local_enuErrorState=LCD_enuSendCommand(CLEAR_DISPLAY);
    50d8:	81 e0       	ldi	r24, 0x01	; 1
    50da:	0e 94 4c 24 	call	0x4898	; 0x4898 <LCD_enuSendCommand>
    50de:	89 83       	std	Y+1, r24	; 0x01


	return Local_enuErrorState;
    50e0:	89 81       	ldd	r24, Y+1	; 0x01
}
    50e2:	0f 90       	pop	r0
    50e4:	cf 91       	pop	r28
    50e6:	df 91       	pop	r29
    50e8:	08 95       	ret

000050ea <HC_05_enuInit>:
#include "HC-05_config.h"
#include "HC-05_private.h"


ES_t HC_05_enuInit(void)
{
    50ea:	df 93       	push	r29
    50ec:	cf 93       	push	r28
    50ee:	0f 92       	push	r0
    50f0:	cd b7       	in	r28, 0x3d	; 61
    50f2:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
    50f4:	19 82       	std	Y+1, r1	; 0x01
	/*Set USART pins directions*/
	DIO_enuSetPinDirection(DIO_u8PORTD , DIO_u8PIN0 , DIO_u8INPUT);
    50f6:	83 e0       	ldi	r24, 0x03	; 3
    50f8:	60 e0       	ldi	r22, 0x00	; 0
    50fa:	40 e0       	ldi	r20, 0x00	; 0
    50fc:	0e 94 71 19 	call	0x32e2	; 0x32e2 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(DIO_u8PORTD , DIO_u8PIN1 , DIO_u8OUTPUT);
    5100:	83 e0       	ldi	r24, 0x03	; 3
    5102:	61 e0       	ldi	r22, 0x01	; 1
    5104:	41 e0       	ldi	r20, 0x01	; 1
    5106:	0e 94 71 19 	call	0x32e2	; 0x32e2 <DIO_enuSetPinDirection>
	/*USART Initialization */
	Local_enuErrorState = USART_enuInit();
    510a:	0e 94 47 07 	call	0xe8e	; 0xe8e <USART_enuInit>
    510e:	89 83       	std	Y+1, r24	; 0x01
	Local_enuErrorState =USART_enuEnableReceiver();
    5110:	0e 94 cc 08 	call	0x1198	; 0x1198 <USART_enuEnableReceiver>
    5114:	89 83       	std	Y+1, r24	; 0x01
	Local_enuErrorState =USART_enuEnableTransmitter();
    5116:	0e 94 b8 08 	call	0x1170	; 0x1170 <USART_enuEnableTransmitter>
    511a:	89 83       	std	Y+1, r24	; 0x01
   return Local_enuErrorState;
    511c:	89 81       	ldd	r24, Y+1	; 0x01
}
    511e:	0f 90       	pop	r0
    5120:	cf 91       	pop	r28
    5122:	df 91       	pop	r29
    5124:	08 95       	ret

00005126 <HC_05_enuRecieveString>:

ES_t HC_05_enuRecieveString(u8 *Copy_pcData)
{
    5126:	df 93       	push	r29
    5128:	cf 93       	push	r28
    512a:	00 d0       	rcall	.+0      	; 0x512c <HC_05_enuRecieveString+0x6>
    512c:	0f 92       	push	r0
    512e:	cd b7       	in	r28, 0x3d	; 61
    5130:	de b7       	in	r29, 0x3e	; 62
    5132:	9b 83       	std	Y+3, r25	; 0x03
    5134:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    5136:	19 82       	std	Y+1, r1	; 0x01

	Local_enuErrorState = USART_enuRecieveString(Copy_pcData);
    5138:	8a 81       	ldd	r24, Y+2	; 0x02
    513a:	9b 81       	ldd	r25, Y+3	; 0x03
    513c:	0e 94 0d 08 	call	0x101a	; 0x101a <USART_enuRecieveString>
    5140:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    5142:	89 81       	ldd	r24, Y+1	; 0x01

}
    5144:	0f 90       	pop	r0
    5146:	0f 90       	pop	r0
    5148:	0f 90       	pop	r0
    514a:	cf 91       	pop	r28
    514c:	df 91       	pop	r29
    514e:	08 95       	ret

00005150 <HC_05_enuSendString>:
ES_t HC_05_enuSendString(const u8 *Copy_pcData)
{
    5150:	df 93       	push	r29
    5152:	cf 93       	push	r28
    5154:	00 d0       	rcall	.+0      	; 0x5156 <HC_05_enuSendString+0x6>
    5156:	0f 92       	push	r0
    5158:	cd b7       	in	r28, 0x3d	; 61
    515a:	de b7       	in	r29, 0x3e	; 62
    515c:	9b 83       	std	Y+3, r25	; 0x03
    515e:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    5160:	19 82       	std	Y+1, r1	; 0x01

	Local_enuErrorState = USART_enuSendString(Copy_pcData);
    5162:	8a 81       	ldd	r24, Y+2	; 0x02
    5164:	9b 81       	ldd	r25, Y+3	; 0x03
    5166:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <USART_enuSendString>
    516a:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    516c:	89 81       	ldd	r24, Y+1	; 0x01
}
    516e:	0f 90       	pop	r0
    5170:	0f 90       	pop	r0
    5172:	0f 90       	pop	r0
    5174:	cf 91       	pop	r28
    5176:	df 91       	pop	r29
    5178:	08 95       	ret

0000517a <HC_05_enuSendChar>:

ES_t HC_05_enuSendChar(u8 Copy_u8data)
{
    517a:	df 93       	push	r29
    517c:	cf 93       	push	r28
    517e:	00 d0       	rcall	.+0      	; 0x5180 <HC_05_enuSendChar+0x6>
    5180:	cd b7       	in	r28, 0x3d	; 61
    5182:	de b7       	in	r29, 0x3e	; 62
    5184:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    5186:	19 82       	std	Y+1, r1	; 0x01

	Local_enuErrorState = USART_enuSendChar(Copy_u8data);
    5188:	8a 81       	ldd	r24, Y+2	; 0x02
    518a:	0e 94 a1 07 	call	0xf42	; 0xf42 <USART_enuSendChar>
    518e:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    5190:	89 81       	ldd	r24, Y+1	; 0x01

}
    5192:	0f 90       	pop	r0
    5194:	0f 90       	pop	r0
    5196:	cf 91       	pop	r28
    5198:	df 91       	pop	r29
    519a:	08 95       	ret

0000519c <HC_05_enuRecieveChar>:
ES_t HC_05_enuRecieveChar(u8 *Copy_pu8data)
{
    519c:	df 93       	push	r29
    519e:	cf 93       	push	r28
    51a0:	00 d0       	rcall	.+0      	; 0x51a2 <HC_05_enuRecieveChar+0x6>
    51a2:	0f 92       	push	r0
    51a4:	cd b7       	in	r28, 0x3d	; 61
    51a6:	de b7       	in	r29, 0x3e	; 62
    51a8:	9b 83       	std	Y+3, r25	; 0x03
    51aa:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    51ac:	19 82       	std	Y+1, r1	; 0x01

	Local_enuErrorState = USART_enuRecieveChar(Copy_pu8data);
    51ae:	8a 81       	ldd	r24, Y+2	; 0x02
    51b0:	9b 81       	ldd	r25, Y+3	; 0x03
    51b2:	0e 94 bd 07 	call	0xf7a	; 0xf7a <USART_enuRecieveChar>
    51b6:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    51b8:	89 81       	ldd	r24, Y+1	; 0x01

}
    51ba:	0f 90       	pop	r0
    51bc:	0f 90       	pop	r0
    51be:	0f 90       	pop	r0
    51c0:	cf 91       	pop	r28
    51c2:	df 91       	pop	r29
    51c4:	08 95       	ret

000051c6 <EEPROM_enuInit>:
#include "EEPROM_config.h"
#include "EEPROM_priv.h"


ES_t EEPROM_enuInit(void)
{
    51c6:	df 93       	push	r29
    51c8:	cf 93       	push	r28
    51ca:	0f 92       	push	r0
    51cc:	cd b7       	in	r28, 0x3d	; 61
    51ce:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
    51d0:	19 82       	std	Y+1, r1	; 0x01

	Local_enuErrorState=IIC_enuInit();
    51d2:	0e 94 72 12 	call	0x24e4	; 0x24e4 <IIC_enuInit>
    51d6:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    51d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    51da:	0f 90       	pop	r0
    51dc:	cf 91       	pop	r28
    51de:	df 91       	pop	r29
    51e0:	08 95       	ret

000051e2 <EEPROM_enuWriteData>:

ES_t EEPROM_enuWriteData(u16 Copy_u16Address , u8 Copy_u8Data)
{
    51e2:	df 93       	push	r29
    51e4:	cf 93       	push	r28
    51e6:	00 d0       	rcall	.+0      	; 0x51e8 <EEPROM_enuWriteData+0x6>
    51e8:	00 d0       	rcall	.+0      	; 0x51ea <EEPROM_enuWriteData+0x8>
    51ea:	00 d0       	rcall	.+0      	; 0x51ec <EEPROM_enuWriteData+0xa>
    51ec:	cd b7       	in	r28, 0x3d	; 61
    51ee:	de b7       	in	r29, 0x3e	; 62
    51f0:	9d 83       	std	Y+5, r25	; 0x05
    51f2:	8c 83       	std	Y+4, r24	; 0x04
    51f4:	6e 83       	std	Y+6, r22	; 0x06
	ES_t Local_enuErrorState=ES_NOK;
    51f6:	1b 82       	std	Y+3, r1	; 0x03
	{
		Local_enuErrorState=ES_OUT_OF_RANGE;
	}

#elif EEPROM_TYPE==TWO_KBIT
	if(Copy_u16Address<1024 && EEPROM_A2_STATE<2 && EEPROM_A1_STATE<2 && EEPROM_A0_STATE<2 )
    51f8:	8c 81       	ldd	r24, Y+4	; 0x04
    51fa:	9d 81       	ldd	r25, Y+5	; 0x05
    51fc:	24 e0       	ldi	r18, 0x04	; 4
    51fe:	80 30       	cpi	r24, 0x00	; 0
    5200:	92 07       	cpc	r25, r18
    5202:	28 f4       	brcc	.+10     	; 0x520e <EEPROM_enuWriteData+0x2c>
	{
		Local_u8Address =( (0xA0 | (EEPROM_A2_STATE<<3) | (EEPROM_A1_STATE<<2) | (EEPROM_A1_STATE<<1) )>>1 );
    5204:	80 e5       	ldi	r24, 0x50	; 80
    5206:	8a 83       	std	Y+2, r24	; 0x02
		Local_u8ByteAddress= (u8) Copy_u16Address;
    5208:	8c 81       	ldd	r24, Y+4	; 0x04
    520a:	89 83       	std	Y+1, r24	; 0x01
    520c:	02 c0       	rjmp	.+4      	; 0x5212 <EEPROM_enuWriteData+0x30>
	}
	else
	{
		Local_enuErrorState=ES_OUT_OF_RANGE;
    520e:	83 e0       	ldi	r24, 0x03	; 3
    5210:	8b 83       	std	Y+3, r24	; 0x03

#error "EEPROM Type selection is wrong"
#endif


	if(ES_OK==IIC_enuStartCondition())
    5212:	0e 94 98 12 	call	0x2530	; 0x2530 <IIC_enuStartCondition>
    5216:	81 30       	cpi	r24, 0x01	; 1
    5218:	99 f4       	brne	.+38     	; 0x5240 <EEPROM_enuWriteData+0x5e>
	{
		if(ES_OK==IIC_enuWriteSlaveAddress(Local_u8Address,0))
    521a:	8a 81       	ldd	r24, Y+2	; 0x02
    521c:	60 e0       	ldi	r22, 0x00	; 0
    521e:	0e 94 1a 13 	call	0x2634	; 0x2634 <IIC_enuWriteSlaveAddress>
    5222:	81 30       	cpi	r24, 0x01	; 1
    5224:	69 f4       	brne	.+26     	; 0x5240 <EEPROM_enuWriteData+0x5e>
		{
			if(ES_OK==IIC_enuWriteData(Local_u8ByteAddress))
    5226:	89 81       	ldd	r24, Y+1	; 0x01
    5228:	0e 94 6f 13 	call	0x26de	; 0x26de <IIC_enuWriteData>
    522c:	81 30       	cpi	r24, 0x01	; 1
    522e:	41 f4       	brne	.+16     	; 0x5240 <EEPROM_enuWriteData+0x5e>
			{
				if(ES_OK==IIC_enuWriteData(Copy_u8Data))
    5230:	8e 81       	ldd	r24, Y+6	; 0x06
    5232:	0e 94 6f 13 	call	0x26de	; 0x26de <IIC_enuWriteData>
    5236:	81 30       	cpi	r24, 0x01	; 1
    5238:	19 f4       	brne	.+6      	; 0x5240 <EEPROM_enuWriteData+0x5e>
				{
					Local_enuErrorState=IIC_enuStopCondition();
    523a:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <IIC_enuStopCondition>
    523e:	8b 83       	std	Y+3, r24	; 0x03
				}
			}
		}
	}

	return Local_enuErrorState;
    5240:	8b 81       	ldd	r24, Y+3	; 0x03
}
    5242:	26 96       	adiw	r28, 0x06	; 6
    5244:	0f b6       	in	r0, 0x3f	; 63
    5246:	f8 94       	cli
    5248:	de bf       	out	0x3e, r29	; 62
    524a:	0f be       	out	0x3f, r0	; 63
    524c:	cd bf       	out	0x3d, r28	; 61
    524e:	cf 91       	pop	r28
    5250:	df 91       	pop	r29
    5252:	08 95       	ret

00005254 <EEPROM_enuReadData>:

ES_t EEPROM_enuReadData(u16 Copy_u16Address , u8 *Copy_u8Data)
{
    5254:	df 93       	push	r29
    5256:	cf 93       	push	r28
    5258:	cd b7       	in	r28, 0x3d	; 61
    525a:	de b7       	in	r29, 0x3e	; 62
    525c:	27 97       	sbiw	r28, 0x07	; 7
    525e:	0f b6       	in	r0, 0x3f	; 63
    5260:	f8 94       	cli
    5262:	de bf       	out	0x3e, r29	; 62
    5264:	0f be       	out	0x3f, r0	; 63
    5266:	cd bf       	out	0x3d, r28	; 61
    5268:	9d 83       	std	Y+5, r25	; 0x05
    526a:	8c 83       	std	Y+4, r24	; 0x04
    526c:	7f 83       	std	Y+7, r23	; 0x07
    526e:	6e 83       	std	Y+6, r22	; 0x06
	ES_t Local_enuErrorState=ES_NOK;
    5270:	1b 82       	std	Y+3, r1	; 0x03
	{
		Local_enuErrorState=ES_OUT_OF_RANGE;
	}

#elif EEPROM_TYPE==TWO_KBIT
	if(Copy_u16Address<1024 && EEPROM_A2_STATE<2 && EEPROM_A1_STATE<2 && EEPROM_A0_STATE<2 )
    5272:	8c 81       	ldd	r24, Y+4	; 0x04
    5274:	9d 81       	ldd	r25, Y+5	; 0x05
    5276:	24 e0       	ldi	r18, 0x04	; 4
    5278:	80 30       	cpi	r24, 0x00	; 0
    527a:	92 07       	cpc	r25, r18
    527c:	28 f4       	brcc	.+10     	; 0x5288 <EEPROM_enuReadData+0x34>
	{
		Local_u8Address =( (0xA0 | (EEPROM_A2_STATE<<3) | (EEPROM_A1_STATE<<2) | (EEPROM_A1_STATE<<1) )>>1 );
    527e:	80 e5       	ldi	r24, 0x50	; 80
    5280:	8a 83       	std	Y+2, r24	; 0x02
		Local_u8ByteAddress= (u8) Copy_u16Address;
    5282:	8c 81       	ldd	r24, Y+4	; 0x04
    5284:	89 83       	std	Y+1, r24	; 0x01
    5286:	02 c0       	rjmp	.+4      	; 0x528c <EEPROM_enuReadData+0x38>
	}
	else
	{
		Local_enuErrorState=ES_OUT_OF_RANGE;
    5288:	83 e0       	ldi	r24, 0x03	; 3
    528a:	8b 83       	std	Y+3, r24	; 0x03
#else

#error "EEPROM Type selection is wrong"
#endif

	if(ES_OK==IIC_enuStartCondition())
    528c:	0e 94 98 12 	call	0x2530	; 0x2530 <IIC_enuStartCondition>
    5290:	81 30       	cpi	r24, 0x01	; 1
    5292:	f1 f4       	brne	.+60     	; 0x52d0 <EEPROM_enuReadData+0x7c>
	{
		if(ES_OK==IIC_enuWriteSlaveAddress(Local_u8Address,0))
    5294:	8a 81       	ldd	r24, Y+2	; 0x02
    5296:	60 e0       	ldi	r22, 0x00	; 0
    5298:	0e 94 1a 13 	call	0x2634	; 0x2634 <IIC_enuWriteSlaveAddress>
    529c:	81 30       	cpi	r24, 0x01	; 1
    529e:	c1 f4       	brne	.+48     	; 0x52d0 <EEPROM_enuReadData+0x7c>
		{
			if(ES_OK==IIC_enuWriteData(Local_u8ByteAddress))
    52a0:	89 81       	ldd	r24, Y+1	; 0x01
    52a2:	0e 94 6f 13 	call	0x26de	; 0x26de <IIC_enuWriteData>
    52a6:	81 30       	cpi	r24, 0x01	; 1
    52a8:	99 f4       	brne	.+38     	; 0x52d0 <EEPROM_enuReadData+0x7c>
			{
				if(ES_OK==IIC_enuRepeatedStartCondition())
    52aa:	0e 94 b8 12 	call	0x2570	; 0x2570 <IIC_enuRepeatedStartCondition>
    52ae:	81 30       	cpi	r24, 0x01	; 1
    52b0:	79 f4       	brne	.+30     	; 0x52d0 <EEPROM_enuReadData+0x7c>
				{
					if(ES_OK==IIC_enuWriteSlaveAddress(Local_u8Address,1))
    52b2:	8a 81       	ldd	r24, Y+2	; 0x02
    52b4:	61 e0       	ldi	r22, 0x01	; 1
    52b6:	0e 94 1a 13 	call	0x2634	; 0x2634 <IIC_enuWriteSlaveAddress>
    52ba:	81 30       	cpi	r24, 0x01	; 1
    52bc:	49 f4       	brne	.+18     	; 0x52d0 <EEPROM_enuReadData+0x7c>
					{
						if(ES_OK==IIC_enuReadData(Copy_u8Data))
    52be:	8e 81       	ldd	r24, Y+6	; 0x06
    52c0:	9f 81       	ldd	r25, Y+7	; 0x07
    52c2:	0e 94 cf 13 	call	0x279e	; 0x279e <IIC_enuReadData>
    52c6:	81 30       	cpi	r24, 0x01	; 1
    52c8:	19 f4       	brne	.+6      	; 0x52d0 <EEPROM_enuReadData+0x7c>
						{
							Local_enuErrorState=IIC_enuStopCondition();
    52ca:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <IIC_enuStopCondition>
    52ce:	8b 83       	std	Y+3, r24	; 0x03
			}
		}
	}


	return Local_enuErrorState;
    52d0:	8b 81       	ldd	r24, Y+3	; 0x03
}
    52d2:	27 96       	adiw	r28, 0x07	; 7
    52d4:	0f b6       	in	r0, 0x3f	; 63
    52d6:	f8 94       	cli
    52d8:	de bf       	out	0x3e, r29	; 62
    52da:	0f be       	out	0x3f, r0	; 63
    52dc:	cd bf       	out	0x3d, r28	; 61
    52de:	cf 91       	pop	r28
    52e0:	df 91       	pop	r29
    52e2:	08 95       	ret

000052e4 <DC_Motor_enuInit>:
#include "DC_priv.h"



ES_t DC_Motor_enuInit(DC_MOTOR_t *Copy_PStrMotorConfig)
{
    52e4:	df 93       	push	r29
    52e6:	cf 93       	push	r28
    52e8:	00 d0       	rcall	.+0      	; 0x52ea <DC_Motor_enuInit+0x6>
    52ea:	00 d0       	rcall	.+0      	; 0x52ec <DC_Motor_enuInit+0x8>
    52ec:	cd b7       	in	r28, 0x3d	; 61
    52ee:	de b7       	in	r29, 0x3e	; 62
    52f0:	9c 83       	std	Y+4, r25	; 0x04
    52f2:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState=ES_NOK;
    52f4:	1a 82       	std	Y+2, r1	; 0x02

	if(Copy_PStrMotorConfig != NULL)
    52f6:	8b 81       	ldd	r24, Y+3	; 0x03
    52f8:	9c 81       	ldd	r25, Y+4	; 0x04
    52fa:	00 97       	sbiw	r24, 0x00	; 0
    52fc:	09 f4       	brne	.+2      	; 0x5300 <DC_Motor_enuInit+0x1c>
    52fe:	92 c0       	rjmp	.+292    	; 0x5424 <DC_Motor_enuInit+0x140>
	{
		u8  Local_u8Iterator;

		for(Local_u8Iterator = 0 ; Local_u8Iterator < DC_MOTOR_NUM ; Local_u8Iterator++)
    5300:	19 82       	std	Y+1, r1	; 0x01
    5302:	8b c0       	rjmp	.+278    	; 0x541a <DC_Motor_enuInit+0x136>
		{

			Local_enuErrorState = DIO_enuSetPinDirection(Copy_PStrMotorConfig[Local_u8Iterator].DC_MOTOR_CW_PORT , Copy_PStrMotorConfig[Local_u8Iterator].DC_MOTOR_CW_PIN , DIO_u8OUTPUT);
    5304:	89 81       	ldd	r24, Y+1	; 0x01
    5306:	88 2f       	mov	r24, r24
    5308:	90 e0       	ldi	r25, 0x00	; 0
    530a:	9c 01       	movw	r18, r24
    530c:	22 0f       	add	r18, r18
    530e:	33 1f       	adc	r19, r19
    5310:	22 0f       	add	r18, r18
    5312:	33 1f       	adc	r19, r19
    5314:	8b 81       	ldd	r24, Y+3	; 0x03
    5316:	9c 81       	ldd	r25, Y+4	; 0x04
    5318:	fc 01       	movw	r30, r24
    531a:	e2 0f       	add	r30, r18
    531c:	f3 1f       	adc	r31, r19
    531e:	40 81       	ld	r20, Z
    5320:	89 81       	ldd	r24, Y+1	; 0x01
    5322:	88 2f       	mov	r24, r24
    5324:	90 e0       	ldi	r25, 0x00	; 0
    5326:	9c 01       	movw	r18, r24
    5328:	22 0f       	add	r18, r18
    532a:	33 1f       	adc	r19, r19
    532c:	22 0f       	add	r18, r18
    532e:	33 1f       	adc	r19, r19
    5330:	8b 81       	ldd	r24, Y+3	; 0x03
    5332:	9c 81       	ldd	r25, Y+4	; 0x04
    5334:	fc 01       	movw	r30, r24
    5336:	e2 0f       	add	r30, r18
    5338:	f3 1f       	adc	r31, r19
    533a:	91 81       	ldd	r25, Z+1	; 0x01
    533c:	84 2f       	mov	r24, r20
    533e:	69 2f       	mov	r22, r25
    5340:	41 e0       	ldi	r20, 0x01	; 1
    5342:	0e 94 71 19 	call	0x32e2	; 0x32e2 <DIO_enuSetPinDirection>
    5346:	8a 83       	std	Y+2, r24	; 0x02
			Local_enuErrorState = DIO_enuSetPinDirection(Copy_PStrMotorConfig[Local_u8Iterator].DC_MOTOR_CCW_PORT , Copy_PStrMotorConfig[Local_u8Iterator].DC_MOTOR_CCW_PIN , DIO_u8OUTPUT);
    5348:	89 81       	ldd	r24, Y+1	; 0x01
    534a:	88 2f       	mov	r24, r24
    534c:	90 e0       	ldi	r25, 0x00	; 0
    534e:	9c 01       	movw	r18, r24
    5350:	22 0f       	add	r18, r18
    5352:	33 1f       	adc	r19, r19
    5354:	22 0f       	add	r18, r18
    5356:	33 1f       	adc	r19, r19
    5358:	8b 81       	ldd	r24, Y+3	; 0x03
    535a:	9c 81       	ldd	r25, Y+4	; 0x04
    535c:	fc 01       	movw	r30, r24
    535e:	e2 0f       	add	r30, r18
    5360:	f3 1f       	adc	r31, r19
    5362:	42 81       	ldd	r20, Z+2	; 0x02
    5364:	89 81       	ldd	r24, Y+1	; 0x01
    5366:	88 2f       	mov	r24, r24
    5368:	90 e0       	ldi	r25, 0x00	; 0
    536a:	9c 01       	movw	r18, r24
    536c:	22 0f       	add	r18, r18
    536e:	33 1f       	adc	r19, r19
    5370:	22 0f       	add	r18, r18
    5372:	33 1f       	adc	r19, r19
    5374:	8b 81       	ldd	r24, Y+3	; 0x03
    5376:	9c 81       	ldd	r25, Y+4	; 0x04
    5378:	fc 01       	movw	r30, r24
    537a:	e2 0f       	add	r30, r18
    537c:	f3 1f       	adc	r31, r19
    537e:	93 81       	ldd	r25, Z+3	; 0x03
    5380:	84 2f       	mov	r24, r20
    5382:	69 2f       	mov	r22, r25
    5384:	41 e0       	ldi	r20, 0x01	; 1
    5386:	0e 94 71 19 	call	0x32e2	; 0x32e2 <DIO_enuSetPinDirection>
    538a:	8a 83       	std	Y+2, r24	; 0x02
			Local_enuErrorState = DIO_enuSetPinValue(Copy_PStrMotorConfig[Local_u8Iterator].DC_MOTOR_CW_PORT , Copy_PStrMotorConfig[Local_u8Iterator].DC_MOTOR_CW_PIN , DIO_u8LOW);
    538c:	89 81       	ldd	r24, Y+1	; 0x01
    538e:	88 2f       	mov	r24, r24
    5390:	90 e0       	ldi	r25, 0x00	; 0
    5392:	9c 01       	movw	r18, r24
    5394:	22 0f       	add	r18, r18
    5396:	33 1f       	adc	r19, r19
    5398:	22 0f       	add	r18, r18
    539a:	33 1f       	adc	r19, r19
    539c:	8b 81       	ldd	r24, Y+3	; 0x03
    539e:	9c 81       	ldd	r25, Y+4	; 0x04
    53a0:	fc 01       	movw	r30, r24
    53a2:	e2 0f       	add	r30, r18
    53a4:	f3 1f       	adc	r31, r19
    53a6:	40 81       	ld	r20, Z
    53a8:	89 81       	ldd	r24, Y+1	; 0x01
    53aa:	88 2f       	mov	r24, r24
    53ac:	90 e0       	ldi	r25, 0x00	; 0
    53ae:	9c 01       	movw	r18, r24
    53b0:	22 0f       	add	r18, r18
    53b2:	33 1f       	adc	r19, r19
    53b4:	22 0f       	add	r18, r18
    53b6:	33 1f       	adc	r19, r19
    53b8:	8b 81       	ldd	r24, Y+3	; 0x03
    53ba:	9c 81       	ldd	r25, Y+4	; 0x04
    53bc:	fc 01       	movw	r30, r24
    53be:	e2 0f       	add	r30, r18
    53c0:	f3 1f       	adc	r31, r19
    53c2:	91 81       	ldd	r25, Z+1	; 0x01
    53c4:	84 2f       	mov	r24, r20
    53c6:	69 2f       	mov	r22, r25
    53c8:	40 e0       	ldi	r20, 0x00	; 0
    53ca:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <DIO_enuSetPinValue>
    53ce:	8a 83       	std	Y+2, r24	; 0x02
			Local_enuErrorState = DIO_enuSetPinValue(Copy_PStrMotorConfig[Local_u8Iterator].DC_MOTOR_CCW_PORT , Copy_PStrMotorConfig[Local_u8Iterator].DC_MOTOR_CCW_PIN , DIO_u8LOW);
    53d0:	89 81       	ldd	r24, Y+1	; 0x01
    53d2:	88 2f       	mov	r24, r24
    53d4:	90 e0       	ldi	r25, 0x00	; 0
    53d6:	9c 01       	movw	r18, r24
    53d8:	22 0f       	add	r18, r18
    53da:	33 1f       	adc	r19, r19
    53dc:	22 0f       	add	r18, r18
    53de:	33 1f       	adc	r19, r19
    53e0:	8b 81       	ldd	r24, Y+3	; 0x03
    53e2:	9c 81       	ldd	r25, Y+4	; 0x04
    53e4:	fc 01       	movw	r30, r24
    53e6:	e2 0f       	add	r30, r18
    53e8:	f3 1f       	adc	r31, r19
    53ea:	42 81       	ldd	r20, Z+2	; 0x02
    53ec:	89 81       	ldd	r24, Y+1	; 0x01
    53ee:	88 2f       	mov	r24, r24
    53f0:	90 e0       	ldi	r25, 0x00	; 0
    53f2:	9c 01       	movw	r18, r24
    53f4:	22 0f       	add	r18, r18
    53f6:	33 1f       	adc	r19, r19
    53f8:	22 0f       	add	r18, r18
    53fa:	33 1f       	adc	r19, r19
    53fc:	8b 81       	ldd	r24, Y+3	; 0x03
    53fe:	9c 81       	ldd	r25, Y+4	; 0x04
    5400:	fc 01       	movw	r30, r24
    5402:	e2 0f       	add	r30, r18
    5404:	f3 1f       	adc	r31, r19
    5406:	93 81       	ldd	r25, Z+3	; 0x03
    5408:	84 2f       	mov	r24, r20
    540a:	69 2f       	mov	r22, r25
    540c:	40 e0       	ldi	r20, 0x00	; 0
    540e:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <DIO_enuSetPinValue>
    5412:	8a 83       	std	Y+2, r24	; 0x02

	if(Copy_PStrMotorConfig != NULL)
	{
		u8  Local_u8Iterator;

		for(Local_u8Iterator = 0 ; Local_u8Iterator < DC_MOTOR_NUM ; Local_u8Iterator++)
    5414:	89 81       	ldd	r24, Y+1	; 0x01
    5416:	8f 5f       	subi	r24, 0xFF	; 255
    5418:	89 83       	std	Y+1, r24	; 0x01
    541a:	89 81       	ldd	r24, Y+1	; 0x01
    541c:	82 30       	cpi	r24, 0x02	; 2
    541e:	08 f4       	brcc	.+2      	; 0x5422 <DC_Motor_enuInit+0x13e>
    5420:	71 cf       	rjmp	.-286    	; 0x5304 <DC_Motor_enuInit+0x20>
    5422:	02 c0       	rjmp	.+4      	; 0x5428 <DC_Motor_enuInit+0x144>
			Local_enuErrorState = DIO_enuSetPinValue(Copy_PStrMotorConfig[Local_u8Iterator].DC_MOTOR_CCW_PORT , Copy_PStrMotorConfig[Local_u8Iterator].DC_MOTOR_CCW_PIN , DIO_u8LOW);
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    5424:	82 e0       	ldi	r24, 0x02	; 2
    5426:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_enuErrorState;
    5428:	8a 81       	ldd	r24, Y+2	; 0x02
}
    542a:	0f 90       	pop	r0
    542c:	0f 90       	pop	r0
    542e:	0f 90       	pop	r0
    5430:	0f 90       	pop	r0
    5432:	cf 91       	pop	r28
    5434:	df 91       	pop	r29
    5436:	08 95       	ret

00005438 <DC_Motor_enuRotate>:
ES_t DC_Motor_enuRotate(DC_MOTOR_t *Copy_PStrMotor_ID,u8 Copy_u8Direction)
{
    5438:	df 93       	push	r29
    543a:	cf 93       	push	r28
    543c:	cd b7       	in	r28, 0x3d	; 61
    543e:	de b7       	in	r29, 0x3e	; 62
    5440:	a2 97       	sbiw	r28, 0x22	; 34
    5442:	0f b6       	in	r0, 0x3f	; 63
    5444:	f8 94       	cli
    5446:	de bf       	out	0x3e, r29	; 62
    5448:	0f be       	out	0x3f, r0	; 63
    544a:	cd bf       	out	0x3d, r28	; 61
    544c:	9f 8f       	std	Y+31, r25	; 0x1f
    544e:	8e 8f       	std	Y+30, r24	; 0x1e
    5450:	68 a3       	std	Y+32, r22	; 0x20
	ES_t Local_enuErrorState=ES_NOK;
    5452:	1d 8e       	std	Y+29, r1	; 0x1d

	if(Copy_PStrMotor_ID != NULL)
    5454:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5456:	9f 8d       	ldd	r25, Y+31	; 0x1f
    5458:	00 97       	sbiw	r24, 0x00	; 0
    545a:	09 f4       	brne	.+2      	; 0x545e <DC_Motor_enuRotate+0x26>
    545c:	22 c1       	rjmp	.+580    	; 0x56a2 <DC_Motor_enuRotate+0x26a>
	{
		switch(Copy_u8Direction)
    545e:	88 a1       	ldd	r24, Y+32	; 0x20
    5460:	28 2f       	mov	r18, r24
    5462:	30 e0       	ldi	r19, 0x00	; 0
    5464:	3a a3       	std	Y+34, r19	; 0x22
    5466:	29 a3       	std	Y+33, r18	; 0x21
    5468:	89 a1       	ldd	r24, Y+33	; 0x21
    546a:	9a a1       	ldd	r25, Y+34	; 0x22
    546c:	00 97       	sbiw	r24, 0x00	; 0
    546e:	39 f0       	breq	.+14     	; 0x547e <DC_Motor_enuRotate+0x46>
    5470:	29 a1       	ldd	r18, Y+33	; 0x21
    5472:	3a a1       	ldd	r19, Y+34	; 0x22
    5474:	21 30       	cpi	r18, 0x01	; 1
    5476:	31 05       	cpc	r19, r1
    5478:	09 f4       	brne	.+2      	; 0x547c <DC_Motor_enuRotate+0x44>
    547a:	8a c0       	rjmp	.+276    	; 0x5590 <DC_Motor_enuRotate+0x158>
    547c:	14 c1       	rjmp	.+552    	; 0x56a6 <DC_Motor_enuRotate+0x26e>
		{
		case MOTOR_CW:
			Local_enuErrorState  = DIO_enuSetPinValue(Copy_PStrMotor_ID->DC_MOTOR_CCW_PORT , Copy_PStrMotor_ID->DC_MOTOR_CCW_PIN , DIO_u8LOW);
    547e:	ee 8d       	ldd	r30, Y+30	; 0x1e
    5480:	ff 8d       	ldd	r31, Y+31	; 0x1f
    5482:	82 81       	ldd	r24, Z+2	; 0x02
    5484:	ee 8d       	ldd	r30, Y+30	; 0x1e
    5486:	ff 8d       	ldd	r31, Y+31	; 0x1f
    5488:	93 81       	ldd	r25, Z+3	; 0x03
    548a:	69 2f       	mov	r22, r25
    548c:	40 e0       	ldi	r20, 0x00	; 0
    548e:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <DIO_enuSetPinValue>
    5492:	8d 8f       	std	Y+29, r24	; 0x1d
    5494:	80 e0       	ldi	r24, 0x00	; 0
    5496:	90 e0       	ldi	r25, 0x00	; 0
    5498:	a0 e8       	ldi	r26, 0x80	; 128
    549a:	bf e3       	ldi	r27, 0x3F	; 63
    549c:	89 8f       	std	Y+25, r24	; 0x19
    549e:	9a 8f       	std	Y+26, r25	; 0x1a
    54a0:	ab 8f       	std	Y+27, r26	; 0x1b
    54a2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    54a4:	69 8d       	ldd	r22, Y+25	; 0x19
    54a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    54a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    54aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    54ac:	20 e0       	ldi	r18, 0x00	; 0
    54ae:	30 e0       	ldi	r19, 0x00	; 0
    54b0:	4a ef       	ldi	r20, 0xFA	; 250
    54b2:	54 e4       	ldi	r21, 0x44	; 68
    54b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    54b8:	dc 01       	movw	r26, r24
    54ba:	cb 01       	movw	r24, r22
    54bc:	8d 8b       	std	Y+21, r24	; 0x15
    54be:	9e 8b       	std	Y+22, r25	; 0x16
    54c0:	af 8b       	std	Y+23, r26	; 0x17
    54c2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    54c4:	6d 89       	ldd	r22, Y+21	; 0x15
    54c6:	7e 89       	ldd	r23, Y+22	; 0x16
    54c8:	8f 89       	ldd	r24, Y+23	; 0x17
    54ca:	98 8d       	ldd	r25, Y+24	; 0x18
    54cc:	20 e0       	ldi	r18, 0x00	; 0
    54ce:	30 e0       	ldi	r19, 0x00	; 0
    54d0:	40 e8       	ldi	r20, 0x80	; 128
    54d2:	5f e3       	ldi	r21, 0x3F	; 63
    54d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    54d8:	88 23       	and	r24, r24
    54da:	2c f4       	brge	.+10     	; 0x54e6 <DC_Motor_enuRotate+0xae>
		__ticks = 1;
    54dc:	81 e0       	ldi	r24, 0x01	; 1
    54de:	90 e0       	ldi	r25, 0x00	; 0
    54e0:	9c 8b       	std	Y+20, r25	; 0x14
    54e2:	8b 8b       	std	Y+19, r24	; 0x13
    54e4:	3f c0       	rjmp	.+126    	; 0x5564 <DC_Motor_enuRotate+0x12c>
	else if (__tmp > 65535)
    54e6:	6d 89       	ldd	r22, Y+21	; 0x15
    54e8:	7e 89       	ldd	r23, Y+22	; 0x16
    54ea:	8f 89       	ldd	r24, Y+23	; 0x17
    54ec:	98 8d       	ldd	r25, Y+24	; 0x18
    54ee:	20 e0       	ldi	r18, 0x00	; 0
    54f0:	3f ef       	ldi	r19, 0xFF	; 255
    54f2:	4f e7       	ldi	r20, 0x7F	; 127
    54f4:	57 e4       	ldi	r21, 0x47	; 71
    54f6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    54fa:	18 16       	cp	r1, r24
    54fc:	4c f5       	brge	.+82     	; 0x5550 <DC_Motor_enuRotate+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    54fe:	69 8d       	ldd	r22, Y+25	; 0x19
    5500:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5502:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5504:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5506:	20 e0       	ldi	r18, 0x00	; 0
    5508:	30 e0       	ldi	r19, 0x00	; 0
    550a:	40 e2       	ldi	r20, 0x20	; 32
    550c:	51 e4       	ldi	r21, 0x41	; 65
    550e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5512:	dc 01       	movw	r26, r24
    5514:	cb 01       	movw	r24, r22
    5516:	bc 01       	movw	r22, r24
    5518:	cd 01       	movw	r24, r26
    551a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    551e:	dc 01       	movw	r26, r24
    5520:	cb 01       	movw	r24, r22
    5522:	9c 8b       	std	Y+20, r25	; 0x14
    5524:	8b 8b       	std	Y+19, r24	; 0x13
    5526:	0f c0       	rjmp	.+30     	; 0x5546 <DC_Motor_enuRotate+0x10e>
    5528:	88 ec       	ldi	r24, 0xC8	; 200
    552a:	90 e0       	ldi	r25, 0x00	; 0
    552c:	9a 8b       	std	Y+18, r25	; 0x12
    552e:	89 8b       	std	Y+17, r24	; 0x11
    5530:	89 89       	ldd	r24, Y+17	; 0x11
    5532:	9a 89       	ldd	r25, Y+18	; 0x12
    5534:	01 97       	sbiw	r24, 0x01	; 1
    5536:	f1 f7       	brne	.-4      	; 0x5534 <DC_Motor_enuRotate+0xfc>
    5538:	9a 8b       	std	Y+18, r25	; 0x12
    553a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    553c:	8b 89       	ldd	r24, Y+19	; 0x13
    553e:	9c 89       	ldd	r25, Y+20	; 0x14
    5540:	01 97       	sbiw	r24, 0x01	; 1
    5542:	9c 8b       	std	Y+20, r25	; 0x14
    5544:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5546:	8b 89       	ldd	r24, Y+19	; 0x13
    5548:	9c 89       	ldd	r25, Y+20	; 0x14
    554a:	00 97       	sbiw	r24, 0x00	; 0
    554c:	69 f7       	brne	.-38     	; 0x5528 <DC_Motor_enuRotate+0xf0>
    554e:	14 c0       	rjmp	.+40     	; 0x5578 <DC_Motor_enuRotate+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5550:	6d 89       	ldd	r22, Y+21	; 0x15
    5552:	7e 89       	ldd	r23, Y+22	; 0x16
    5554:	8f 89       	ldd	r24, Y+23	; 0x17
    5556:	98 8d       	ldd	r25, Y+24	; 0x18
    5558:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    555c:	dc 01       	movw	r26, r24
    555e:	cb 01       	movw	r24, r22
    5560:	9c 8b       	std	Y+20, r25	; 0x14
    5562:	8b 8b       	std	Y+19, r24	; 0x13
    5564:	8b 89       	ldd	r24, Y+19	; 0x13
    5566:	9c 89       	ldd	r25, Y+20	; 0x14
    5568:	98 8b       	std	Y+16, r25	; 0x10
    556a:	8f 87       	std	Y+15, r24	; 0x0f
    556c:	8f 85       	ldd	r24, Y+15	; 0x0f
    556e:	98 89       	ldd	r25, Y+16	; 0x10
    5570:	01 97       	sbiw	r24, 0x01	; 1
    5572:	f1 f7       	brne	.-4      	; 0x5570 <DC_Motor_enuRotate+0x138>
    5574:	98 8b       	std	Y+16, r25	; 0x10
    5576:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1);
			Local_enuErrorState  = DIO_enuSetPinValue(Copy_PStrMotor_ID->DC_MOTOR_CW_PORT , Copy_PStrMotor_ID->DC_MOTOR_CW_PIN , DIO_u8HIGH);
    5578:	ee 8d       	ldd	r30, Y+30	; 0x1e
    557a:	ff 8d       	ldd	r31, Y+31	; 0x1f
    557c:	80 81       	ld	r24, Z
    557e:	ee 8d       	ldd	r30, Y+30	; 0x1e
    5580:	ff 8d       	ldd	r31, Y+31	; 0x1f
    5582:	91 81       	ldd	r25, Z+1	; 0x01
    5584:	69 2f       	mov	r22, r25
    5586:	41 e0       	ldi	r20, 0x01	; 1
    5588:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <DIO_enuSetPinValue>
    558c:	8d 8f       	std	Y+29, r24	; 0x1d
    558e:	8b c0       	rjmp	.+278    	; 0x56a6 <DC_Motor_enuRotate+0x26e>
			break;
		case MOTOR_CCW:
			Local_enuErrorState  = DIO_enuSetPinValue(Copy_PStrMotor_ID->DC_MOTOR_CW_PORT , Copy_PStrMotor_ID->DC_MOTOR_CW_PIN , DIO_u8LOW);
    5590:	ee 8d       	ldd	r30, Y+30	; 0x1e
    5592:	ff 8d       	ldd	r31, Y+31	; 0x1f
    5594:	80 81       	ld	r24, Z
    5596:	ee 8d       	ldd	r30, Y+30	; 0x1e
    5598:	ff 8d       	ldd	r31, Y+31	; 0x1f
    559a:	91 81       	ldd	r25, Z+1	; 0x01
    559c:	69 2f       	mov	r22, r25
    559e:	40 e0       	ldi	r20, 0x00	; 0
    55a0:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <DIO_enuSetPinValue>
    55a4:	8d 8f       	std	Y+29, r24	; 0x1d
    55a6:	80 e0       	ldi	r24, 0x00	; 0
    55a8:	90 e0       	ldi	r25, 0x00	; 0
    55aa:	a0 e8       	ldi	r26, 0x80	; 128
    55ac:	bf e3       	ldi	r27, 0x3F	; 63
    55ae:	8b 87       	std	Y+11, r24	; 0x0b
    55b0:	9c 87       	std	Y+12, r25	; 0x0c
    55b2:	ad 87       	std	Y+13, r26	; 0x0d
    55b4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    55b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    55b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    55ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    55bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    55be:	20 e0       	ldi	r18, 0x00	; 0
    55c0:	30 e0       	ldi	r19, 0x00	; 0
    55c2:	4a ef       	ldi	r20, 0xFA	; 250
    55c4:	54 e4       	ldi	r21, 0x44	; 68
    55c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    55ca:	dc 01       	movw	r26, r24
    55cc:	cb 01       	movw	r24, r22
    55ce:	8f 83       	std	Y+7, r24	; 0x07
    55d0:	98 87       	std	Y+8, r25	; 0x08
    55d2:	a9 87       	std	Y+9, r26	; 0x09
    55d4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    55d6:	6f 81       	ldd	r22, Y+7	; 0x07
    55d8:	78 85       	ldd	r23, Y+8	; 0x08
    55da:	89 85       	ldd	r24, Y+9	; 0x09
    55dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    55de:	20 e0       	ldi	r18, 0x00	; 0
    55e0:	30 e0       	ldi	r19, 0x00	; 0
    55e2:	40 e8       	ldi	r20, 0x80	; 128
    55e4:	5f e3       	ldi	r21, 0x3F	; 63
    55e6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    55ea:	88 23       	and	r24, r24
    55ec:	2c f4       	brge	.+10     	; 0x55f8 <DC_Motor_enuRotate+0x1c0>
		__ticks = 1;
    55ee:	81 e0       	ldi	r24, 0x01	; 1
    55f0:	90 e0       	ldi	r25, 0x00	; 0
    55f2:	9e 83       	std	Y+6, r25	; 0x06
    55f4:	8d 83       	std	Y+5, r24	; 0x05
    55f6:	3f c0       	rjmp	.+126    	; 0x5676 <DC_Motor_enuRotate+0x23e>
	else if (__tmp > 65535)
    55f8:	6f 81       	ldd	r22, Y+7	; 0x07
    55fa:	78 85       	ldd	r23, Y+8	; 0x08
    55fc:	89 85       	ldd	r24, Y+9	; 0x09
    55fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    5600:	20 e0       	ldi	r18, 0x00	; 0
    5602:	3f ef       	ldi	r19, 0xFF	; 255
    5604:	4f e7       	ldi	r20, 0x7F	; 127
    5606:	57 e4       	ldi	r21, 0x47	; 71
    5608:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    560c:	18 16       	cp	r1, r24
    560e:	4c f5       	brge	.+82     	; 0x5662 <DC_Motor_enuRotate+0x22a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5610:	6b 85       	ldd	r22, Y+11	; 0x0b
    5612:	7c 85       	ldd	r23, Y+12	; 0x0c
    5614:	8d 85       	ldd	r24, Y+13	; 0x0d
    5616:	9e 85       	ldd	r25, Y+14	; 0x0e
    5618:	20 e0       	ldi	r18, 0x00	; 0
    561a:	30 e0       	ldi	r19, 0x00	; 0
    561c:	40 e2       	ldi	r20, 0x20	; 32
    561e:	51 e4       	ldi	r21, 0x41	; 65
    5620:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5624:	dc 01       	movw	r26, r24
    5626:	cb 01       	movw	r24, r22
    5628:	bc 01       	movw	r22, r24
    562a:	cd 01       	movw	r24, r26
    562c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5630:	dc 01       	movw	r26, r24
    5632:	cb 01       	movw	r24, r22
    5634:	9e 83       	std	Y+6, r25	; 0x06
    5636:	8d 83       	std	Y+5, r24	; 0x05
    5638:	0f c0       	rjmp	.+30     	; 0x5658 <DC_Motor_enuRotate+0x220>
    563a:	88 ec       	ldi	r24, 0xC8	; 200
    563c:	90 e0       	ldi	r25, 0x00	; 0
    563e:	9c 83       	std	Y+4, r25	; 0x04
    5640:	8b 83       	std	Y+3, r24	; 0x03
    5642:	8b 81       	ldd	r24, Y+3	; 0x03
    5644:	9c 81       	ldd	r25, Y+4	; 0x04
    5646:	01 97       	sbiw	r24, 0x01	; 1
    5648:	f1 f7       	brne	.-4      	; 0x5646 <DC_Motor_enuRotate+0x20e>
    564a:	9c 83       	std	Y+4, r25	; 0x04
    564c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    564e:	8d 81       	ldd	r24, Y+5	; 0x05
    5650:	9e 81       	ldd	r25, Y+6	; 0x06
    5652:	01 97       	sbiw	r24, 0x01	; 1
    5654:	9e 83       	std	Y+6, r25	; 0x06
    5656:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5658:	8d 81       	ldd	r24, Y+5	; 0x05
    565a:	9e 81       	ldd	r25, Y+6	; 0x06
    565c:	00 97       	sbiw	r24, 0x00	; 0
    565e:	69 f7       	brne	.-38     	; 0x563a <DC_Motor_enuRotate+0x202>
    5660:	14 c0       	rjmp	.+40     	; 0x568a <DC_Motor_enuRotate+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5662:	6f 81       	ldd	r22, Y+7	; 0x07
    5664:	78 85       	ldd	r23, Y+8	; 0x08
    5666:	89 85       	ldd	r24, Y+9	; 0x09
    5668:	9a 85       	ldd	r25, Y+10	; 0x0a
    566a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    566e:	dc 01       	movw	r26, r24
    5670:	cb 01       	movw	r24, r22
    5672:	9e 83       	std	Y+6, r25	; 0x06
    5674:	8d 83       	std	Y+5, r24	; 0x05
    5676:	8d 81       	ldd	r24, Y+5	; 0x05
    5678:	9e 81       	ldd	r25, Y+6	; 0x06
    567a:	9a 83       	std	Y+2, r25	; 0x02
    567c:	89 83       	std	Y+1, r24	; 0x01
    567e:	89 81       	ldd	r24, Y+1	; 0x01
    5680:	9a 81       	ldd	r25, Y+2	; 0x02
    5682:	01 97       	sbiw	r24, 0x01	; 1
    5684:	f1 f7       	brne	.-4      	; 0x5682 <DC_Motor_enuRotate+0x24a>
    5686:	9a 83       	std	Y+2, r25	; 0x02
    5688:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1);
			Local_enuErrorState  = DIO_enuSetPinValue(Copy_PStrMotor_ID->DC_MOTOR_CCW_PORT , Copy_PStrMotor_ID->DC_MOTOR_CCW_PIN , DIO_u8HIGH);
    568a:	ee 8d       	ldd	r30, Y+30	; 0x1e
    568c:	ff 8d       	ldd	r31, Y+31	; 0x1f
    568e:	82 81       	ldd	r24, Z+2	; 0x02
    5690:	ee 8d       	ldd	r30, Y+30	; 0x1e
    5692:	ff 8d       	ldd	r31, Y+31	; 0x1f
    5694:	93 81       	ldd	r25, Z+3	; 0x03
    5696:	69 2f       	mov	r22, r25
    5698:	41 e0       	ldi	r20, 0x01	; 1
    569a:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <DIO_enuSetPinValue>
    569e:	8d 8f       	std	Y+29, r24	; 0x1d
    56a0:	02 c0       	rjmp	.+4      	; 0x56a6 <DC_Motor_enuRotate+0x26e>
			break;
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    56a2:	82 e0       	ldi	r24, 0x02	; 2
    56a4:	8d 8f       	std	Y+29, r24	; 0x1d
	}



	return Local_enuErrorState;
    56a6:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    56a8:	a2 96       	adiw	r28, 0x22	; 34
    56aa:	0f b6       	in	r0, 0x3f	; 63
    56ac:	f8 94       	cli
    56ae:	de bf       	out	0x3e, r29	; 62
    56b0:	0f be       	out	0x3f, r0	; 63
    56b2:	cd bf       	out	0x3d, r28	; 61
    56b4:	cf 91       	pop	r28
    56b6:	df 91       	pop	r29
    56b8:	08 95       	ret

000056ba <DC_Motor_enuStop>:
ES_t DC_Motor_enuStop(DC_MOTOR_t *Copy_PStrMotor_ID)
{
    56ba:	df 93       	push	r29
    56bc:	cf 93       	push	r28
    56be:	cd b7       	in	r28, 0x3d	; 61
    56c0:	de b7       	in	r29, 0x3e	; 62
    56c2:	61 97       	sbiw	r28, 0x11	; 17
    56c4:	0f b6       	in	r0, 0x3f	; 63
    56c6:	f8 94       	cli
    56c8:	de bf       	out	0x3e, r29	; 62
    56ca:	0f be       	out	0x3f, r0	; 63
    56cc:	cd bf       	out	0x3d, r28	; 61
    56ce:	99 8b       	std	Y+17, r25	; 0x11
    56d0:	88 8b       	std	Y+16, r24	; 0x10
	ES_t Local_enuErrorState=ES_NOK;
    56d2:	1f 86       	std	Y+15, r1	; 0x0f

	if(Copy_PStrMotor_ID != NULL)
    56d4:	88 89       	ldd	r24, Y+16	; 0x10
    56d6:	99 89       	ldd	r25, Y+17	; 0x11
    56d8:	00 97       	sbiw	r24, 0x00	; 0
    56da:	09 f4       	brne	.+2      	; 0x56de <DC_Motor_enuStop+0x24>
    56dc:	89 c0       	rjmp	.+274    	; 0x57f0 <DC_Motor_enuStop+0x136>
	{
		Local_enuErrorState  = DIO_enuSetPinValue(Copy_PStrMotor_ID->DC_MOTOR_CCW_PORT , Copy_PStrMotor_ID->DC_MOTOR_CCW_PIN , DIO_u8LOW);
    56de:	e8 89       	ldd	r30, Y+16	; 0x10
    56e0:	f9 89       	ldd	r31, Y+17	; 0x11
    56e2:	82 81       	ldd	r24, Z+2	; 0x02
    56e4:	e8 89       	ldd	r30, Y+16	; 0x10
    56e6:	f9 89       	ldd	r31, Y+17	; 0x11
    56e8:	93 81       	ldd	r25, Z+3	; 0x03
    56ea:	69 2f       	mov	r22, r25
    56ec:	40 e0       	ldi	r20, 0x00	; 0
    56ee:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <DIO_enuSetPinValue>
    56f2:	8f 87       	std	Y+15, r24	; 0x0f
		Local_enuErrorState  = DIO_enuSetPinValue(Copy_PStrMotor_ID->DC_MOTOR_CW_PORT , Copy_PStrMotor_ID->DC_MOTOR_CW_PIN , DIO_u8LOW);
    56f4:	e8 89       	ldd	r30, Y+16	; 0x10
    56f6:	f9 89       	ldd	r31, Y+17	; 0x11
    56f8:	80 81       	ld	r24, Z
    56fa:	e8 89       	ldd	r30, Y+16	; 0x10
    56fc:	f9 89       	ldd	r31, Y+17	; 0x11
    56fe:	91 81       	ldd	r25, Z+1	; 0x01
    5700:	69 2f       	mov	r22, r25
    5702:	40 e0       	ldi	r20, 0x00	; 0
    5704:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <DIO_enuSetPinValue>
    5708:	8f 87       	std	Y+15, r24	; 0x0f
    570a:	80 e0       	ldi	r24, 0x00	; 0
    570c:	90 e0       	ldi	r25, 0x00	; 0
    570e:	aa e7       	ldi	r26, 0x7A	; 122
    5710:	b4 e4       	ldi	r27, 0x44	; 68
    5712:	8b 87       	std	Y+11, r24	; 0x0b
    5714:	9c 87       	std	Y+12, r25	; 0x0c
    5716:	ad 87       	std	Y+13, r26	; 0x0d
    5718:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    571a:	6b 85       	ldd	r22, Y+11	; 0x0b
    571c:	7c 85       	ldd	r23, Y+12	; 0x0c
    571e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5720:	9e 85       	ldd	r25, Y+14	; 0x0e
    5722:	20 e0       	ldi	r18, 0x00	; 0
    5724:	30 e0       	ldi	r19, 0x00	; 0
    5726:	4a ef       	ldi	r20, 0xFA	; 250
    5728:	54 e4       	ldi	r21, 0x44	; 68
    572a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    572e:	dc 01       	movw	r26, r24
    5730:	cb 01       	movw	r24, r22
    5732:	8f 83       	std	Y+7, r24	; 0x07
    5734:	98 87       	std	Y+8, r25	; 0x08
    5736:	a9 87       	std	Y+9, r26	; 0x09
    5738:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    573a:	6f 81       	ldd	r22, Y+7	; 0x07
    573c:	78 85       	ldd	r23, Y+8	; 0x08
    573e:	89 85       	ldd	r24, Y+9	; 0x09
    5740:	9a 85       	ldd	r25, Y+10	; 0x0a
    5742:	20 e0       	ldi	r18, 0x00	; 0
    5744:	30 e0       	ldi	r19, 0x00	; 0
    5746:	40 e8       	ldi	r20, 0x80	; 128
    5748:	5f e3       	ldi	r21, 0x3F	; 63
    574a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    574e:	88 23       	and	r24, r24
    5750:	2c f4       	brge	.+10     	; 0x575c <DC_Motor_enuStop+0xa2>
		__ticks = 1;
    5752:	81 e0       	ldi	r24, 0x01	; 1
    5754:	90 e0       	ldi	r25, 0x00	; 0
    5756:	9e 83       	std	Y+6, r25	; 0x06
    5758:	8d 83       	std	Y+5, r24	; 0x05
    575a:	3f c0       	rjmp	.+126    	; 0x57da <DC_Motor_enuStop+0x120>
	else if (__tmp > 65535)
    575c:	6f 81       	ldd	r22, Y+7	; 0x07
    575e:	78 85       	ldd	r23, Y+8	; 0x08
    5760:	89 85       	ldd	r24, Y+9	; 0x09
    5762:	9a 85       	ldd	r25, Y+10	; 0x0a
    5764:	20 e0       	ldi	r18, 0x00	; 0
    5766:	3f ef       	ldi	r19, 0xFF	; 255
    5768:	4f e7       	ldi	r20, 0x7F	; 127
    576a:	57 e4       	ldi	r21, 0x47	; 71
    576c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    5770:	18 16       	cp	r1, r24
    5772:	4c f5       	brge	.+82     	; 0x57c6 <DC_Motor_enuStop+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5774:	6b 85       	ldd	r22, Y+11	; 0x0b
    5776:	7c 85       	ldd	r23, Y+12	; 0x0c
    5778:	8d 85       	ldd	r24, Y+13	; 0x0d
    577a:	9e 85       	ldd	r25, Y+14	; 0x0e
    577c:	20 e0       	ldi	r18, 0x00	; 0
    577e:	30 e0       	ldi	r19, 0x00	; 0
    5780:	40 e2       	ldi	r20, 0x20	; 32
    5782:	51 e4       	ldi	r21, 0x41	; 65
    5784:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5788:	dc 01       	movw	r26, r24
    578a:	cb 01       	movw	r24, r22
    578c:	bc 01       	movw	r22, r24
    578e:	cd 01       	movw	r24, r26
    5790:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5794:	dc 01       	movw	r26, r24
    5796:	cb 01       	movw	r24, r22
    5798:	9e 83       	std	Y+6, r25	; 0x06
    579a:	8d 83       	std	Y+5, r24	; 0x05
    579c:	0f c0       	rjmp	.+30     	; 0x57bc <DC_Motor_enuStop+0x102>
    579e:	88 ec       	ldi	r24, 0xC8	; 200
    57a0:	90 e0       	ldi	r25, 0x00	; 0
    57a2:	9c 83       	std	Y+4, r25	; 0x04
    57a4:	8b 83       	std	Y+3, r24	; 0x03
    57a6:	8b 81       	ldd	r24, Y+3	; 0x03
    57a8:	9c 81       	ldd	r25, Y+4	; 0x04
    57aa:	01 97       	sbiw	r24, 0x01	; 1
    57ac:	f1 f7       	brne	.-4      	; 0x57aa <DC_Motor_enuStop+0xf0>
    57ae:	9c 83       	std	Y+4, r25	; 0x04
    57b0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    57b2:	8d 81       	ldd	r24, Y+5	; 0x05
    57b4:	9e 81       	ldd	r25, Y+6	; 0x06
    57b6:	01 97       	sbiw	r24, 0x01	; 1
    57b8:	9e 83       	std	Y+6, r25	; 0x06
    57ba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    57bc:	8d 81       	ldd	r24, Y+5	; 0x05
    57be:	9e 81       	ldd	r25, Y+6	; 0x06
    57c0:	00 97       	sbiw	r24, 0x00	; 0
    57c2:	69 f7       	brne	.-38     	; 0x579e <DC_Motor_enuStop+0xe4>
    57c4:	17 c0       	rjmp	.+46     	; 0x57f4 <DC_Motor_enuStop+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    57c6:	6f 81       	ldd	r22, Y+7	; 0x07
    57c8:	78 85       	ldd	r23, Y+8	; 0x08
    57ca:	89 85       	ldd	r24, Y+9	; 0x09
    57cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    57ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    57d2:	dc 01       	movw	r26, r24
    57d4:	cb 01       	movw	r24, r22
    57d6:	9e 83       	std	Y+6, r25	; 0x06
    57d8:	8d 83       	std	Y+5, r24	; 0x05
    57da:	8d 81       	ldd	r24, Y+5	; 0x05
    57dc:	9e 81       	ldd	r25, Y+6	; 0x06
    57de:	9a 83       	std	Y+2, r25	; 0x02
    57e0:	89 83       	std	Y+1, r24	; 0x01
    57e2:	89 81       	ldd	r24, Y+1	; 0x01
    57e4:	9a 81       	ldd	r25, Y+2	; 0x02
    57e6:	01 97       	sbiw	r24, 0x01	; 1
    57e8:	f1 f7       	brne	.-4      	; 0x57e6 <DC_Motor_enuStop+0x12c>
    57ea:	9a 83       	std	Y+2, r25	; 0x02
    57ec:	89 83       	std	Y+1, r24	; 0x01
    57ee:	02 c0       	rjmp	.+4      	; 0x57f4 <DC_Motor_enuStop+0x13a>
		_delay_ms(1000);
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    57f0:	82 e0       	ldi	r24, 0x02	; 2
    57f2:	8f 87       	std	Y+15, r24	; 0x0f
	}

	return Local_enuErrorState;
    57f4:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    57f6:	61 96       	adiw	r28, 0x11	; 17
    57f8:	0f b6       	in	r0, 0x3f	; 63
    57fa:	f8 94       	cli
    57fc:	de bf       	out	0x3e, r29	; 62
    57fe:	0f be       	out	0x3f, r0	; 63
    5800:	cd bf       	out	0x3d, r28	; 61
    5802:	cf 91       	pop	r28
    5804:	df 91       	pop	r29
    5806:	08 95       	ret

00005808 <APP_ReceiveData>:


/************************************************
 *Function used to initialization
 ************************************************/
ES_t APP_ReceiveData(void){
    5808:	df 93       	push	r29
    580a:	cf 93       	push	r28
    580c:	00 d0       	rcall	.+0      	; 0x580e <APP_ReceiveData+0x6>
    580e:	00 d0       	rcall	.+0      	; 0x5810 <APP_ReceiveData+0x8>
    5810:	00 d0       	rcall	.+0      	; 0x5812 <APP_ReceiveData+0xa>
    5812:	cd b7       	in	r28, 0x3d	; 61
    5814:	de b7       	in	r29, 0x3e	; 62
	 u8 x=0xff;
    5816:	8f ef       	ldi	r24, 0xFF	; 255
    5818:	8c 83       	std	Y+4, r24	; 0x04
	 u8 *choice=&x;
    581a:	ce 01       	movw	r24, r28
    581c:	04 96       	adiw	r24, 0x04	; 4
    581e:	9b 83       	std	Y+3, r25	; 0x03
    5820:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState;
	IIC_enuReadData(choice);
    5822:	8a 81       	ldd	r24, Y+2	; 0x02
    5824:	9b 81       	ldd	r25, Y+3	; 0x03
    5826:	0e 94 cf 13 	call	0x279e	; 0x279e <IIC_enuReadData>
	IIC_enuReadData(choice);
    582a:	8a 81       	ldd	r24, Y+2	; 0x02
    582c:	9b 81       	ldd	r25, Y+3	; 0x03
    582e:	0e 94 cf 13 	call	0x279e	; 0x279e <IIC_enuReadData>

	LCD_enuGoToPosition(1,1);
    5832:	81 e0       	ldi	r24, 0x01	; 1
    5834:	61 e0       	ldi	r22, 0x01	; 1
    5836:	0e 94 62 24 	call	0x48c4	; 0x48c4 <LCD_enuGoToPosition>
	 //LCD_enuDisplayChar( *choice);
	// _delay_ms(1000);



	switch(*choice){
    583a:	ea 81       	ldd	r30, Y+2	; 0x02
    583c:	fb 81       	ldd	r31, Y+3	; 0x03
    583e:	80 81       	ld	r24, Z
    5840:	28 2f       	mov	r18, r24
    5842:	30 e0       	ldi	r19, 0x00	; 0
    5844:	3e 83       	std	Y+6, r19	; 0x06
    5846:	2d 83       	std	Y+5, r18	; 0x05
    5848:	8d 81       	ldd	r24, Y+5	; 0x05
    584a:	9e 81       	ldd	r25, Y+6	; 0x06
    584c:	86 33       	cpi	r24, 0x36	; 54
    584e:	91 05       	cpc	r25, r1
    5850:	09 f4       	brne	.+2      	; 0x5854 <APP_ReceiveData+0x4c>
    5852:	bb c0       	rjmp	.+374    	; 0x59ca <APP_ReceiveData+0x1c2>
    5854:	2d 81       	ldd	r18, Y+5	; 0x05
    5856:	3e 81       	ldd	r19, Y+6	; 0x06
    5858:	27 33       	cpi	r18, 0x37	; 55
    585a:	31 05       	cpc	r19, r1
    585c:	24 f5       	brge	.+72     	; 0x58a6 <APP_ReceiveData+0x9e>
    585e:	8d 81       	ldd	r24, Y+5	; 0x05
    5860:	9e 81       	ldd	r25, Y+6	; 0x06
    5862:	83 33       	cpi	r24, 0x33	; 51
    5864:	91 05       	cpc	r25, r1
    5866:	09 f4       	brne	.+2      	; 0x586a <APP_ReceiveData+0x62>
    5868:	63 c0       	rjmp	.+198    	; 0x5930 <APP_ReceiveData+0x128>
    586a:	2d 81       	ldd	r18, Y+5	; 0x05
    586c:	3e 81       	ldd	r19, Y+6	; 0x06
    586e:	24 33       	cpi	r18, 0x34	; 52
    5870:	31 05       	cpc	r19, r1
    5872:	64 f4       	brge	.+24     	; 0x588c <APP_ReceiveData+0x84>
    5874:	8d 81       	ldd	r24, Y+5	; 0x05
    5876:	9e 81       	ldd	r25, Y+6	; 0x06
    5878:	81 33       	cpi	r24, 0x31	; 49
    587a:	91 05       	cpc	r25, r1
    587c:	e1 f1       	breq	.+120    	; 0x58f6 <APP_ReceiveData+0xee>
    587e:	2d 81       	ldd	r18, Y+5	; 0x05
    5880:	3e 81       	ldd	r19, Y+6	; 0x06
    5882:	22 33       	cpi	r18, 0x32	; 50
    5884:	31 05       	cpc	r19, r1
    5886:	09 f4       	brne	.+2      	; 0x588a <APP_ReceiveData+0x82>
    5888:	45 c0       	rjmp	.+138    	; 0x5914 <APP_ReceiveData+0x10c>
    588a:	b7 c0       	rjmp	.+366    	; 0x59fa <APP_ReceiveData+0x1f2>
    588c:	8d 81       	ldd	r24, Y+5	; 0x05
    588e:	9e 81       	ldd	r25, Y+6	; 0x06
    5890:	84 33       	cpi	r24, 0x34	; 52
    5892:	91 05       	cpc	r25, r1
    5894:	09 f4       	brne	.+2      	; 0x5898 <APP_ReceiveData+0x90>
    5896:	66 c0       	rjmp	.+204    	; 0x5964 <APP_ReceiveData+0x15c>
    5898:	2d 81       	ldd	r18, Y+5	; 0x05
    589a:	3e 81       	ldd	r19, Y+6	; 0x06
    589c:	25 33       	cpi	r18, 0x35	; 53
    589e:	31 05       	cpc	r19, r1
    58a0:	09 f4       	brne	.+2      	; 0x58a4 <APP_ReceiveData+0x9c>
    58a2:	79 c0       	rjmp	.+242    	; 0x5996 <APP_ReceiveData+0x18e>
    58a4:	aa c0       	rjmp	.+340    	; 0x59fa <APP_ReceiveData+0x1f2>
    58a6:	8d 81       	ldd	r24, Y+5	; 0x05
    58a8:	9e 81       	ldd	r25, Y+6	; 0x06
    58aa:	86 36       	cpi	r24, 0x66	; 102
    58ac:	91 05       	cpc	r25, r1
    58ae:	09 f4       	brne	.+2      	; 0x58b2 <APP_ReceiveData+0xaa>
    58b0:	3f c0       	rjmp	.+126    	; 0x5930 <APP_ReceiveData+0x128>
    58b2:	2d 81       	ldd	r18, Y+5	; 0x05
    58b4:	3e 81       	ldd	r19, Y+6	; 0x06
    58b6:	27 36       	cpi	r18, 0x67	; 103
    58b8:	31 05       	cpc	r19, r1
    58ba:	5c f4       	brge	.+22     	; 0x58d2 <APP_ReceiveData+0xca>
    58bc:	8d 81       	ldd	r24, Y+5	; 0x05
    58be:	9e 81       	ldd	r25, Y+6	; 0x06
    58c0:	82 36       	cpi	r24, 0x62	; 98
    58c2:	91 05       	cpc	r25, r1
    58c4:	c1 f0       	breq	.+48     	; 0x58f6 <APP_ReceiveData+0xee>
    58c6:	2d 81       	ldd	r18, Y+5	; 0x05
    58c8:	3e 81       	ldd	r19, Y+6	; 0x06
    58ca:	24 36       	cpi	r18, 0x64	; 100
    58cc:	31 05       	cpc	r19, r1
    58ce:	11 f1       	breq	.+68     	; 0x5914 <APP_ReceiveData+0x10c>
    58d0:	94 c0       	rjmp	.+296    	; 0x59fa <APP_ReceiveData+0x1f2>
    58d2:	8d 81       	ldd	r24, Y+5	; 0x05
    58d4:	9e 81       	ldd	r25, Y+6	; 0x06
    58d6:	8a 36       	cpi	r24, 0x6A	; 106
    58d8:	91 05       	cpc	r25, r1
    58da:	09 f4       	brne	.+2      	; 0x58de <APP_ReceiveData+0xd6>
    58dc:	5c c0       	rjmp	.+184    	; 0x5996 <APP_ReceiveData+0x18e>
    58de:	2d 81       	ldd	r18, Y+5	; 0x05
    58e0:	3e 81       	ldd	r19, Y+6	; 0x06
    58e2:	2c 36       	cpi	r18, 0x6C	; 108
    58e4:	31 05       	cpc	r19, r1
    58e6:	09 f4       	brne	.+2      	; 0x58ea <APP_ReceiveData+0xe2>
    58e8:	70 c0       	rjmp	.+224    	; 0x59ca <APP_ReceiveData+0x1c2>
    58ea:	8d 81       	ldd	r24, Y+5	; 0x05
    58ec:	9e 81       	ldd	r25, Y+6	; 0x06
    58ee:	88 36       	cpi	r24, 0x68	; 104
    58f0:	91 05       	cpc	r25, r1
    58f2:	c1 f1       	breq	.+112    	; 0x5964 <APP_ReceiveData+0x15c>
    58f4:	82 c0       	rjmp	.+260    	; 0x59fa <APP_ReceiveData+0x1f2>
	case '1':
	case ('1'<<1):
		SERVO_enuSetAngle(90);
    58f6:	8a e5       	ldi	r24, 0x5A	; 90
    58f8:	0e 94 62 1f 	call	0x3ec4	; 0x3ec4 <SERVO_enuSetAngle>
		/*Display Door Open On LCD*/
		LCD_enuGoToPosition(2,1);
    58fc:	82 e0       	ldi	r24, 0x02	; 2
    58fe:	61 e0       	ldi	r22, 0x01	; 1
    5900:	0e 94 62 24 	call	0x48c4	; 0x48c4 <LCD_enuGoToPosition>
		LCD_enuDisplayString("Door Open");
    5904:	80 e6       	ldi	r24, 0x60	; 96
    5906:	90 e0       	ldi	r25, 0x00	; 0
    5908:	0e 94 23 24 	call	0x4846	; 0x4846 <LCD_enuDisplayString>
		DOOR_State=1;
    590c:	81 e0       	ldi	r24, 0x01	; 1
    590e:	80 93 fa 02 	sts	0x02FA, r24
    5912:	73 c0       	rjmp	.+230    	; 0x59fa <APP_ReceiveData+0x1f2>

		break;
	case '2':
	case ('2'<<1):
		SERVO_enuSetAngle(-90);
    5914:	86 ea       	ldi	r24, 0xA6	; 166
    5916:	0e 94 62 1f 	call	0x3ec4	; 0x3ec4 <SERVO_enuSetAngle>
		/*Display Door Close On LCD*/
		LCD_enuGoToPosition(2,1);
    591a:	82 e0       	ldi	r24, 0x02	; 2
    591c:	61 e0       	ldi	r22, 0x01	; 1
    591e:	0e 94 62 24 	call	0x48c4	; 0x48c4 <LCD_enuGoToPosition>
		LCD_enuDisplayString("Door Closed");
    5922:	8a e6       	ldi	r24, 0x6A	; 106
    5924:	90 e0       	ldi	r25, 0x00	; 0
    5926:	0e 94 23 24 	call	0x4846	; 0x4846 <LCD_enuDisplayString>
		DOOR_State=0;
    592a:	10 92 fa 02 	sts	0x02FA, r1
    592e:	65 c0       	rjmp	.+202    	; 0x59fa <APP_ReceiveData+0x1f2>
		break;
	case '3':
	case ('3'<<1):

		  LED_enuTurnON(&LED_AstrLedConfig[1]);
    5930:	8f ed       	ldi	r24, 0xDF	; 223
    5932:	91 e0       	ldi	r25, 0x01	; 1
    5934:	0e 94 de 20 	call	0x41bc	; 0x41bc <LED_enuTurnON>
		  Local_enuErrorState =LCD_enuGoToPosition(1,1);
    5938:	81 e0       	ldi	r24, 0x01	; 1
    593a:	61 e0       	ldi	r22, 0x01	; 1
    593c:	0e 94 62 24 	call	0x48c4	; 0x48c4 <LCD_enuGoToPosition>
    5940:	89 83       	std	Y+1, r24	; 0x01
		  REDLED_State=1;
    5942:	81 e0       	ldi	r24, 0x01	; 1
    5944:	80 93 fc 02 	sts	0x02FC, r24
		  if(GREENLED_State == 1){
    5948:	80 91 fb 02 	lds	r24, 0x02FB
    594c:	81 30       	cpi	r24, 0x01	; 1
    594e:	29 f4       	brne	.+10     	; 0x595a <APP_ReceiveData+0x152>
			 LCD_enuDisplayString("LED1 ON,LED2 ON ");
    5950:	86 e7       	ldi	r24, 0x76	; 118
    5952:	90 e0       	ldi	r25, 0x00	; 0
    5954:	0e 94 23 24 	call	0x4846	; 0x4846 <LCD_enuDisplayString>
    5958:	50 c0       	rjmp	.+160    	; 0x59fa <APP_ReceiveData+0x1f2>
		  }
		  else{
			  LCD_enuDisplayString("LED1 OFF,LED2 ON ");
    595a:	87 e8       	ldi	r24, 0x87	; 135
    595c:	90 e0       	ldi	r25, 0x00	; 0
    595e:	0e 94 23 24 	call	0x4846	; 0x4846 <LCD_enuDisplayString>
    5962:	4b c0       	rjmp	.+150    	; 0x59fa <APP_ReceiveData+0x1f2>
		  }
		break;
	case '4':
	case ('4'<<1):

		  LED_enuTurnOFF(&LED_AstrLedConfig[1]);
    5964:	8f ed       	ldi	r24, 0xDF	; 223
    5966:	91 e0       	ldi	r25, 0x01	; 1
    5968:	0e 94 19 21 	call	0x4232	; 0x4232 <LED_enuTurnOFF>
		  Local_enuErrorState =LCD_enuGoToPosition(1,1);
    596c:	81 e0       	ldi	r24, 0x01	; 1
    596e:	61 e0       	ldi	r22, 0x01	; 1
    5970:	0e 94 62 24 	call	0x48c4	; 0x48c4 <LCD_enuGoToPosition>
    5974:	89 83       	std	Y+1, r24	; 0x01
		  REDLED_State=0;
    5976:	10 92 fc 02 	sts	0x02FC, r1
		  if(GREENLED_State == 1){
    597a:	80 91 fb 02 	lds	r24, 0x02FB
    597e:	81 30       	cpi	r24, 0x01	; 1
    5980:	29 f4       	brne	.+10     	; 0x598c <APP_ReceiveData+0x184>
			 LCD_enuDisplayString("LED1 ON,LED2 OFF");
    5982:	89 e9       	ldi	r24, 0x99	; 153
    5984:	90 e0       	ldi	r25, 0x00	; 0
    5986:	0e 94 23 24 	call	0x4846	; 0x4846 <LCD_enuDisplayString>
    598a:	37 c0       	rjmp	.+110    	; 0x59fa <APP_ReceiveData+0x1f2>
		  }
		  else{
		 LCD_enuDisplayString("LED1 OFF,LED2 OFF");
    598c:	8a ea       	ldi	r24, 0xAA	; 170
    598e:	90 e0       	ldi	r25, 0x00	; 0
    5990:	0e 94 23 24 	call	0x4846	; 0x4846 <LCD_enuDisplayString>
    5994:	32 c0       	rjmp	.+100    	; 0x59fa <APP_ReceiveData+0x1f2>
		  }
		break;
	case '5':
	case ('5'<<1):
		  LED_enuTurnON(&LED_AstrLedConfig[0]);
    5996:	8b ed       	ldi	r24, 0xDB	; 219
    5998:	91 e0       	ldi	r25, 0x01	; 1
    599a:	0e 94 de 20 	call	0x41bc	; 0x41bc <LED_enuTurnON>
		  Local_enuErrorState =LCD_enuGoToPosition(1,1);
    599e:	81 e0       	ldi	r24, 0x01	; 1
    59a0:	61 e0       	ldi	r22, 0x01	; 1
    59a2:	0e 94 62 24 	call	0x48c4	; 0x48c4 <LCD_enuGoToPosition>
    59a6:	89 83       	std	Y+1, r24	; 0x01
		  GREENLED_State=1;
    59a8:	81 e0       	ldi	r24, 0x01	; 1
    59aa:	80 93 fb 02 	sts	0x02FB, r24
		  if(REDLED_State == 1){
    59ae:	80 91 fc 02 	lds	r24, 0x02FC
    59b2:	81 30       	cpi	r24, 0x01	; 1
    59b4:	29 f4       	brne	.+10     	; 0x59c0 <APP_ReceiveData+0x1b8>
			 LCD_enuDisplayString("LED1 ON,LED2 ON ");
    59b6:	86 e7       	ldi	r24, 0x76	; 118
    59b8:	90 e0       	ldi	r25, 0x00	; 0
    59ba:	0e 94 23 24 	call	0x4846	; 0x4846 <LCD_enuDisplayString>
    59be:	1d c0       	rjmp	.+58     	; 0x59fa <APP_ReceiveData+0x1f2>
		  }
		  else{
			  LCD_enuDisplayString("LED1 ON,LED2 OFF");
    59c0:	89 e9       	ldi	r24, 0x99	; 153
    59c2:	90 e0       	ldi	r25, 0x00	; 0
    59c4:	0e 94 23 24 	call	0x4846	; 0x4846 <LCD_enuDisplayString>
    59c8:	18 c0       	rjmp	.+48     	; 0x59fa <APP_ReceiveData+0x1f2>
		  }
		break;
	case '6':
	case ('6'<<1):
		  LED_enuTurnOFF(&LED_AstrLedConfig[0]);
    59ca:	8b ed       	ldi	r24, 0xDB	; 219
    59cc:	91 e0       	ldi	r25, 0x01	; 1
    59ce:	0e 94 19 21 	call	0x4232	; 0x4232 <LED_enuTurnOFF>
		  Local_enuErrorState =LCD_enuGoToPosition(1,1);
    59d2:	81 e0       	ldi	r24, 0x01	; 1
    59d4:	61 e0       	ldi	r22, 0x01	; 1
    59d6:	0e 94 62 24 	call	0x48c4	; 0x48c4 <LCD_enuGoToPosition>
    59da:	89 83       	std	Y+1, r24	; 0x01
		  GREENLED_State=0;
    59dc:	10 92 fb 02 	sts	0x02FB, r1
		  if(REDLED_State == 1){
    59e0:	80 91 fc 02 	lds	r24, 0x02FC
    59e4:	81 30       	cpi	r24, 0x01	; 1
    59e6:	29 f4       	brne	.+10     	; 0x59f2 <APP_ReceiveData+0x1ea>
			  LCD_enuDisplayString("LED1 OFF,LED2 ON ");
    59e8:	87 e8       	ldi	r24, 0x87	; 135
    59ea:	90 e0       	ldi	r25, 0x00	; 0
    59ec:	0e 94 23 24 	call	0x4846	; 0x4846 <LCD_enuDisplayString>
    59f0:	04 c0       	rjmp	.+8      	; 0x59fa <APP_ReceiveData+0x1f2>
		  }
		  else{
			  LCD_enuDisplayString("LED1 OFF,LED2 OFF");
    59f2:	8a ea       	ldi	r24, 0xAA	; 170
    59f4:	90 e0       	ldi	r25, 0x00	; 0
    59f6:	0e 94 23 24 	call	0x4846	; 0x4846 <LCD_enuDisplayString>
		  }
		break;

	}
	return Local_enuErrorState;
    59fa:	89 81       	ldd	r24, Y+1	; 0x01


}
    59fc:	26 96       	adiw	r28, 0x06	; 6
    59fe:	0f b6       	in	r0, 0x3f	; 63
    5a00:	f8 94       	cli
    5a02:	de bf       	out	0x3e, r29	; 62
    5a04:	0f be       	out	0x3f, r0	; 63
    5a06:	cd bf       	out	0x3d, r28	; 61
    5a08:	cf 91       	pop	r28
    5a0a:	df 91       	pop	r29
    5a0c:	08 95       	ret

00005a0e <APP_enuInit>:
ES_t APP_enuInit(void)
{
    5a0e:	df 93       	push	r29
    5a10:	cf 93       	push	r28
    5a12:	0f 92       	push	r0
    5a14:	cd b7       	in	r28, 0x3d	; 61
    5a16:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
    5a18:	19 82       	std	Y+1, r1	; 0x01

	IIC_enuInit();
    5a1a:	0e 94 72 12 	call	0x24e4	; 0x24e4 <IIC_enuInit>
	Local_enuErrorState = SERVO_enudInit();
    5a1e:	0e 94 40 1f 	call	0x3e80	; 0x3e80 <SERVO_enudInit>
    5a22:	89 83       	std	Y+1, r24	; 0x01
	Local_enuErrorState = LCD_enuInit();
    5a24:	0e 94 54 21 	call	0x42a8	; 0x42a8 <LCD_enuInit>
    5a28:	89 83       	std	Y+1, r24	; 0x01
	Local_enuErrorState = LED_enuInit(LED_AstrLedConfig);
    5a2a:	8b ed       	ldi	r24, 0xDB	; 219
    5a2c:	91 e0       	ldi	r25, 0x01	; 1
    5a2e:	0e 94 9e 1f 	call	0x3f3c	; 0x3f3c <LED_enuInit>
    5a32:	89 83       	std	Y+1, r24	; 0x01
	LCD_enuGoToPosition(1,1);
    5a34:	81 e0       	ldi	r24, 0x01	; 1
    5a36:	61 e0       	ldi	r22, 0x01	; 1
    5a38:	0e 94 62 24 	call	0x48c4	; 0x48c4 <LCD_enuGoToPosition>
	LCD_enuDisplayString("Welcome Room");
    5a3c:	8c eb       	ldi	r24, 0xBC	; 188
    5a3e:	90 e0       	ldi	r25, 0x00	; 0
    5a40:	0e 94 23 24 	call	0x4846	; 0x4846 <LCD_enuDisplayString>




	return Local_enuErrorState;
    5a44:	89 81       	ldd	r24, Y+1	; 0x01

}
    5a46:	0f 90       	pop	r0
    5a48:	cf 91       	pop	r28
    5a4a:	df 91       	pop	r29
    5a4c:	08 95       	ret

00005a4e <main>:
volatile u8 check=0;



int main()
{
    5a4e:	df 93       	push	r29
    5a50:	cf 93       	push	r28
    5a52:	cd b7       	in	r28, 0x3d	; 61
    5a54:	de b7       	in	r29, 0x3e	; 62

	//APP_enuInit();
	APP_enuInit();
    5a56:	0e 94 07 2d 	call	0x5a0e	; 0x5a0e <APP_enuInit>



	while(1)
	{
		APP_ReceiveData();
    5a5a:	0e 94 04 2c 	call	0x5808	; 0x5808 <APP_ReceiveData>
    5a5e:	fd cf       	rjmp	.-6      	; 0x5a5a <main+0xc>

00005a60 <__mulsi3>:
    5a60:	62 9f       	mul	r22, r18
    5a62:	d0 01       	movw	r26, r0
    5a64:	73 9f       	mul	r23, r19
    5a66:	f0 01       	movw	r30, r0
    5a68:	82 9f       	mul	r24, r18
    5a6a:	e0 0d       	add	r30, r0
    5a6c:	f1 1d       	adc	r31, r1
    5a6e:	64 9f       	mul	r22, r20
    5a70:	e0 0d       	add	r30, r0
    5a72:	f1 1d       	adc	r31, r1
    5a74:	92 9f       	mul	r25, r18
    5a76:	f0 0d       	add	r31, r0
    5a78:	83 9f       	mul	r24, r19
    5a7a:	f0 0d       	add	r31, r0
    5a7c:	74 9f       	mul	r23, r20
    5a7e:	f0 0d       	add	r31, r0
    5a80:	65 9f       	mul	r22, r21
    5a82:	f0 0d       	add	r31, r0
    5a84:	99 27       	eor	r25, r25
    5a86:	72 9f       	mul	r23, r18
    5a88:	b0 0d       	add	r27, r0
    5a8a:	e1 1d       	adc	r30, r1
    5a8c:	f9 1f       	adc	r31, r25
    5a8e:	63 9f       	mul	r22, r19
    5a90:	b0 0d       	add	r27, r0
    5a92:	e1 1d       	adc	r30, r1
    5a94:	f9 1f       	adc	r31, r25
    5a96:	bd 01       	movw	r22, r26
    5a98:	cf 01       	movw	r24, r30
    5a9a:	11 24       	eor	r1, r1
    5a9c:	08 95       	ret

00005a9e <__udivmodsi4>:
    5a9e:	a1 e2       	ldi	r26, 0x21	; 33
    5aa0:	1a 2e       	mov	r1, r26
    5aa2:	aa 1b       	sub	r26, r26
    5aa4:	bb 1b       	sub	r27, r27
    5aa6:	fd 01       	movw	r30, r26
    5aa8:	0d c0       	rjmp	.+26     	; 0x5ac4 <__udivmodsi4_ep>

00005aaa <__udivmodsi4_loop>:
    5aaa:	aa 1f       	adc	r26, r26
    5aac:	bb 1f       	adc	r27, r27
    5aae:	ee 1f       	adc	r30, r30
    5ab0:	ff 1f       	adc	r31, r31
    5ab2:	a2 17       	cp	r26, r18
    5ab4:	b3 07       	cpc	r27, r19
    5ab6:	e4 07       	cpc	r30, r20
    5ab8:	f5 07       	cpc	r31, r21
    5aba:	20 f0       	brcs	.+8      	; 0x5ac4 <__udivmodsi4_ep>
    5abc:	a2 1b       	sub	r26, r18
    5abe:	b3 0b       	sbc	r27, r19
    5ac0:	e4 0b       	sbc	r30, r20
    5ac2:	f5 0b       	sbc	r31, r21

00005ac4 <__udivmodsi4_ep>:
    5ac4:	66 1f       	adc	r22, r22
    5ac6:	77 1f       	adc	r23, r23
    5ac8:	88 1f       	adc	r24, r24
    5aca:	99 1f       	adc	r25, r25
    5acc:	1a 94       	dec	r1
    5ace:	69 f7       	brne	.-38     	; 0x5aaa <__udivmodsi4_loop>
    5ad0:	60 95       	com	r22
    5ad2:	70 95       	com	r23
    5ad4:	80 95       	com	r24
    5ad6:	90 95       	com	r25
    5ad8:	9b 01       	movw	r18, r22
    5ada:	ac 01       	movw	r20, r24
    5adc:	bd 01       	movw	r22, r26
    5ade:	cf 01       	movw	r24, r30
    5ae0:	08 95       	ret

00005ae2 <__prologue_saves__>:
    5ae2:	2f 92       	push	r2
    5ae4:	3f 92       	push	r3
    5ae6:	4f 92       	push	r4
    5ae8:	5f 92       	push	r5
    5aea:	6f 92       	push	r6
    5aec:	7f 92       	push	r7
    5aee:	8f 92       	push	r8
    5af0:	9f 92       	push	r9
    5af2:	af 92       	push	r10
    5af4:	bf 92       	push	r11
    5af6:	cf 92       	push	r12
    5af8:	df 92       	push	r13
    5afa:	ef 92       	push	r14
    5afc:	ff 92       	push	r15
    5afe:	0f 93       	push	r16
    5b00:	1f 93       	push	r17
    5b02:	cf 93       	push	r28
    5b04:	df 93       	push	r29
    5b06:	cd b7       	in	r28, 0x3d	; 61
    5b08:	de b7       	in	r29, 0x3e	; 62
    5b0a:	ca 1b       	sub	r28, r26
    5b0c:	db 0b       	sbc	r29, r27
    5b0e:	0f b6       	in	r0, 0x3f	; 63
    5b10:	f8 94       	cli
    5b12:	de bf       	out	0x3e, r29	; 62
    5b14:	0f be       	out	0x3f, r0	; 63
    5b16:	cd bf       	out	0x3d, r28	; 61
    5b18:	09 94       	ijmp

00005b1a <__epilogue_restores__>:
    5b1a:	2a 88       	ldd	r2, Y+18	; 0x12
    5b1c:	39 88       	ldd	r3, Y+17	; 0x11
    5b1e:	48 88       	ldd	r4, Y+16	; 0x10
    5b20:	5f 84       	ldd	r5, Y+15	; 0x0f
    5b22:	6e 84       	ldd	r6, Y+14	; 0x0e
    5b24:	7d 84       	ldd	r7, Y+13	; 0x0d
    5b26:	8c 84       	ldd	r8, Y+12	; 0x0c
    5b28:	9b 84       	ldd	r9, Y+11	; 0x0b
    5b2a:	aa 84       	ldd	r10, Y+10	; 0x0a
    5b2c:	b9 84       	ldd	r11, Y+9	; 0x09
    5b2e:	c8 84       	ldd	r12, Y+8	; 0x08
    5b30:	df 80       	ldd	r13, Y+7	; 0x07
    5b32:	ee 80       	ldd	r14, Y+6	; 0x06
    5b34:	fd 80       	ldd	r15, Y+5	; 0x05
    5b36:	0c 81       	ldd	r16, Y+4	; 0x04
    5b38:	1b 81       	ldd	r17, Y+3	; 0x03
    5b3a:	aa 81       	ldd	r26, Y+2	; 0x02
    5b3c:	b9 81       	ldd	r27, Y+1	; 0x01
    5b3e:	ce 0f       	add	r28, r30
    5b40:	d1 1d       	adc	r29, r1
    5b42:	0f b6       	in	r0, 0x3f	; 63
    5b44:	f8 94       	cli
    5b46:	de bf       	out	0x3e, r29	; 62
    5b48:	0f be       	out	0x3f, r0	; 63
    5b4a:	cd bf       	out	0x3d, r28	; 61
    5b4c:	ed 01       	movw	r28, r26
    5b4e:	08 95       	ret

00005b50 <_exit>:
    5b50:	f8 94       	cli

00005b52 <__stop_program>:
    5b52:	ff cf       	rjmp	.-2      	; 0x5b52 <__stop_program>
